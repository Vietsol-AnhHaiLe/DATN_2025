
STM32H747I-DISCO_GettingStarted_ObjectDetection_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  00075000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001b7f8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .qspi_section 00012c50  90000000  90000000  0016f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .InternalFlashSection 000f4bf8  08100020  08100020  00075020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rodata       00030240  0801ba98  0801ba98  0001ca98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM          00000008  0804bcd8  0804bcd8  0004ccd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array   00000004  0804bce0  0804bce0  0004cce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0804bce4  0804bce4  0004cce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00013be8  24000000  0804bce8  0004d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .NN_OutputData_Buffer 00000004  24013c00  0805f8d0  00060c00  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .NN_InputImage_Buffer 00000004  24013c20  0805f8d4  00060c20  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00013fe0  24013c40  0805f8d8  00060c40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 ._user_heap_stack 00004960  20000000  20000000  0016a000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .axisram_section 00053040  24027c20  24027c20  0016ec20  2**5
                  ALLOC
 15 .sram_section 00000280  30000000  30000000  0016f000  2**2
                  ALLOC
 16 .sdram_section 00a2154c  d0000000  d0000000  00182000  2**5
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  00181c50  2**0
                  CONTENTS, READONLY
 18 .debug_info   000554db  00000000  00000000  00181c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000950a  00000000  00000000  001d7159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0002668d  00000000  00000000  001e0663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 000020a0  00000000  00000000  00206cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000459d  00000000  00000000  00208d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000512a9  00000000  00000000  0020d32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0004fe5a  00000000  00000000  0025e5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001de0ea  00000000  00000000  002ae430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000d6  00000000  00000000  0048c51a  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00007884  00000000  00000000  0048c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 0000010c  00000000  00000000  00493e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_loc    00001ae9  00000000  00000000  00493f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 000004d8  00000000  00000000  00495a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24013c40 	.word	0x24013c40
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ba80 	.word	0x0801ba80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24013c44 	.word	0x24013c44
 80002dc:	0801ba80 	.word	0x0801ba80

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8000390:	b570      	push	{r4, r5, r6, lr}
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 247, params)) {
 8000392:	4cac      	ldr	r4, [pc, #688]	@ (8000644 <network_configure_weights+0x2b4>)
{
 8000394:	460a      	mov	r2, r1
 8000396:	4606      	mov	r6, r0
  if (ai_platform_get_weights_map(g_network_weights_map, 247, params)) {
 8000398:	21f7      	movs	r1, #247	@ 0xf7
 800039a:	4620      	mov	r0, r4
 800039c:	f00f ff32 	bl	8010204 <ai_platform_get_weights_map>
 80003a0:	4605      	mov	r5, r0
 80003a2:	2800      	cmp	r0, #0
 80003a4:	f001 823d 	beq.w	8001822 <network_configure_weights+0x1492>
    /* Updating weights (byte) offsets */
    
    concat_217_const_array.format |= AI_FMT_FLAG_CONST;
 80003a8:	4ba7      	ldr	r3, [pc, #668]	@ (8000648 <network_configure_weights+0x2b8>)
    concat_217_const_array.data = AI_PTR(g_network_weights_map[0] + 0);
    concat_217_const_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80003aa:	4aa8      	ldr	r2, [pc, #672]	@ (800064c <network_configure_weights+0x2bc>)
    concat_217_const_array.format |= AI_FMT_FLAG_CONST;
 80003ac:	6819      	ldr	r1, [r3, #0]
    concat_217_const_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80003ae:	6820      	ldr	r0, [r4, #0]
    concat_217_const_array.format |= AI_FMT_FLAG_CONST;
 80003b0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80003b4:	6019      	str	r1, [r3, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80003b6:	6811      	ldr	r1, [r2, #0]
 80003b8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    concat_217_const_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80003bc:	e9c3 0002 	strd	r0, r0, [r3, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80003c0:	6011      	str	r1, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[1] + 0);
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[1] + 0);
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80003c2:	4ba3      	ldr	r3, [pc, #652]	@ (8000650 <network_configure_weights+0x2c0>)
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[1] + 0);
 80003c4:	6861      	ldr	r1, [r4, #4]
 80003c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80003ca:	6819      	ldr	r1, [r3, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[2] + 0);
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[2] + 0);
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80003cc:	4aa1      	ldr	r2, [pc, #644]	@ (8000654 <network_configure_weights+0x2c4>)
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80003ce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80003d2:	6019      	str	r1, [r3, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[2] + 0);
 80003d4:	68a1      	ldr	r1, [r4, #8]
 80003d6:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80003da:	6811      	ldr	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[3] + 0);
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[3] + 0);
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80003dc:	4b9e      	ldr	r3, [pc, #632]	@ (8000658 <network_configure_weights+0x2c8>)
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80003de:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80003e2:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[3] + 0);
 80003e4:	68e1      	ldr	r1, [r4, #12]
 80003e6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80003ea:	6819      	ldr	r1, [r3, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[4] + 0);
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[4] + 0);
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80003ec:	4a9b      	ldr	r2, [pc, #620]	@ (800065c <network_configure_weights+0x2cc>)
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80003ee:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80003f2:	6019      	str	r1, [r3, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[4] + 0);
 80003f4:	6921      	ldr	r1, [r4, #16]
 80003f6:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80003fa:	6811      	ldr	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[5] + 0);
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[5] + 0);
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80003fc:	4b98      	ldr	r3, [pc, #608]	@ (8000660 <network_configure_weights+0x2d0>)
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80003fe:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000402:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[5] + 0);
 8000404:	6961      	ldr	r1, [r4, #20]
 8000406:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800040a:	6819      	ldr	r1, [r3, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[6] + 0);
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[6] + 0);
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800040c:	4a95      	ldr	r2, [pc, #596]	@ (8000664 <network_configure_weights+0x2d4>)
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800040e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000412:	6019      	str	r1, [r3, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[6] + 0);
 8000414:	69a1      	ldr	r1, [r4, #24]
    conv2d_6_bias_array.data_start = AI_PTR(g_network_weights_map[10] + 0);
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[11] + 0);
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[11] + 0);
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[12] + 0);
 8000416:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[6] + 0);
 8000418:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800041c:	6811      	ldr	r1, [r2, #0]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800041e:	4b92      	ldr	r3, [pc, #584]	@ (8000668 <network_configure_weights+0x2d8>)
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8000420:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000424:	6011      	str	r1, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_network_weights_map[7] + 0);
 8000426:	69e1      	ldr	r1, [r4, #28]
 8000428:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800042c:	6819      	ldr	r1, [r3, #0]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800042e:	4a8f      	ldr	r2, [pc, #572]	@ (800066c <network_configure_weights+0x2dc>)
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8000430:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000434:	6019      	str	r1, [r3, #0]
    conv2d_4_bias_array.data = AI_PTR(g_network_weights_map[8] + 0);
 8000436:	6a21      	ldr	r1, [r4, #32]
 8000438:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800043c:	6811      	ldr	r1, [r2, #0]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800043e:	4b8c      	ldr	r3, [pc, #560]	@ (8000670 <network_configure_weights+0x2e0>)
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8000440:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000444:	6011      	str	r1, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[9] + 0);
 8000446:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000448:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800044c:	6819      	ldr	r1, [r3, #0]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800044e:	4a89      	ldr	r2, [pc, #548]	@ (8000674 <network_configure_weights+0x2e4>)
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8000450:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000454:	6019      	str	r1, [r3, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[10] + 0);
 8000456:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000458:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800045c:	6811      	ldr	r1, [r2, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800045e:	4b86      	ldr	r3, [pc, #536]	@ (8000678 <network_configure_weights+0x2e8>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8000460:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[12] + 0);
 8000464:	6098      	str	r0, [r3, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8000466:	6011      	str	r1, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[11] + 0);
 8000468:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800046a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800046e:	6819      	ldr	r1, [r3, #0]
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[12] + 0);
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8000470:	4a82      	ldr	r2, [pc, #520]	@ (800067c <network_configure_weights+0x2ec>)
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8000472:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000476:	6019      	str	r1, [r3, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[12] + 0);
 8000478:	60d8      	str	r0, [r3, #12]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800047a:	6811      	ldr	r1, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[13] + 0);
    conv2d_8_weights_array.data_start = AI_PTR(g_network_weights_map[13] + 0);
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800047c:	4b80      	ldr	r3, [pc, #512]	@ (8000680 <network_configure_weights+0x2f0>)
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800047e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000482:	6011      	str	r1, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[13] + 0);
 8000484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000486:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800048a:	6819      	ldr	r1, [r3, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[14] + 0);
    conv2d_8_bias_array.data_start = AI_PTR(g_network_weights_map[14] + 0);
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 800048c:	4a7d      	ldr	r2, [pc, #500]	@ (8000684 <network_configure_weights+0x2f4>)
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800048e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000492:	6019      	str	r1, [r3, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[14] + 0);
 8000494:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000496:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 800049a:	6811      	ldr	r1, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_network_weights_map[15] + 0);
    conv2d_9_weights_array.data_start = AI_PTR(g_network_weights_map[15] + 0);
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 800049c:	4b7a      	ldr	r3, [pc, #488]	@ (8000688 <network_configure_weights+0x2f8>)
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 800049e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80004a2:	6011      	str	r1, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_network_weights_map[15] + 0);
 80004a4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80004a6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 80004aa:	6819      	ldr	r1, [r3, #0]
    conv2d_9_bias_array.data = AI_PTR(g_network_weights_map[16] + 0);
    conv2d_9_bias_array.data_start = AI_PTR(g_network_weights_map[16] + 0);
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80004ac:	4a77      	ldr	r2, [pc, #476]	@ (800068c <network_configure_weights+0x2fc>)
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 80004ae:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80004b2:	6019      	str	r1, [r3, #0]
    conv2d_9_bias_array.data = AI_PTR(g_network_weights_map[16] + 0);
 80004b4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80004b6:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80004ba:	6811      	ldr	r1, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[17] + 0);
    conv2d_10_weights_array.data_start = AI_PTR(g_network_weights_map[17] + 0);
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80004bc:	4b74      	ldr	r3, [pc, #464]	@ (8000690 <network_configure_weights+0x300>)
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80004be:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80004c2:	6011      	str	r1, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[17] + 0);
 80004c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80004c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80004ca:	6819      	ldr	r1, [r3, #0]
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[18] + 0);
    conv2d_10_bias_array.data_start = AI_PTR(g_network_weights_map[18] + 0);
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 80004cc:	4a71      	ldr	r2, [pc, #452]	@ (8000694 <network_configure_weights+0x304>)
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80004ce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80004d2:	6019      	str	r1, [r3, #0]
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[18] + 0);
 80004d4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80004d6:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 80004da:	6811      	ldr	r1, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[19] + 0);
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[19] + 0);
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 80004dc:	4b6e      	ldr	r3, [pc, #440]	@ (8000698 <network_configure_weights+0x308>)
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 80004de:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80004e2:	6011      	str	r1, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[19] + 0);
 80004e4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
    conv2d_15_weights_array.data_start = AI_PTR(g_network_weights_map[23] + 0);
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_15_bias_array.data = AI_PTR(g_network_weights_map[24] + 0);
    conv2d_15_bias_array.data_start = AI_PTR(g_network_weights_map[24] + 0);
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[25] + 0);
 80004e6:	6e60      	ldr	r0, [r4, #100]	@ 0x64
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[19] + 0);
 80004e8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 80004ec:	6819      	ldr	r1, [r3, #0]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 80004ee:	4a6b      	ldr	r2, [pc, #428]	@ (800069c <network_configure_weights+0x30c>)
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 80004f0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80004f4:	6019      	str	r1, [r3, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[20] + 0);
 80004f6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80004f8:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 80004fc:	6811      	ldr	r1, [r2, #0]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 80004fe:	4b68      	ldr	r3, [pc, #416]	@ (80006a0 <network_configure_weights+0x310>)
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8000500:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000504:	6011      	str	r1, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_network_weights_map[21] + 0);
 8000506:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8000508:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800050c:	6819      	ldr	r1, [r3, #0]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800050e:	4a65      	ldr	r2, [pc, #404]	@ (80006a4 <network_configure_weights+0x314>)
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8000510:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000514:	6019      	str	r1, [r3, #0]
    conv2d_14_bias_array.data = AI_PTR(g_network_weights_map[22] + 0);
 8000516:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8000518:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800051c:	6811      	ldr	r1, [r2, #0]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800051e:	4b62      	ldr	r3, [pc, #392]	@ (80006a8 <network_configure_weights+0x318>)
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8000520:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000524:	6011      	str	r1, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(g_network_weights_map[23] + 0);
 8000526:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8000528:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800052c:	6819      	ldr	r1, [r3, #0]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800052e:	4a5f      	ldr	r2, [pc, #380]	@ (80006ac <network_configure_weights+0x31c>)
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8000530:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[25] + 0);
 8000534:	6090      	str	r0, [r2, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8000536:	6019      	str	r1, [r3, #0]
    conv2d_15_bias_array.data = AI_PTR(g_network_weights_map[24] + 0);
 8000538:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800053a:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800053e:	6811      	ldr	r1, [r2, #0]
    conv2d_16_weights_array.data_start = AI_PTR(g_network_weights_map[25] + 0);
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8000540:	4b5b      	ldr	r3, [pc, #364]	@ (80006b0 <network_configure_weights+0x320>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8000542:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000546:	6011      	str	r1, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[25] + 0);
 8000548:	60d0      	str	r0, [r2, #12]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800054a:	6819      	ldr	r1, [r3, #0]
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[26] + 0);
    conv2d_16_bias_array.data_start = AI_PTR(g_network_weights_map[26] + 0);
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800054c:	4a59      	ldr	r2, [pc, #356]	@ (80006b4 <network_configure_weights+0x324>)
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800054e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000552:	6019      	str	r1, [r3, #0]
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[26] + 0);
 8000554:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8000556:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800055a:	6811      	ldr	r1, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[27] + 0);
    conv2d_17_weights_array.data_start = AI_PTR(g_network_weights_map[27] + 0);
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800055c:	4b56      	ldr	r3, [pc, #344]	@ (80006b8 <network_configure_weights+0x328>)
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800055e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000562:	6011      	str	r1, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[27] + 0);
 8000564:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8000566:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800056a:	6819      	ldr	r1, [r3, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[28] + 0);
    conv2d_17_bias_array.data_start = AI_PTR(g_network_weights_map[28] + 0);
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800056c:	4a53      	ldr	r2, [pc, #332]	@ (80006bc <network_configure_weights+0x32c>)
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800056e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000572:	6019      	str	r1, [r3, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[28] + 0);
 8000574:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8000576:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800057a:	6811      	ldr	r1, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[29] + 0);
    conv2d_18_weights_array.data_start = AI_PTR(g_network_weights_map[29] + 0);
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800057c:	4b50      	ldr	r3, [pc, #320]	@ (80006c0 <network_configure_weights+0x330>)
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800057e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000582:	6011      	str	r1, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[29] + 0);
 8000584:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8000586:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800058a:	6819      	ldr	r1, [r3, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[30] + 0);
    conv2d_18_bias_array.data_start = AI_PTR(g_network_weights_map[30] + 0);
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800058c:	4a4d      	ldr	r2, [pc, #308]	@ (80006c4 <network_configure_weights+0x334>)
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800058e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000592:	6019      	str	r1, [r3, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[30] + 0);
 8000594:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8000596:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800059a:	6811      	ldr	r1, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[31] + 0);
    conv2d_20_weights_array.data_start = AI_PTR(g_network_weights_map[31] + 0);
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800059c:	4b4a      	ldr	r3, [pc, #296]	@ (80006c8 <network_configure_weights+0x338>)
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800059e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80005a2:	6011      	str	r1, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[31] + 0);
 80005a4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80005a6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 80005aa:	6819      	ldr	r1, [r3, #0]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[32] + 0);
    conv2d_20_bias_array.data_start = AI_PTR(g_network_weights_map[32] + 0);
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80005ac:	4a47      	ldr	r2, [pc, #284]	@ (80006cc <network_configure_weights+0x33c>)
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 80005ae:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80005b2:	6019      	str	r1, [r3, #0]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[32] + 0);
 80005b4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
    conv2d_22_bias_array.data_start = AI_PTR(g_network_weights_map[36] + 0);
    conv2d_182_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_182_weights_array.data = AI_PTR(g_network_weights_map[37] + 0);
    conv2d_182_weights_array.data_start = AI_PTR(g_network_weights_map[37] + 0);
    conv2d_182_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_182_bias_array.data = AI_PTR(g_network_weights_map[38] + 0);
 80005b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[32] + 0);
 80005bc:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80005c0:	6811      	ldr	r1, [r2, #0]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80005c2:	4b43      	ldr	r3, [pc, #268]	@ (80006d0 <network_configure_weights+0x340>)
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80005c4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80005c8:	6011      	str	r1, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_network_weights_map[33] + 0);
 80005ca:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80005ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80005d2:	6819      	ldr	r1, [r3, #0]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80005d4:	4a3f      	ldr	r2, [pc, #252]	@ (80006d4 <network_configure_weights+0x344>)
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80005d6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80005da:	6019      	str	r1, [r3, #0]
    conv2d_21_bias_array.data = AI_PTR(g_network_weights_map[34] + 0);
 80005dc:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80005e0:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80005e4:	6811      	ldr	r1, [r2, #0]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80005e6:	4b3c      	ldr	r3, [pc, #240]	@ (80006d8 <network_configure_weights+0x348>)
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80005e8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80005ec:	6011      	str	r1, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_network_weights_map[35] + 0);
 80005ee:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 80005f2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80005f6:	6819      	ldr	r1, [r3, #0]
    conv2d_182_weights_array.format |= AI_FMT_FLAG_CONST;
 80005f8:	4a38      	ldr	r2, [pc, #224]	@ (80006dc <network_configure_weights+0x34c>)
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80005fa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80005fe:	6019      	str	r1, [r3, #0]
    conv2d_22_bias_array.data = AI_PTR(g_network_weights_map[36] + 0);
 8000600:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8000604:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_182_weights_array.format |= AI_FMT_FLAG_CONST;
 8000608:	6811      	ldr	r1, [r2, #0]
    conv2d_182_bias_array.format |= AI_FMT_FLAG_CONST;
 800060a:	4b35      	ldr	r3, [pc, #212]	@ (80006e0 <network_configure_weights+0x350>)
    conv2d_182_weights_array.format |= AI_FMT_FLAG_CONST;
 800060c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_182_bias_array.data = AI_PTR(g_network_weights_map[38] + 0);
 8000610:	6098      	str	r0, [r3, #8]
    conv2d_182_weights_array.format |= AI_FMT_FLAG_CONST;
 8000612:	6011      	str	r1, [r2, #0]
    conv2d_182_weights_array.data = AI_PTR(g_network_weights_map[37] + 0);
 8000614:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8000618:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_182_bias_array.format |= AI_FMT_FLAG_CONST;
 800061c:	6819      	ldr	r1, [r3, #0]
    conv2d_182_bias_array.data_start = AI_PTR(g_network_weights_map[38] + 0);
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 800061e:	4a31      	ldr	r2, [pc, #196]	@ (80006e4 <network_configure_weights+0x354>)
    conv2d_182_bias_array.format |= AI_FMT_FLAG_CONST;
 8000620:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000624:	6019      	str	r1, [r3, #0]
    conv2d_182_bias_array.data = AI_PTR(g_network_weights_map[38] + 0);
 8000626:	60d8      	str	r0, [r3, #12]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8000628:	6811      	ldr	r1, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[39] + 0);
    conv2d_24_weights_array.data_start = AI_PTR(g_network_weights_map[39] + 0);
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 800062a:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <network_configure_weights+0x358>)
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 800062c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000630:	6011      	str	r1, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[39] + 0);
 8000632:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8000636:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 800063a:	6819      	ldr	r1, [r3, #0]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[40] + 0);
    conv2d_24_bias_array.data_start = AI_PTR(g_network_weights_map[40] + 0);
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 800063c:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <network_configure_weights+0x35c>)
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 800063e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000642:	e055      	b.n	80006f0 <network_configure_weights+0x360>
 8000644:	24014708 	.word	0x24014708
 8000648:	24010180 	.word	0x24010180
 800064c:	24010170 	.word	0x24010170
 8000650:	24010160 	.word	0x24010160
 8000654:	24010150 	.word	0x24010150
 8000658:	24010140 	.word	0x24010140
 800065c:	24010130 	.word	0x24010130
 8000660:	24010120 	.word	0x24010120
 8000664:	24010110 	.word	0x24010110
 8000668:	24010100 	.word	0x24010100
 800066c:	240100f0 	.word	0x240100f0
 8000670:	240100e0 	.word	0x240100e0
 8000674:	240100d0 	.word	0x240100d0
 8000678:	240100c0 	.word	0x240100c0
 800067c:	240100b0 	.word	0x240100b0
 8000680:	240100a0 	.word	0x240100a0
 8000684:	24010090 	.word	0x24010090
 8000688:	24010080 	.word	0x24010080
 800068c:	24010070 	.word	0x24010070
 8000690:	24010060 	.word	0x24010060
 8000694:	24010050 	.word	0x24010050
 8000698:	24010040 	.word	0x24010040
 800069c:	24010030 	.word	0x24010030
 80006a0:	24010020 	.word	0x24010020
 80006a4:	24010010 	.word	0x24010010
 80006a8:	24010000 	.word	0x24010000
 80006ac:	2400fff0 	.word	0x2400fff0
 80006b0:	2400ffe0 	.word	0x2400ffe0
 80006b4:	2400ffd0 	.word	0x2400ffd0
 80006b8:	2400ffc0 	.word	0x2400ffc0
 80006bc:	2400ffb0 	.word	0x2400ffb0
 80006c0:	2400ffa0 	.word	0x2400ffa0
 80006c4:	2400ff90 	.word	0x2400ff90
 80006c8:	2400ff80 	.word	0x2400ff80
 80006cc:	2400ff70 	.word	0x2400ff70
 80006d0:	2400ff60 	.word	0x2400ff60
 80006d4:	2400ff50 	.word	0x2400ff50
 80006d8:	2400ff40 	.word	0x2400ff40
 80006dc:	2400ff30 	.word	0x2400ff30
 80006e0:	2400ff20 	.word	0x2400ff20
 80006e4:	2400ff10 	.word	0x2400ff10
 80006e8:	2400ff00 	.word	0x2400ff00
 80006ec:	2400fef0 	.word	0x2400fef0
 80006f0:	6019      	str	r1, [r3, #0]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[40] + 0);
 80006f2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80006f6:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80006fa:	6811      	ldr	r1, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[41] + 0);
    conv2d_26_weights_array.data_start = AI_PTR(g_network_weights_map[41] + 0);
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80006fc:	4bbc      	ldr	r3, [pc, #752]	@ (80009f0 <network_configure_weights+0x660>)
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80006fe:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000702:	6011      	str	r1, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[41] + 0);
 8000704:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8000708:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 800070c:	6819      	ldr	r1, [r3, #0]
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[42] + 0);
    conv2d_26_bias_array.data_start = AI_PTR(g_network_weights_map[42] + 0);
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 800070e:	4ab9      	ldr	r2, [pc, #740]	@ (80009f4 <network_configure_weights+0x664>)
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8000710:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000714:	6019      	str	r1, [r3, #0]
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[42] + 0);
 8000716:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800071a:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 800071e:	6811      	ldr	r1, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(g_network_weights_map[43] + 0);
    conv2d_27_weights_array.data_start = AI_PTR(g_network_weights_map[43] + 0);
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8000720:	4bb5      	ldr	r3, [pc, #724]	@ (80009f8 <network_configure_weights+0x668>)
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8000722:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000726:	6011      	str	r1, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(g_network_weights_map[43] + 0);
 8000728:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800072c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8000730:	6819      	ldr	r1, [r3, #0]
    conv2d_27_bias_array.data = AI_PTR(g_network_weights_map[44] + 0);
    conv2d_27_bias_array.data_start = AI_PTR(g_network_weights_map[44] + 0);
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8000732:	4ab2      	ldr	r2, [pc, #712]	@ (80009fc <network_configure_weights+0x66c>)
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8000734:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000738:	6019      	str	r1, [r3, #0]
    conv2d_27_bias_array.data = AI_PTR(g_network_weights_map[44] + 0);
 800073a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800073e:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8000742:	6811      	ldr	r1, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[45] + 0);
    conv2d_28_weights_array.data_start = AI_PTR(g_network_weights_map[45] + 0);
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8000744:	4bae      	ldr	r3, [pc, #696]	@ (8000a00 <network_configure_weights+0x670>)
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8000746:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800074a:	6011      	str	r1, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[45] + 0);
 800074c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
    conv2d_30_weights_array.data_start = AI_PTR(g_network_weights_map[49] + 0);
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_30_bias_array.data = AI_PTR(g_network_weights_map[50] + 0);
    conv2d_30_bias_array.data_start = AI_PTR(g_network_weights_map[50] + 0);
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_32_weights_array.data = AI_PTR(g_network_weights_map[51] + 0);
 8000750:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[45] + 0);
 8000754:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8000758:	6819      	ldr	r1, [r3, #0]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800075a:	4aaa      	ldr	r2, [pc, #680]	@ (8000a04 <network_configure_weights+0x674>)
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800075c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000760:	6019      	str	r1, [r3, #0]
    conv2d_28_bias_array.data = AI_PTR(g_network_weights_map[46] + 0);
 8000762:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8000766:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800076a:	6811      	ldr	r1, [r2, #0]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 800076c:	4ba6      	ldr	r3, [pc, #664]	@ (8000a08 <network_configure_weights+0x678>)
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800076e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000772:	6011      	str	r1, [r2, #0]
    conv2d_29_weights_array.data = AI_PTR(g_network_weights_map[47] + 0);
 8000774:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 8000778:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 800077c:	6819      	ldr	r1, [r3, #0]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800077e:	4aa3      	ldr	r2, [pc, #652]	@ (8000a0c <network_configure_weights+0x67c>)
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8000780:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000784:	6019      	str	r1, [r3, #0]
    conv2d_29_bias_array.data = AI_PTR(g_network_weights_map[48] + 0);
 8000786:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 800078a:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800078e:	6811      	ldr	r1, [r2, #0]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8000790:	4b9f      	ldr	r3, [pc, #636]	@ (8000a10 <network_configure_weights+0x680>)
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8000792:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000796:	6011      	str	r1, [r2, #0]
    conv2d_30_weights_array.data = AI_PTR(g_network_weights_map[49] + 0);
 8000798:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 800079c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 80007a0:	6819      	ldr	r1, [r3, #0]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80007a2:	4a9c      	ldr	r2, [pc, #624]	@ (8000a14 <network_configure_weights+0x684>)
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 80007a4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_32_weights_array.data = AI_PTR(g_network_weights_map[51] + 0);
 80007a8:	6090      	str	r0, [r2, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 80007aa:	6019      	str	r1, [r3, #0]
    conv2d_30_bias_array.data = AI_PTR(g_network_weights_map[50] + 0);
 80007ac:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
 80007b0:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80007b4:	6811      	ldr	r1, [r2, #0]
    conv2d_32_weights_array.data_start = AI_PTR(g_network_weights_map[51] + 0);
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80007b6:	4b98      	ldr	r3, [pc, #608]	@ (8000a18 <network_configure_weights+0x688>)
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80007b8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80007bc:	6011      	str	r1, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_network_weights_map[51] + 0);
 80007be:	60d0      	str	r0, [r2, #12]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80007c0:	6819      	ldr	r1, [r3, #0]
    conv2d_32_bias_array.data = AI_PTR(g_network_weights_map[52] + 0);
    conv2d_32_bias_array.data_start = AI_PTR(g_network_weights_map[52] + 0);
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80007c2:	4a96      	ldr	r2, [pc, #600]	@ (8000a1c <network_configure_weights+0x68c>)
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80007c4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80007c8:	6019      	str	r1, [r3, #0]
    conv2d_32_bias_array.data = AI_PTR(g_network_weights_map[52] + 0);
 80007ca:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 80007ce:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80007d2:	6811      	ldr	r1, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(g_network_weights_map[53] + 0);
    conv2d_33_weights_array.data_start = AI_PTR(g_network_weights_map[53] + 0);
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80007d4:	4b92      	ldr	r3, [pc, #584]	@ (8000a20 <network_configure_weights+0x690>)
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80007d6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80007da:	6011      	str	r1, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(g_network_weights_map[53] + 0);
 80007dc:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 80007e0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80007e4:	6819      	ldr	r1, [r3, #0]
    conv2d_33_bias_array.data = AI_PTR(g_network_weights_map[54] + 0);
    conv2d_33_bias_array.data_start = AI_PTR(g_network_weights_map[54] + 0);
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80007e6:	4a8f      	ldr	r2, [pc, #572]	@ (8000a24 <network_configure_weights+0x694>)
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80007e8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80007ec:	6019      	str	r1, [r3, #0]
    conv2d_33_bias_array.data = AI_PTR(g_network_weights_map[54] + 0);
 80007ee:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 80007f2:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80007f6:	6811      	ldr	r1, [r2, #0]
    conv2d_34_weights_array.data = AI_PTR(g_network_weights_map[55] + 0);
    conv2d_34_weights_array.data_start = AI_PTR(g_network_weights_map[55] + 0);
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 80007f8:	4b8b      	ldr	r3, [pc, #556]	@ (8000a28 <network_configure_weights+0x698>)
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80007fa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80007fe:	6011      	str	r1, [r2, #0]
    conv2d_34_weights_array.data = AI_PTR(g_network_weights_map[55] + 0);
 8000800:	f8d4 10dc 	ldr.w	r1, [r4, #220]	@ 0xdc
 8000804:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8000808:	6819      	ldr	r1, [r3, #0]
    conv2d_34_bias_array.data = AI_PTR(g_network_weights_map[56] + 0);
    conv2d_34_bias_array.data_start = AI_PTR(g_network_weights_map[56] + 0);
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 800080a:	4a88      	ldr	r2, [pc, #544]	@ (8000a2c <network_configure_weights+0x69c>)
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 800080c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000810:	6019      	str	r1, [r3, #0]
    conv2d_34_bias_array.data = AI_PTR(g_network_weights_map[56] + 0);
 8000812:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8000816:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 800081a:	6811      	ldr	r1, [r2, #0]
    conv2d_36_weights_array.data = AI_PTR(g_network_weights_map[57] + 0);
    conv2d_36_weights_array.data_start = AI_PTR(g_network_weights_map[57] + 0);
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 800081c:	4b84      	ldr	r3, [pc, #528]	@ (8000a30 <network_configure_weights+0x6a0>)
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 800081e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000822:	6011      	str	r1, [r2, #0]
    conv2d_36_weights_array.data = AI_PTR(g_network_weights_map[57] + 0);
 8000824:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
 8000828:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 800082c:	6819      	ldr	r1, [r3, #0]
    conv2d_36_bias_array.data = AI_PTR(g_network_weights_map[58] + 0);
    conv2d_36_bias_array.data_start = AI_PTR(g_network_weights_map[58] + 0);
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 800082e:	4a81      	ldr	r2, [pc, #516]	@ (8000a34 <network_configure_weights+0x6a4>)
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8000830:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000834:	6019      	str	r1, [r3, #0]
    conv2d_36_bias_array.data = AI_PTR(g_network_weights_map[58] + 0);
 8000836:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
    conv2d_38_bias_array.data_start = AI_PTR(g_network_weights_map[62] + 0);
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_40_weights_array.data = AI_PTR(g_network_weights_map[63] + 0);
    conv2d_40_weights_array.data_start = AI_PTR(g_network_weights_map[63] + 0);
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_40_bias_array.data = AI_PTR(g_network_weights_map[64] + 0);
 800083a:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
    conv2d_36_bias_array.data = AI_PTR(g_network_weights_map[58] + 0);
 800083e:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8000842:	6811      	ldr	r1, [r2, #0]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8000844:	4b7c      	ldr	r3, [pc, #496]	@ (8000a38 <network_configure_weights+0x6a8>)
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8000846:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800084a:	6011      	str	r1, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(g_network_weights_map[59] + 0);
 800084c:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 8000850:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8000854:	6819      	ldr	r1, [r3, #0]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8000856:	4a79      	ldr	r2, [pc, #484]	@ (8000a3c <network_configure_weights+0x6ac>)
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8000858:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800085c:	6019      	str	r1, [r3, #0]
    conv2d_37_bias_array.data = AI_PTR(g_network_weights_map[60] + 0);
 800085e:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8000862:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8000866:	6811      	ldr	r1, [r2, #0]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8000868:	4b75      	ldr	r3, [pc, #468]	@ (8000a40 <network_configure_weights+0x6b0>)
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 800086a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800086e:	6011      	str	r1, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_network_weights_map[61] + 0);
 8000870:	f8d4 10f4 	ldr.w	r1, [r4, #244]	@ 0xf4
 8000874:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8000878:	6819      	ldr	r1, [r3, #0]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 800087a:	4a72      	ldr	r2, [pc, #456]	@ (8000a44 <network_configure_weights+0x6b4>)
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 800087c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000880:	6019      	str	r1, [r3, #0]
    conv2d_38_bias_array.data = AI_PTR(g_network_weights_map[62] + 0);
 8000882:	f8d4 10f8 	ldr.w	r1, [r4, #248]	@ 0xf8
 8000886:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 800088a:	6811      	ldr	r1, [r2, #0]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 800088c:	4b6e      	ldr	r3, [pc, #440]	@ (8000a48 <network_configure_weights+0x6b8>)
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 800088e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_40_bias_array.data = AI_PTR(g_network_weights_map[64] + 0);
 8000892:	6098      	str	r0, [r3, #8]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 8000894:	6011      	str	r1, [r2, #0]
    conv2d_40_weights_array.data = AI_PTR(g_network_weights_map[63] + 0);
 8000896:	f8d4 10fc 	ldr.w	r1, [r4, #252]	@ 0xfc
 800089a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 800089e:	6819      	ldr	r1, [r3, #0]
    conv2d_40_bias_array.data_start = AI_PTR(g_network_weights_map[64] + 0);
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80008a0:	4a6a      	ldr	r2, [pc, #424]	@ (8000a4c <network_configure_weights+0x6bc>)
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80008a2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80008a6:	6019      	str	r1, [r3, #0]
    conv2d_40_bias_array.data = AI_PTR(g_network_weights_map[64] + 0);
 80008a8:	60d8      	str	r0, [r3, #12]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80008aa:	6811      	ldr	r1, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(g_network_weights_map[65] + 0);
    conv2d_41_weights_array.data_start = AI_PTR(g_network_weights_map[65] + 0);
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80008ac:	4b68      	ldr	r3, [pc, #416]	@ (8000a50 <network_configure_weights+0x6c0>)
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80008ae:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80008b2:	6011      	str	r1, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(g_network_weights_map[65] + 0);
 80008b4:	f8d4 1104 	ldr.w	r1, [r4, #260]	@ 0x104
 80008b8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80008bc:	6819      	ldr	r1, [r3, #0]
    conv2d_41_bias_array.data = AI_PTR(g_network_weights_map[66] + 0);
    conv2d_41_bias_array.data_start = AI_PTR(g_network_weights_map[66] + 0);
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80008be:	4a65      	ldr	r2, [pc, #404]	@ (8000a54 <network_configure_weights+0x6c4>)
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80008c0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80008c4:	6019      	str	r1, [r3, #0]
    conv2d_41_bias_array.data = AI_PTR(g_network_weights_map[66] + 0);
 80008c6:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 80008ca:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80008ce:	6811      	ldr	r1, [r2, #0]
    conv2d_42_weights_array.data = AI_PTR(g_network_weights_map[67] + 0);
    conv2d_42_weights_array.data_start = AI_PTR(g_network_weights_map[67] + 0);
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80008d0:	4b61      	ldr	r3, [pc, #388]	@ (8000a58 <network_configure_weights+0x6c8>)
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80008d2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80008d6:	6011      	str	r1, [r2, #0]
    conv2d_42_weights_array.data = AI_PTR(g_network_weights_map[67] + 0);
 80008d8:	f8d4 110c 	ldr.w	r1, [r4, #268]	@ 0x10c
 80008dc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80008e0:	6819      	ldr	r1, [r3, #0]
    conv2d_42_bias_array.data = AI_PTR(g_network_weights_map[68] + 0);
    conv2d_42_bias_array.data_start = AI_PTR(g_network_weights_map[68] + 0);
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80008e2:	4a5e      	ldr	r2, [pc, #376]	@ (8000a5c <network_configure_weights+0x6cc>)
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80008e4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80008e8:	6019      	str	r1, [r3, #0]
    conv2d_42_bias_array.data = AI_PTR(g_network_weights_map[68] + 0);
 80008ea:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
 80008ee:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80008f2:	6811      	ldr	r1, [r2, #0]
    conv2d_43_weights_array.data = AI_PTR(g_network_weights_map[69] + 0);
    conv2d_43_weights_array.data_start = AI_PTR(g_network_weights_map[69] + 0);
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 80008f4:	4b5a      	ldr	r3, [pc, #360]	@ (8000a60 <network_configure_weights+0x6d0>)
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80008f6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80008fa:	6011      	str	r1, [r2, #0]
    conv2d_43_weights_array.data = AI_PTR(g_network_weights_map[69] + 0);
 80008fc:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
 8000900:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 8000904:	6819      	ldr	r1, [r3, #0]
    conv2d_43_bias_array.data = AI_PTR(g_network_weights_map[70] + 0);
    conv2d_43_bias_array.data_start = AI_PTR(g_network_weights_map[70] + 0);
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8000906:	4a57      	ldr	r2, [pc, #348]	@ (8000a64 <network_configure_weights+0x6d4>)
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 8000908:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800090c:	6019      	str	r1, [r3, #0]
    conv2d_43_bias_array.data = AI_PTR(g_network_weights_map[70] + 0);
 800090e:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
 8000912:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8000916:	6811      	ldr	r1, [r2, #0]
    conv2d_44_weights_array.data = AI_PTR(g_network_weights_map[71] + 0);
    conv2d_44_weights_array.data_start = AI_PTR(g_network_weights_map[71] + 0);
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8000918:	4b53      	ldr	r3, [pc, #332]	@ (8000a68 <network_configure_weights+0x6d8>)
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 800091a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800091e:	6011      	str	r1, [r2, #0]
    conv2d_44_weights_array.data = AI_PTR(g_network_weights_map[71] + 0);
 8000920:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
    conv2d_47_weights_array.data_start = AI_PTR(g_network_weights_map[75] + 0);
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_47_bias_array.data = AI_PTR(g_network_weights_map[76] + 0);
    conv2d_47_bias_array.data_start = AI_PTR(g_network_weights_map[76] + 0);
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_48_weights_array.data = AI_PTR(g_network_weights_map[77] + 0);
 8000924:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
    conv2d_44_weights_array.data = AI_PTR(g_network_weights_map[71] + 0);
 8000928:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 800092c:	6819      	ldr	r1, [r3, #0]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 800092e:	4a4f      	ldr	r2, [pc, #316]	@ (8000a6c <network_configure_weights+0x6dc>)
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8000930:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000934:	6019      	str	r1, [r3, #0]
    conv2d_44_bias_array.data = AI_PTR(g_network_weights_map[72] + 0);
 8000936:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
 800093a:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 800093e:	6811      	ldr	r1, [r2, #0]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8000940:	4b4b      	ldr	r3, [pc, #300]	@ (8000a70 <network_configure_weights+0x6e0>)
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8000942:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000946:	6011      	str	r1, [r2, #0]
    conv2d_45_weights_array.data = AI_PTR(g_network_weights_map[73] + 0);
 8000948:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
 800094c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8000950:	6819      	ldr	r1, [r3, #0]
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8000952:	4a48      	ldr	r2, [pc, #288]	@ (8000a74 <network_configure_weights+0x6e4>)
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8000954:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000958:	6019      	str	r1, [r3, #0]
    conv2d_45_bias_array.data = AI_PTR(g_network_weights_map[74] + 0);
 800095a:	f8d4 1128 	ldr.w	r1, [r4, #296]	@ 0x128
 800095e:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8000962:	6811      	ldr	r1, [r2, #0]
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8000964:	4b44      	ldr	r3, [pc, #272]	@ (8000a78 <network_configure_weights+0x6e8>)
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8000966:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800096a:	6011      	str	r1, [r2, #0]
    conv2d_47_weights_array.data = AI_PTR(g_network_weights_map[75] + 0);
 800096c:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8000970:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8000974:	6819      	ldr	r1, [r3, #0]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8000976:	4a41      	ldr	r2, [pc, #260]	@ (8000a7c <network_configure_weights+0x6ec>)
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8000978:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_48_weights_array.data = AI_PTR(g_network_weights_map[77] + 0);
 800097c:	6090      	str	r0, [r2, #8]
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 800097e:	6019      	str	r1, [r3, #0]
    conv2d_47_bias_array.data = AI_PTR(g_network_weights_map[76] + 0);
 8000980:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 8000984:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8000988:	6811      	ldr	r1, [r2, #0]
    conv2d_48_weights_array.data_start = AI_PTR(g_network_weights_map[77] + 0);
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 800098a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a80 <network_configure_weights+0x6f0>)
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 800098c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000990:	6011      	str	r1, [r2, #0]
    conv2d_48_weights_array.data = AI_PTR(g_network_weights_map[77] + 0);
 8000992:	60d0      	str	r0, [r2, #12]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8000994:	6819      	ldr	r1, [r3, #0]
    conv2d_48_bias_array.data = AI_PTR(g_network_weights_map[78] + 0);
    conv2d_48_bias_array.data_start = AI_PTR(g_network_weights_map[78] + 0);
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8000996:	4a3b      	ldr	r2, [pc, #236]	@ (8000a84 <network_configure_weights+0x6f4>)
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8000998:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800099c:	6019      	str	r1, [r3, #0]
    conv2d_48_bias_array.data = AI_PTR(g_network_weights_map[78] + 0);
 800099e:	f8d4 1138 	ldr.w	r1, [r4, #312]	@ 0x138
 80009a2:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 80009a6:	6811      	ldr	r1, [r2, #0]
    conv2d_49_weights_array.data = AI_PTR(g_network_weights_map[79] + 0);
    conv2d_49_weights_array.data_start = AI_PTR(g_network_weights_map[79] + 0);
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 80009a8:	4b37      	ldr	r3, [pc, #220]	@ (8000a88 <network_configure_weights+0x6f8>)
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 80009aa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80009ae:	6011      	str	r1, [r2, #0]
    conv2d_49_weights_array.data = AI_PTR(g_network_weights_map[79] + 0);
 80009b0:	f8d4 113c 	ldr.w	r1, [r4, #316]	@ 0x13c
 80009b4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 80009b8:	6819      	ldr	r1, [r3, #0]
    conv2d_49_bias_array.data = AI_PTR(g_network_weights_map[80] + 0);
    conv2d_49_bias_array.data_start = AI_PTR(g_network_weights_map[80] + 0);
    conv2d_151_weights_array.format |= AI_FMT_FLAG_CONST;
 80009ba:	4a34      	ldr	r2, [pc, #208]	@ (8000a8c <network_configure_weights+0x6fc>)
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 80009bc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80009c0:	6019      	str	r1, [r3, #0]
    conv2d_49_bias_array.data = AI_PTR(g_network_weights_map[80] + 0);
 80009c2:	f8d4 1140 	ldr.w	r1, [r4, #320]	@ 0x140
 80009c6:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_151_weights_array.format |= AI_FMT_FLAG_CONST;
 80009ca:	6811      	ldr	r1, [r2, #0]
    conv2d_151_weights_array.data = AI_PTR(g_network_weights_map[81] + 0);
    conv2d_151_weights_array.data_start = AI_PTR(g_network_weights_map[81] + 0);
    conv2d_151_bias_array.format |= AI_FMT_FLAG_CONST;
 80009cc:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <network_configure_weights+0x700>)
    conv2d_151_weights_array.format |= AI_FMT_FLAG_CONST;
 80009ce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80009d2:	6011      	str	r1, [r2, #0]
    conv2d_151_weights_array.data = AI_PTR(g_network_weights_map[81] + 0);
 80009d4:	f8d4 1144 	ldr.w	r1, [r4, #324]	@ 0x144
 80009d8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_151_bias_array.format |= AI_FMT_FLAG_CONST;
 80009dc:	6819      	ldr	r1, [r3, #0]
    conv2d_151_bias_array.data = AI_PTR(g_network_weights_map[82] + 0);
    conv2d_151_bias_array.data_start = AI_PTR(g_network_weights_map[82] + 0);
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 80009de:	4a2d      	ldr	r2, [pc, #180]	@ (8000a94 <network_configure_weights+0x704>)
    conv2d_151_bias_array.format |= AI_FMT_FLAG_CONST;
 80009e0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80009e4:	6019      	str	r1, [r3, #0]
    conv2d_151_bias_array.data = AI_PTR(g_network_weights_map[82] + 0);
 80009e6:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 80009ea:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80009ee:	e053      	b.n	8000a98 <network_configure_weights+0x708>
 80009f0:	2400fee0 	.word	0x2400fee0
 80009f4:	2400fed0 	.word	0x2400fed0
 80009f8:	2400fec0 	.word	0x2400fec0
 80009fc:	2400feb0 	.word	0x2400feb0
 8000a00:	2400fea0 	.word	0x2400fea0
 8000a04:	2400fe90 	.word	0x2400fe90
 8000a08:	2400fe80 	.word	0x2400fe80
 8000a0c:	2400fe70 	.word	0x2400fe70
 8000a10:	2400fe60 	.word	0x2400fe60
 8000a14:	2400fe50 	.word	0x2400fe50
 8000a18:	2400fe40 	.word	0x2400fe40
 8000a1c:	2400fe30 	.word	0x2400fe30
 8000a20:	2400fe20 	.word	0x2400fe20
 8000a24:	2400fe10 	.word	0x2400fe10
 8000a28:	2400fe00 	.word	0x2400fe00
 8000a2c:	2400fdf0 	.word	0x2400fdf0
 8000a30:	2400fde0 	.word	0x2400fde0
 8000a34:	2400fdd0 	.word	0x2400fdd0
 8000a38:	2400fdc0 	.word	0x2400fdc0
 8000a3c:	2400fdb0 	.word	0x2400fdb0
 8000a40:	2400fda0 	.word	0x2400fda0
 8000a44:	2400fd90 	.word	0x2400fd90
 8000a48:	2400fd80 	.word	0x2400fd80
 8000a4c:	2400fd70 	.word	0x2400fd70
 8000a50:	2400fd60 	.word	0x2400fd60
 8000a54:	2400fd50 	.word	0x2400fd50
 8000a58:	2400fd40 	.word	0x2400fd40
 8000a5c:	2400fd30 	.word	0x2400fd30
 8000a60:	2400fd20 	.word	0x2400fd20
 8000a64:	2400fd10 	.word	0x2400fd10
 8000a68:	2400fd00 	.word	0x2400fd00
 8000a6c:	2400fcf0 	.word	0x2400fcf0
 8000a70:	2400fce0 	.word	0x2400fce0
 8000a74:	2400fcd0 	.word	0x2400fcd0
 8000a78:	2400fcc0 	.word	0x2400fcc0
 8000a7c:	2400fcb0 	.word	0x2400fcb0
 8000a80:	2400fca0 	.word	0x2400fca0
 8000a84:	2400fc90 	.word	0x2400fc90
 8000a88:	2400fc80 	.word	0x2400fc80
 8000a8c:	2400fc70 	.word	0x2400fc70
 8000a90:	2400fc60 	.word	0x2400fc60
 8000a94:	2400fc50 	.word	0x2400fc50
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8000a98:	6811      	ldr	r1, [r2, #0]
    conv2d_51_weights_array.data = AI_PTR(g_network_weights_map[83] + 0);
    conv2d_51_weights_array.data_start = AI_PTR(g_network_weights_map[83] + 0);
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8000a9a:	4bbd      	ldr	r3, [pc, #756]	@ (8000d90 <network_configure_weights+0xa00>)
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8000a9c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000aa0:	6011      	str	r1, [r2, #0]
    conv2d_51_weights_array.data = AI_PTR(g_network_weights_map[83] + 0);
 8000aa2:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 8000aa6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8000aaa:	6819      	ldr	r1, [r3, #0]
    conv2d_51_bias_array.data = AI_PTR(g_network_weights_map[84] + 0);
    conv2d_51_bias_array.data_start = AI_PTR(g_network_weights_map[84] + 0);
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 8000aac:	4ab9      	ldr	r2, [pc, #740]	@ (8000d94 <network_configure_weights+0xa04>)
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8000aae:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000ab2:	6019      	str	r1, [r3, #0]
    conv2d_51_bias_array.data = AI_PTR(g_network_weights_map[84] + 0);
 8000ab4:	f8d4 1150 	ldr.w	r1, [r4, #336]	@ 0x150
    conv2d_54_bias_array.data_start = AI_PTR(g_network_weights_map[88] + 0);
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_55_weights_array.data = AI_PTR(g_network_weights_map[89] + 0);
    conv2d_55_weights_array.data_start = AI_PTR(g_network_weights_map[89] + 0);
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_55_bias_array.data = AI_PTR(g_network_weights_map[90] + 0);
 8000ab8:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
    conv2d_51_bias_array.data = AI_PTR(g_network_weights_map[84] + 0);
 8000abc:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ac0:	6811      	ldr	r1, [r2, #0]
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8000ac2:	4bb5      	ldr	r3, [pc, #724]	@ (8000d98 <network_configure_weights+0xa08>)
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ac4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000ac8:	6011      	str	r1, [r2, #0]
    conv2d_53_weights_array.data = AI_PTR(g_network_weights_map[85] + 0);
 8000aca:	f8d4 1154 	ldr.w	r1, [r4, #340]	@ 0x154
 8000ace:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8000ad2:	6819      	ldr	r1, [r3, #0]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ad4:	4ab1      	ldr	r2, [pc, #708]	@ (8000d9c <network_configure_weights+0xa0c>)
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8000ad6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000ada:	6019      	str	r1, [r3, #0]
    conv2d_53_bias_array.data = AI_PTR(g_network_weights_map[86] + 0);
 8000adc:	f8d4 1158 	ldr.w	r1, [r4, #344]	@ 0x158
 8000ae0:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ae4:	6811      	ldr	r1, [r2, #0]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8000ae6:	4bae      	ldr	r3, [pc, #696]	@ (8000da0 <network_configure_weights+0xa10>)
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ae8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000aec:	6011      	str	r1, [r2, #0]
    conv2d_54_weights_array.data = AI_PTR(g_network_weights_map[87] + 0);
 8000aee:	f8d4 115c 	ldr.w	r1, [r4, #348]	@ 0x15c
 8000af2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8000af6:	6819      	ldr	r1, [r3, #0]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8000af8:	4aaa      	ldr	r2, [pc, #680]	@ (8000da4 <network_configure_weights+0xa14>)
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8000afa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000afe:	6019      	str	r1, [r3, #0]
    conv2d_54_bias_array.data = AI_PTR(g_network_weights_map[88] + 0);
 8000b00:	f8d4 1160 	ldr.w	r1, [r4, #352]	@ 0x160
 8000b04:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b08:	6811      	ldr	r1, [r2, #0]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b0a:	4ba7      	ldr	r3, [pc, #668]	@ (8000da8 <network_configure_weights+0xa18>)
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b0c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_55_bias_array.data = AI_PTR(g_network_weights_map[90] + 0);
 8000b10:	6098      	str	r0, [r3, #8]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b12:	6011      	str	r1, [r2, #0]
    conv2d_55_weights_array.data = AI_PTR(g_network_weights_map[89] + 0);
 8000b14:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8000b18:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b1c:	6819      	ldr	r1, [r3, #0]
    conv2d_55_bias_array.data_start = AI_PTR(g_network_weights_map[90] + 0);
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b1e:	4aa3      	ldr	r2, [pc, #652]	@ (8000dac <network_configure_weights+0xa1c>)
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b20:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000b24:	6019      	str	r1, [r3, #0]
    conv2d_55_bias_array.data = AI_PTR(g_network_weights_map[90] + 0);
 8000b26:	60d8      	str	r0, [r3, #12]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b28:	6811      	ldr	r1, [r2, #0]
    conv2d_56_weights_array.data = AI_PTR(g_network_weights_map[91] + 0);
    conv2d_56_weights_array.data_start = AI_PTR(g_network_weights_map[91] + 0);
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b2a:	4ba1      	ldr	r3, [pc, #644]	@ (8000db0 <network_configure_weights+0xa20>)
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b2c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000b30:	6011      	str	r1, [r2, #0]
    conv2d_56_weights_array.data = AI_PTR(g_network_weights_map[91] + 0);
 8000b32:	f8d4 116c 	ldr.w	r1, [r4, #364]	@ 0x16c
 8000b36:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b3a:	6819      	ldr	r1, [r3, #0]
    conv2d_56_bias_array.data = AI_PTR(g_network_weights_map[92] + 0);
    conv2d_56_bias_array.data_start = AI_PTR(g_network_weights_map[92] + 0);
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b3c:	4a9d      	ldr	r2, [pc, #628]	@ (8000db4 <network_configure_weights+0xa24>)
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b3e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000b42:	6019      	str	r1, [r3, #0]
    conv2d_56_bias_array.data = AI_PTR(g_network_weights_map[92] + 0);
 8000b44:	f8d4 1170 	ldr.w	r1, [r4, #368]	@ 0x170
 8000b48:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b4c:	6811      	ldr	r1, [r2, #0]
    conv2d_57_weights_array.data = AI_PTR(g_network_weights_map[93] + 0);
    conv2d_57_weights_array.data_start = AI_PTR(g_network_weights_map[93] + 0);
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b4e:	4b9a      	ldr	r3, [pc, #616]	@ (8000db8 <network_configure_weights+0xa28>)
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b50:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000b54:	6011      	str	r1, [r2, #0]
    conv2d_57_weights_array.data = AI_PTR(g_network_weights_map[93] + 0);
 8000b56:	f8d4 1174 	ldr.w	r1, [r4, #372]	@ 0x174
 8000b5a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b5e:	6819      	ldr	r1, [r3, #0]
    conv2d_57_bias_array.data = AI_PTR(g_network_weights_map[94] + 0);
    conv2d_57_bias_array.data_start = AI_PTR(g_network_weights_map[94] + 0);
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b60:	4a96      	ldr	r2, [pc, #600]	@ (8000dbc <network_configure_weights+0xa2c>)
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b62:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000b66:	6019      	str	r1, [r3, #0]
    conv2d_57_bias_array.data = AI_PTR(g_network_weights_map[94] + 0);
 8000b68:	f8d4 1178 	ldr.w	r1, [r4, #376]	@ 0x178
 8000b6c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b70:	6811      	ldr	r1, [r2, #0]
    conv2d_59_weights_array.data = AI_PTR(g_network_weights_map[95] + 0);
    conv2d_59_weights_array.data_start = AI_PTR(g_network_weights_map[95] + 0);
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b72:	4b93      	ldr	r3, [pc, #588]	@ (8000dc0 <network_configure_weights+0xa30>)
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b74:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000b78:	6011      	str	r1, [r2, #0]
    conv2d_59_weights_array.data = AI_PTR(g_network_weights_map[95] + 0);
 8000b7a:	f8d4 117c 	ldr.w	r1, [r4, #380]	@ 0x17c
 8000b7e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b82:	6819      	ldr	r1, [r3, #0]
    conv2d_59_bias_array.data = AI_PTR(g_network_weights_map[96] + 0);
    conv2d_59_bias_array.data_start = AI_PTR(g_network_weights_map[96] + 0);
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b84:	4a8f      	ldr	r2, [pc, #572]	@ (8000dc4 <network_configure_weights+0xa34>)
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b86:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000b8a:	6019      	str	r1, [r3, #0]
    conv2d_59_bias_array.data = AI_PTR(g_network_weights_map[96] + 0);
 8000b8c:	f8d4 1180 	ldr.w	r1, [r4, #384]	@ 0x180
 8000b90:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b94:	6811      	ldr	r1, [r2, #0]
    conv2d_60_weights_array.data = AI_PTR(g_network_weights_map[97] + 0);
    conv2d_60_weights_array.data_start = AI_PTR(g_network_weights_map[97] + 0);
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8000b96:	4b8c      	ldr	r3, [pc, #560]	@ (8000dc8 <network_configure_weights+0xa38>)
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8000b98:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000b9c:	6011      	str	r1, [r2, #0]
    conv2d_60_weights_array.data = AI_PTR(g_network_weights_map[97] + 0);
 8000b9e:	f8d4 1184 	ldr.w	r1, [r4, #388]	@ 0x184
    conv2d_63_weights_array.data_start = AI_PTR(g_network_weights_map[101] + 0);
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_63_bias_array.data = AI_PTR(g_network_weights_map[102] + 0);
    conv2d_63_bias_array.data_start = AI_PTR(g_network_weights_map[102] + 0);
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_64_weights_array.data = AI_PTR(g_network_weights_map[103] + 0);
 8000ba2:	f8d4 019c 	ldr.w	r0, [r4, #412]	@ 0x19c
    conv2d_60_weights_array.data = AI_PTR(g_network_weights_map[97] + 0);
 8000ba6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8000baa:	6819      	ldr	r1, [r3, #0]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8000bac:	4a87      	ldr	r2, [pc, #540]	@ (8000dcc <network_configure_weights+0xa3c>)
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8000bae:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000bb2:	6019      	str	r1, [r3, #0]
    conv2d_60_bias_array.data = AI_PTR(g_network_weights_map[98] + 0);
 8000bb4:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
 8000bb8:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8000bbc:	6811      	ldr	r1, [r2, #0]
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8000bbe:	4b84      	ldr	r3, [pc, #528]	@ (8000dd0 <network_configure_weights+0xa40>)
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8000bc0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000bc4:	6011      	str	r1, [r2, #0]
    conv2d_61_weights_array.data = AI_PTR(g_network_weights_map[99] + 0);
 8000bc6:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
 8000bca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8000bce:	6819      	ldr	r1, [r3, #0]
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8000bd0:	4a80      	ldr	r2, [pc, #512]	@ (8000dd4 <network_configure_weights+0xa44>)
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8000bd2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000bd6:	6019      	str	r1, [r3, #0]
    conv2d_61_bias_array.data = AI_PTR(g_network_weights_map[100] + 0);
 8000bd8:	f8d4 1190 	ldr.w	r1, [r4, #400]	@ 0x190
 8000bdc:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8000be0:	6811      	ldr	r1, [r2, #0]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8000be2:	4b7d      	ldr	r3, [pc, #500]	@ (8000dd8 <network_configure_weights+0xa48>)
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8000be4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000be8:	6011      	str	r1, [r2, #0]
    conv2d_63_weights_array.data = AI_PTR(g_network_weights_map[101] + 0);
 8000bea:	f8d4 1194 	ldr.w	r1, [r4, #404]	@ 0x194
 8000bee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8000bf2:	6819      	ldr	r1, [r3, #0]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8000bf4:	4a79      	ldr	r2, [pc, #484]	@ (8000ddc <network_configure_weights+0xa4c>)
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8000bf6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_64_weights_array.data = AI_PTR(g_network_weights_map[103] + 0);
 8000bfa:	6090      	str	r0, [r2, #8]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8000bfc:	6019      	str	r1, [r3, #0]
    conv2d_63_bias_array.data = AI_PTR(g_network_weights_map[102] + 0);
 8000bfe:	f8d4 1198 	ldr.w	r1, [r4, #408]	@ 0x198
 8000c02:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c06:	6811      	ldr	r1, [r2, #0]
    conv2d_64_weights_array.data_start = AI_PTR(g_network_weights_map[103] + 0);
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c08:	4b75      	ldr	r3, [pc, #468]	@ (8000de0 <network_configure_weights+0xa50>)
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c0a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c0e:	6011      	str	r1, [r2, #0]
    conv2d_64_weights_array.data = AI_PTR(g_network_weights_map[103] + 0);
 8000c10:	60d0      	str	r0, [r2, #12]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c12:	6819      	ldr	r1, [r3, #0]
    conv2d_64_bias_array.data = AI_PTR(g_network_weights_map[104] + 0);
    conv2d_64_bias_array.data_start = AI_PTR(g_network_weights_map[104] + 0);
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c14:	4a73      	ldr	r2, [pc, #460]	@ (8000de4 <network_configure_weights+0xa54>)
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c16:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c1a:	6019      	str	r1, [r3, #0]
    conv2d_64_bias_array.data = AI_PTR(g_network_weights_map[104] + 0);
 8000c1c:	f8d4 11a0 	ldr.w	r1, [r4, #416]	@ 0x1a0
 8000c20:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c24:	6811      	ldr	r1, [r2, #0]
    conv2d_65_weights_array.data = AI_PTR(g_network_weights_map[105] + 0);
    conv2d_65_weights_array.data_start = AI_PTR(g_network_weights_map[105] + 0);
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c26:	4b70      	ldr	r3, [pc, #448]	@ (8000de8 <network_configure_weights+0xa58>)
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c28:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c2c:	6011      	str	r1, [r2, #0]
    conv2d_65_weights_array.data = AI_PTR(g_network_weights_map[105] + 0);
 8000c2e:	f8d4 11a4 	ldr.w	r1, [r4, #420]	@ 0x1a4
 8000c32:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c36:	6819      	ldr	r1, [r3, #0]
    conv2d_65_bias_array.data = AI_PTR(g_network_weights_map[106] + 0);
    conv2d_65_bias_array.data_start = AI_PTR(g_network_weights_map[106] + 0);
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c38:	4a6c      	ldr	r2, [pc, #432]	@ (8000dec <network_configure_weights+0xa5c>)
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c3a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c3e:	6019      	str	r1, [r3, #0]
    conv2d_65_bias_array.data = AI_PTR(g_network_weights_map[106] + 0);
 8000c40:	f8d4 11a8 	ldr.w	r1, [r4, #424]	@ 0x1a8
 8000c44:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c48:	6811      	ldr	r1, [r2, #0]
    conv2d_66_weights_array.data = AI_PTR(g_network_weights_map[107] + 0);
    conv2d_66_weights_array.data_start = AI_PTR(g_network_weights_map[107] + 0);
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c4a:	4b69      	ldr	r3, [pc, #420]	@ (8000df0 <network_configure_weights+0xa60>)
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c4c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c50:	6011      	str	r1, [r2, #0]
    conv2d_66_weights_array.data = AI_PTR(g_network_weights_map[107] + 0);
 8000c52:	f8d4 11ac 	ldr.w	r1, [r4, #428]	@ 0x1ac
 8000c56:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c5a:	6819      	ldr	r1, [r3, #0]
    conv2d_66_bias_array.data = AI_PTR(g_network_weights_map[108] + 0);
    conv2d_66_bias_array.data_start = AI_PTR(g_network_weights_map[108] + 0);
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c5c:	4a65      	ldr	r2, [pc, #404]	@ (8000df4 <network_configure_weights+0xa64>)
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c5e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c62:	6019      	str	r1, [r3, #0]
    conv2d_66_bias_array.data = AI_PTR(g_network_weights_map[108] + 0);
 8000c64:	f8d4 11b0 	ldr.w	r1, [r4, #432]	@ 0x1b0
 8000c68:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c6c:	6811      	ldr	r1, [r2, #0]
    conv2d_67_weights_array.data = AI_PTR(g_network_weights_map[109] + 0);
    conv2d_67_weights_array.data_start = AI_PTR(g_network_weights_map[109] + 0);
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c6e:	4b62      	ldr	r3, [pc, #392]	@ (8000df8 <network_configure_weights+0xa68>)
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c70:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c74:	6011      	str	r1, [r2, #0]
    conv2d_67_weights_array.data = AI_PTR(g_network_weights_map[109] + 0);
 8000c76:	f8d4 11b4 	ldr.w	r1, [r4, #436]	@ 0x1b4
 8000c7a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c7e:	6819      	ldr	r1, [r3, #0]
    conv2d_67_bias_array.data = AI_PTR(g_network_weights_map[110] + 0);
    conv2d_67_bias_array.data_start = AI_PTR(g_network_weights_map[110] + 0);
    conv2d_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c80:	4a5e      	ldr	r2, [pc, #376]	@ (8000dfc <network_configure_weights+0xa6c>)
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c82:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c86:	6019      	str	r1, [r3, #0]
    conv2d_67_bias_array.data = AI_PTR(g_network_weights_map[110] + 0);
 8000c88:	f8d4 11b8 	ldr.w	r1, [r4, #440]	@ 0x1b8
    conv2d_69_bias_array.data_start = AI_PTR(g_network_weights_map[114] + 0);
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_70_weights_array.data = AI_PTR(g_network_weights_map[115] + 0);
    conv2d_70_weights_array.data_start = AI_PTR(g_network_weights_map[115] + 0);
    conv2d_70_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_70_bias_array.data = AI_PTR(g_network_weights_map[116] + 0);
 8000c8c:	f8d4 01d0 	ldr.w	r0, [r4, #464]	@ 0x1d0
    conv2d_67_bias_array.data = AI_PTR(g_network_weights_map[110] + 0);
 8000c90:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c94:	6811      	ldr	r1, [r2, #0]
    conv2d_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8000c96:	4b5a      	ldr	r3, [pc, #360]	@ (8000e00 <network_configure_weights+0xa70>)
    conv2d_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8000c98:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000c9c:	6011      	str	r1, [r2, #0]
    conv2d_68_weights_array.data = AI_PTR(g_network_weights_map[111] + 0);
 8000c9e:	f8d4 11bc 	ldr.w	r1, [r4, #444]	@ 0x1bc
 8000ca2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8000ca6:	6819      	ldr	r1, [r3, #0]
    conv2d_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ca8:	4a56      	ldr	r2, [pc, #344]	@ (8000e04 <network_configure_weights+0xa74>)
    conv2d_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8000caa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000cae:	6019      	str	r1, [r3, #0]
    conv2d_68_bias_array.data = AI_PTR(g_network_weights_map[112] + 0);
 8000cb0:	f8d4 11c0 	ldr.w	r1, [r4, #448]	@ 0x1c0
 8000cb4:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8000cb8:	6811      	ldr	r1, [r2, #0]
    conv2d_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8000cba:	4b53      	ldr	r3, [pc, #332]	@ (8000e08 <network_configure_weights+0xa78>)
    conv2d_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8000cbc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000cc0:	6011      	str	r1, [r2, #0]
    conv2d_69_weights_array.data = AI_PTR(g_network_weights_map[113] + 0);
 8000cc2:	f8d4 11c4 	ldr.w	r1, [r4, #452]	@ 0x1c4
 8000cc6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8000cca:	6819      	ldr	r1, [r3, #0]
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ccc:	4a4f      	ldr	r2, [pc, #316]	@ (8000e0c <network_configure_weights+0xa7c>)
    conv2d_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8000cce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000cd2:	6019      	str	r1, [r3, #0]
    conv2d_69_bias_array.data = AI_PTR(g_network_weights_map[114] + 0);
 8000cd4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	@ 0x1c8
 8000cd8:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8000cdc:	6811      	ldr	r1, [r2, #0]
    conv2d_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8000cde:	4b4c      	ldr	r3, [pc, #304]	@ (8000e10 <network_configure_weights+0xa80>)
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ce0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_70_bias_array.data = AI_PTR(g_network_weights_map[116] + 0);
 8000ce4:	6098      	str	r0, [r3, #8]
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ce6:	6011      	str	r1, [r2, #0]
    conv2d_70_weights_array.data = AI_PTR(g_network_weights_map[115] + 0);
 8000ce8:	f8d4 11cc 	ldr.w	r1, [r4, #460]	@ 0x1cc
 8000cec:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8000cf0:	6819      	ldr	r1, [r3, #0]
    conv2d_70_bias_array.data_start = AI_PTR(g_network_weights_map[116] + 0);
    conv2d_71_weights_array.format |= AI_FMT_FLAG_CONST;
 8000cf2:	4a48      	ldr	r2, [pc, #288]	@ (8000e14 <network_configure_weights+0xa84>)
    conv2d_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8000cf4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000cf8:	6019      	str	r1, [r3, #0]
    conv2d_70_bias_array.data = AI_PTR(g_network_weights_map[116] + 0);
 8000cfa:	60d8      	str	r0, [r3, #12]
    conv2d_71_weights_array.format |= AI_FMT_FLAG_CONST;
 8000cfc:	6811      	ldr	r1, [r2, #0]
    conv2d_71_weights_array.data = AI_PTR(g_network_weights_map[117] + 0);
    conv2d_71_weights_array.data_start = AI_PTR(g_network_weights_map[117] + 0);
    conv2d_71_bias_array.format |= AI_FMT_FLAG_CONST;
 8000cfe:	4b46      	ldr	r3, [pc, #280]	@ (8000e18 <network_configure_weights+0xa88>)
    conv2d_71_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d00:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000d04:	6011      	str	r1, [r2, #0]
    conv2d_71_weights_array.data = AI_PTR(g_network_weights_map[117] + 0);
 8000d06:	f8d4 11d4 	ldr.w	r1, [r4, #468]	@ 0x1d4
 8000d0a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_71_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d0e:	6819      	ldr	r1, [r3, #0]
    conv2d_71_bias_array.data = AI_PTR(g_network_weights_map[118] + 0);
    conv2d_71_bias_array.data_start = AI_PTR(g_network_weights_map[118] + 0);
    conv2d_72_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d10:	4a42      	ldr	r2, [pc, #264]	@ (8000e1c <network_configure_weights+0xa8c>)
    conv2d_71_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d12:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000d16:	6019      	str	r1, [r3, #0]
    conv2d_71_bias_array.data = AI_PTR(g_network_weights_map[118] + 0);
 8000d18:	f8d4 11d8 	ldr.w	r1, [r4, #472]	@ 0x1d8
 8000d1c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_72_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d20:	6811      	ldr	r1, [r2, #0]
    conv2d_72_weights_array.data = AI_PTR(g_network_weights_map[119] + 0);
    conv2d_72_weights_array.data_start = AI_PTR(g_network_weights_map[119] + 0);
    conv2d_72_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d22:	4b3f      	ldr	r3, [pc, #252]	@ (8000e20 <network_configure_weights+0xa90>)
    conv2d_72_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d24:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000d28:	6011      	str	r1, [r2, #0]
    conv2d_72_weights_array.data = AI_PTR(g_network_weights_map[119] + 0);
 8000d2a:	f8d4 11dc 	ldr.w	r1, [r4, #476]	@ 0x1dc
 8000d2e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_72_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d32:	6819      	ldr	r1, [r3, #0]
    conv2d_72_bias_array.data = AI_PTR(g_network_weights_map[120] + 0);
    conv2d_72_bias_array.data_start = AI_PTR(g_network_weights_map[120] + 0);
    conv2d_73_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d34:	4a3b      	ldr	r2, [pc, #236]	@ (8000e24 <network_configure_weights+0xa94>)
    conv2d_72_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d36:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000d3a:	6019      	str	r1, [r3, #0]
    conv2d_72_bias_array.data = AI_PTR(g_network_weights_map[120] + 0);
 8000d3c:	f8d4 11e0 	ldr.w	r1, [r4, #480]	@ 0x1e0
 8000d40:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_73_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d44:	6811      	ldr	r1, [r2, #0]
    conv2d_73_weights_array.data = AI_PTR(g_network_weights_map[121] + 0);
    conv2d_73_weights_array.data_start = AI_PTR(g_network_weights_map[121] + 0);
    conv2d_73_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d46:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <network_configure_weights+0xa98>)
    conv2d_73_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d48:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000d4c:	6011      	str	r1, [r2, #0]
    conv2d_73_weights_array.data = AI_PTR(g_network_weights_map[121] + 0);
 8000d4e:	f8d4 11e4 	ldr.w	r1, [r4, #484]	@ 0x1e4
 8000d52:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_73_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d56:	6819      	ldr	r1, [r3, #0]
    conv2d_73_bias_array.data = AI_PTR(g_network_weights_map[122] + 0);
    conv2d_73_bias_array.data_start = AI_PTR(g_network_weights_map[122] + 0);
    conv2d_74_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d58:	4a34      	ldr	r2, [pc, #208]	@ (8000e2c <network_configure_weights+0xa9c>)
    conv2d_73_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d5a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000d5e:	6019      	str	r1, [r3, #0]
    conv2d_73_bias_array.data = AI_PTR(g_network_weights_map[122] + 0);
 8000d60:	f8d4 11e8 	ldr.w	r1, [r4, #488]	@ 0x1e8
 8000d64:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_74_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d68:	6811      	ldr	r1, [r2, #0]
    conv2d_74_weights_array.data = AI_PTR(g_network_weights_map[123] + 0);
    conv2d_74_weights_array.data_start = AI_PTR(g_network_weights_map[123] + 0);
    conv2d_74_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d6a:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <network_configure_weights+0xaa0>)
    conv2d_74_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d6c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000d70:	6011      	str	r1, [r2, #0]
    conv2d_74_weights_array.data = AI_PTR(g_network_weights_map[123] + 0);
 8000d72:	f8d4 11ec 	ldr.w	r1, [r4, #492]	@ 0x1ec
    conv2d_76_weights_array.data_start = AI_PTR(g_network_weights_map[127] + 0);
    conv2d_76_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_76_bias_array.data = AI_PTR(g_network_weights_map[128] + 0);
    conv2d_76_bias_array.data_start = AI_PTR(g_network_weights_map[128] + 0);
    conv2d_77_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_77_weights_array.data = AI_PTR(g_network_weights_map[129] + 0);
 8000d76:	f8d4 0204 	ldr.w	r0, [r4, #516]	@ 0x204
    conv2d_74_weights_array.data = AI_PTR(g_network_weights_map[123] + 0);
 8000d7a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_74_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d7e:	6819      	ldr	r1, [r3, #0]
    conv2d_75_weights_array.format |= AI_FMT_FLAG_CONST;
 8000d80:	4a2c      	ldr	r2, [pc, #176]	@ (8000e34 <network_configure_weights+0xaa4>)
    conv2d_74_bias_array.format |= AI_FMT_FLAG_CONST;
 8000d82:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000d86:	6019      	str	r1, [r3, #0]
    conv2d_74_bias_array.data = AI_PTR(g_network_weights_map[124] + 0);
 8000d88:	f8d4 11f0 	ldr.w	r1, [r4, #496]	@ 0x1f0
 8000d8c:	e054      	b.n	8000e38 <network_configure_weights+0xaa8>
 8000d8e:	bf00      	nop
 8000d90:	2400fc40 	.word	0x2400fc40
 8000d94:	2400fc30 	.word	0x2400fc30
 8000d98:	2400fc20 	.word	0x2400fc20
 8000d9c:	2400fc10 	.word	0x2400fc10
 8000da0:	2400fc00 	.word	0x2400fc00
 8000da4:	2400fbf0 	.word	0x2400fbf0
 8000da8:	2400fbe0 	.word	0x2400fbe0
 8000dac:	2400fbd0 	.word	0x2400fbd0
 8000db0:	2400fbc0 	.word	0x2400fbc0
 8000db4:	2400fbb0 	.word	0x2400fbb0
 8000db8:	2400fba0 	.word	0x2400fba0
 8000dbc:	2400fb90 	.word	0x2400fb90
 8000dc0:	2400fb80 	.word	0x2400fb80
 8000dc4:	2400fb70 	.word	0x2400fb70
 8000dc8:	2400fb60 	.word	0x2400fb60
 8000dcc:	2400fb50 	.word	0x2400fb50
 8000dd0:	2400fb40 	.word	0x2400fb40
 8000dd4:	2400fb30 	.word	0x2400fb30
 8000dd8:	2400fb20 	.word	0x2400fb20
 8000ddc:	2400fb10 	.word	0x2400fb10
 8000de0:	2400fb00 	.word	0x2400fb00
 8000de4:	2400faf0 	.word	0x2400faf0
 8000de8:	2400fae0 	.word	0x2400fae0
 8000dec:	2400fad0 	.word	0x2400fad0
 8000df0:	2400fac0 	.word	0x2400fac0
 8000df4:	2400fab0 	.word	0x2400fab0
 8000df8:	2400faa0 	.word	0x2400faa0
 8000dfc:	2400fa90 	.word	0x2400fa90
 8000e00:	2400fa80 	.word	0x2400fa80
 8000e04:	2400fa70 	.word	0x2400fa70
 8000e08:	2400fa60 	.word	0x2400fa60
 8000e0c:	2400fa50 	.word	0x2400fa50
 8000e10:	2400fa40 	.word	0x2400fa40
 8000e14:	2400fa30 	.word	0x2400fa30
 8000e18:	2400fa20 	.word	0x2400fa20
 8000e1c:	2400fa10 	.word	0x2400fa10
 8000e20:	2400fa00 	.word	0x2400fa00
 8000e24:	2400f9f0 	.word	0x2400f9f0
 8000e28:	2400f9e0 	.word	0x2400f9e0
 8000e2c:	2400f9d0 	.word	0x2400f9d0
 8000e30:	2400f9c0 	.word	0x2400f9c0
 8000e34:	2400f9b0 	.word	0x2400f9b0
 8000e38:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_75_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e3c:	6811      	ldr	r1, [r2, #0]
    conv2d_75_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e3e:	4bbd      	ldr	r3, [pc, #756]	@ (8001134 <network_configure_weights+0xda4>)
    conv2d_75_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e40:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000e44:	6011      	str	r1, [r2, #0]
    conv2d_75_weights_array.data = AI_PTR(g_network_weights_map[125] + 0);
 8000e46:	f8d4 11f4 	ldr.w	r1, [r4, #500]	@ 0x1f4
 8000e4a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_75_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e4e:	6819      	ldr	r1, [r3, #0]
    conv2d_76_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e50:	4ab9      	ldr	r2, [pc, #740]	@ (8001138 <network_configure_weights+0xda8>)
    conv2d_75_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e52:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000e56:	6019      	str	r1, [r3, #0]
    conv2d_75_bias_array.data = AI_PTR(g_network_weights_map[126] + 0);
 8000e58:	f8d4 11f8 	ldr.w	r1, [r4, #504]	@ 0x1f8
 8000e5c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_76_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e60:	6811      	ldr	r1, [r2, #0]
    conv2d_76_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e62:	4bb6      	ldr	r3, [pc, #728]	@ (800113c <network_configure_weights+0xdac>)
    conv2d_76_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e64:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000e68:	6011      	str	r1, [r2, #0]
    conv2d_76_weights_array.data = AI_PTR(g_network_weights_map[127] + 0);
 8000e6a:	f8d4 11fc 	ldr.w	r1, [r4, #508]	@ 0x1fc
 8000e6e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_76_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e72:	6819      	ldr	r1, [r3, #0]
    conv2d_77_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e74:	4ab2      	ldr	r2, [pc, #712]	@ (8001140 <network_configure_weights+0xdb0>)
    conv2d_76_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e76:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_77_weights_array.data = AI_PTR(g_network_weights_map[129] + 0);
 8000e7a:	6090      	str	r0, [r2, #8]
    conv2d_76_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e7c:	6019      	str	r1, [r3, #0]
    conv2d_76_bias_array.data = AI_PTR(g_network_weights_map[128] + 0);
 8000e7e:	f8d4 1200 	ldr.w	r1, [r4, #512]	@ 0x200
 8000e82:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_77_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e86:	6811      	ldr	r1, [r2, #0]
    conv2d_77_weights_array.data_start = AI_PTR(g_network_weights_map[129] + 0);
    conv2d_77_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e88:	4bae      	ldr	r3, [pc, #696]	@ (8001144 <network_configure_weights+0xdb4>)
    conv2d_77_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e8a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000e8e:	6011      	str	r1, [r2, #0]
    conv2d_77_weights_array.data = AI_PTR(g_network_weights_map[129] + 0);
 8000e90:	60d0      	str	r0, [r2, #12]
    conv2d_77_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e92:	6819      	ldr	r1, [r3, #0]
    conv2d_77_bias_array.data = AI_PTR(g_network_weights_map[130] + 0);
    conv2d_77_bias_array.data_start = AI_PTR(g_network_weights_map[130] + 0);
    conv2d_82_weights_array.format |= AI_FMT_FLAG_CONST;
 8000e94:	4aac      	ldr	r2, [pc, #688]	@ (8001148 <network_configure_weights+0xdb8>)
    conv2d_77_bias_array.format |= AI_FMT_FLAG_CONST;
 8000e96:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000e9a:	6019      	str	r1, [r3, #0]
    conv2d_77_bias_array.data = AI_PTR(g_network_weights_map[130] + 0);
 8000e9c:	f8d4 1208 	ldr.w	r1, [r4, #520]	@ 0x208
 8000ea0:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_82_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ea4:	6811      	ldr	r1, [r2, #0]
    conv2d_82_weights_array.data = AI_PTR(g_network_weights_map[131] + 0);
    conv2d_82_weights_array.data_start = AI_PTR(g_network_weights_map[131] + 0);
    conv2d_82_bias_array.format |= AI_FMT_FLAG_CONST;
 8000ea6:	4ba9      	ldr	r3, [pc, #676]	@ (800114c <network_configure_weights+0xdbc>)
    conv2d_82_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ea8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000eac:	6011      	str	r1, [r2, #0]
    conv2d_82_weights_array.data = AI_PTR(g_network_weights_map[131] + 0);
 8000eae:	f8d4 120c 	ldr.w	r1, [r4, #524]	@ 0x20c
 8000eb2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_82_bias_array.format |= AI_FMT_FLAG_CONST;
 8000eb6:	6819      	ldr	r1, [r3, #0]
    conv2d_82_bias_array.data = AI_PTR(g_network_weights_map[132] + 0);
    conv2d_82_bias_array.data_start = AI_PTR(g_network_weights_map[132] + 0);
    conv2d_83_weights_array.format |= AI_FMT_FLAG_CONST;
 8000eb8:	4aa5      	ldr	r2, [pc, #660]	@ (8001150 <network_configure_weights+0xdc0>)
    conv2d_82_bias_array.format |= AI_FMT_FLAG_CONST;
 8000eba:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000ebe:	6019      	str	r1, [r3, #0]
    conv2d_82_bias_array.data = AI_PTR(g_network_weights_map[132] + 0);
 8000ec0:	f8d4 1210 	ldr.w	r1, [r4, #528]	@ 0x210
 8000ec4:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_83_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ec8:	6811      	ldr	r1, [r2, #0]
    conv2d_83_weights_array.data = AI_PTR(g_network_weights_map[133] + 0);
    conv2d_83_weights_array.data_start = AI_PTR(g_network_weights_map[133] + 0);
    conv2d_83_bias_array.format |= AI_FMT_FLAG_CONST;
 8000eca:	4ba2      	ldr	r3, [pc, #648]	@ (8001154 <network_configure_weights+0xdc4>)
    conv2d_83_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ecc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000ed0:	6011      	str	r1, [r2, #0]
    conv2d_83_weights_array.data = AI_PTR(g_network_weights_map[133] + 0);
 8000ed2:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 8000ed6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_83_bias_array.format |= AI_FMT_FLAG_CONST;
 8000eda:	6819      	ldr	r1, [r3, #0]
    conv2d_83_bias_array.data = AI_PTR(g_network_weights_map[134] + 0);
    conv2d_83_bias_array.data_start = AI_PTR(g_network_weights_map[134] + 0);
    conv2d_94_weights_array.format |= AI_FMT_FLAG_CONST;
 8000edc:	4a9e      	ldr	r2, [pc, #632]	@ (8001158 <network_configure_weights+0xdc8>)
    conv2d_83_bias_array.format |= AI_FMT_FLAG_CONST;
 8000ede:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000ee2:	6019      	str	r1, [r3, #0]
    conv2d_83_bias_array.data = AI_PTR(g_network_weights_map[134] + 0);
 8000ee4:	f8d4 1218 	ldr.w	r1, [r4, #536]	@ 0x218
 8000ee8:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_94_weights_array.format |= AI_FMT_FLAG_CONST;
 8000eec:	6811      	ldr	r1, [r2, #0]
    conv2d_94_weights_array.data = AI_PTR(g_network_weights_map[135] + 0);
    conv2d_94_weights_array.data_start = AI_PTR(g_network_weights_map[135] + 0);
    conv2d_94_bias_array.format |= AI_FMT_FLAG_CONST;
 8000eee:	4b9b      	ldr	r3, [pc, #620]	@ (800115c <network_configure_weights+0xdcc>)
    conv2d_94_weights_array.format |= AI_FMT_FLAG_CONST;
 8000ef0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000ef4:	6011      	str	r1, [r2, #0]
    conv2d_94_weights_array.data = AI_PTR(g_network_weights_map[135] + 0);
 8000ef6:	f8d4 121c 	ldr.w	r1, [r4, #540]	@ 0x21c
 8000efa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_94_bias_array.format |= AI_FMT_FLAG_CONST;
 8000efe:	6819      	ldr	r1, [r3, #0]
    conv2d_94_bias_array.data = AI_PTR(g_network_weights_map[136] + 0);
    conv2d_94_bias_array.data_start = AI_PTR(g_network_weights_map[136] + 0);
    conv2d_95_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f00:	4a97      	ldr	r2, [pc, #604]	@ (8001160 <network_configure_weights+0xdd0>)
    conv2d_94_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f02:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000f06:	6019      	str	r1, [r3, #0]
    conv2d_94_bias_array.data = AI_PTR(g_network_weights_map[136] + 0);
 8000f08:	f8d4 1220 	ldr.w	r1, [r4, #544]	@ 0x220
    conv2d_96_bias_array.data_start = AI_PTR(g_network_weights_map[140] + 0);
    conv2d_97_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_97_weights_array.data = AI_PTR(g_network_weights_map[141] + 0);
    conv2d_97_weights_array.data_start = AI_PTR(g_network_weights_map[141] + 0);
    conv2d_97_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_97_bias_array.data = AI_PTR(g_network_weights_map[142] + 0);
 8000f0c:	f8d4 0238 	ldr.w	r0, [r4, #568]	@ 0x238
    conv2d_94_bias_array.data = AI_PTR(g_network_weights_map[136] + 0);
 8000f10:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_95_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f14:	6811      	ldr	r1, [r2, #0]
    conv2d_95_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f16:	4b93      	ldr	r3, [pc, #588]	@ (8001164 <network_configure_weights+0xdd4>)
    conv2d_95_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f18:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000f1c:	6011      	str	r1, [r2, #0]
    conv2d_95_weights_array.data = AI_PTR(g_network_weights_map[137] + 0);
 8000f1e:	f8d4 1224 	ldr.w	r1, [r4, #548]	@ 0x224
 8000f22:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_95_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f26:	6819      	ldr	r1, [r3, #0]
    conv2d_96_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f28:	4a8f      	ldr	r2, [pc, #572]	@ (8001168 <network_configure_weights+0xdd8>)
    conv2d_95_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f2a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000f2e:	6019      	str	r1, [r3, #0]
    conv2d_95_bias_array.data = AI_PTR(g_network_weights_map[138] + 0);
 8000f30:	f8d4 1228 	ldr.w	r1, [r4, #552]	@ 0x228
 8000f34:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_96_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f38:	6811      	ldr	r1, [r2, #0]
    conv2d_96_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f3a:	4b8c      	ldr	r3, [pc, #560]	@ (800116c <network_configure_weights+0xddc>)
    conv2d_96_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f3c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000f40:	6011      	str	r1, [r2, #0]
    conv2d_96_weights_array.data = AI_PTR(g_network_weights_map[139] + 0);
 8000f42:	f8d4 122c 	ldr.w	r1, [r4, #556]	@ 0x22c
 8000f46:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_96_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f4a:	6819      	ldr	r1, [r3, #0]
    conv2d_97_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f4c:	4a88      	ldr	r2, [pc, #544]	@ (8001170 <network_configure_weights+0xde0>)
    conv2d_96_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f4e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000f52:	6019      	str	r1, [r3, #0]
    conv2d_96_bias_array.data = AI_PTR(g_network_weights_map[140] + 0);
 8000f54:	f8d4 1230 	ldr.w	r1, [r4, #560]	@ 0x230
 8000f58:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_97_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f5c:	6811      	ldr	r1, [r2, #0]
    conv2d_97_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f5e:	4b85      	ldr	r3, [pc, #532]	@ (8001174 <network_configure_weights+0xde4>)
    conv2d_97_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f60:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_97_bias_array.data = AI_PTR(g_network_weights_map[142] + 0);
 8000f64:	6098      	str	r0, [r3, #8]
    conv2d_97_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f66:	6011      	str	r1, [r2, #0]
    conv2d_97_weights_array.data = AI_PTR(g_network_weights_map[141] + 0);
 8000f68:	f8d4 1234 	ldr.w	r1, [r4, #564]	@ 0x234
 8000f6c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_97_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f70:	6819      	ldr	r1, [r3, #0]
    conv2d_97_bias_array.data_start = AI_PTR(g_network_weights_map[142] + 0);
    conv2d_98_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f72:	4a81      	ldr	r2, [pc, #516]	@ (8001178 <network_configure_weights+0xde8>)
    conv2d_97_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f74:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000f78:	6019      	str	r1, [r3, #0]
    conv2d_97_bias_array.data = AI_PTR(g_network_weights_map[142] + 0);
 8000f7a:	60d8      	str	r0, [r3, #12]
    conv2d_98_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f7c:	6811      	ldr	r1, [r2, #0]
    conv2d_98_weights_array.data = AI_PTR(g_network_weights_map[143] + 0);
    conv2d_98_weights_array.data_start = AI_PTR(g_network_weights_map[143] + 0);
    conv2d_98_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800117c <network_configure_weights+0xdec>)
    conv2d_98_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f80:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000f84:	6011      	str	r1, [r2, #0]
    conv2d_98_weights_array.data = AI_PTR(g_network_weights_map[143] + 0);
 8000f86:	f8d4 123c 	ldr.w	r1, [r4, #572]	@ 0x23c
 8000f8a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_98_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f8e:	6819      	ldr	r1, [r3, #0]
    conv2d_98_bias_array.data = AI_PTR(g_network_weights_map[144] + 0);
    conv2d_98_bias_array.data_start = AI_PTR(g_network_weights_map[144] + 0);
    conv2d_99_weights_array.format |= AI_FMT_FLAG_CONST;
 8000f90:	4a7b      	ldr	r2, [pc, #492]	@ (8001180 <network_configure_weights+0xdf0>)
    conv2d_98_bias_array.format |= AI_FMT_FLAG_CONST;
 8000f92:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000f96:	6019      	str	r1, [r3, #0]
    conv2d_98_bias_array.data = AI_PTR(g_network_weights_map[144] + 0);
 8000f98:	f8d4 1240 	ldr.w	r1, [r4, #576]	@ 0x240
 8000f9c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_99_weights_array.format |= AI_FMT_FLAG_CONST;
 8000fa0:	6811      	ldr	r1, [r2, #0]
    conv2d_99_weights_array.data = AI_PTR(g_network_weights_map[145] + 0);
    conv2d_99_weights_array.data_start = AI_PTR(g_network_weights_map[145] + 0);
    conv2d_99_bias_array.format |= AI_FMT_FLAG_CONST;
 8000fa2:	4b78      	ldr	r3, [pc, #480]	@ (8001184 <network_configure_weights+0xdf4>)
    conv2d_99_weights_array.format |= AI_FMT_FLAG_CONST;
 8000fa4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000fa8:	6011      	str	r1, [r2, #0]
    conv2d_99_weights_array.data = AI_PTR(g_network_weights_map[145] + 0);
 8000faa:	f8d4 1244 	ldr.w	r1, [r4, #580]	@ 0x244
 8000fae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_99_bias_array.format |= AI_FMT_FLAG_CONST;
 8000fb2:	6819      	ldr	r1, [r3, #0]
    conv2d_99_bias_array.data = AI_PTR(g_network_weights_map[146] + 0);
    conv2d_99_bias_array.data_start = AI_PTR(g_network_weights_map[146] + 0);
    conv2d_100_weights_array.format |= AI_FMT_FLAG_CONST;
 8000fb4:	4a74      	ldr	r2, [pc, #464]	@ (8001188 <network_configure_weights+0xdf8>)
    conv2d_99_bias_array.format |= AI_FMT_FLAG_CONST;
 8000fb6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000fba:	6019      	str	r1, [r3, #0]
    conv2d_99_bias_array.data = AI_PTR(g_network_weights_map[146] + 0);
 8000fbc:	f8d4 1248 	ldr.w	r1, [r4, #584]	@ 0x248
 8000fc0:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_100_weights_array.format |= AI_FMT_FLAG_CONST;
 8000fc4:	6811      	ldr	r1, [r2, #0]
    conv2d_100_weights_array.data = AI_PTR(g_network_weights_map[147] + 0);
    conv2d_100_weights_array.data_start = AI_PTR(g_network_weights_map[147] + 0);
    conv2d_100_bias_array.format |= AI_FMT_FLAG_CONST;
 8000fc6:	4b71      	ldr	r3, [pc, #452]	@ (800118c <network_configure_weights+0xdfc>)
    conv2d_100_weights_array.format |= AI_FMT_FLAG_CONST;
 8000fc8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000fcc:	6011      	str	r1, [r2, #0]
    conv2d_100_weights_array.data = AI_PTR(g_network_weights_map[147] + 0);
 8000fce:	f8d4 124c 	ldr.w	r1, [r4, #588]	@ 0x24c
 8000fd2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_100_bias_array.format |= AI_FMT_FLAG_CONST;
 8000fd6:	6819      	ldr	r1, [r3, #0]
    conv2d_100_bias_array.data = AI_PTR(g_network_weights_map[148] + 0);
    conv2d_100_bias_array.data_start = AI_PTR(g_network_weights_map[148] + 0);
    conv2d_101_weights_array.format |= AI_FMT_FLAG_CONST;
 8000fd8:	4a6d      	ldr	r2, [pc, #436]	@ (8001190 <network_configure_weights+0xe00>)
    conv2d_100_bias_array.format |= AI_FMT_FLAG_CONST;
 8000fda:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000fde:	6019      	str	r1, [r3, #0]
    conv2d_100_bias_array.data = AI_PTR(g_network_weights_map[148] + 0);
 8000fe0:	f8d4 1250 	ldr.w	r1, [r4, #592]	@ 0x250
 8000fe4:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_101_weights_array.format |= AI_FMT_FLAG_CONST;
 8000fe8:	6811      	ldr	r1, [r2, #0]
    conv2d_101_weights_array.data = AI_PTR(g_network_weights_map[149] + 0);
    conv2d_101_weights_array.data_start = AI_PTR(g_network_weights_map[149] + 0);
    conv2d_101_bias_array.format |= AI_FMT_FLAG_CONST;
 8000fea:	4b6a      	ldr	r3, [pc, #424]	@ (8001194 <network_configure_weights+0xe04>)
    conv2d_101_weights_array.format |= AI_FMT_FLAG_CONST;
 8000fec:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000ff0:	6011      	str	r1, [r2, #0]
    conv2d_101_weights_array.data = AI_PTR(g_network_weights_map[149] + 0);
 8000ff2:	f8d4 1254 	ldr.w	r1, [r4, #596]	@ 0x254
    conv2d_103_weights_array.data_start = AI_PTR(g_network_weights_map[153] + 0);
    conv2d_103_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_103_bias_array.data = AI_PTR(g_network_weights_map[154] + 0);
    conv2d_103_bias_array.data_start = AI_PTR(g_network_weights_map[154] + 0);
    conv2d_104_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_104_weights_array.data = AI_PTR(g_network_weights_map[155] + 0);
 8000ff6:	f8d4 026c 	ldr.w	r0, [r4, #620]	@ 0x26c
    conv2d_101_weights_array.data = AI_PTR(g_network_weights_map[149] + 0);
 8000ffa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_101_bias_array.format |= AI_FMT_FLAG_CONST;
 8000ffe:	6819      	ldr	r1, [r3, #0]
    conv2d_102_weights_array.format |= AI_FMT_FLAG_CONST;
 8001000:	4a65      	ldr	r2, [pc, #404]	@ (8001198 <network_configure_weights+0xe08>)
    conv2d_101_bias_array.format |= AI_FMT_FLAG_CONST;
 8001002:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001006:	6019      	str	r1, [r3, #0]
    conv2d_101_bias_array.data = AI_PTR(g_network_weights_map[150] + 0);
 8001008:	f8d4 1258 	ldr.w	r1, [r4, #600]	@ 0x258
 800100c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_102_weights_array.format |= AI_FMT_FLAG_CONST;
 8001010:	6811      	ldr	r1, [r2, #0]
    conv2d_102_bias_array.format |= AI_FMT_FLAG_CONST;
 8001012:	4b62      	ldr	r3, [pc, #392]	@ (800119c <network_configure_weights+0xe0c>)
    conv2d_102_weights_array.format |= AI_FMT_FLAG_CONST;
 8001014:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001018:	6011      	str	r1, [r2, #0]
    conv2d_102_weights_array.data = AI_PTR(g_network_weights_map[151] + 0);
 800101a:	f8d4 125c 	ldr.w	r1, [r4, #604]	@ 0x25c
 800101e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_102_bias_array.format |= AI_FMT_FLAG_CONST;
 8001022:	6819      	ldr	r1, [r3, #0]
    conv2d_103_weights_array.format |= AI_FMT_FLAG_CONST;
 8001024:	4a5e      	ldr	r2, [pc, #376]	@ (80011a0 <network_configure_weights+0xe10>)
    conv2d_102_bias_array.format |= AI_FMT_FLAG_CONST;
 8001026:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800102a:	6019      	str	r1, [r3, #0]
    conv2d_102_bias_array.data = AI_PTR(g_network_weights_map[152] + 0);
 800102c:	f8d4 1260 	ldr.w	r1, [r4, #608]	@ 0x260
 8001030:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_103_weights_array.format |= AI_FMT_FLAG_CONST;
 8001034:	6811      	ldr	r1, [r2, #0]
    conv2d_103_bias_array.format |= AI_FMT_FLAG_CONST;
 8001036:	4b5b      	ldr	r3, [pc, #364]	@ (80011a4 <network_configure_weights+0xe14>)
    conv2d_103_weights_array.format |= AI_FMT_FLAG_CONST;
 8001038:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800103c:	6011      	str	r1, [r2, #0]
    conv2d_103_weights_array.data = AI_PTR(g_network_weights_map[153] + 0);
 800103e:	f8d4 1264 	ldr.w	r1, [r4, #612]	@ 0x264
 8001042:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_103_bias_array.format |= AI_FMT_FLAG_CONST;
 8001046:	6819      	ldr	r1, [r3, #0]
    conv2d_104_weights_array.format |= AI_FMT_FLAG_CONST;
 8001048:	4a57      	ldr	r2, [pc, #348]	@ (80011a8 <network_configure_weights+0xe18>)
    conv2d_103_bias_array.format |= AI_FMT_FLAG_CONST;
 800104a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_104_weights_array.data = AI_PTR(g_network_weights_map[155] + 0);
 800104e:	6090      	str	r0, [r2, #8]
    conv2d_103_bias_array.format |= AI_FMT_FLAG_CONST;
 8001050:	6019      	str	r1, [r3, #0]
    conv2d_103_bias_array.data = AI_PTR(g_network_weights_map[154] + 0);
 8001052:	f8d4 1268 	ldr.w	r1, [r4, #616]	@ 0x268
 8001056:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_104_weights_array.format |= AI_FMT_FLAG_CONST;
 800105a:	6811      	ldr	r1, [r2, #0]
    conv2d_104_weights_array.data_start = AI_PTR(g_network_weights_map[155] + 0);
    conv2d_104_bias_array.format |= AI_FMT_FLAG_CONST;
 800105c:	4b53      	ldr	r3, [pc, #332]	@ (80011ac <network_configure_weights+0xe1c>)
    conv2d_104_weights_array.format |= AI_FMT_FLAG_CONST;
 800105e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001062:	6011      	str	r1, [r2, #0]
    conv2d_104_weights_array.data = AI_PTR(g_network_weights_map[155] + 0);
 8001064:	60d0      	str	r0, [r2, #12]
    conv2d_104_bias_array.format |= AI_FMT_FLAG_CONST;
 8001066:	6819      	ldr	r1, [r3, #0]
    conv2d_104_bias_array.data = AI_PTR(g_network_weights_map[156] + 0);
    conv2d_104_bias_array.data_start = AI_PTR(g_network_weights_map[156] + 0);
    conv2d_105_weights_array.format |= AI_FMT_FLAG_CONST;
 8001068:	4a51      	ldr	r2, [pc, #324]	@ (80011b0 <network_configure_weights+0xe20>)
    conv2d_104_bias_array.format |= AI_FMT_FLAG_CONST;
 800106a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800106e:	6019      	str	r1, [r3, #0]
    conv2d_104_bias_array.data = AI_PTR(g_network_weights_map[156] + 0);
 8001070:	f8d4 1270 	ldr.w	r1, [r4, #624]	@ 0x270
 8001074:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_105_weights_array.format |= AI_FMT_FLAG_CONST;
 8001078:	6811      	ldr	r1, [r2, #0]
    conv2d_105_weights_array.data = AI_PTR(g_network_weights_map[157] + 0);
    conv2d_105_weights_array.data_start = AI_PTR(g_network_weights_map[157] + 0);
    conv2d_105_bias_array.format |= AI_FMT_FLAG_CONST;
 800107a:	4b4e      	ldr	r3, [pc, #312]	@ (80011b4 <network_configure_weights+0xe24>)
    conv2d_105_weights_array.format |= AI_FMT_FLAG_CONST;
 800107c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001080:	6011      	str	r1, [r2, #0]
    conv2d_105_weights_array.data = AI_PTR(g_network_weights_map[157] + 0);
 8001082:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8001086:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_105_bias_array.format |= AI_FMT_FLAG_CONST;
 800108a:	6819      	ldr	r1, [r3, #0]
    conv2d_105_bias_array.data = AI_PTR(g_network_weights_map[158] + 0);
    conv2d_105_bias_array.data_start = AI_PTR(g_network_weights_map[158] + 0);
    conv2d_110_weights_array.format |= AI_FMT_FLAG_CONST;
 800108c:	4a4a      	ldr	r2, [pc, #296]	@ (80011b8 <network_configure_weights+0xe28>)
    conv2d_105_bias_array.format |= AI_FMT_FLAG_CONST;
 800108e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001092:	6019      	str	r1, [r3, #0]
    conv2d_105_bias_array.data = AI_PTR(g_network_weights_map[158] + 0);
 8001094:	f8d4 1278 	ldr.w	r1, [r4, #632]	@ 0x278
 8001098:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_110_weights_array.format |= AI_FMT_FLAG_CONST;
 800109c:	6811      	ldr	r1, [r2, #0]
    conv2d_110_weights_array.data = AI_PTR(g_network_weights_map[159] + 0);
    conv2d_110_weights_array.data_start = AI_PTR(g_network_weights_map[159] + 0);
    conv2d_110_bias_array.format |= AI_FMT_FLAG_CONST;
 800109e:	4b47      	ldr	r3, [pc, #284]	@ (80011bc <network_configure_weights+0xe2c>)
    conv2d_110_weights_array.format |= AI_FMT_FLAG_CONST;
 80010a0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80010a4:	6011      	str	r1, [r2, #0]
    conv2d_110_weights_array.data = AI_PTR(g_network_weights_map[159] + 0);
 80010a6:	f8d4 127c 	ldr.w	r1, [r4, #636]	@ 0x27c
 80010aa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_110_bias_array.format |= AI_FMT_FLAG_CONST;
 80010ae:	6819      	ldr	r1, [r3, #0]
    conv2d_110_bias_array.data = AI_PTR(g_network_weights_map[160] + 0);
    conv2d_110_bias_array.data_start = AI_PTR(g_network_weights_map[160] + 0);
    conv2d_111_weights_array.format |= AI_FMT_FLAG_CONST;
 80010b0:	4a43      	ldr	r2, [pc, #268]	@ (80011c0 <network_configure_weights+0xe30>)
    conv2d_110_bias_array.format |= AI_FMT_FLAG_CONST;
 80010b2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80010b6:	6019      	str	r1, [r3, #0]
    conv2d_110_bias_array.data = AI_PTR(g_network_weights_map[160] + 0);
 80010b8:	f8d4 1280 	ldr.w	r1, [r4, #640]	@ 0x280
 80010bc:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_111_weights_array.format |= AI_FMT_FLAG_CONST;
 80010c0:	6811      	ldr	r1, [r2, #0]
    conv2d_111_weights_array.data = AI_PTR(g_network_weights_map[161] + 0);
    conv2d_111_weights_array.data_start = AI_PTR(g_network_weights_map[161] + 0);
    conv2d_111_bias_array.format |= AI_FMT_FLAG_CONST;
 80010c2:	4b40      	ldr	r3, [pc, #256]	@ (80011c4 <network_configure_weights+0xe34>)
    conv2d_111_weights_array.format |= AI_FMT_FLAG_CONST;
 80010c4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80010c8:	6011      	str	r1, [r2, #0]
    conv2d_111_weights_array.data = AI_PTR(g_network_weights_map[161] + 0);
 80010ca:	f8d4 1284 	ldr.w	r1, [r4, #644]	@ 0x284
 80010ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_111_bias_array.format |= AI_FMT_FLAG_CONST;
 80010d2:	6819      	ldr	r1, [r3, #0]
    conv2d_111_bias_array.data = AI_PTR(g_network_weights_map[162] + 0);
    conv2d_111_bias_array.data_start = AI_PTR(g_network_weights_map[162] + 0);
    conv2d_122_weights_array.format |= AI_FMT_FLAG_CONST;
 80010d4:	4a3c      	ldr	r2, [pc, #240]	@ (80011c8 <network_configure_weights+0xe38>)
    conv2d_111_bias_array.format |= AI_FMT_FLAG_CONST;
 80010d6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80010da:	6019      	str	r1, [r3, #0]
    conv2d_111_bias_array.data = AI_PTR(g_network_weights_map[162] + 0);
 80010dc:	f8d4 1288 	ldr.w	r1, [r4, #648]	@ 0x288
    conv2d_123_bias_array.data_start = AI_PTR(g_network_weights_map[166] + 0);
    conv2d_124_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_124_weights_array.data = AI_PTR(g_network_weights_map[167] + 0);
    conv2d_124_weights_array.data_start = AI_PTR(g_network_weights_map[167] + 0);
    conv2d_124_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_124_bias_array.data = AI_PTR(g_network_weights_map[168] + 0);
 80010e0:	f8d4 02a0 	ldr.w	r0, [r4, #672]	@ 0x2a0
    conv2d_111_bias_array.data = AI_PTR(g_network_weights_map[162] + 0);
 80010e4:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_122_weights_array.format |= AI_FMT_FLAG_CONST;
 80010e8:	6811      	ldr	r1, [r2, #0]
    conv2d_122_bias_array.format |= AI_FMT_FLAG_CONST;
 80010ea:	4b38      	ldr	r3, [pc, #224]	@ (80011cc <network_configure_weights+0xe3c>)
    conv2d_122_weights_array.format |= AI_FMT_FLAG_CONST;
 80010ec:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80010f0:	6011      	str	r1, [r2, #0]
    conv2d_122_weights_array.data = AI_PTR(g_network_weights_map[163] + 0);
 80010f2:	f8d4 128c 	ldr.w	r1, [r4, #652]	@ 0x28c
 80010f6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_122_bias_array.format |= AI_FMT_FLAG_CONST;
 80010fa:	6819      	ldr	r1, [r3, #0]
    conv2d_123_weights_array.format |= AI_FMT_FLAG_CONST;
 80010fc:	4a34      	ldr	r2, [pc, #208]	@ (80011d0 <network_configure_weights+0xe40>)
    conv2d_122_bias_array.format |= AI_FMT_FLAG_CONST;
 80010fe:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001102:	6019      	str	r1, [r3, #0]
    conv2d_122_bias_array.data = AI_PTR(g_network_weights_map[164] + 0);
 8001104:	f8d4 1290 	ldr.w	r1, [r4, #656]	@ 0x290
 8001108:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_123_weights_array.format |= AI_FMT_FLAG_CONST;
 800110c:	6811      	ldr	r1, [r2, #0]
    conv2d_123_bias_array.format |= AI_FMT_FLAG_CONST;
 800110e:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <network_configure_weights+0xe44>)
    conv2d_123_weights_array.format |= AI_FMT_FLAG_CONST;
 8001110:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001114:	6011      	str	r1, [r2, #0]
    conv2d_123_weights_array.data = AI_PTR(g_network_weights_map[165] + 0);
 8001116:	f8d4 1294 	ldr.w	r1, [r4, #660]	@ 0x294
 800111a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_123_bias_array.format |= AI_FMT_FLAG_CONST;
 800111e:	6819      	ldr	r1, [r3, #0]
    conv2d_124_weights_array.format |= AI_FMT_FLAG_CONST;
 8001120:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <network_configure_weights+0xe48>)
    conv2d_123_bias_array.format |= AI_FMT_FLAG_CONST;
 8001122:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001126:	6019      	str	r1, [r3, #0]
    conv2d_123_bias_array.data = AI_PTR(g_network_weights_map[166] + 0);
 8001128:	f8d4 1298 	ldr.w	r1, [r4, #664]	@ 0x298
 800112c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8001130:	e054      	b.n	80011dc <network_configure_weights+0xe4c>
 8001132:	bf00      	nop
 8001134:	2400f9a0 	.word	0x2400f9a0
 8001138:	2400f990 	.word	0x2400f990
 800113c:	2400f980 	.word	0x2400f980
 8001140:	2400f970 	.word	0x2400f970
 8001144:	2400f960 	.word	0x2400f960
 8001148:	2400f950 	.word	0x2400f950
 800114c:	2400f940 	.word	0x2400f940
 8001150:	2400f930 	.word	0x2400f930
 8001154:	2400f920 	.word	0x2400f920
 8001158:	2400f910 	.word	0x2400f910
 800115c:	2400f900 	.word	0x2400f900
 8001160:	2400f8f0 	.word	0x2400f8f0
 8001164:	2400f8e0 	.word	0x2400f8e0
 8001168:	2400f8d0 	.word	0x2400f8d0
 800116c:	2400f8c0 	.word	0x2400f8c0
 8001170:	2400f8b0 	.word	0x2400f8b0
 8001174:	2400f8a0 	.word	0x2400f8a0
 8001178:	2400f890 	.word	0x2400f890
 800117c:	2400f880 	.word	0x2400f880
 8001180:	2400f870 	.word	0x2400f870
 8001184:	2400f860 	.word	0x2400f860
 8001188:	2400f850 	.word	0x2400f850
 800118c:	2400f840 	.word	0x2400f840
 8001190:	2400f830 	.word	0x2400f830
 8001194:	2400f820 	.word	0x2400f820
 8001198:	2400f810 	.word	0x2400f810
 800119c:	2400f800 	.word	0x2400f800
 80011a0:	2400f7f0 	.word	0x2400f7f0
 80011a4:	2400f7e0 	.word	0x2400f7e0
 80011a8:	2400f7d0 	.word	0x2400f7d0
 80011ac:	2400f7c0 	.word	0x2400f7c0
 80011b0:	2400f7b0 	.word	0x2400f7b0
 80011b4:	2400f7a0 	.word	0x2400f7a0
 80011b8:	2400f790 	.word	0x2400f790
 80011bc:	2400f780 	.word	0x2400f780
 80011c0:	2400f770 	.word	0x2400f770
 80011c4:	2400f760 	.word	0x2400f760
 80011c8:	2400f750 	.word	0x2400f750
 80011cc:	2400f740 	.word	0x2400f740
 80011d0:	2400f730 	.word	0x2400f730
 80011d4:	2400f720 	.word	0x2400f720
 80011d8:	2400f710 	.word	0x2400f710
    conv2d_124_weights_array.format |= AI_FMT_FLAG_CONST;
 80011dc:	6811      	ldr	r1, [r2, #0]
    conv2d_124_bias_array.format |= AI_FMT_FLAG_CONST;
 80011de:	4bbc      	ldr	r3, [pc, #752]	@ (80014d0 <network_configure_weights+0x1140>)
    conv2d_124_weights_array.format |= AI_FMT_FLAG_CONST;
 80011e0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_124_bias_array.data = AI_PTR(g_network_weights_map[168] + 0);
 80011e4:	6098      	str	r0, [r3, #8]
    conv2d_124_weights_array.format |= AI_FMT_FLAG_CONST;
 80011e6:	6011      	str	r1, [r2, #0]
    conv2d_124_weights_array.data = AI_PTR(g_network_weights_map[167] + 0);
 80011e8:	f8d4 129c 	ldr.w	r1, [r4, #668]	@ 0x29c
 80011ec:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_124_bias_array.format |= AI_FMT_FLAG_CONST;
 80011f0:	6819      	ldr	r1, [r3, #0]
    conv2d_124_bias_array.data_start = AI_PTR(g_network_weights_map[168] + 0);
    conv2d_125_weights_array.format |= AI_FMT_FLAG_CONST;
 80011f2:	4ab8      	ldr	r2, [pc, #736]	@ (80014d4 <network_configure_weights+0x1144>)
    conv2d_124_bias_array.format |= AI_FMT_FLAG_CONST;
 80011f4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80011f8:	6019      	str	r1, [r3, #0]
    conv2d_124_bias_array.data = AI_PTR(g_network_weights_map[168] + 0);
 80011fa:	60d8      	str	r0, [r3, #12]
    conv2d_125_weights_array.format |= AI_FMT_FLAG_CONST;
 80011fc:	6811      	ldr	r1, [r2, #0]
    conv2d_125_weights_array.data = AI_PTR(g_network_weights_map[169] + 0);
    conv2d_125_weights_array.data_start = AI_PTR(g_network_weights_map[169] + 0);
    conv2d_125_bias_array.format |= AI_FMT_FLAG_CONST;
 80011fe:	4bb6      	ldr	r3, [pc, #728]	@ (80014d8 <network_configure_weights+0x1148>)
    conv2d_125_weights_array.format |= AI_FMT_FLAG_CONST;
 8001200:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001204:	6011      	str	r1, [r2, #0]
    conv2d_125_weights_array.data = AI_PTR(g_network_weights_map[169] + 0);
 8001206:	f8d4 12a4 	ldr.w	r1, [r4, #676]	@ 0x2a4
 800120a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_125_bias_array.format |= AI_FMT_FLAG_CONST;
 800120e:	6819      	ldr	r1, [r3, #0]
    conv2d_125_bias_array.data = AI_PTR(g_network_weights_map[170] + 0);
    conv2d_125_bias_array.data_start = AI_PTR(g_network_weights_map[170] + 0);
    conv2d_126_weights_array.format |= AI_FMT_FLAG_CONST;
 8001210:	4ab2      	ldr	r2, [pc, #712]	@ (80014dc <network_configure_weights+0x114c>)
    conv2d_125_bias_array.format |= AI_FMT_FLAG_CONST;
 8001212:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001216:	6019      	str	r1, [r3, #0]
    conv2d_125_bias_array.data = AI_PTR(g_network_weights_map[170] + 0);
 8001218:	f8d4 12a8 	ldr.w	r1, [r4, #680]	@ 0x2a8
 800121c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_126_weights_array.format |= AI_FMT_FLAG_CONST;
 8001220:	6811      	ldr	r1, [r2, #0]
    conv2d_126_weights_array.data = AI_PTR(g_network_weights_map[171] + 0);
    conv2d_126_weights_array.data_start = AI_PTR(g_network_weights_map[171] + 0);
    conv2d_126_bias_array.format |= AI_FMT_FLAG_CONST;
 8001222:	4baf      	ldr	r3, [pc, #700]	@ (80014e0 <network_configure_weights+0x1150>)
    conv2d_126_weights_array.format |= AI_FMT_FLAG_CONST;
 8001224:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001228:	6011      	str	r1, [r2, #0]
    conv2d_126_weights_array.data = AI_PTR(g_network_weights_map[171] + 0);
 800122a:	f8d4 12ac 	ldr.w	r1, [r4, #684]	@ 0x2ac
 800122e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_126_bias_array.format |= AI_FMT_FLAG_CONST;
 8001232:	6819      	ldr	r1, [r3, #0]
    conv2d_126_bias_array.data = AI_PTR(g_network_weights_map[172] + 0);
    conv2d_126_bias_array.data_start = AI_PTR(g_network_weights_map[172] + 0);
    conv2d_127_weights_array.format |= AI_FMT_FLAG_CONST;
 8001234:	4aab      	ldr	r2, [pc, #684]	@ (80014e4 <network_configure_weights+0x1154>)
    conv2d_126_bias_array.format |= AI_FMT_FLAG_CONST;
 8001236:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800123a:	6019      	str	r1, [r3, #0]
    conv2d_126_bias_array.data = AI_PTR(g_network_weights_map[172] + 0);
 800123c:	f8d4 12b0 	ldr.w	r1, [r4, #688]	@ 0x2b0
 8001240:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_127_weights_array.format |= AI_FMT_FLAG_CONST;
 8001244:	6811      	ldr	r1, [r2, #0]
    conv2d_127_weights_array.data = AI_PTR(g_network_weights_map[173] + 0);
    conv2d_127_weights_array.data_start = AI_PTR(g_network_weights_map[173] + 0);
    conv2d_127_bias_array.format |= AI_FMT_FLAG_CONST;
 8001246:	4ba8      	ldr	r3, [pc, #672]	@ (80014e8 <network_configure_weights+0x1158>)
    conv2d_127_weights_array.format |= AI_FMT_FLAG_CONST;
 8001248:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800124c:	6011      	str	r1, [r2, #0]
    conv2d_127_weights_array.data = AI_PTR(g_network_weights_map[173] + 0);
 800124e:	f8d4 12b4 	ldr.w	r1, [r4, #692]	@ 0x2b4
 8001252:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_127_bias_array.format |= AI_FMT_FLAG_CONST;
 8001256:	6819      	ldr	r1, [r3, #0]
    conv2d_127_bias_array.data = AI_PTR(g_network_weights_map[174] + 0);
    conv2d_127_bias_array.data_start = AI_PTR(g_network_weights_map[174] + 0);
    conv2d_128_weights_array.format |= AI_FMT_FLAG_CONST;
 8001258:	4aa4      	ldr	r2, [pc, #656]	@ (80014ec <network_configure_weights+0x115c>)
    conv2d_127_bias_array.format |= AI_FMT_FLAG_CONST;
 800125a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800125e:	6019      	str	r1, [r3, #0]
    conv2d_127_bias_array.data = AI_PTR(g_network_weights_map[174] + 0);
 8001260:	f8d4 12b8 	ldr.w	r1, [r4, #696]	@ 0x2b8
 8001264:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_128_weights_array.format |= AI_FMT_FLAG_CONST;
 8001268:	6811      	ldr	r1, [r2, #0]
    conv2d_128_weights_array.data = AI_PTR(g_network_weights_map[175] + 0);
    conv2d_128_weights_array.data_start = AI_PTR(g_network_weights_map[175] + 0);
    conv2d_128_bias_array.format |= AI_FMT_FLAG_CONST;
 800126a:	4ba1      	ldr	r3, [pc, #644]	@ (80014f0 <network_configure_weights+0x1160>)
    conv2d_128_weights_array.format |= AI_FMT_FLAG_CONST;
 800126c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001270:	6011      	str	r1, [r2, #0]
    conv2d_128_weights_array.data = AI_PTR(g_network_weights_map[175] + 0);
 8001272:	f8d4 12bc 	ldr.w	r1, [r4, #700]	@ 0x2bc
    conv2d_130_weights_array.data_start = AI_PTR(g_network_weights_map[179] + 0);
    conv2d_130_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_130_bias_array.data = AI_PTR(g_network_weights_map[180] + 0);
    conv2d_130_bias_array.data_start = AI_PTR(g_network_weights_map[180] + 0);
    conv2d_131_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_131_weights_array.data = AI_PTR(g_network_weights_map[181] + 0);
 8001276:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
    conv2d_128_weights_array.data = AI_PTR(g_network_weights_map[175] + 0);
 800127a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_128_bias_array.format |= AI_FMT_FLAG_CONST;
 800127e:	6819      	ldr	r1, [r3, #0]
    conv2d_129_weights_array.format |= AI_FMT_FLAG_CONST;
 8001280:	4a9c      	ldr	r2, [pc, #624]	@ (80014f4 <network_configure_weights+0x1164>)
    conv2d_128_bias_array.format |= AI_FMT_FLAG_CONST;
 8001282:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001286:	6019      	str	r1, [r3, #0]
    conv2d_128_bias_array.data = AI_PTR(g_network_weights_map[176] + 0);
 8001288:	f8d4 12c0 	ldr.w	r1, [r4, #704]	@ 0x2c0
 800128c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_129_weights_array.format |= AI_FMT_FLAG_CONST;
 8001290:	6811      	ldr	r1, [r2, #0]
    conv2d_129_bias_array.format |= AI_FMT_FLAG_CONST;
 8001292:	4b99      	ldr	r3, [pc, #612]	@ (80014f8 <network_configure_weights+0x1168>)
    conv2d_129_weights_array.format |= AI_FMT_FLAG_CONST;
 8001294:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001298:	6011      	str	r1, [r2, #0]
    conv2d_129_weights_array.data = AI_PTR(g_network_weights_map[177] + 0);
 800129a:	f8d4 12c4 	ldr.w	r1, [r4, #708]	@ 0x2c4
 800129e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_129_bias_array.format |= AI_FMT_FLAG_CONST;
 80012a2:	6819      	ldr	r1, [r3, #0]
    conv2d_130_weights_array.format |= AI_FMT_FLAG_CONST;
 80012a4:	4a95      	ldr	r2, [pc, #596]	@ (80014fc <network_configure_weights+0x116c>)
    conv2d_129_bias_array.format |= AI_FMT_FLAG_CONST;
 80012a6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80012aa:	6019      	str	r1, [r3, #0]
    conv2d_129_bias_array.data = AI_PTR(g_network_weights_map[178] + 0);
 80012ac:	f8d4 12c8 	ldr.w	r1, [r4, #712]	@ 0x2c8
 80012b0:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_130_weights_array.format |= AI_FMT_FLAG_CONST;
 80012b4:	6811      	ldr	r1, [r2, #0]
    conv2d_130_bias_array.format |= AI_FMT_FLAG_CONST;
 80012b6:	4b92      	ldr	r3, [pc, #584]	@ (8001500 <network_configure_weights+0x1170>)
    conv2d_130_weights_array.format |= AI_FMT_FLAG_CONST;
 80012b8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80012bc:	6011      	str	r1, [r2, #0]
    conv2d_130_weights_array.data = AI_PTR(g_network_weights_map[179] + 0);
 80012be:	f8d4 12cc 	ldr.w	r1, [r4, #716]	@ 0x2cc
 80012c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_130_bias_array.format |= AI_FMT_FLAG_CONST;
 80012c6:	6819      	ldr	r1, [r3, #0]
    conv2d_131_weights_array.format |= AI_FMT_FLAG_CONST;
 80012c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001504 <network_configure_weights+0x1174>)
    conv2d_130_bias_array.format |= AI_FMT_FLAG_CONST;
 80012ca:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_131_weights_array.data = AI_PTR(g_network_weights_map[181] + 0);
 80012ce:	6090      	str	r0, [r2, #8]
    conv2d_130_bias_array.format |= AI_FMT_FLAG_CONST;
 80012d0:	6019      	str	r1, [r3, #0]
    conv2d_130_bias_array.data = AI_PTR(g_network_weights_map[180] + 0);
 80012d2:	f8d4 12d0 	ldr.w	r1, [r4, #720]	@ 0x2d0
 80012d6:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_131_weights_array.format |= AI_FMT_FLAG_CONST;
 80012da:	6811      	ldr	r1, [r2, #0]
    conv2d_131_weights_array.data_start = AI_PTR(g_network_weights_map[181] + 0);
    conv2d_131_bias_array.format |= AI_FMT_FLAG_CONST;
 80012dc:	4b8a      	ldr	r3, [pc, #552]	@ (8001508 <network_configure_weights+0x1178>)
    conv2d_131_weights_array.format |= AI_FMT_FLAG_CONST;
 80012de:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80012e2:	6011      	str	r1, [r2, #0]
    conv2d_131_weights_array.data = AI_PTR(g_network_weights_map[181] + 0);
 80012e4:	60d0      	str	r0, [r2, #12]
    conv2d_131_bias_array.format |= AI_FMT_FLAG_CONST;
 80012e6:	6819      	ldr	r1, [r3, #0]
    conv2d_131_bias_array.data = AI_PTR(g_network_weights_map[182] + 0);
    conv2d_131_bias_array.data_start = AI_PTR(g_network_weights_map[182] + 0);
    conv2d_132_weights_array.format |= AI_FMT_FLAG_CONST;
 80012e8:	4a88      	ldr	r2, [pc, #544]	@ (800150c <network_configure_weights+0x117c>)
    conv2d_131_bias_array.format |= AI_FMT_FLAG_CONST;
 80012ea:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80012ee:	6019      	str	r1, [r3, #0]
    conv2d_131_bias_array.data = AI_PTR(g_network_weights_map[182] + 0);
 80012f0:	f8d4 12d8 	ldr.w	r1, [r4, #728]	@ 0x2d8
 80012f4:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_132_weights_array.format |= AI_FMT_FLAG_CONST;
 80012f8:	6811      	ldr	r1, [r2, #0]
    conv2d_132_weights_array.data = AI_PTR(g_network_weights_map[183] + 0);
    conv2d_132_weights_array.data_start = AI_PTR(g_network_weights_map[183] + 0);
    conv2d_132_bias_array.format |= AI_FMT_FLAG_CONST;
 80012fa:	4b85      	ldr	r3, [pc, #532]	@ (8001510 <network_configure_weights+0x1180>)
    conv2d_132_weights_array.format |= AI_FMT_FLAG_CONST;
 80012fc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001300:	6011      	str	r1, [r2, #0]
    conv2d_132_weights_array.data = AI_PTR(g_network_weights_map[183] + 0);
 8001302:	f8d4 12dc 	ldr.w	r1, [r4, #732]	@ 0x2dc
 8001306:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_132_bias_array.format |= AI_FMT_FLAG_CONST;
 800130a:	6819      	ldr	r1, [r3, #0]
    conv2d_132_bias_array.data = AI_PTR(g_network_weights_map[184] + 0);
    conv2d_132_bias_array.data_start = AI_PTR(g_network_weights_map[184] + 0);
    conv2d_133_weights_array.format |= AI_FMT_FLAG_CONST;
 800130c:	4a81      	ldr	r2, [pc, #516]	@ (8001514 <network_configure_weights+0x1184>)
    conv2d_132_bias_array.format |= AI_FMT_FLAG_CONST;
 800130e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001312:	6019      	str	r1, [r3, #0]
    conv2d_132_bias_array.data = AI_PTR(g_network_weights_map[184] + 0);
 8001314:	f8d4 12e0 	ldr.w	r1, [r4, #736]	@ 0x2e0
 8001318:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_133_weights_array.format |= AI_FMT_FLAG_CONST;
 800131c:	6811      	ldr	r1, [r2, #0]
    conv2d_133_weights_array.data = AI_PTR(g_network_weights_map[185] + 0);
    conv2d_133_weights_array.data_start = AI_PTR(g_network_weights_map[185] + 0);
    conv2d_133_bias_array.format |= AI_FMT_FLAG_CONST;
 800131e:	4b7e      	ldr	r3, [pc, #504]	@ (8001518 <network_configure_weights+0x1188>)
    conv2d_133_weights_array.format |= AI_FMT_FLAG_CONST;
 8001320:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001324:	6011      	str	r1, [r2, #0]
    conv2d_133_weights_array.data = AI_PTR(g_network_weights_map[185] + 0);
 8001326:	f8d4 12e4 	ldr.w	r1, [r4, #740]	@ 0x2e4
 800132a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_133_bias_array.format |= AI_FMT_FLAG_CONST;
 800132e:	6819      	ldr	r1, [r3, #0]
    conv2d_133_bias_array.data = AI_PTR(g_network_weights_map[186] + 0);
    conv2d_133_bias_array.data_start = AI_PTR(g_network_weights_map[186] + 0);
    conv2d_138_weights_array.format |= AI_FMT_FLAG_CONST;
 8001330:	4a7a      	ldr	r2, [pc, #488]	@ (800151c <network_configure_weights+0x118c>)
    conv2d_133_bias_array.format |= AI_FMT_FLAG_CONST;
 8001332:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001336:	6019      	str	r1, [r3, #0]
    conv2d_133_bias_array.data = AI_PTR(g_network_weights_map[186] + 0);
 8001338:	f8d4 12e8 	ldr.w	r1, [r4, #744]	@ 0x2e8
 800133c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_138_weights_array.format |= AI_FMT_FLAG_CONST;
 8001340:	6811      	ldr	r1, [r2, #0]
    conv2d_138_weights_array.data = AI_PTR(g_network_weights_map[187] + 0);
    conv2d_138_weights_array.data_start = AI_PTR(g_network_weights_map[187] + 0);
    conv2d_138_bias_array.format |= AI_FMT_FLAG_CONST;
 8001342:	4b77      	ldr	r3, [pc, #476]	@ (8001520 <network_configure_weights+0x1190>)
    conv2d_138_weights_array.format |= AI_FMT_FLAG_CONST;
 8001344:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001348:	6011      	str	r1, [r2, #0]
    conv2d_138_weights_array.data = AI_PTR(g_network_weights_map[187] + 0);
 800134a:	f8d4 12ec 	ldr.w	r1, [r4, #748]	@ 0x2ec
 800134e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_138_bias_array.format |= AI_FMT_FLAG_CONST;
 8001352:	6819      	ldr	r1, [r3, #0]
    conv2d_138_bias_array.data = AI_PTR(g_network_weights_map[188] + 0);
    conv2d_138_bias_array.data_start = AI_PTR(g_network_weights_map[188] + 0);
    conv2d_139_weights_array.format |= AI_FMT_FLAG_CONST;
 8001354:	4a73      	ldr	r2, [pc, #460]	@ (8001524 <network_configure_weights+0x1194>)
    conv2d_138_bias_array.format |= AI_FMT_FLAG_CONST;
 8001356:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800135a:	6019      	str	r1, [r3, #0]
    conv2d_138_bias_array.data = AI_PTR(g_network_weights_map[188] + 0);
 800135c:	f8d4 12f0 	ldr.w	r1, [r4, #752]	@ 0x2f0
    conv2d_153_bias_array.data_start = AI_PTR(g_network_weights_map[192] + 0);
    conv2d_154_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_154_weights_array.data = AI_PTR(g_network_weights_map[193] + 0);
    conv2d_154_weights_array.data_start = AI_PTR(g_network_weights_map[193] + 0);
    conv2d_154_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_154_bias_array.data = AI_PTR(g_network_weights_map[194] + 0);
 8001360:	f8d4 0308 	ldr.w	r0, [r4, #776]	@ 0x308
    conv2d_138_bias_array.data = AI_PTR(g_network_weights_map[188] + 0);
 8001364:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_139_weights_array.format |= AI_FMT_FLAG_CONST;
 8001368:	6811      	ldr	r1, [r2, #0]
    conv2d_139_bias_array.format |= AI_FMT_FLAG_CONST;
 800136a:	4b6f      	ldr	r3, [pc, #444]	@ (8001528 <network_configure_weights+0x1198>)
    conv2d_139_weights_array.format |= AI_FMT_FLAG_CONST;
 800136c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001370:	6011      	str	r1, [r2, #0]
    conv2d_139_weights_array.data = AI_PTR(g_network_weights_map[189] + 0);
 8001372:	f8d4 12f4 	ldr.w	r1, [r4, #756]	@ 0x2f4
 8001376:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_139_bias_array.format |= AI_FMT_FLAG_CONST;
 800137a:	6819      	ldr	r1, [r3, #0]
    conv2d_153_weights_array.format |= AI_FMT_FLAG_CONST;
 800137c:	4a6b      	ldr	r2, [pc, #428]	@ (800152c <network_configure_weights+0x119c>)
    conv2d_139_bias_array.format |= AI_FMT_FLAG_CONST;
 800137e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001382:	6019      	str	r1, [r3, #0]
    conv2d_139_bias_array.data = AI_PTR(g_network_weights_map[190] + 0);
 8001384:	f8d4 12f8 	ldr.w	r1, [r4, #760]	@ 0x2f8
 8001388:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_153_weights_array.format |= AI_FMT_FLAG_CONST;
 800138c:	6811      	ldr	r1, [r2, #0]
    conv2d_153_bias_array.format |= AI_FMT_FLAG_CONST;
 800138e:	4b68      	ldr	r3, [pc, #416]	@ (8001530 <network_configure_weights+0x11a0>)
    conv2d_153_weights_array.format |= AI_FMT_FLAG_CONST;
 8001390:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001394:	6011      	str	r1, [r2, #0]
    conv2d_153_weights_array.data = AI_PTR(g_network_weights_map[191] + 0);
 8001396:	f8d4 12fc 	ldr.w	r1, [r4, #764]	@ 0x2fc
 800139a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_153_bias_array.format |= AI_FMT_FLAG_CONST;
 800139e:	6819      	ldr	r1, [r3, #0]
    conv2d_154_weights_array.format |= AI_FMT_FLAG_CONST;
 80013a0:	4a64      	ldr	r2, [pc, #400]	@ (8001534 <network_configure_weights+0x11a4>)
    conv2d_153_bias_array.format |= AI_FMT_FLAG_CONST;
 80013a2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80013a6:	6019      	str	r1, [r3, #0]
    conv2d_153_bias_array.data = AI_PTR(g_network_weights_map[192] + 0);
 80013a8:	f8d4 1300 	ldr.w	r1, [r4, #768]	@ 0x300
 80013ac:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_154_weights_array.format |= AI_FMT_FLAG_CONST;
 80013b0:	6811      	ldr	r1, [r2, #0]
    conv2d_154_bias_array.format |= AI_FMT_FLAG_CONST;
 80013b2:	4b61      	ldr	r3, [pc, #388]	@ (8001538 <network_configure_weights+0x11a8>)
    conv2d_154_weights_array.format |= AI_FMT_FLAG_CONST;
 80013b4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_154_bias_array.data = AI_PTR(g_network_weights_map[194] + 0);
 80013b8:	6098      	str	r0, [r3, #8]
    conv2d_154_weights_array.format |= AI_FMT_FLAG_CONST;
 80013ba:	6011      	str	r1, [r2, #0]
    conv2d_154_weights_array.data = AI_PTR(g_network_weights_map[193] + 0);
 80013bc:	f8d4 1304 	ldr.w	r1, [r4, #772]	@ 0x304
 80013c0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_154_bias_array.format |= AI_FMT_FLAG_CONST;
 80013c4:	6819      	ldr	r1, [r3, #0]
    conv2d_154_bias_array.data_start = AI_PTR(g_network_weights_map[194] + 0);
    conv2d_155_weights_array.format |= AI_FMT_FLAG_CONST;
 80013c6:	4a5d      	ldr	r2, [pc, #372]	@ (800153c <network_configure_weights+0x11ac>)
    conv2d_154_bias_array.format |= AI_FMT_FLAG_CONST;
 80013c8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80013cc:	6019      	str	r1, [r3, #0]
    conv2d_154_bias_array.data = AI_PTR(g_network_weights_map[194] + 0);
 80013ce:	60d8      	str	r0, [r3, #12]
    conv2d_155_weights_array.format |= AI_FMT_FLAG_CONST;
 80013d0:	6811      	ldr	r1, [r2, #0]
    conv2d_155_weights_array.data = AI_PTR(g_network_weights_map[195] + 0);
    conv2d_155_weights_array.data_start = AI_PTR(g_network_weights_map[195] + 0);
    conv2d_155_bias_array.format |= AI_FMT_FLAG_CONST;
 80013d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001540 <network_configure_weights+0x11b0>)
    conv2d_155_weights_array.format |= AI_FMT_FLAG_CONST;
 80013d4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80013d8:	6011      	str	r1, [r2, #0]
    conv2d_155_weights_array.data = AI_PTR(g_network_weights_map[195] + 0);
 80013da:	f8d4 130c 	ldr.w	r1, [r4, #780]	@ 0x30c
 80013de:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_155_bias_array.format |= AI_FMT_FLAG_CONST;
 80013e2:	6819      	ldr	r1, [r3, #0]
    conv2d_155_bias_array.data = AI_PTR(g_network_weights_map[196] + 0);
    conv2d_155_bias_array.data_start = AI_PTR(g_network_weights_map[196] + 0);
    conv2d_156_weights_array.format |= AI_FMT_FLAG_CONST;
 80013e4:	4a57      	ldr	r2, [pc, #348]	@ (8001544 <network_configure_weights+0x11b4>)
    conv2d_155_bias_array.format |= AI_FMT_FLAG_CONST;
 80013e6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80013ea:	6019      	str	r1, [r3, #0]
    conv2d_155_bias_array.data = AI_PTR(g_network_weights_map[196] + 0);
 80013ec:	f8d4 1310 	ldr.w	r1, [r4, #784]	@ 0x310
 80013f0:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_156_weights_array.format |= AI_FMT_FLAG_CONST;
 80013f4:	6811      	ldr	r1, [r2, #0]
    conv2d_156_weights_array.data = AI_PTR(g_network_weights_map[197] + 0);
    conv2d_156_weights_array.data_start = AI_PTR(g_network_weights_map[197] + 0);
    conv2d_156_bias_array.format |= AI_FMT_FLAG_CONST;
 80013f6:	4b54      	ldr	r3, [pc, #336]	@ (8001548 <network_configure_weights+0x11b8>)
    conv2d_156_weights_array.format |= AI_FMT_FLAG_CONST;
 80013f8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80013fc:	6011      	str	r1, [r2, #0]
    conv2d_156_weights_array.data = AI_PTR(g_network_weights_map[197] + 0);
 80013fe:	f8d4 1314 	ldr.w	r1, [r4, #788]	@ 0x314
 8001402:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_156_bias_array.format |= AI_FMT_FLAG_CONST;
 8001406:	6819      	ldr	r1, [r3, #0]
    conv2d_156_bias_array.data = AI_PTR(g_network_weights_map[198] + 0);
    conv2d_156_bias_array.data_start = AI_PTR(g_network_weights_map[198] + 0);
    conv2d_157_weights_array.format |= AI_FMT_FLAG_CONST;
 8001408:	4a50      	ldr	r2, [pc, #320]	@ (800154c <network_configure_weights+0x11bc>)
    conv2d_156_bias_array.format |= AI_FMT_FLAG_CONST;
 800140a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800140e:	6019      	str	r1, [r3, #0]
    conv2d_156_bias_array.data = AI_PTR(g_network_weights_map[198] + 0);
 8001410:	f8d4 1318 	ldr.w	r1, [r4, #792]	@ 0x318
 8001414:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_157_weights_array.format |= AI_FMT_FLAG_CONST;
 8001418:	6811      	ldr	r1, [r2, #0]
    conv2d_157_weights_array.data = AI_PTR(g_network_weights_map[199] + 0);
    conv2d_157_weights_array.data_start = AI_PTR(g_network_weights_map[199] + 0);
    conv2d_157_bias_array.format |= AI_FMT_FLAG_CONST;
 800141a:	4b4d      	ldr	r3, [pc, #308]	@ (8001550 <network_configure_weights+0x11c0>)
    conv2d_157_weights_array.format |= AI_FMT_FLAG_CONST;
 800141c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001420:	6011      	str	r1, [r2, #0]
    conv2d_157_weights_array.data = AI_PTR(g_network_weights_map[199] + 0);
 8001422:	f8d4 131c 	ldr.w	r1, [r4, #796]	@ 0x31c
 8001426:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_157_bias_array.format |= AI_FMT_FLAG_CONST;
 800142a:	6819      	ldr	r1, [r3, #0]
    conv2d_157_bias_array.data = AI_PTR(g_network_weights_map[200] + 0);
    conv2d_157_bias_array.data_start = AI_PTR(g_network_weights_map[200] + 0);
    conv2d_158_weights_array.format |= AI_FMT_FLAG_CONST;
 800142c:	4a49      	ldr	r2, [pc, #292]	@ (8001554 <network_configure_weights+0x11c4>)
    conv2d_157_bias_array.format |= AI_FMT_FLAG_CONST;
 800142e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001432:	6019      	str	r1, [r3, #0]
    conv2d_157_bias_array.data = AI_PTR(g_network_weights_map[200] + 0);
 8001434:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 8001438:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_158_weights_array.format |= AI_FMT_FLAG_CONST;
 800143c:	6811      	ldr	r1, [r2, #0]
    conv2d_158_weights_array.data = AI_PTR(g_network_weights_map[201] + 0);
    conv2d_158_weights_array.data_start = AI_PTR(g_network_weights_map[201] + 0);
    conv2d_158_bias_array.format |= AI_FMT_FLAG_CONST;
 800143e:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <network_configure_weights+0x11c8>)
    conv2d_158_weights_array.format |= AI_FMT_FLAG_CONST;
 8001440:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001444:	6011      	str	r1, [r2, #0]
    conv2d_158_weights_array.data = AI_PTR(g_network_weights_map[201] + 0);
 8001446:	f8d4 1324 	ldr.w	r1, [r4, #804]	@ 0x324
    conv2d_160_weights_array.data_start = AI_PTR(g_network_weights_map[205] + 0);
    conv2d_160_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_160_bias_array.data = AI_PTR(g_network_weights_map[206] + 0);
    conv2d_160_bias_array.data_start = AI_PTR(g_network_weights_map[206] + 0);
    conv2d_161_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_161_weights_array.data = AI_PTR(g_network_weights_map[207] + 0);
 800144a:	f8d4 033c 	ldr.w	r0, [r4, #828]	@ 0x33c
    conv2d_158_weights_array.data = AI_PTR(g_network_weights_map[201] + 0);
 800144e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_158_bias_array.format |= AI_FMT_FLAG_CONST;
 8001452:	6819      	ldr	r1, [r3, #0]
    conv2d_159_weights_array.format |= AI_FMT_FLAG_CONST;
 8001454:	4a41      	ldr	r2, [pc, #260]	@ (800155c <network_configure_weights+0x11cc>)
    conv2d_158_bias_array.format |= AI_FMT_FLAG_CONST;
 8001456:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800145a:	6019      	str	r1, [r3, #0]
    conv2d_158_bias_array.data = AI_PTR(g_network_weights_map[202] + 0);
 800145c:	f8d4 1328 	ldr.w	r1, [r4, #808]	@ 0x328
 8001460:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_159_weights_array.format |= AI_FMT_FLAG_CONST;
 8001464:	6811      	ldr	r1, [r2, #0]
    conv2d_159_bias_array.format |= AI_FMT_FLAG_CONST;
 8001466:	4b3e      	ldr	r3, [pc, #248]	@ (8001560 <network_configure_weights+0x11d0>)
    conv2d_159_weights_array.format |= AI_FMT_FLAG_CONST;
 8001468:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800146c:	6011      	str	r1, [r2, #0]
    conv2d_159_weights_array.data = AI_PTR(g_network_weights_map[203] + 0);
 800146e:	f8d4 132c 	ldr.w	r1, [r4, #812]	@ 0x32c
 8001472:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_159_bias_array.format |= AI_FMT_FLAG_CONST;
 8001476:	6819      	ldr	r1, [r3, #0]
    conv2d_160_weights_array.format |= AI_FMT_FLAG_CONST;
 8001478:	4a3a      	ldr	r2, [pc, #232]	@ (8001564 <network_configure_weights+0x11d4>)
    conv2d_159_bias_array.format |= AI_FMT_FLAG_CONST;
 800147a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800147e:	6019      	str	r1, [r3, #0]
    conv2d_159_bias_array.data = AI_PTR(g_network_weights_map[204] + 0);
 8001480:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8001484:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_160_weights_array.format |= AI_FMT_FLAG_CONST;
 8001488:	6811      	ldr	r1, [r2, #0]
    conv2d_160_bias_array.format |= AI_FMT_FLAG_CONST;
 800148a:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <network_configure_weights+0x11d8>)
    conv2d_160_weights_array.format |= AI_FMT_FLAG_CONST;
 800148c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001490:	6011      	str	r1, [r2, #0]
    conv2d_160_weights_array.data = AI_PTR(g_network_weights_map[205] + 0);
 8001492:	f8d4 1334 	ldr.w	r1, [r4, #820]	@ 0x334
 8001496:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_160_bias_array.format |= AI_FMT_FLAG_CONST;
 800149a:	6819      	ldr	r1, [r3, #0]
    conv2d_161_weights_array.format |= AI_FMT_FLAG_CONST;
 800149c:	4a33      	ldr	r2, [pc, #204]	@ (800156c <network_configure_weights+0x11dc>)
    conv2d_160_bias_array.format |= AI_FMT_FLAG_CONST;
 800149e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_161_weights_array.data = AI_PTR(g_network_weights_map[207] + 0);
 80014a2:	6090      	str	r0, [r2, #8]
    conv2d_160_bias_array.format |= AI_FMT_FLAG_CONST;
 80014a4:	6019      	str	r1, [r3, #0]
    conv2d_160_bias_array.data = AI_PTR(g_network_weights_map[206] + 0);
 80014a6:	f8d4 1338 	ldr.w	r1, [r4, #824]	@ 0x338
 80014aa:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_161_weights_array.format |= AI_FMT_FLAG_CONST;
 80014ae:	6811      	ldr	r1, [r2, #0]
    conv2d_161_weights_array.data_start = AI_PTR(g_network_weights_map[207] + 0);
    conv2d_161_bias_array.format |= AI_FMT_FLAG_CONST;
 80014b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001570 <network_configure_weights+0x11e0>)
    conv2d_161_weights_array.format |= AI_FMT_FLAG_CONST;
 80014b2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80014b6:	6011      	str	r1, [r2, #0]
    conv2d_161_weights_array.data = AI_PTR(g_network_weights_map[207] + 0);
 80014b8:	60d0      	str	r0, [r2, #12]
    conv2d_161_bias_array.format |= AI_FMT_FLAG_CONST;
 80014ba:	6819      	ldr	r1, [r3, #0]
    conv2d_161_bias_array.data = AI_PTR(g_network_weights_map[208] + 0);
    conv2d_161_bias_array.data_start = AI_PTR(g_network_weights_map[208] + 0);
    conv2d_162_weights_array.format |= AI_FMT_FLAG_CONST;
 80014bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <network_configure_weights+0x11e4>)
    conv2d_161_bias_array.format |= AI_FMT_FLAG_CONST;
 80014be:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80014c2:	6019      	str	r1, [r3, #0]
    conv2d_161_bias_array.data = AI_PTR(g_network_weights_map[208] + 0);
 80014c4:	f8d4 1340 	ldr.w	r1, [r4, #832]	@ 0x340
 80014c8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80014cc:	e054      	b.n	8001578 <network_configure_weights+0x11e8>
 80014ce:	bf00      	nop
 80014d0:	2400f700 	.word	0x2400f700
 80014d4:	2400f6f0 	.word	0x2400f6f0
 80014d8:	2400f6e0 	.word	0x2400f6e0
 80014dc:	2400f6d0 	.word	0x2400f6d0
 80014e0:	2400f6c0 	.word	0x2400f6c0
 80014e4:	2400f6b0 	.word	0x2400f6b0
 80014e8:	2400f6a0 	.word	0x2400f6a0
 80014ec:	2400f690 	.word	0x2400f690
 80014f0:	2400f680 	.word	0x2400f680
 80014f4:	2400f670 	.word	0x2400f670
 80014f8:	2400f660 	.word	0x2400f660
 80014fc:	2400f650 	.word	0x2400f650
 8001500:	2400f640 	.word	0x2400f640
 8001504:	2400f630 	.word	0x2400f630
 8001508:	2400f620 	.word	0x2400f620
 800150c:	2400f610 	.word	0x2400f610
 8001510:	2400f600 	.word	0x2400f600
 8001514:	2400f5f0 	.word	0x2400f5f0
 8001518:	2400f5e0 	.word	0x2400f5e0
 800151c:	2400f5d0 	.word	0x2400f5d0
 8001520:	2400f5c0 	.word	0x2400f5c0
 8001524:	2400f5b0 	.word	0x2400f5b0
 8001528:	2400f5a0 	.word	0x2400f5a0
 800152c:	2400f590 	.word	0x2400f590
 8001530:	2400f580 	.word	0x2400f580
 8001534:	2400f570 	.word	0x2400f570
 8001538:	2400f560 	.word	0x2400f560
 800153c:	2400f550 	.word	0x2400f550
 8001540:	2400f540 	.word	0x2400f540
 8001544:	2400f530 	.word	0x2400f530
 8001548:	2400f520 	.word	0x2400f520
 800154c:	2400f510 	.word	0x2400f510
 8001550:	2400f500 	.word	0x2400f500
 8001554:	2400f4f0 	.word	0x2400f4f0
 8001558:	2400f4e0 	.word	0x2400f4e0
 800155c:	2400f4d0 	.word	0x2400f4d0
 8001560:	2400f4c0 	.word	0x2400f4c0
 8001564:	2400f4b0 	.word	0x2400f4b0
 8001568:	2400f4a0 	.word	0x2400f4a0
 800156c:	2400f490 	.word	0x2400f490
 8001570:	2400f480 	.word	0x2400f480
 8001574:	2400f470 	.word	0x2400f470
    conv2d_162_weights_array.format |= AI_FMT_FLAG_CONST;
 8001578:	6811      	ldr	r1, [r2, #0]
    conv2d_162_weights_array.data = AI_PTR(g_network_weights_map[209] + 0);
    conv2d_162_weights_array.data_start = AI_PTR(g_network_weights_map[209] + 0);
    conv2d_162_bias_array.format |= AI_FMT_FLAG_CONST;
 800157a:	4bad      	ldr	r3, [pc, #692]	@ (8001830 <network_configure_weights+0x14a0>)
    conv2d_162_weights_array.format |= AI_FMT_FLAG_CONST;
 800157c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001580:	6011      	str	r1, [r2, #0]
    conv2d_162_weights_array.data = AI_PTR(g_network_weights_map[209] + 0);
 8001582:	f8d4 1344 	ldr.w	r1, [r4, #836]	@ 0x344
 8001586:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_162_bias_array.format |= AI_FMT_FLAG_CONST;
 800158a:	6819      	ldr	r1, [r3, #0]
    conv2d_162_bias_array.data = AI_PTR(g_network_weights_map[210] + 0);
    conv2d_162_bias_array.data_start = AI_PTR(g_network_weights_map[210] + 0);
    conv2d_163_weights_array.format |= AI_FMT_FLAG_CONST;
 800158c:	4aa9      	ldr	r2, [pc, #676]	@ (8001834 <network_configure_weights+0x14a4>)
    conv2d_162_bias_array.format |= AI_FMT_FLAG_CONST;
 800158e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001592:	6019      	str	r1, [r3, #0]
    conv2d_162_bias_array.data = AI_PTR(g_network_weights_map[210] + 0);
 8001594:	f8d4 1348 	ldr.w	r1, [r4, #840]	@ 0x348
 8001598:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_163_weights_array.format |= AI_FMT_FLAG_CONST;
 800159c:	6811      	ldr	r1, [r2, #0]
    conv2d_163_weights_array.data = AI_PTR(g_network_weights_map[211] + 0);
    conv2d_163_weights_array.data_start = AI_PTR(g_network_weights_map[211] + 0);
    conv2d_163_bias_array.format |= AI_FMT_FLAG_CONST;
 800159e:	4ba6      	ldr	r3, [pc, #664]	@ (8001838 <network_configure_weights+0x14a8>)
    conv2d_163_weights_array.format |= AI_FMT_FLAG_CONST;
 80015a0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80015a4:	6011      	str	r1, [r2, #0]
    conv2d_163_weights_array.data = AI_PTR(g_network_weights_map[211] + 0);
 80015a6:	f8d4 134c 	ldr.w	r1, [r4, #844]	@ 0x34c
 80015aa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_163_bias_array.format |= AI_FMT_FLAG_CONST;
 80015ae:	6819      	ldr	r1, [r3, #0]
    conv2d_163_bias_array.data = AI_PTR(g_network_weights_map[212] + 0);
    conv2d_163_bias_array.data_start = AI_PTR(g_network_weights_map[212] + 0);
    conv2d_164_weights_array.format |= AI_FMT_FLAG_CONST;
 80015b0:	4aa2      	ldr	r2, [pc, #648]	@ (800183c <network_configure_weights+0x14ac>)
    conv2d_163_bias_array.format |= AI_FMT_FLAG_CONST;
 80015b2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80015b6:	6019      	str	r1, [r3, #0]
    conv2d_163_bias_array.data = AI_PTR(g_network_weights_map[212] + 0);
 80015b8:	f8d4 1350 	ldr.w	r1, [r4, #848]	@ 0x350
 80015bc:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_164_weights_array.format |= AI_FMT_FLAG_CONST;
 80015c0:	6811      	ldr	r1, [r2, #0]
    conv2d_164_weights_array.data = AI_PTR(g_network_weights_map[213] + 0);
    conv2d_164_weights_array.data_start = AI_PTR(g_network_weights_map[213] + 0);
    conv2d_164_bias_array.format |= AI_FMT_FLAG_CONST;
 80015c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001840 <network_configure_weights+0x14b0>)
    conv2d_164_weights_array.format |= AI_FMT_FLAG_CONST;
 80015c4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80015c8:	6011      	str	r1, [r2, #0]
    conv2d_164_weights_array.data = AI_PTR(g_network_weights_map[213] + 0);
 80015ca:	f8d4 1354 	ldr.w	r1, [r4, #852]	@ 0x354
 80015ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_164_bias_array.format |= AI_FMT_FLAG_CONST;
 80015d2:	6819      	ldr	r1, [r3, #0]
    conv2d_164_bias_array.data = AI_PTR(g_network_weights_map[214] + 0);
    conv2d_164_bias_array.data_start = AI_PTR(g_network_weights_map[214] + 0);
    conv2d_169_weights_array.format |= AI_FMT_FLAG_CONST;
 80015d4:	4a9b      	ldr	r2, [pc, #620]	@ (8001844 <network_configure_weights+0x14b4>)
    conv2d_164_bias_array.format |= AI_FMT_FLAG_CONST;
 80015d6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80015da:	6019      	str	r1, [r3, #0]
    conv2d_164_bias_array.data = AI_PTR(g_network_weights_map[214] + 0);
 80015dc:	f8d4 1358 	ldr.w	r1, [r4, #856]	@ 0x358
    conv2d_170_bias_array.data_start = AI_PTR(g_network_weights_map[218] + 0);
    conv2d_184_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_184_weights_array.data = AI_PTR(g_network_weights_map[219] + 0);
    conv2d_184_weights_array.data_start = AI_PTR(g_network_weights_map[219] + 0);
    conv2d_184_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_184_bias_array.data = AI_PTR(g_network_weights_map[220] + 0);
 80015e0:	f8d4 0370 	ldr.w	r0, [r4, #880]	@ 0x370
    conv2d_164_bias_array.data = AI_PTR(g_network_weights_map[214] + 0);
 80015e4:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_169_weights_array.format |= AI_FMT_FLAG_CONST;
 80015e8:	6811      	ldr	r1, [r2, #0]
    conv2d_169_bias_array.format |= AI_FMT_FLAG_CONST;
 80015ea:	4b97      	ldr	r3, [pc, #604]	@ (8001848 <network_configure_weights+0x14b8>)
    conv2d_169_weights_array.format |= AI_FMT_FLAG_CONST;
 80015ec:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80015f0:	6011      	str	r1, [r2, #0]
    conv2d_169_weights_array.data = AI_PTR(g_network_weights_map[215] + 0);
 80015f2:	f8d4 135c 	ldr.w	r1, [r4, #860]	@ 0x35c
 80015f6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_169_bias_array.format |= AI_FMT_FLAG_CONST;
 80015fa:	6819      	ldr	r1, [r3, #0]
    conv2d_170_weights_array.format |= AI_FMT_FLAG_CONST;
 80015fc:	4a93      	ldr	r2, [pc, #588]	@ (800184c <network_configure_weights+0x14bc>)
    conv2d_169_bias_array.format |= AI_FMT_FLAG_CONST;
 80015fe:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001602:	6019      	str	r1, [r3, #0]
    conv2d_169_bias_array.data = AI_PTR(g_network_weights_map[216] + 0);
 8001604:	f8d4 1360 	ldr.w	r1, [r4, #864]	@ 0x360
 8001608:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_170_weights_array.format |= AI_FMT_FLAG_CONST;
 800160c:	6811      	ldr	r1, [r2, #0]
    conv2d_170_bias_array.format |= AI_FMT_FLAG_CONST;
 800160e:	4b90      	ldr	r3, [pc, #576]	@ (8001850 <network_configure_weights+0x14c0>)
    conv2d_170_weights_array.format |= AI_FMT_FLAG_CONST;
 8001610:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001614:	6011      	str	r1, [r2, #0]
    conv2d_170_weights_array.data = AI_PTR(g_network_weights_map[217] + 0);
 8001616:	f8d4 1364 	ldr.w	r1, [r4, #868]	@ 0x364
 800161a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_170_bias_array.format |= AI_FMT_FLAG_CONST;
 800161e:	6819      	ldr	r1, [r3, #0]
    conv2d_184_weights_array.format |= AI_FMT_FLAG_CONST;
 8001620:	4a8c      	ldr	r2, [pc, #560]	@ (8001854 <network_configure_weights+0x14c4>)
    conv2d_170_bias_array.format |= AI_FMT_FLAG_CONST;
 8001622:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001626:	6019      	str	r1, [r3, #0]
    conv2d_170_bias_array.data = AI_PTR(g_network_weights_map[218] + 0);
 8001628:	f8d4 1368 	ldr.w	r1, [r4, #872]	@ 0x368
 800162c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_184_weights_array.format |= AI_FMT_FLAG_CONST;
 8001630:	6811      	ldr	r1, [r2, #0]
    conv2d_184_bias_array.format |= AI_FMT_FLAG_CONST;
 8001632:	4b89      	ldr	r3, [pc, #548]	@ (8001858 <network_configure_weights+0x14c8>)
    conv2d_184_weights_array.format |= AI_FMT_FLAG_CONST;
 8001634:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_184_bias_array.data = AI_PTR(g_network_weights_map[220] + 0);
 8001638:	6098      	str	r0, [r3, #8]
    conv2d_184_weights_array.format |= AI_FMT_FLAG_CONST;
 800163a:	6011      	str	r1, [r2, #0]
    conv2d_184_weights_array.data = AI_PTR(g_network_weights_map[219] + 0);
 800163c:	f8d4 136c 	ldr.w	r1, [r4, #876]	@ 0x36c
 8001640:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_184_bias_array.format |= AI_FMT_FLAG_CONST;
 8001644:	6819      	ldr	r1, [r3, #0]
    conv2d_184_bias_array.data_start = AI_PTR(g_network_weights_map[220] + 0);
    conv2d_185_weights_array.format |= AI_FMT_FLAG_CONST;
 8001646:	4a85      	ldr	r2, [pc, #532]	@ (800185c <network_configure_weights+0x14cc>)
    conv2d_184_bias_array.format |= AI_FMT_FLAG_CONST;
 8001648:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800164c:	6019      	str	r1, [r3, #0]
    conv2d_184_bias_array.data = AI_PTR(g_network_weights_map[220] + 0);
 800164e:	60d8      	str	r0, [r3, #12]
    conv2d_185_weights_array.format |= AI_FMT_FLAG_CONST;
 8001650:	6811      	ldr	r1, [r2, #0]
    conv2d_185_weights_array.data = AI_PTR(g_network_weights_map[221] + 0);
    conv2d_185_weights_array.data_start = AI_PTR(g_network_weights_map[221] + 0);
    conv2d_185_bias_array.format |= AI_FMT_FLAG_CONST;
 8001652:	4b83      	ldr	r3, [pc, #524]	@ (8001860 <network_configure_weights+0x14d0>)
    conv2d_185_weights_array.format |= AI_FMT_FLAG_CONST;
 8001654:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001658:	6011      	str	r1, [r2, #0]
    conv2d_185_weights_array.data = AI_PTR(g_network_weights_map[221] + 0);
 800165a:	f8d4 1374 	ldr.w	r1, [r4, #884]	@ 0x374
 800165e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_185_bias_array.format |= AI_FMT_FLAG_CONST;
 8001662:	6819      	ldr	r1, [r3, #0]
    conv2d_185_bias_array.data = AI_PTR(g_network_weights_map[222] + 0);
    conv2d_185_bias_array.data_start = AI_PTR(g_network_weights_map[222] + 0);
    conv2d_186_weights_array.format |= AI_FMT_FLAG_CONST;
 8001664:	4a7f      	ldr	r2, [pc, #508]	@ (8001864 <network_configure_weights+0x14d4>)
    conv2d_185_bias_array.format |= AI_FMT_FLAG_CONST;
 8001666:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800166a:	6019      	str	r1, [r3, #0]
    conv2d_185_bias_array.data = AI_PTR(g_network_weights_map[222] + 0);
 800166c:	f8d4 1378 	ldr.w	r1, [r4, #888]	@ 0x378
 8001670:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_186_weights_array.format |= AI_FMT_FLAG_CONST;
 8001674:	6811      	ldr	r1, [r2, #0]
    conv2d_186_weights_array.data = AI_PTR(g_network_weights_map[223] + 0);
    conv2d_186_weights_array.data_start = AI_PTR(g_network_weights_map[223] + 0);
    conv2d_186_bias_array.format |= AI_FMT_FLAG_CONST;
 8001676:	4b7c      	ldr	r3, [pc, #496]	@ (8001868 <network_configure_weights+0x14d8>)
    conv2d_186_weights_array.format |= AI_FMT_FLAG_CONST;
 8001678:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800167c:	6011      	str	r1, [r2, #0]
    conv2d_186_weights_array.data = AI_PTR(g_network_weights_map[223] + 0);
 800167e:	f8d4 137c 	ldr.w	r1, [r4, #892]	@ 0x37c
 8001682:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_186_bias_array.format |= AI_FMT_FLAG_CONST;
 8001686:	6819      	ldr	r1, [r3, #0]
    conv2d_186_bias_array.data = AI_PTR(g_network_weights_map[224] + 0);
    conv2d_186_bias_array.data_start = AI_PTR(g_network_weights_map[224] + 0);
    conv2d_187_weights_array.format |= AI_FMT_FLAG_CONST;
 8001688:	4a78      	ldr	r2, [pc, #480]	@ (800186c <network_configure_weights+0x14dc>)
    conv2d_186_bias_array.format |= AI_FMT_FLAG_CONST;
 800168a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800168e:	6019      	str	r1, [r3, #0]
    conv2d_186_bias_array.data = AI_PTR(g_network_weights_map[224] + 0);
 8001690:	f8d4 1380 	ldr.w	r1, [r4, #896]	@ 0x380
 8001694:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_187_weights_array.format |= AI_FMT_FLAG_CONST;
 8001698:	6811      	ldr	r1, [r2, #0]
    conv2d_187_weights_array.data = AI_PTR(g_network_weights_map[225] + 0);
    conv2d_187_weights_array.data_start = AI_PTR(g_network_weights_map[225] + 0);
    conv2d_187_bias_array.format |= AI_FMT_FLAG_CONST;
 800169a:	4b75      	ldr	r3, [pc, #468]	@ (8001870 <network_configure_weights+0x14e0>)
    conv2d_187_weights_array.format |= AI_FMT_FLAG_CONST;
 800169c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80016a0:	6011      	str	r1, [r2, #0]
    conv2d_187_weights_array.data = AI_PTR(g_network_weights_map[225] + 0);
 80016a2:	f8d4 1384 	ldr.w	r1, [r4, #900]	@ 0x384
 80016a6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_187_bias_array.format |= AI_FMT_FLAG_CONST;
 80016aa:	6819      	ldr	r1, [r3, #0]
    conv2d_187_bias_array.data = AI_PTR(g_network_weights_map[226] + 0);
    conv2d_187_bias_array.data_start = AI_PTR(g_network_weights_map[226] + 0);
    conv2d_188_weights_array.format |= AI_FMT_FLAG_CONST;
 80016ac:	4a71      	ldr	r2, [pc, #452]	@ (8001874 <network_configure_weights+0x14e4>)
    conv2d_187_bias_array.format |= AI_FMT_FLAG_CONST;
 80016ae:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80016b2:	6019      	str	r1, [r3, #0]
    conv2d_187_bias_array.data = AI_PTR(g_network_weights_map[226] + 0);
 80016b4:	f8d4 1388 	ldr.w	r1, [r4, #904]	@ 0x388
 80016b8:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_188_weights_array.format |= AI_FMT_FLAG_CONST;
 80016bc:	6811      	ldr	r1, [r2, #0]
    conv2d_188_weights_array.data = AI_PTR(g_network_weights_map[227] + 0);
    conv2d_188_weights_array.data_start = AI_PTR(g_network_weights_map[227] + 0);
    conv2d_188_bias_array.format |= AI_FMT_FLAG_CONST;
 80016be:	4b6e      	ldr	r3, [pc, #440]	@ (8001878 <network_configure_weights+0x14e8>)
    conv2d_188_weights_array.format |= AI_FMT_FLAG_CONST;
 80016c0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80016c4:	6011      	str	r1, [r2, #0]
    conv2d_188_weights_array.data = AI_PTR(g_network_weights_map[227] + 0);
 80016c6:	f8d4 138c 	ldr.w	r1, [r4, #908]	@ 0x38c
    conv2d_190_weights_array.data_start = AI_PTR(g_network_weights_map[231] + 0);
    conv2d_190_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_190_bias_array.data = AI_PTR(g_network_weights_map[232] + 0);
    conv2d_190_bias_array.data_start = AI_PTR(g_network_weights_map[232] + 0);
    conv2d_191_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_191_weights_array.data = AI_PTR(g_network_weights_map[233] + 0);
 80016ca:	f8d4 03a4 	ldr.w	r0, [r4, #932]	@ 0x3a4
    conv2d_188_weights_array.data = AI_PTR(g_network_weights_map[227] + 0);
 80016ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_188_bias_array.format |= AI_FMT_FLAG_CONST;
 80016d2:	6819      	ldr	r1, [r3, #0]
    conv2d_189_weights_array.format |= AI_FMT_FLAG_CONST;
 80016d4:	4a69      	ldr	r2, [pc, #420]	@ (800187c <network_configure_weights+0x14ec>)
    conv2d_188_bias_array.format |= AI_FMT_FLAG_CONST;
 80016d6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80016da:	6019      	str	r1, [r3, #0]
    conv2d_188_bias_array.data = AI_PTR(g_network_weights_map[228] + 0);
 80016dc:	f8d4 1390 	ldr.w	r1, [r4, #912]	@ 0x390
 80016e0:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_189_weights_array.format |= AI_FMT_FLAG_CONST;
 80016e4:	6811      	ldr	r1, [r2, #0]
    conv2d_189_bias_array.format |= AI_FMT_FLAG_CONST;
 80016e6:	4b66      	ldr	r3, [pc, #408]	@ (8001880 <network_configure_weights+0x14f0>)
    conv2d_189_weights_array.format |= AI_FMT_FLAG_CONST;
 80016e8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80016ec:	6011      	str	r1, [r2, #0]
    conv2d_189_weights_array.data = AI_PTR(g_network_weights_map[229] + 0);
 80016ee:	f8d4 1394 	ldr.w	r1, [r4, #916]	@ 0x394
 80016f2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_189_bias_array.format |= AI_FMT_FLAG_CONST;
 80016f6:	6819      	ldr	r1, [r3, #0]
    conv2d_190_weights_array.format |= AI_FMT_FLAG_CONST;
 80016f8:	4a62      	ldr	r2, [pc, #392]	@ (8001884 <network_configure_weights+0x14f4>)
    conv2d_189_bias_array.format |= AI_FMT_FLAG_CONST;
 80016fa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80016fe:	6019      	str	r1, [r3, #0]
    conv2d_189_bias_array.data = AI_PTR(g_network_weights_map[230] + 0);
 8001700:	f8d4 1398 	ldr.w	r1, [r4, #920]	@ 0x398
 8001704:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_190_weights_array.format |= AI_FMT_FLAG_CONST;
 8001708:	6811      	ldr	r1, [r2, #0]
    conv2d_190_bias_array.format |= AI_FMT_FLAG_CONST;
 800170a:	4b5f      	ldr	r3, [pc, #380]	@ (8001888 <network_configure_weights+0x14f8>)
    conv2d_190_weights_array.format |= AI_FMT_FLAG_CONST;
 800170c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001710:	6011      	str	r1, [r2, #0]
    conv2d_190_weights_array.data = AI_PTR(g_network_weights_map[231] + 0);
 8001712:	f8d4 139c 	ldr.w	r1, [r4, #924]	@ 0x39c
 8001716:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_190_bias_array.format |= AI_FMT_FLAG_CONST;
 800171a:	6819      	ldr	r1, [r3, #0]
    conv2d_191_weights_array.format |= AI_FMT_FLAG_CONST;
 800171c:	4a5b      	ldr	r2, [pc, #364]	@ (800188c <network_configure_weights+0x14fc>)
    conv2d_190_bias_array.format |= AI_FMT_FLAG_CONST;
 800171e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    conv2d_191_weights_array.data = AI_PTR(g_network_weights_map[233] + 0);
 8001722:	6090      	str	r0, [r2, #8]
    conv2d_190_bias_array.format |= AI_FMT_FLAG_CONST;
 8001724:	6019      	str	r1, [r3, #0]
    conv2d_190_bias_array.data = AI_PTR(g_network_weights_map[232] + 0);
 8001726:	f8d4 13a0 	ldr.w	r1, [r4, #928]	@ 0x3a0
 800172a:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_191_weights_array.format |= AI_FMT_FLAG_CONST;
 800172e:	6811      	ldr	r1, [r2, #0]
    conv2d_191_weights_array.data_start = AI_PTR(g_network_weights_map[233] + 0);
    conv2d_191_bias_array.format |= AI_FMT_FLAG_CONST;
 8001730:	4b57      	ldr	r3, [pc, #348]	@ (8001890 <network_configure_weights+0x1500>)
    conv2d_191_weights_array.format |= AI_FMT_FLAG_CONST;
 8001732:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001736:	6011      	str	r1, [r2, #0]
    conv2d_191_weights_array.data = AI_PTR(g_network_weights_map[233] + 0);
 8001738:	60d0      	str	r0, [r2, #12]
    conv2d_191_bias_array.format |= AI_FMT_FLAG_CONST;
 800173a:	6819      	ldr	r1, [r3, #0]
    conv2d_191_bias_array.data = AI_PTR(g_network_weights_map[234] + 0);
    conv2d_191_bias_array.data_start = AI_PTR(g_network_weights_map[234] + 0);
    conv2d_192_weights_array.format |= AI_FMT_FLAG_CONST;
 800173c:	4a55      	ldr	r2, [pc, #340]	@ (8001894 <network_configure_weights+0x1504>)
    conv2d_191_bias_array.format |= AI_FMT_FLAG_CONST;
 800173e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001742:	6019      	str	r1, [r3, #0]
    conv2d_191_bias_array.data = AI_PTR(g_network_weights_map[234] + 0);
 8001744:	f8d4 13a8 	ldr.w	r1, [r4, #936]	@ 0x3a8
 8001748:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_192_weights_array.format |= AI_FMT_FLAG_CONST;
 800174c:	6811      	ldr	r1, [r2, #0]
    conv2d_192_weights_array.data = AI_PTR(g_network_weights_map[235] + 0);
    conv2d_192_weights_array.data_start = AI_PTR(g_network_weights_map[235] + 0);
    conv2d_192_bias_array.format |= AI_FMT_FLAG_CONST;
 800174e:	4b52      	ldr	r3, [pc, #328]	@ (8001898 <network_configure_weights+0x1508>)
    conv2d_192_weights_array.format |= AI_FMT_FLAG_CONST;
 8001750:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001754:	6011      	str	r1, [r2, #0]
    conv2d_192_weights_array.data = AI_PTR(g_network_weights_map[235] + 0);
 8001756:	f8d4 13ac 	ldr.w	r1, [r4, #940]	@ 0x3ac
 800175a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_192_bias_array.format |= AI_FMT_FLAG_CONST;
 800175e:	6819      	ldr	r1, [r3, #0]
    conv2d_192_bias_array.data = AI_PTR(g_network_weights_map[236] + 0);
    conv2d_192_bias_array.data_start = AI_PTR(g_network_weights_map[236] + 0);
    conv2d_193_weights_array.format |= AI_FMT_FLAG_CONST;
 8001760:	4a4e      	ldr	r2, [pc, #312]	@ (800189c <network_configure_weights+0x150c>)
    conv2d_192_bias_array.format |= AI_FMT_FLAG_CONST;
 8001762:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001766:	6019      	str	r1, [r3, #0]
    conv2d_192_bias_array.data = AI_PTR(g_network_weights_map[236] + 0);
 8001768:	f8d4 13b0 	ldr.w	r1, [r4, #944]	@ 0x3b0
 800176c:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_193_weights_array.format |= AI_FMT_FLAG_CONST;
 8001770:	6811      	ldr	r1, [r2, #0]
    conv2d_193_weights_array.data = AI_PTR(g_network_weights_map[237] + 0);
    conv2d_193_weights_array.data_start = AI_PTR(g_network_weights_map[237] + 0);
    conv2d_193_bias_array.format |= AI_FMT_FLAG_CONST;
 8001772:	4b4b      	ldr	r3, [pc, #300]	@ (80018a0 <network_configure_weights+0x1510>)
    conv2d_193_weights_array.format |= AI_FMT_FLAG_CONST;
 8001774:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001778:	6011      	str	r1, [r2, #0]
    conv2d_193_weights_array.data = AI_PTR(g_network_weights_map[237] + 0);
 800177a:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 800177e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_193_bias_array.format |= AI_FMT_FLAG_CONST;
 8001782:	6819      	ldr	r1, [r3, #0]
    conv2d_193_bias_array.data = AI_PTR(g_network_weights_map[238] + 0);
    conv2d_193_bias_array.data_start = AI_PTR(g_network_weights_map[238] + 0);
    conv2d_194_weights_array.format |= AI_FMT_FLAG_CONST;
 8001784:	4a47      	ldr	r2, [pc, #284]	@ (80018a4 <network_configure_weights+0x1514>)
    conv2d_193_bias_array.format |= AI_FMT_FLAG_CONST;
 8001786:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800178a:	6019      	str	r1, [r3, #0]
    conv2d_193_bias_array.data = AI_PTR(g_network_weights_map[238] + 0);
 800178c:	f8d4 13b8 	ldr.w	r1, [r4, #952]	@ 0x3b8
 8001790:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_194_weights_array.format |= AI_FMT_FLAG_CONST;
 8001794:	6811      	ldr	r1, [r2, #0]
    conv2d_194_weights_array.data = AI_PTR(g_network_weights_map[239] + 0);
    conv2d_194_weights_array.data_start = AI_PTR(g_network_weights_map[239] + 0);
    conv2d_194_bias_array.format |= AI_FMT_FLAG_CONST;
 8001796:	4b44      	ldr	r3, [pc, #272]	@ (80018a8 <network_configure_weights+0x1518>)
    conv2d_194_weights_array.format |= AI_FMT_FLAG_CONST;
 8001798:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800179c:	6011      	str	r1, [r2, #0]
    conv2d_194_weights_array.data = AI_PTR(g_network_weights_map[239] + 0);
 800179e:	f8d4 13bc 	ldr.w	r1, [r4, #956]	@ 0x3bc
 80017a2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_194_bias_array.format |= AI_FMT_FLAG_CONST;
 80017a6:	6819      	ldr	r1, [r3, #0]
    conv2d_194_bias_array.data = AI_PTR(g_network_weights_map[240] + 0);
    conv2d_194_bias_array.data_start = AI_PTR(g_network_weights_map[240] + 0);
    conv2d_195_weights_array.format |= AI_FMT_FLAG_CONST;
 80017a8:	4a40      	ldr	r2, [pc, #256]	@ (80018ac <network_configure_weights+0x151c>)
    conv2d_194_bias_array.format |= AI_FMT_FLAG_CONST;
 80017aa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80017ae:	6019      	str	r1, [r3, #0]
    conv2d_194_bias_array.data = AI_PTR(g_network_weights_map[240] + 0);
 80017b0:	f8d4 13c0 	ldr.w	r1, [r4, #960]	@ 0x3c0
 80017b4:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_195_weights_array.format |= AI_FMT_FLAG_CONST;
 80017b8:	6811      	ldr	r1, [r2, #0]
    conv2d_195_weights_array.data = AI_PTR(g_network_weights_map[241] + 0);
    conv2d_195_weights_array.data_start = AI_PTR(g_network_weights_map[241] + 0);
    conv2d_195_bias_array.format |= AI_FMT_FLAG_CONST;
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <network_configure_weights+0x1520>)
    conv2d_195_weights_array.format |= AI_FMT_FLAG_CONST;
 80017bc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80017c0:	6011      	str	r1, [r2, #0]
    conv2d_195_weights_array.data = AI_PTR(g_network_weights_map[241] + 0);
 80017c2:	f8d4 13c4 	ldr.w	r1, [r4, #964]	@ 0x3c4
 80017c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_195_bias_array.format |= AI_FMT_FLAG_CONST;
 80017ca:	6819      	ldr	r1, [r3, #0]
    conv2d_195_bias_array.data = AI_PTR(g_network_weights_map[242] + 0);
    conv2d_195_bias_array.data_start = AI_PTR(g_network_weights_map[242] + 0);
    conv2d_203_weights_array.format |= AI_FMT_FLAG_CONST;
 80017cc:	4a39      	ldr	r2, [pc, #228]	@ (80018b4 <network_configure_weights+0x1524>)
    conv2d_195_bias_array.format |= AI_FMT_FLAG_CONST;
 80017ce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80017d2:	6019      	str	r1, [r3, #0]
    conv2d_195_bias_array.data = AI_PTR(g_network_weights_map[242] + 0);
 80017d4:	f8d4 13c8 	ldr.w	r1, [r4, #968]	@ 0x3c8
 80017d8:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_203_weights_array.format |= AI_FMT_FLAG_CONST;
 80017dc:	6811      	ldr	r1, [r2, #0]
    conv2d_203_weights_array.data = AI_PTR(g_network_weights_map[243] + 0);
    conv2d_203_weights_array.data_start = AI_PTR(g_network_weights_map[243] + 0);
    conv2d_203_bias_array.format |= AI_FMT_FLAG_CONST;
 80017de:	4b36      	ldr	r3, [pc, #216]	@ (80018b8 <network_configure_weights+0x1528>)
    conv2d_203_weights_array.format |= AI_FMT_FLAG_CONST;
 80017e0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80017e4:	6011      	str	r1, [r2, #0]
    conv2d_203_weights_array.data = AI_PTR(g_network_weights_map[243] + 0);
 80017e6:	f8d4 13cc 	ldr.w	r1, [r4, #972]	@ 0x3cc
 80017ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_203_bias_array.format |= AI_FMT_FLAG_CONST;
 80017ee:	6819      	ldr	r1, [r3, #0]
    conv2d_203_bias_array.data = AI_PTR(g_network_weights_map[244] + 0);
    conv2d_203_bias_array.data_start = AI_PTR(g_network_weights_map[244] + 0);
    conv2d_204_weights_array.format |= AI_FMT_FLAG_CONST;
 80017f0:	4a32      	ldr	r2, [pc, #200]	@ (80018bc <network_configure_weights+0x152c>)
    conv2d_203_bias_array.format |= AI_FMT_FLAG_CONST;
 80017f2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80017f6:	6019      	str	r1, [r3, #0]
    conv2d_203_bias_array.data = AI_PTR(g_network_weights_map[244] + 0);
 80017f8:	f8d4 13d0 	ldr.w	r1, [r4, #976]	@ 0x3d0
 80017fc:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_204_weights_array.format |= AI_FMT_FLAG_CONST;
 8001800:	6811      	ldr	r1, [r2, #0]
    conv2d_204_weights_array.data = AI_PTR(g_network_weights_map[245] + 0);
    conv2d_204_weights_array.data_start = AI_PTR(g_network_weights_map[245] + 0);
    conv2d_204_bias_array.format |= AI_FMT_FLAG_CONST;
 8001802:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <network_configure_weights+0x1530>)
    conv2d_204_weights_array.format |= AI_FMT_FLAG_CONST;
 8001804:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001808:	6011      	str	r1, [r2, #0]
    conv2d_204_bias_array.data = AI_PTR(g_network_weights_map[246] + 0);
 800180a:	e9d4 01f5 	ldrd	r0, r1, [r4, #980]	@ 0x3d4
    conv2d_204_weights_array.data = AI_PTR(g_network_weights_map[245] + 0);
 800180e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_204_bias_array.format |= AI_FMT_FLAG_CONST;
 8001812:	681a      	ldr	r2, [r3, #0]
    conv2d_204_bias_array.data_start = AI_PTR(g_network_weights_map[246] + 0);
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}
 8001814:	4628      	mov	r0, r5
    conv2d_204_bias_array.data = AI_PTR(g_network_weights_map[246] + 0);
 8001816:	6099      	str	r1, [r3, #8]
    conv2d_204_bias_array.format |= AI_FMT_FLAG_CONST;
 8001818:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800181c:	601a      	str	r2, [r3, #0]
    conv2d_204_bias_array.data = AI_PTR(g_network_weights_map[246] + 0);
 800181e:	60d9      	str	r1, [r3, #12]
}
 8001820:	bd70      	pop	{r4, r5, r6, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8001822:	2212      	movs	r2, #18
 8001824:	2130      	movs	r1, #48	@ 0x30
 8001826:	4630      	mov	r0, r6
 8001828:	f00e fdc2 	bl	80103b0 <ai_platform_network_set_error>
}
 800182c:	4628      	mov	r0, r5
 800182e:	bd70      	pop	{r4, r5, r6, pc}
 8001830:	2400f460 	.word	0x2400f460
 8001834:	2400f450 	.word	0x2400f450
 8001838:	2400f440 	.word	0x2400f440
 800183c:	2400f430 	.word	0x2400f430
 8001840:	2400f420 	.word	0x2400f420
 8001844:	2400f410 	.word	0x2400f410
 8001848:	2400f400 	.word	0x2400f400
 800184c:	2400f3f0 	.word	0x2400f3f0
 8001850:	2400f3e0 	.word	0x2400f3e0
 8001854:	2400f3d0 	.word	0x2400f3d0
 8001858:	2400f3c0 	.word	0x2400f3c0
 800185c:	2400f3b0 	.word	0x2400f3b0
 8001860:	2400f3a0 	.word	0x2400f3a0
 8001864:	2400f390 	.word	0x2400f390
 8001868:	2400f380 	.word	0x2400f380
 800186c:	2400f370 	.word	0x2400f370
 8001870:	2400f360 	.word	0x2400f360
 8001874:	2400f350 	.word	0x2400f350
 8001878:	2400f340 	.word	0x2400f340
 800187c:	2400f330 	.word	0x2400f330
 8001880:	2400f320 	.word	0x2400f320
 8001884:	2400f310 	.word	0x2400f310
 8001888:	2400f300 	.word	0x2400f300
 800188c:	2400f2f0 	.word	0x2400f2f0
 8001890:	2400f2e0 	.word	0x2400f2e0
 8001894:	2400f2d0 	.word	0x2400f2d0
 8001898:	2400f2c0 	.word	0x2400f2c0
 800189c:	2400f2b0 	.word	0x2400f2b0
 80018a0:	2400f2a0 	.word	0x2400f2a0
 80018a4:	2400f290 	.word	0x2400f290
 80018a8:	2400f280 	.word	0x2400f280
 80018ac:	2400f270 	.word	0x2400f270
 80018b0:	2400f260 	.word	0x2400f260
 80018b4:	2400f250 	.word	0x2400f250
 80018b8:	2400f240 	.word	0x2400f240
 80018bc:	2400f230 	.word	0x2400f230
 80018c0:	2400f220 	.word	0x2400f220

080018c4 <network_configure_activations>:
{
 80018c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c8:	b0a5      	sub	sp, #148	@ 0x94
 80018ca:	460a      	mov	r2, r1
 80018cc:	4604      	mov	r4, r0
  if (ai_platform_get_activations_map(g_network_activations_map, 3, params)) {
 80018ce:	2103      	movs	r1, #3
 80018d0:	48c0      	ldr	r0, [pc, #768]	@ (8001bd4 <network_configure_activations+0x310>)
 80018d2:	f00e fcef 	bl	80102b4 <ai_platform_get_activations_map>
 80018d6:	9005      	str	r0, [sp, #20]
 80018d8:	2800      	cmp	r0, #0
 80018da:	f000 8767 	beq.w	80027ac <network_configure_activations+0xee8>
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80018de:	48bd      	ldr	r0, [pc, #756]	@ (8001bd4 <network_configure_activations+0x310>)
    conv2d_184_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 47200);
 80018e0:	f64b 0960 	movw	r9, #47200	@ 0xb860
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 600);
 80018e4:	4abc      	ldr	r2, [pc, #752]	@ (8001bd8 <network_configure_activations+0x314>)
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[1] + 52576);
 80018e6:	f64c 5760 	movw	r7, #52576	@ 0xcd60
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80018ea:	6805      	ldr	r5, [r0, #0]
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 80018ec:	f647 6e60 	movw	lr, #32352	@ 0x7e60
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80018f0:	4bba      	ldr	r3, [pc, #744]	@ (8001bdc <network_configure_activations+0x318>)
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[1] + 50784);
 80018f2:	f24c 6b60 	movw	fp, #50784	@ 0xc660
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 600);
 80018f6:	f505 7116 	add.w	r1, r5, #600	@ 0x258
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[1] + 90992);
 80018fa:	4eb9      	ldr	r6, [pc, #740]	@ (8001be0 <network_configure_activations+0x31c>)
    conv2d_82_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 80018fc:	f248 1884 	movw	r8, #33156	@ 0x8184
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 600);
 8001900:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001904:	4ab7      	ldr	r2, [pc, #732]	@ (8001be4 <network_configure_activations+0x320>)
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 684);
 8001906:	f505 712b 	add.w	r1, r5, #684	@ 0x2ac
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800190a:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 684);
 800190e:	4ab6      	ldr	r2, [pc, #728]	@ (8001be8 <network_configure_activations+0x324>)
 8001910:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1196);
 8001914:	f205 41ac 	addw	r1, r5, #1196	@ 0x4ac
 8001918:	4ab4      	ldr	r2, [pc, #720]	@ (8001bec <network_configure_activations+0x328>)
 800191a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800191e:	4ab4      	ldr	r2, [pc, #720]	@ (8001bf0 <network_configure_activations+0x32c>)
    conv2d_17_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 2976);
 8001920:	f505 613a 	add.w	r1, r5, #2976	@ 0xba0
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001924:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001928:	4ab2      	ldr	r2, [pc, #712]	@ (8001bf4 <network_configure_activations+0x330>)
 800192a:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_9_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800192e:	4ab2      	ldr	r2, [pc, #712]	@ (8001bf8 <network_configure_activations+0x334>)
 8001930:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_10_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001934:	4ab1      	ldr	r2, [pc, #708]	@ (8001bfc <network_configure_activations+0x338>)
 8001936:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800193a:	4ab1      	ldr	r2, [pc, #708]	@ (8001c00 <network_configure_activations+0x33c>)
 800193c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_14_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001940:	4ab0      	ldr	r2, [pc, #704]	@ (8001c04 <network_configure_activations+0x340>)
 8001942:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001946:	4ab0      	ldr	r2, [pc, #704]	@ (8001c08 <network_configure_activations+0x344>)
 8001948:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_16_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800194c:	4aaf      	ldr	r2, [pc, #700]	@ (8001c0c <network_configure_activations+0x348>)
 800194e:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_17_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 2976);
 8001952:	4aaf      	ldr	r2, [pc, #700]	@ (8001c10 <network_configure_activations+0x34c>)
 8001954:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001958:	4aae      	ldr	r2, [pc, #696]	@ (8001c14 <network_configure_activations+0x350>)
    conversion_218_output_array.data = AI_PTR(g_network_activations_map[1] + 201588);
 800195a:	49af      	ldr	r1, [pc, #700]	@ (8001c18 <network_configure_activations+0x354>)
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800195c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001960:	4aae      	ldr	r2, [pc, #696]	@ (8001c1c <network_configure_activations+0x358>)
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001962:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001966:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800196a:	4aad      	ldr	r2, [pc, #692]	@ (8001c20 <network_configure_activations+0x35c>)
    conv2d_44_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 6532);
 800196c:	f641 1384 	movw	r3, #6532	@ 0x1984
    conv2d_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001970:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001974:	4aab      	ldr	r2, [pc, #684]	@ (8001c24 <network_configure_activations+0x360>)
    conv2d_44_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 6532);
 8001976:	442b      	add	r3, r5
    conv2d_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001978:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_182_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800197c:	4aaa      	ldr	r2, [pc, #680]	@ (8001c28 <network_configure_activations+0x364>)
 800197e:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_24_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001982:	4aaa      	ldr	r2, [pc, #680]	@ (8001c2c <network_configure_activations+0x368>)
 8001984:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_26_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001988:	4aa9      	ldr	r2, [pc, #676]	@ (8001c30 <network_configure_activations+0x36c>)
 800198a:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_27_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800198e:	4aa9      	ldr	r2, [pc, #676]	@ (8001c34 <network_configure_activations+0x370>)
 8001990:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_28_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001994:	4aa8      	ldr	r2, [pc, #672]	@ (8001c38 <network_configure_activations+0x374>)
 8001996:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_29_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800199a:	4aa8      	ldr	r2, [pc, #672]	@ (8001c3c <network_configure_activations+0x378>)
 800199c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_30_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019a0:	4aa7      	ldr	r2, [pc, #668]	@ (8001c40 <network_configure_activations+0x37c>)
 80019a2:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_32_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019a6:	4aa7      	ldr	r2, [pc, #668]	@ (8001c44 <network_configure_activations+0x380>)
 80019a8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_33_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019ac:	4aa6      	ldr	r2, [pc, #664]	@ (8001c48 <network_configure_activations+0x384>)
 80019ae:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_34_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019b2:	4aa6      	ldr	r2, [pc, #664]	@ (8001c4c <network_configure_activations+0x388>)
 80019b4:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_36_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019b8:	4aa5      	ldr	r2, [pc, #660]	@ (8001c50 <network_configure_activations+0x38c>)
 80019ba:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_37_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019be:	4aa5      	ldr	r2, [pc, #660]	@ (8001c54 <network_configure_activations+0x390>)
 80019c0:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_38_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019c4:	4aa4      	ldr	r2, [pc, #656]	@ (8001c58 <network_configure_activations+0x394>)
 80019c6:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_40_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019ca:	4aa4      	ldr	r2, [pc, #656]	@ (8001c5c <network_configure_activations+0x398>)
 80019cc:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_41_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019d0:	4aa3      	ldr	r2, [pc, #652]	@ (8001c60 <network_configure_activations+0x39c>)
 80019d2:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_42_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019d6:	4aa3      	ldr	r2, [pc, #652]	@ (8001c64 <network_configure_activations+0x3a0>)
 80019d8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_43_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019dc:	4aa2      	ldr	r2, [pc, #648]	@ (8001c68 <network_configure_activations+0x3a4>)
 80019de:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_44_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 6532);
 80019e2:	4aa2      	ldr	r2, [pc, #648]	@ (8001c6c <network_configure_activations+0x3a8>)
 80019e4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_45_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019e8:	4aa1      	ldr	r2, [pc, #644]	@ (8001c70 <network_configure_activations+0x3ac>)
    conv2d_47_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019ea:	4ba2      	ldr	r3, [pc, #648]	@ (8001c74 <network_configure_activations+0x3b0>)
    conv2d_45_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019ec:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_47_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019f0:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_48_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019f4:	4aa0      	ldr	r2, [pc, #640]	@ (8001c78 <network_configure_activations+0x3b4>)
    conv2d_49_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019f6:	4ba1      	ldr	r3, [pc, #644]	@ (8001c7c <network_configure_activations+0x3b8>)
    conv2d_48_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019f8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_49_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80019fc:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_151_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a00:	4a9f      	ldr	r2, [pc, #636]	@ (8001c80 <network_configure_activations+0x3bc>)
    conv2d_51_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a02:	4ba0      	ldr	r3, [pc, #640]	@ (8001c84 <network_configure_activations+0x3c0>)
    conv2d_151_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a04:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_51_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a08:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_53_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a0c:	4a9e      	ldr	r2, [pc, #632]	@ (8001c88 <network_configure_activations+0x3c4>)
    conv2d_54_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8001c8c <network_configure_activations+0x3c8>)
    conv2d_53_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a10:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_54_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a14:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_55_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a18:	4a9d      	ldr	r2, [pc, #628]	@ (8001c90 <network_configure_activations+0x3cc>)
    conv2d_56_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a1a:	4b9e      	ldr	r3, [pc, #632]	@ (8001c94 <network_configure_activations+0x3d0>)
    conv2d_55_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a1c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_56_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a20:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_57_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a24:	4a9c      	ldr	r2, [pc, #624]	@ (8001c98 <network_configure_activations+0x3d4>)
    conv2d_59_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a26:	4b9d      	ldr	r3, [pc, #628]	@ (8001c9c <network_configure_activations+0x3d8>)
    conv2d_57_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a28:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_59_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a2c:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_60_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a30:	4a9b      	ldr	r2, [pc, #620]	@ (8001ca0 <network_configure_activations+0x3dc>)
    conv2d_61_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a32:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca4 <network_configure_activations+0x3e0>)
    conv2d_60_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a34:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_61_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a38:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_63_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a3c:	4a9a      	ldr	r2, [pc, #616]	@ (8001ca8 <network_configure_activations+0x3e4>)
    conv2d_64_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a3e:	4b9b      	ldr	r3, [pc, #620]	@ (8001cac <network_configure_activations+0x3e8>)
    conv2d_63_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a40:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_64_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a44:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_65_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a48:	4a99      	ldr	r2, [pc, #612]	@ (8001cb0 <network_configure_activations+0x3ec>)
    conv2d_66_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a4a:	4b9a      	ldr	r3, [pc, #616]	@ (8001cb4 <network_configure_activations+0x3f0>)
    conv2d_65_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a4c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_66_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a50:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_67_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a54:	4a98      	ldr	r2, [pc, #608]	@ (8001cb8 <network_configure_activations+0x3f4>)
    conv2d_68_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a56:	4b99      	ldr	r3, [pc, #612]	@ (8001cbc <network_configure_activations+0x3f8>)
    conv2d_67_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a58:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_68_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a5c:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_69_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a60:	4a97      	ldr	r2, [pc, #604]	@ (8001cc0 <network_configure_activations+0x3fc>)
    conv2d_70_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a62:	4b98      	ldr	r3, [pc, #608]	@ (8001cc4 <network_configure_activations+0x400>)
    conv2d_69_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a64:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_70_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a68:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_71_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a6c:	4a96      	ldr	r2, [pc, #600]	@ (8001cc8 <network_configure_activations+0x404>)
    conv2d_72_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a6e:	4b97      	ldr	r3, [pc, #604]	@ (8001ccc <network_configure_activations+0x408>)
    conv2d_71_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a70:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_72_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a74:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_73_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a78:	4a95      	ldr	r2, [pc, #596]	@ (8001cd0 <network_configure_activations+0x40c>)
    conv2d_74_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a7a:	4b96      	ldr	r3, [pc, #600]	@ (8001cd4 <network_configure_activations+0x410>)
    conv2d_73_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a7c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_74_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a80:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_75_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a84:	4a94      	ldr	r2, [pc, #592]	@ (8001cd8 <network_configure_activations+0x414>)
    conv2d_76_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a86:	4b95      	ldr	r3, [pc, #596]	@ (8001cdc <network_configure_activations+0x418>)
    conv2d_75_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a88:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_76_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a8c:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_77_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a90:	4a93      	ldr	r2, [pc, #588]	@ (8001ce0 <network_configure_activations+0x41c>)
    conv2d_82_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a92:	4b94      	ldr	r3, [pc, #592]	@ (8001ce4 <network_configure_activations+0x420>)
    conv2d_77_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a94:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_82_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a98:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_83_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a9c:	4a92      	ldr	r2, [pc, #584]	@ (8001ce8 <network_configure_activations+0x424>)
    conv2d_94_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a9e:	4b93      	ldr	r3, [pc, #588]	@ (8001cec <network_configure_activations+0x428>)
    conv2d_83_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001aa0:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_94_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001aa4:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_95_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001aa8:	4a91      	ldr	r2, [pc, #580]	@ (8001cf0 <network_configure_activations+0x42c>)
    conv2d_96_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001aaa:	4b92      	ldr	r3, [pc, #584]	@ (8001cf4 <network_configure_activations+0x430>)
    conv2d_95_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001aac:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_96_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ab0:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_97_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ab4:	4a90      	ldr	r2, [pc, #576]	@ (8001cf8 <network_configure_activations+0x434>)
    conv2d_98_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ab6:	4b91      	ldr	r3, [pc, #580]	@ (8001cfc <network_configure_activations+0x438>)
    conv2d_97_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ab8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_98_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001abc:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_99_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ac0:	4a8f      	ldr	r2, [pc, #572]	@ (8001d00 <network_configure_activations+0x43c>)
    conv2d_100_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ac2:	4b90      	ldr	r3, [pc, #576]	@ (8001d04 <network_configure_activations+0x440>)
    conv2d_99_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ac4:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_100_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ac8:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_101_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001acc:	4a8e      	ldr	r2, [pc, #568]	@ (8001d08 <network_configure_activations+0x444>)
    conv2d_102_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ace:	4b8f      	ldr	r3, [pc, #572]	@ (8001d0c <network_configure_activations+0x448>)
    conv2d_101_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ad0:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_102_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ad4:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_103_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ad8:	4a8d      	ldr	r2, [pc, #564]	@ (8001d10 <network_configure_activations+0x44c>)
    conv2d_104_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ada:	4b8e      	ldr	r3, [pc, #568]	@ (8001d14 <network_configure_activations+0x450>)
    conv2d_103_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001adc:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_104_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ae0:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_105_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ae4:	4a8c      	ldr	r2, [pc, #560]	@ (8001d18 <network_configure_activations+0x454>)
    conv2d_110_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8001d1c <network_configure_activations+0x458>)
    conv2d_105_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ae8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_110_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001aec:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_111_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001af0:	4a8b      	ldr	r2, [pc, #556]	@ (8001d20 <network_configure_activations+0x45c>)
    conv2d_122_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001af2:	4b8c      	ldr	r3, [pc, #560]	@ (8001d24 <network_configure_activations+0x460>)
    conv2d_111_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001af4:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_122_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001af8:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_123_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001afc:	4a8a      	ldr	r2, [pc, #552]	@ (8001d28 <network_configure_activations+0x464>)
    conv2d_124_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001afe:	4b8b      	ldr	r3, [pc, #556]	@ (8001d2c <network_configure_activations+0x468>)
    conv2d_123_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b00:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_124_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b04:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_125_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b08:	4a89      	ldr	r2, [pc, #548]	@ (8001d30 <network_configure_activations+0x46c>)
    conv2d_126_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8001d34 <network_configure_activations+0x470>)
    conv2d_125_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b0c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_126_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b10:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_127_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b14:	4a88      	ldr	r2, [pc, #544]	@ (8001d38 <network_configure_activations+0x474>)
    conv2d_128_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b16:	4b89      	ldr	r3, [pc, #548]	@ (8001d3c <network_configure_activations+0x478>)
    conv2d_127_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b18:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_128_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b1c:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_129_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b20:	4a87      	ldr	r2, [pc, #540]	@ (8001d40 <network_configure_activations+0x47c>)
    conv2d_130_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b22:	4b88      	ldr	r3, [pc, #544]	@ (8001d44 <network_configure_activations+0x480>)
    conv2d_129_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b24:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_130_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b28:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_131_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b2c:	4a86      	ldr	r2, [pc, #536]	@ (8001d48 <network_configure_activations+0x484>)
    conv2d_132_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b2e:	4b87      	ldr	r3, [pc, #540]	@ (8001d4c <network_configure_activations+0x488>)
    conv2d_131_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b30:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_132_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b34:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_133_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b38:	4a85      	ldr	r2, [pc, #532]	@ (8001d50 <network_configure_activations+0x48c>)
    conv2d_138_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b3a:	4b86      	ldr	r3, [pc, #536]	@ (8001d54 <network_configure_activations+0x490>)
    conv2d_133_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b3c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_138_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b40:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_139_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b44:	4a84      	ldr	r2, [pc, #528]	@ (8001d58 <network_configure_activations+0x494>)
    conv2d_153_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b46:	4b85      	ldr	r3, [pc, #532]	@ (8001d5c <network_configure_activations+0x498>)
    conv2d_139_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b48:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_153_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b4c:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_154_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b50:	4a83      	ldr	r2, [pc, #524]	@ (8001d60 <network_configure_activations+0x49c>)
    conv2d_155_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b52:	4b84      	ldr	r3, [pc, #528]	@ (8001d64 <network_configure_activations+0x4a0>)
    conv2d_154_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b54:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_155_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b58:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_156_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b5c:	4a82      	ldr	r2, [pc, #520]	@ (8001d68 <network_configure_activations+0x4a4>)
    conv2d_157_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b5e:	4b83      	ldr	r3, [pc, #524]	@ (8001d6c <network_configure_activations+0x4a8>)
    conv2d_156_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b60:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_157_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b64:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_159_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b68:	4b81      	ldr	r3, [pc, #516]	@ (8001d70 <network_configure_activations+0x4ac>)
    conv2d_158_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b6a:	4a82      	ldr	r2, [pc, #520]	@ (8001d74 <network_configure_activations+0x4b0>)
    conv2d_159_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b6c:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_161_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b70:	4b81      	ldr	r3, [pc, #516]	@ (8001d78 <network_configure_activations+0x4b4>)
    conv2d_158_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b72:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_161_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b76:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_160_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b7a:	4a80      	ldr	r2, [pc, #512]	@ (8001d7c <network_configure_activations+0x4b8>)
    conv2d_163_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b7c:	4b80      	ldr	r3, [pc, #512]	@ (8001d80 <network_configure_activations+0x4bc>)
    conv2d_160_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b7e:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_163_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b82:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_162_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b86:	4a7f      	ldr	r2, [pc, #508]	@ (8001d84 <network_configure_activations+0x4c0>)
    conv2d_169_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b88:	4b7f      	ldr	r3, [pc, #508]	@ (8001d88 <network_configure_activations+0x4c4>)
    conv2d_162_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b8a:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_169_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b8e:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_164_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b92:	4a7e      	ldr	r2, [pc, #504]	@ (8001d8c <network_configure_activations+0x4c8>)
    conv2d_184_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b94:	4b7e      	ldr	r3, [pc, #504]	@ (8001d90 <network_configure_activations+0x4cc>)
    conv2d_164_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b96:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_184_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b9a:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_170_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d94 <network_configure_activations+0x4d0>)
    conv2d_186_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8001d98 <network_configure_activations+0x4d4>)
    conv2d_170_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ba2:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_186_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ba6:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_185_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001baa:	4a7c      	ldr	r2, [pc, #496]	@ (8001d9c <network_configure_activations+0x4d8>)
    conv2d_188_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001bac:	4b7c      	ldr	r3, [pc, #496]	@ (8001da0 <network_configure_activations+0x4dc>)
    conv2d_185_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001bae:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_188_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001bb2:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_187_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8001da4 <network_configure_activations+0x4e0>)
    conv2d_189_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001bb8:	4b7b      	ldr	r3, [pc, #492]	@ (8001da8 <network_configure_activations+0x4e4>)
    conv2d_187_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001bba:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_189_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001bbe:	e9c3 5502 	strd	r5, r5, [r3, #8]
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[1] + 90996);
 8001bc2:	6843      	ldr	r3, [r0, #4]
 8001bc4:	4a79      	ldr	r2, [pc, #484]	@ (8001dac <network_configure_activations+0x4e8>)
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 8001bc6:	f503 6c58 	add.w	ip, r3, #3456	@ 0xd80
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[1] + 90992);
 8001bca:	199e      	adds	r6, r3, r6
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[1] + 90996);
 8001bcc:	189a      	adds	r2, r3, r2
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[1] + 52576);
 8001bce:	19df      	adds	r7, r3, r7
 8001bd0:	e0ee      	b.n	8001db0 <network_configure_activations+0x4ec>
 8001bd2:	bf00      	nop
 8001bd4:	24014ae4 	.word	0x24014ae4
 8001bd8:	2400f200 	.word	0x2400f200
 8001bdc:	2400f210 	.word	0x2400f210
 8001be0:	00016370 	.word	0x00016370
 8001be4:	2400f1f0 	.word	0x2400f1f0
 8001be8:	2400f1e0 	.word	0x2400f1e0
 8001bec:	2400f1d0 	.word	0x2400f1d0
 8001bf0:	2400f1c0 	.word	0x2400f1c0
 8001bf4:	2400f1b0 	.word	0x2400f1b0
 8001bf8:	2400f1a0 	.word	0x2400f1a0
 8001bfc:	2400f190 	.word	0x2400f190
 8001c00:	2400f180 	.word	0x2400f180
 8001c04:	2400f170 	.word	0x2400f170
 8001c08:	2400f160 	.word	0x2400f160
 8001c0c:	2400f150 	.word	0x2400f150
 8001c10:	2400f140 	.word	0x2400f140
 8001c14:	2400f130 	.word	0x2400f130
 8001c18:	00031374 	.word	0x00031374
 8001c1c:	2400f120 	.word	0x2400f120
 8001c20:	2400f110 	.word	0x2400f110
 8001c24:	2400f100 	.word	0x2400f100
 8001c28:	2400f0f0 	.word	0x2400f0f0
 8001c2c:	2400f0e0 	.word	0x2400f0e0
 8001c30:	2400f0d0 	.word	0x2400f0d0
 8001c34:	2400f0c0 	.word	0x2400f0c0
 8001c38:	2400f0b0 	.word	0x2400f0b0
 8001c3c:	2400f0a0 	.word	0x2400f0a0
 8001c40:	2400f090 	.word	0x2400f090
 8001c44:	2400f080 	.word	0x2400f080
 8001c48:	2400f070 	.word	0x2400f070
 8001c4c:	2400f060 	.word	0x2400f060
 8001c50:	2400f050 	.word	0x2400f050
 8001c54:	2400f040 	.word	0x2400f040
 8001c58:	2400f030 	.word	0x2400f030
 8001c5c:	2400f020 	.word	0x2400f020
 8001c60:	2400f010 	.word	0x2400f010
 8001c64:	2400f000 	.word	0x2400f000
 8001c68:	2400eff0 	.word	0x2400eff0
 8001c6c:	2400efe0 	.word	0x2400efe0
 8001c70:	2400efd0 	.word	0x2400efd0
 8001c74:	2400efc0 	.word	0x2400efc0
 8001c78:	2400efb0 	.word	0x2400efb0
 8001c7c:	2400efa0 	.word	0x2400efa0
 8001c80:	2400ef90 	.word	0x2400ef90
 8001c84:	2400ef80 	.word	0x2400ef80
 8001c88:	2400ef70 	.word	0x2400ef70
 8001c8c:	2400ef60 	.word	0x2400ef60
 8001c90:	2400ef50 	.word	0x2400ef50
 8001c94:	2400ef40 	.word	0x2400ef40
 8001c98:	2400ef30 	.word	0x2400ef30
 8001c9c:	2400ef20 	.word	0x2400ef20
 8001ca0:	2400ef10 	.word	0x2400ef10
 8001ca4:	2400ef00 	.word	0x2400ef00
 8001ca8:	2400eef0 	.word	0x2400eef0
 8001cac:	2400eee0 	.word	0x2400eee0
 8001cb0:	2400eed0 	.word	0x2400eed0
 8001cb4:	2400eec0 	.word	0x2400eec0
 8001cb8:	2400eeb0 	.word	0x2400eeb0
 8001cbc:	2400eea0 	.word	0x2400eea0
 8001cc0:	2400ee90 	.word	0x2400ee90
 8001cc4:	2400ee80 	.word	0x2400ee80
 8001cc8:	2400ee70 	.word	0x2400ee70
 8001ccc:	2400ee60 	.word	0x2400ee60
 8001cd0:	2400ee50 	.word	0x2400ee50
 8001cd4:	2400ee40 	.word	0x2400ee40
 8001cd8:	2400ee30 	.word	0x2400ee30
 8001cdc:	2400ee20 	.word	0x2400ee20
 8001ce0:	2400ee10 	.word	0x2400ee10
 8001ce4:	2400ee00 	.word	0x2400ee00
 8001ce8:	2400edf0 	.word	0x2400edf0
 8001cec:	2400ede0 	.word	0x2400ede0
 8001cf0:	2400edd0 	.word	0x2400edd0
 8001cf4:	2400edc0 	.word	0x2400edc0
 8001cf8:	2400edb0 	.word	0x2400edb0
 8001cfc:	2400eda0 	.word	0x2400eda0
 8001d00:	2400ed90 	.word	0x2400ed90
 8001d04:	2400ed80 	.word	0x2400ed80
 8001d08:	2400ed70 	.word	0x2400ed70
 8001d0c:	2400ed60 	.word	0x2400ed60
 8001d10:	2400ed50 	.word	0x2400ed50
 8001d14:	2400ed40 	.word	0x2400ed40
 8001d18:	2400ed30 	.word	0x2400ed30
 8001d1c:	2400ed20 	.word	0x2400ed20
 8001d20:	2400ed10 	.word	0x2400ed10
 8001d24:	2400ed00 	.word	0x2400ed00
 8001d28:	2400ecf0 	.word	0x2400ecf0
 8001d2c:	2400ece0 	.word	0x2400ece0
 8001d30:	2400ecd0 	.word	0x2400ecd0
 8001d34:	2400ecc0 	.word	0x2400ecc0
 8001d38:	2400ecb0 	.word	0x2400ecb0
 8001d3c:	2400eca0 	.word	0x2400eca0
 8001d40:	2400ec90 	.word	0x2400ec90
 8001d44:	2400ec80 	.word	0x2400ec80
 8001d48:	2400ec70 	.word	0x2400ec70
 8001d4c:	2400ec60 	.word	0x2400ec60
 8001d50:	2400ec50 	.word	0x2400ec50
 8001d54:	2400ec40 	.word	0x2400ec40
 8001d58:	2400ec30 	.word	0x2400ec30
 8001d5c:	2400ec20 	.word	0x2400ec20
 8001d60:	2400ec10 	.word	0x2400ec10
 8001d64:	2400ec00 	.word	0x2400ec00
 8001d68:	2400ebf0 	.word	0x2400ebf0
 8001d6c:	2400ebe0 	.word	0x2400ebe0
 8001d70:	2400ebc0 	.word	0x2400ebc0
 8001d74:	2400ebd0 	.word	0x2400ebd0
 8001d78:	2400eba0 	.word	0x2400eba0
 8001d7c:	2400ebb0 	.word	0x2400ebb0
 8001d80:	2400eb80 	.word	0x2400eb80
 8001d84:	2400eb90 	.word	0x2400eb90
 8001d88:	2400eb60 	.word	0x2400eb60
 8001d8c:	2400eb70 	.word	0x2400eb70
 8001d90:	2400eb40 	.word	0x2400eb40
 8001d94:	2400eb50 	.word	0x2400eb50
 8001d98:	2400eb20 	.word	0x2400eb20
 8001d9c:	2400eb30 	.word	0x2400eb30
 8001da0:	2400eb00 	.word	0x2400eb00
 8001da4:	2400eb10 	.word	0x2400eb10
 8001da8:	2400eaf0 	.word	0x2400eaf0
 8001dac:	00016374 	.word	0x00016374
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 8001db0:	f8cd c008 	str.w	ip, [sp, #8]
    conv2d_123_output_array.data = AI_PTR(g_network_activations_map[1] + 5120);
 8001db4:	f503 5ca0 	add.w	ip, r3, #5120	@ 0x1400
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[1] + 90996);
 8001db8:	9207      	str	r2, [sp, #28]
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46368);
 8001dba:	f24b 5220 	movw	r2, #46368	@ 0xb520
    conv2d_123_output_array.data = AI_PTR(g_network_activations_map[1] + 5120);
 8001dbe:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
    conv2d_33_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 27648);
 8001dc2:	f503 4cd8 	add.w	ip, r3, #27648	@ 0x6c00
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[1] + 90992);
 8001dc6:	9608      	str	r6, [sp, #32]
    conv2d_29_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 24192);
 8001dc8:	f503 46bd 	add.w	r6, r3, #24192	@ 0x5e80
    conv2d_33_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 27648);
 8001dcc:	f8cd c00c 	str.w	ip, [sp, #12]
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[1] + 10368);
 8001dd0:	f503 5c22 	add.w	ip, r3, #10368	@ 0x2880
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46368);
 8001dd4:	189a      	adds	r2, r3, r2
    conv2d_29_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 24192);
 8001dd6:	9613      	str	r6, [sp, #76]	@ 0x4c
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[1] + 10368);
 8001dd8:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
    conv2d_43_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 8001ddc:	f503 4cc6 	add.w	ip, r3, #25344	@ 0x6300
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46368);
 8001de0:	920a      	str	r2, [sp, #40]	@ 0x28
    conversion_218_output_array.data = AI_PTR(g_network_activations_map[1] + 201588);
 8001de2:	1859      	adds	r1, r3, r1
    conv2d_43_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 8001de4:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
    conv2d_37_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 31104);
 8001de8:	f503 4cf3 	add.w	ip, r3, #31104	@ 0x7980
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[1] + 52576);
 8001dec:	9709      	str	r7, [sp, #36]	@ 0x24
    conv2d_32_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8001dee:	f503 57d8 	add.w	r7, r3, #6912	@ 0x1b00
    conv2d_37_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 31104);
 8001df2:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
    conv2d_42_output_array.data = AI_PTR(g_network_activations_map[1] + 20736);
 8001df6:	f503 4ca2 	add.w	ip, r3, #20736	@ 0x5100
    conversion_218_output_array.data = AI_PTR(g_network_activations_map[1] + 201588);
 8001dfa:	9106      	str	r1, [sp, #24]
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 8001dfc:	449e      	add	lr, r3
    conv2d_42_output_array.data = AI_PTR(g_network_activations_map[1] + 20736);
 8001dfe:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
    conv2d_151_output_array.data = AI_PTR(g_network_activations_map[1] + 13824);
 8001e02:	f503 5c58 	add.w	ip, r3, #13824	@ 0x3600
    conv2d_32_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8001e06:	9700      	str	r7, [sp, #0]
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[1] + 50784);
 8001e08:	449b      	add	fp, r3
    conv2d_151_output_array.data = AI_PTR(g_network_activations_map[1] + 13824);
 8001e0a:	f8cd c060 	str.w	ip, [sp, #96]	@ 0x60
    eltwise_58_output_array.data = AI_PTR(g_network_activations_map[1] + 2016);
 8001e0e:	f503 6cfc 	add.w	ip, r3, #2016	@ 0x7e0
    conv2d_16_output_array.data = AI_PTR(g_network_activations_map[1] + 41568);
 8001e12:	f24a 2760 	movw	r7, #41568	@ 0xa260
    eltwise_46_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8001e16:	f503 5190 	add.w	r1, r3, #4608	@ 0x1200
    eltwise_58_output_array.data = AI_PTR(g_network_activations_map[1] + 2016);
 8001e1a:	f8cd c064 	str.w	ip, [sp, #100]	@ 0x64
    eltwise_62_output_array.data = AI_PTR(g_network_activations_map[1] + 4032);
 8001e1e:	f503 6c7c 	add.w	ip, r3, #4032	@ 0xfc0
    conv2d_16_output_array.data = AI_PTR(g_network_activations_map[1] + 41568);
 8001e22:	441f      	add	r7, r3
    conv2d_47_output_array.data = AI_PTR(g_network_activations_map[1] + 9216);
 8001e24:	f503 5a10 	add.w	sl, r3, #9216	@ 0x2400
    eltwise_62_output_array.data = AI_PTR(g_network_activations_map[1] + 4032);
 8001e28:	f8cd c068 	str.w	ip, [sp, #104]	@ 0x68
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[1] + 44832);
 8001e2c:	f64a 7c20 	movw	ip, #44832	@ 0xaf20
    conv2d_51_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 8001e30:	f503 40fc 	add.w	r0, r3, #32256	@ 0x7e00
    conv2d_82_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 8001e34:	4498      	add	r8, r3
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[1] + 44832);
 8001e36:	4666      	mov	r6, ip
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[1] + 44064);
 8001e38:	f64a 4c20 	movw	ip, #44064	@ 0xac20
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[1] + 44832);
 8001e3c:	199e      	adds	r6, r3, r6
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[1] + 44064);
 8001e3e:	4662      	mov	r2, ip
    conv2d_95_output_array.data = AI_PTR(g_network_activations_map[1] + 5760);
 8001e40:	f503 5cb4 	add.w	ip, r3, #5760	@ 0x1680
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[1] + 44832);
 8001e44:	960b      	str	r6, [sp, #44]	@ 0x2c
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[1] + 44064);
 8001e46:	189e      	adds	r6, r3, r2
    conv2d_95_output_array.data = AI_PTR(g_network_activations_map[1] + 5760);
 8001e48:	f8cd c06c 	str.w	ip, [sp, #108]	@ 0x6c
    conv2d_9_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 34656);
 8001e4c:	f248 7c60 	movw	ip, #34656	@ 0x8760
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[1] + 154656);
 8001e50:	4ac1      	ldr	r2, [pc, #772]	@ (8002158 <network_configure_activations+0x894>)
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[1] + 44064);
 8001e52:	9601      	str	r6, [sp, #4]
    conv2d_9_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 34656);
 8001e54:	4666      	mov	r6, ip
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[1] + 154656);
 8001e56:	189a      	adds	r2, r3, r2
    conv2d_14_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46128);
 8001e58:	f24b 4c30 	movw	ip, #46128	@ 0xb430
    conv2d_9_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 34656);
 8001e5c:	199e      	adds	r6, r3, r6
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[1] + 154656);
 8001e5e:	920c      	str	r2, [sp, #48]	@ 0x30
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[1] + 173088);
 8001e60:	4abe      	ldr	r2, [pc, #760]	@ (800215c <network_configure_activations+0x898>)
    conv2d_9_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 34656);
 8001e62:	960d      	str	r6, [sp, #52]	@ 0x34
    conv2d_14_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46128);
 8001e64:	4666      	mov	r6, ip
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[1] + 173088);
 8001e66:	189a      	adds	r2, r3, r2
    conv2d_182_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 8001e68:	f64e 2c60 	movw	ip, #60000	@ 0xea60
    conv2d_14_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46128);
 8001e6c:	199e      	adds	r6, r3, r6
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[1] + 173088);
 8001e6e:	920e      	str	r2, [sp, #56]	@ 0x38
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[1] + 161376);
 8001e70:	4abb      	ldr	r2, [pc, #748]	@ (8002160 <network_configure_activations+0x89c>)
    conv2d_14_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46128);
 8001e72:	960f      	str	r6, [sp, #60]	@ 0x3c
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[1] + 161376);
 8001e74:	189a      	adds	r2, r3, r2
    conv2d_17_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 96864);
 8001e76:	4ebb      	ldr	r6, [pc, #748]	@ (8002164 <network_configure_activations+0x8a0>)
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[1] + 161376);
 8001e78:	9210      	str	r2, [sp, #64]	@ 0x40
    conv2d_17_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 96864);
 8001e7a:	199a      	adds	r2, r3, r6
    conv2d_21_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106080);
 8001e7c:	f506 5610 	add.w	r6, r6, #9216	@ 0x2400
    conv2d_17_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 96864);
 8001e80:	9211      	str	r2, [sp, #68]	@ 0x44
    conv2d_96_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8001e82:	f242 62d0 	movw	r2, #9936	@ 0x26d0
    conv2d_21_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106080);
 8001e86:	199e      	adds	r6, r3, r6
    conv2d_96_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8001e88:	441a      	add	r2, r3
    conv2d_21_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106080);
 8001e8a:	9612      	str	r6, [sp, #72]	@ 0x48
    conv2d_182_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 8001e8c:	4666      	mov	r6, ip
    conv2d_125_output_array.data = AI_PTR(g_network_activations_map[1] + 5064);
 8001e8e:	f241 3cc8 	movw	ip, #5064	@ 0x13c8
    conv2d_182_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 8001e92:	199e      	adds	r6, r3, r6
    conv2d_125_output_array.data = AI_PTR(g_network_activations_map[1] + 5064);
 8001e94:	4664      	mov	r4, ip
    conv2d_170_output_array.data = AI_PTR(g_network_activations_map[1] + 28368);
 8001e96:	f646 6cd0 	movw	ip, #28368	@ 0x6ed0
    conv2d_182_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 8001e9a:	9604      	str	r6, [sp, #16]
    conv2d_125_output_array.data = AI_PTR(g_network_activations_map[1] + 5064);
 8001e9c:	191c      	adds	r4, r3, r4
    conv2d_24_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8001e9e:	4eb2      	ldr	r6, [pc, #712]	@ (8002168 <network_configure_activations+0x8a4>)
    conv2d_125_output_array.data = AI_PTR(g_network_activations_map[1] + 5064);
 8001ea0:	941c      	str	r4, [sp, #112]	@ 0x70
    conv2d_24_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8001ea2:	441e      	add	r6, r3
    conv2d_157_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 152160);
 8001ea4:	4cb1      	ldr	r4, [pc, #708]	@ (800216c <network_configure_activations+0x8a8>)
 8001ea6:	191c      	adds	r4, r3, r4
 8001ea8:	941e      	str	r4, [sp, #120]	@ 0x78
    conv2d_170_output_array.data = AI_PTR(g_network_activations_map[1] + 28368);
 8001eaa:	4664      	mov	r4, ip
    upsample_181_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 8001eac:	f8df c3d0 	ldr.w	ip, [pc, #976]	@ 8002280 <network_configure_activations+0x9bc>
    conv2d_170_output_array.data = AI_PTR(g_network_activations_map[1] + 28368);
 8001eb0:	191c      	adds	r4, r3, r4
    upsample_181_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 8001eb2:	449c      	add	ip, r3
    conv2d_170_output_array.data = AI_PTR(g_network_activations_map[1] + 28368);
 8001eb4:	941f      	str	r4, [sp, #124]	@ 0x7c
    conv2d_184_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 47200);
 8001eb6:	464c      	mov	r4, r9
    conv2d_190_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001eb8:	f8df 93c8 	ldr.w	r9, [pc, #968]	@ 8002284 <network_configure_activations+0x9c0>
    conv2d_184_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 47200);
 8001ebc:	191c      	adds	r4, r3, r4
 8001ebe:	9420      	str	r4, [sp, #128]	@ 0x80
    conv2d_186_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8001ec0:	4cab      	ldr	r4, [pc, #684]	@ (8002170 <network_configure_activations+0x8ac>)
    conv2d_190_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ec2:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_191_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ec6:	f8df 93c0 	ldr.w	r9, [pc, #960]	@ 8002288 <network_configure_activations+0x9c4>
    conv2d_186_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8001eca:	191c      	adds	r4, r3, r4
    conv2d_191_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ecc:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_192_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ed0:	f8df 93b8 	ldr.w	r9, [pc, #952]	@ 800228c <network_configure_activations+0x9c8>
    conv2d_186_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8001ed4:	9423      	str	r4, [sp, #140]	@ 0x8c
    conv2d_188_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 94084);
 8001ed6:	4ca7      	ldr	r4, [pc, #668]	@ (8002174 <network_configure_activations+0x8b0>)
    conv2d_192_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ed8:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_193_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001edc:	f8df 93b0 	ldr.w	r9, [pc, #944]	@ 8002290 <network_configure_activations+0x9cc>
    conv2d_188_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 94084);
 8001ee0:	191c      	adds	r4, r3, r4
    conv2d_193_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ee2:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_194_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ee6:	f8df 93ac 	ldr.w	r9, [pc, #940]	@ 8002294 <network_configure_activations+0x9d0>
    conv2d_188_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 94084);
 8001eea:	9421      	str	r4, [sp, #132]	@ 0x84
    nl_201_output_array.data = AI_PTR(g_network_activations_map[1] + 126112);
 8001eec:	4ca2      	ldr	r4, [pc, #648]	@ (8002178 <network_configure_activations+0x8b4>)
    conv2d_194_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001eee:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_195_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ef2:	f8df 93a4 	ldr.w	r9, [pc, #932]	@ 8002298 <network_configure_activations+0x9d4>
    nl_201_output_array.data = AI_PTR(g_network_activations_map[1] + 126112);
 8001ef6:	191c      	adds	r4, r3, r4
    conv2d_195_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ef8:	e9c9 5502 	strd	r5, r5, [r9, #8]
    nl_201_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001efc:	f8df 939c 	ldr.w	r9, [pc, #924]	@ 800229c <network_configure_activations+0x9d8>
    nl_201_output_array.data = AI_PTR(g_network_activations_map[1] + 126112);
 8001f00:	9422      	str	r4, [sp, #136]	@ 0x88
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[1] + 90996);
 8001f02:	9c07      	ldr	r4, [sp, #28]
    nl_201_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001f04:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_203_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001f08:	f8df 9394 	ldr.w	r9, [pc, #916]	@ 80022a0 <network_configure_activations+0x9dc>
 8001f0c:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_204_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001f10:	f8df 9390 	ldr.w	r9, [pc, #912]	@ 80022a4 <network_configure_activations+0x9e0>
 8001f14:	e9c9 5502 	strd	r5, r5, [r9, #8]
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[1] + 90996);
 8001f18:	4d98      	ldr	r5, [pc, #608]	@ (800217c <network_configure_activations+0x8b8>)
    conv2d_26_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8001f1a:	f8df 938c 	ldr.w	r9, [pc, #908]	@ 80022a8 <network_configure_activations+0x9e4>
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[1] + 90996);
 8001f1e:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conversion_218_output_array.data = AI_PTR(g_network_activations_map[1] + 201588);
 8001f22:	9c06      	ldr	r4, [sp, #24]
 8001f24:	4d96      	ldr	r5, [pc, #600]	@ (8002180 <network_configure_activations+0x8bc>)
 8001f26:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[1] + 90992);
 8001f2a:	9c08      	ldr	r4, [sp, #32]
 8001f2c:	4d95      	ldr	r5, [pc, #596]	@ (8002184 <network_configure_activations+0x8c0>)
 8001f2e:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[1] + 52576);
 8001f32:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001f34:	4d94      	ldr	r5, [pc, #592]	@ (8002188 <network_configure_activations+0x8c4>)
 8001f36:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46368);
 8001f3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8001f3c:	4d93      	ldr	r5, [pc, #588]	@ (800218c <network_configure_activations+0x8c8>)
 8001f3e:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[1] + 44832);
 8001f42:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8001f44:	4d92      	ldr	r5, [pc, #584]	@ (8002190 <network_configure_activations+0x8cc>)
 8001f46:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[1] + 44064);
 8001f4a:	9c01      	ldr	r4, [sp, #4]
 8001f4c:	4d91      	ldr	r5, [pc, #580]	@ (8002194 <network_configure_activations+0x8d0>)
 8001f4e:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[1] + 44064);
 8001f52:	4d91      	ldr	r5, [pc, #580]	@ (8002198 <network_configure_activations+0x8d4>)
 8001f54:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[1] + 154656);
 8001f58:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8001f5a:	4d90      	ldr	r5, [pc, #576]	@ (800219c <network_configure_activations+0x8d8>)
 8001f5c:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[1] + 44064);
 8001f60:	9c01      	ldr	r4, [sp, #4]
 8001f62:	4d8f      	ldr	r5, [pc, #572]	@ (80021a0 <network_configure_activations+0x8dc>)
 8001f64:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_9_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 34656);
 8001f68:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8001f6a:	4d8e      	ldr	r5, [pc, #568]	@ (80021a4 <network_configure_activations+0x8e0>)
 8001f6c:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 8001f70:	4d8d      	ldr	r5, [pc, #564]	@ (80021a8 <network_configure_activations+0x8e4>)
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[1] + 173088);
 8001f72:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 8001f74:	e9c5 ee02 	strd	lr, lr, [r5, #8]
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[1] + 173088);
 8001f78:	4d8c      	ldr	r5, [pc, #560]	@ (80021ac <network_configure_activations+0x8e8>)
 8001f7a:	e9c5 4402 	strd	r4, r4, [r5, #8]
    eltwise_11_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 8001f7e:	4d8c      	ldr	r5, [pc, #560]	@ (80021b0 <network_configure_activations+0x8ec>)
    conv2d_14_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46128);
 8001f80:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
    eltwise_11_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 8001f82:	e9c5 ee02 	strd	lr, lr, [r5, #8]
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[1] + 50784);
 8001f86:	4d8b      	ldr	r5, [pc, #556]	@ (80021b4 <network_configure_activations+0x8f0>)
 8001f88:	e9c5 bb02 	strd	fp, fp, [r5, #8]
    conv2d_14_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 46128);
 8001f8c:	4d8a      	ldr	r5, [pc, #552]	@ (80021b8 <network_configure_activations+0x8f4>)
 8001f8e:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[1] + 161376);
 8001f92:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8001f94:	4d89      	ldr	r5, [pc, #548]	@ (80021bc <network_configure_activations+0x8f8>)
 8001f96:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 8001f9a:	4d89      	ldr	r5, [pc, #548]	@ (80021c0 <network_configure_activations+0x8fc>)
    conv2d_17_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 96864);
 8001f9c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 8001f9e:	e9c5 ee02 	strd	lr, lr, [r5, #8]
    conv2d_16_output_array.data = AI_PTR(g_network_activations_map[1] + 41568);
 8001fa2:	4d88      	ldr	r5, [pc, #544]	@ (80021c4 <network_configure_activations+0x900>)
 8001fa4:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_17_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 96864);
 8001fa8:	4d87      	ldr	r5, [pc, #540]	@ (80021c8 <network_configure_activations+0x904>)
 8001faa:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[1] + 41568);
 8001fae:	4d87      	ldr	r5, [pc, #540]	@ (80021cc <network_configure_activations+0x908>)
 8001fb0:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_18_output_array.data = AI_PTR(g_network_activations_map[1] + 96864);
 8001fb4:	4d86      	ldr	r5, [pc, #536]	@ (80021d0 <network_configure_activations+0x90c>)
 8001fb6:	e9c5 4402 	strd	r4, r4, [r5, #8]
    eltwise_19_output_array.data = AI_PTR(g_network_activations_map[1] + 41568);
 8001fba:	4d86      	ldr	r5, [pc, #536]	@ (80021d4 <network_configure_activations+0x910>)
    conv2d_182_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 8001fbc:	9c04      	ldr	r4, [sp, #16]
    eltwise_19_output_array.data = AI_PTR(g_network_activations_map[1] + 41568);
 8001fbe:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_20_output_array.data = AI_PTR(g_network_activations_map[1] + 50784);
 8001fc2:	4d85      	ldr	r5, [pc, #532]	@ (80021d8 <network_configure_activations+0x914>)
    conv2d_21_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106080);
 8001fc4:	4f85      	ldr	r7, [pc, #532]	@ (80021dc <network_configure_activations+0x918>)
    conv2d_20_output_array.data = AI_PTR(g_network_activations_map[1] + 50784);
 8001fc6:	e9c5 bb02 	strd	fp, fp, [r5, #8]
    conv2d_21_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106080);
 8001fca:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8001fcc:	e9c7 5502 	strd	r5, r5, [r7, #8]
    conv2d_21_output_array.data = AI_PTR(g_network_activations_map[1] + 50784);
 8001fd0:	4f83      	ldr	r7, [pc, #524]	@ (80021e0 <network_configure_activations+0x91c>)
 8001fd2:	e9c7 bb02 	strd	fp, fp, [r7, #8]
    conv2d_22_output_array.data = AI_PTR(g_network_activations_map[1] + 32352);
 8001fd6:	4f83      	ldr	r7, [pc, #524]	@ (80021e4 <network_configure_activations+0x920>)
 8001fd8:	e9c7 ee02 	strd	lr, lr, [r7, #8]
    eltwise_23_output_array.data = AI_PTR(g_network_activations_map[1] + 50784);
 8001fdc:	f8df e2cc 	ldr.w	lr, [pc, #716]	@ 80022ac <network_configure_activations+0x9e8>
 8001fe0:	e9ce bb02 	strd	fp, fp, [lr, #8]
    conv2d_182_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 8001fe4:	f8df e2c8 	ldr.w	lr, [pc, #712]	@ 80022b0 <network_configure_activations+0x9ec>
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 8001fe8:	f8df b2c8 	ldr.w	fp, [pc, #712]	@ 80022b4 <network_configure_activations+0x9f0>
    conv2d_182_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 8001fec:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv2d_24_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8001ff0:	f8df e2c4 	ldr.w	lr, [pc, #708]	@ 80022b8 <network_configure_activations+0x9f4>
 8001ff4:	e9ce 6602 	strd	r6, r6, [lr, #8]
    conv2d_26_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8001ff8:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 8001ffc:	9c02      	ldr	r4, [sp, #8]
    conv2d_29_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 24192);
 8001ffe:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
    conv2d_32_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8002000:	9f00      	ldr	r7, [sp, #0]
    conv2d_26_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8002002:	f8df 92b8 	ldr.w	r9, [pc, #696]	@ 80022bc <network_configure_activations+0x9f8>
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[1] + 10368);
 8002006:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 80022c0 <network_configure_activations+0x9fc>
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 800200a:	e9cb 4402 	strd	r4, r4, [fp, #8]
    conv2d_29_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 24192);
 800200e:	f8df b2b4 	ldr.w	fp, [pc, #692]	@ 80022c4 <network_configure_activations+0xa00>
 8002012:	e9cb 5502 	strd	r5, r5, [fp, #8]
    conv2d_29_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 8002016:	f8df b2b0 	ldr.w	fp, [pc, #688]	@ 80022c8 <network_configure_activations+0xa04>
 800201a:	e9cb 4402 	strd	r4, r4, [fp, #8]
    conv2d_32_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 800201e:	f8df b2ac 	ldr.w	fp, [pc, #684]	@ 80022cc <network_configure_activations+0xa08>
 8002022:	e9cb 7702 	strd	r7, r7, [fp, #8]
    conv2d_30_output_array.data = AI_PTR(g_network_activations_map[1] + 24192);
 8002026:	f8df b2a8 	ldr.w	fp, [pc, #680]	@ 80022d0 <network_configure_activations+0xa0c>
    conv2d_33_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 27648);
 800202a:	9f03      	ldr	r7, [sp, #12]
    conv2d_30_output_array.data = AI_PTR(g_network_activations_map[1] + 24192);
 800202c:	e9cb 5502 	strd	r5, r5, [fp, #8]
    eltwise_31_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 8002030:	f8df b2a0 	ldr.w	fp, [pc, #672]	@ 80022d4 <network_configure_activations+0xa10>
    conv2d_33_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8002034:	4d6c      	ldr	r5, [pc, #432]	@ (80021e8 <network_configure_activations+0x924>)
    conv2d_26_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8002036:	e9c9 6602 	strd	r6, r6, [r9, #8]
    eltwise_31_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 800203a:	e9cb 4402 	strd	r4, r4, [fp, #8]
    conv2d_27_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 800203e:	f8df 9298 	ldr.w	r9, [pc, #664]	@ 80022d8 <network_configure_activations+0xa14>
    conv2d_33_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8002042:	9c00      	ldr	r4, [sp, #0]
    conv2d_33_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 27648);
 8002044:	f8df b294 	ldr.w	fp, [pc, #660]	@ 80022dc <network_configure_activations+0xa18>
    conv2d_27_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8002048:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_33_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 800204c:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_33_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 27648);
 8002050:	e9cb 7702 	strd	r7, r7, [fp, #8]
    conv2d_34_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8002054:	f8df 9288 	ldr.w	r9, [pc, #648]	@ 80022e0 <network_configure_activations+0xa1c>
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[1] + 10368);
 8002058:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    eltwise_35_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 800205a:	4d64      	ldr	r5, [pc, #400]	@ (80021ec <network_configure_activations+0x928>)
    conv2d_34_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 800205c:	e9c9 3302 	strd	r3, r3, [r9, #8]
    eltwise_35_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8002060:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[1] + 10368);
 8002064:	e9ce 7702 	strd	r7, r7, [lr, #8]
    conv2d_37_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 31104);
 8002068:	4c61      	ldr	r4, [pc, #388]	@ (80021f0 <network_configure_activations+0x92c>)
 800206a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800206c:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_37_output_array.data = AI_PTR(g_network_activations_map[1] + 10368);
 8002070:	4d60      	ldr	r5, [pc, #384]	@ (80021f4 <network_configure_activations+0x930>)
    conv2d_40_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8002072:	9c00      	ldr	r4, [sp, #0]
    conv2d_37_output_array.data = AI_PTR(g_network_activations_map[1] + 10368);
 8002074:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_38_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8002078:	4d5f      	ldr	r5, [pc, #380]	@ (80021f8 <network_configure_activations+0x934>)
    eltwise_39_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 800207a:	9f02      	ldr	r7, [sp, #8]
    conv2d_38_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 800207c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_39_output_array.data = AI_PTR(g_network_activations_map[1] + 3456);
 8002080:	4d5e      	ldr	r5, [pc, #376]	@ (80021fc <network_configure_activations+0x938>)
 8002082:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_40_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8002086:	4d5e      	ldr	r5, [pc, #376]	@ (8002200 <network_configure_activations+0x93c>)
    conv2d_41_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 27648);
 8002088:	9f03      	ldr	r7, [sp, #12]
    conv2d_40_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 800208a:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_41_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 27648);
 800208e:	4d5d      	ldr	r5, [pc, #372]	@ (8002204 <network_configure_activations+0x940>)
 8002090:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_41_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8002094:	4d5c      	ldr	r5, [pc, #368]	@ (8002208 <network_configure_activations+0x944>)
    conv2d_42_output_array.data = AI_PTR(g_network_activations_map[1] + 20736);
 8002096:	9f16      	ldr	r7, [sp, #88]	@ 0x58
    conv2d_41_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8002098:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_42_output_array.data = AI_PTR(g_network_activations_map[1] + 20736);
 800209c:	4d5b      	ldr	r5, [pc, #364]	@ (800220c <network_configure_activations+0x948>)
 800209e:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_43_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 80020a2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80020a4:	4d5a      	ldr	r5, [pc, #360]	@ (8002210 <network_configure_activations+0x94c>)
 80020a6:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_44_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80020aa:	4d5a      	ldr	r5, [pc, #360]	@ (8002214 <network_configure_activations+0x950>)
 80020ac:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_44_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 80020b0:	4d59      	ldr	r5, [pc, #356]	@ (8002218 <network_configure_activations+0x954>)
 80020b2:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_45_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 80020b6:	4d59      	ldr	r5, [pc, #356]	@ (800221c <network_configure_activations+0x958>)
 80020b8:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_46_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 80020bc:	4d58      	ldr	r5, [pc, #352]	@ (8002220 <network_configure_activations+0x95c>)
 80020be:	e9c5 1102 	strd	r1, r1, [r5, #8]
    conv2d_47_output_array.data = AI_PTR(g_network_activations_map[1] + 9216);
 80020c2:	4d58      	ldr	r5, [pc, #352]	@ (8002224 <network_configure_activations+0x960>)
 80020c4:	e9c5 aa02 	strd	sl, sl, [r5, #8]
    conv2d_48_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80020c8:	4d57      	ldr	r5, [pc, #348]	@ (8002228 <network_configure_activations+0x964>)
    conv2d_151_output_array.data = AI_PTR(g_network_activations_map[1] + 13824);
 80020ca:	9f18      	ldr	r7, [sp, #96]	@ 0x60
    conv2d_48_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80020cc:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_48_output_array.data = AI_PTR(g_network_activations_map[1] + 9216);
 80020d0:	4d56      	ldr	r5, [pc, #344]	@ (800222c <network_configure_activations+0x968>)
 80020d2:	e9c5 aa02 	strd	sl, sl, [r5, #8]
    conv2d_49_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 80020d6:	4d56      	ldr	r5, [pc, #344]	@ (8002230 <network_configure_activations+0x96c>)
 80020d8:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_50_output_array.data = AI_PTR(g_network_activations_map[1] + 9216);
 80020dc:	4d55      	ldr	r5, [pc, #340]	@ (8002234 <network_configure_activations+0x970>)
 80020de:	e9c5 aa02 	strd	sl, sl, [r5, #8]
    conv2d_151_output_array.data = AI_PTR(g_network_activations_map[1] + 13824);
 80020e2:	4d55      	ldr	r5, [pc, #340]	@ (8002238 <network_configure_activations+0x974>)
 80020e4:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_51_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 80020e8:	4d54      	ldr	r5, [pc, #336]	@ (800223c <network_configure_activations+0x978>)
    eltwise_58_output_array.data = AI_PTR(g_network_activations_map[1] + 2016);
 80020ea:	9f19      	ldr	r7, [sp, #100]	@ 0x64
    conv2d_51_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 80020ec:	e9c5 0002 	strd	r0, r0, [r5, #8]
    conv2d_53_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80020f0:	4d53      	ldr	r5, [pc, #332]	@ (8002240 <network_configure_activations+0x97c>)
 80020f2:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_53_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 80020f6:	4d53      	ldr	r5, [pc, #332]	@ (8002244 <network_configure_activations+0x980>)
 80020f8:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_54_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 80020fc:	4d52      	ldr	r5, [pc, #328]	@ (8002248 <network_configure_activations+0x984>)
 80020fe:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_55_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 8002102:	4d52      	ldr	r5, [pc, #328]	@ (800224c <network_configure_activations+0x988>)
 8002104:	e9c5 0002 	strd	r0, r0, [r5, #8]
    conv2d_56_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8002108:	4d51      	ldr	r5, [pc, #324]	@ (8002250 <network_configure_activations+0x98c>)
 800210a:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_56_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 800210e:	4d51      	ldr	r5, [pc, #324]	@ (8002254 <network_configure_activations+0x990>)
 8002110:	e9c5 0002 	strd	r0, r0, [r5, #8]
    conv2d_57_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8002114:	4d50      	ldr	r5, [pc, #320]	@ (8002258 <network_configure_activations+0x994>)
 8002116:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_58_output_array.data = AI_PTR(g_network_activations_map[1] + 2016);
 800211a:	4d50      	ldr	r5, [pc, #320]	@ (800225c <network_configure_activations+0x998>)
 800211c:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_59_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 8002120:	4f4f      	ldr	r7, [pc, #316]	@ (8002260 <network_configure_activations+0x99c>)
    eltwise_62_output_array.data = AI_PTR(g_network_activations_map[1] + 4032);
 8002122:	4d50      	ldr	r5, [pc, #320]	@ (8002264 <network_configure_activations+0x9a0>)
    conv2d_59_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 8002124:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_60_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8002128:	4f4f      	ldr	r7, [pc, #316]	@ (8002268 <network_configure_activations+0x9a4>)
 800212a:	e9c7 6602 	strd	r6, r6, [r7, #8]
    conv2d_60_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 800212e:	4f4f      	ldr	r7, [pc, #316]	@ (800226c <network_configure_activations+0x9a8>)
 8002130:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_61_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8002134:	4f4e      	ldr	r7, [pc, #312]	@ (8002270 <network_configure_activations+0x9ac>)
 8002136:	e9c7 3302 	strd	r3, r3, [r7, #8]
    eltwise_62_output_array.data = AI_PTR(g_network_activations_map[1] + 4032);
 800213a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800213c:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_63_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 8002140:	4f4c      	ldr	r7, [pc, #304]	@ (8002274 <network_configure_activations+0x9b0>)
    conv2d_105_output_array.data = AI_PTR(g_network_activations_map[1] + 8064);
 8002142:	f503 55fc 	add.w	r5, r3, #8064	@ 0x1f80
    conv2d_63_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 8002146:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_64_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 800214a:	4f4b      	ldr	r7, [pc, #300]	@ (8002278 <network_configure_activations+0x9b4>)
 800214c:	e9c7 6602 	strd	r6, r6, [r7, #8]
    conv2d_64_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8002150:	4f4a      	ldr	r7, [pc, #296]	@ (800227c <network_configure_activations+0x9b8>)
 8002152:	e9c7 3302 	strd	r3, r3, [r7, #8]
 8002156:	e0c5      	b.n	80022e4 <network_configure_activations+0xa20>
 8002158:	00025c20 	.word	0x00025c20
 800215c:	0002a420 	.word	0x0002a420
 8002160:	00027660 	.word	0x00027660
 8002164:	00017a60 	.word	0x00017a60
 8002168:	00020a60 	.word	0x00020a60
 800216c:	00025260 	.word	0x00025260
 8002170:	0001a184 	.word	0x0001a184
 8002174:	00016f84 	.word	0x00016f84
 8002178:	0001eca0 	.word	0x0001eca0
 800217c:	24010db0 	.word	0x24010db0
 8002180:	24010dc0 	.word	0x24010dc0
 8002184:	24010da0 	.word	0x24010da0
 8002188:	24010d90 	.word	0x24010d90
 800218c:	24010d80 	.word	0x24010d80
 8002190:	24010d70 	.word	0x24010d70
 8002194:	24010d60 	.word	0x24010d60
 8002198:	24010d30 	.word	0x24010d30
 800219c:	24010d20 	.word	0x24010d20
 80021a0:	24010d10 	.word	0x24010d10
 80021a4:	24010d00 	.word	0x24010d00
 80021a8:	24010cf0 	.word	0x24010cf0
 80021ac:	24010ce0 	.word	0x24010ce0
 80021b0:	24010cd0 	.word	0x24010cd0
 80021b4:	24010cc0 	.word	0x24010cc0
 80021b8:	24010cb0 	.word	0x24010cb0
 80021bc:	24010ca0 	.word	0x24010ca0
 80021c0:	24010c90 	.word	0x24010c90
 80021c4:	24010c80 	.word	0x24010c80
 80021c8:	24010c70 	.word	0x24010c70
 80021cc:	24010c60 	.word	0x24010c60
 80021d0:	24010c50 	.word	0x24010c50
 80021d4:	24010c40 	.word	0x24010c40
 80021d8:	24010c30 	.word	0x24010c30
 80021dc:	24010c20 	.word	0x24010c20
 80021e0:	24010c10 	.word	0x24010c10
 80021e4:	24010c00 	.word	0x24010c00
 80021e8:	24010b20 	.word	0x24010b20
 80021ec:	24010b00 	.word	0x24010b00
 80021f0:	24010ae0 	.word	0x24010ae0
 80021f4:	24010ad0 	.word	0x24010ad0
 80021f8:	24010ac0 	.word	0x24010ac0
 80021fc:	24010ab0 	.word	0x24010ab0
 8002200:	24010aa0 	.word	0x24010aa0
 8002204:	24010a90 	.word	0x24010a90
 8002208:	24010a80 	.word	0x24010a80
 800220c:	24010a70 	.word	0x24010a70
 8002210:	24010a60 	.word	0x24010a60
 8002214:	24010a50 	.word	0x24010a50
 8002218:	24010a40 	.word	0x24010a40
 800221c:	24010a30 	.word	0x24010a30
 8002220:	24010a20 	.word	0x24010a20
 8002224:	24010a10 	.word	0x24010a10
 8002228:	24010a00 	.word	0x24010a00
 800222c:	240109f0 	.word	0x240109f0
 8002230:	240109e0 	.word	0x240109e0
 8002234:	240109d0 	.word	0x240109d0
 8002238:	240109c0 	.word	0x240109c0
 800223c:	240109b0 	.word	0x240109b0
 8002240:	240109a0 	.word	0x240109a0
 8002244:	24010990 	.word	0x24010990
 8002248:	24010980 	.word	0x24010980
 800224c:	24010970 	.word	0x24010970
 8002250:	24010960 	.word	0x24010960
 8002254:	24010950 	.word	0x24010950
 8002258:	24010940 	.word	0x24010940
 800225c:	24010930 	.word	0x24010930
 8002260:	24010920 	.word	0x24010920
 8002264:	240108e0 	.word	0x240108e0
 8002268:	24010910 	.word	0x24010910
 800226c:	24010900 	.word	0x24010900
 8002270:	240108f0 	.word	0x240108f0
 8002274:	240108d0 	.word	0x240108d0
 8002278:	240108c0 	.word	0x240108c0
 800227c:	240108b0 	.word	0x240108b0
 8002280:	000403c4 	.word	0x000403c4
 8002284:	2400eae0 	.word	0x2400eae0
 8002288:	2400ead0 	.word	0x2400ead0
 800228c:	2400eac0 	.word	0x2400eac0
 8002290:	2400eab0 	.word	0x2400eab0
 8002294:	2400eaa0 	.word	0x2400eaa0
 8002298:	2400ea90 	.word	0x2400ea90
 800229c:	2400ea80 	.word	0x2400ea80
 80022a0:	2400ea70 	.word	0x2400ea70
 80022a4:	2400ea60 	.word	0x2400ea60
 80022a8:	24010bc0 	.word	0x24010bc0
 80022ac:	24010bf0 	.word	0x24010bf0
 80022b0:	24010be0 	.word	0x24010be0
 80022b4:	24010b90 	.word	0x24010b90
 80022b8:	24010bd0 	.word	0x24010bd0
 80022bc:	24010bb0 	.word	0x24010bb0
 80022c0:	24010af0 	.word	0x24010af0
 80022c4:	24010b80 	.word	0x24010b80
 80022c8:	24010b70 	.word	0x24010b70
 80022cc:	24010b40 	.word	0x24010b40
 80022d0:	24010b60 	.word	0x24010b60
 80022d4:	24010b50 	.word	0x24010b50
 80022d8:	24010ba0 	.word	0x24010ba0
 80022dc:	24010b30 	.word	0x24010b30
 80022e0:	24010b10 	.word	0x24010b10
    conv2d_65_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 80022e4:	4fbc      	ldr	r7, [pc, #752]	@ (80025d8 <network_configure_activations+0xd14>)
 80022e6:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_66_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80022ea:	4fbc      	ldr	r7, [pc, #752]	@ (80025dc <network_configure_activations+0xd18>)
 80022ec:	e9c7 6602 	strd	r6, r6, [r7, #8]
    conv2d_67_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 80022f0:	4fbb      	ldr	r7, [pc, #748]	@ (80025e0 <network_configure_activations+0xd1c>)
 80022f2:	e9c7 3302 	strd	r3, r3, [r7, #8]
    conv2d_68_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 80022f6:	4fbb      	ldr	r7, [pc, #748]	@ (80025e4 <network_configure_activations+0xd20>)
 80022f8:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_68_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 80022fc:	4fba      	ldr	r7, [pc, #744]	@ (80025e8 <network_configure_activations+0xd24>)
 80022fe:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_69_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8002302:	4fba      	ldr	r7, [pc, #744]	@ (80025ec <network_configure_activations+0xd28>)
 8002304:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_70_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 8002308:	4fb9      	ldr	r7, [pc, #740]	@ (80025f0 <network_configure_activations+0xd2c>)
 800230a:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_70_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 800230e:	4fb9      	ldr	r7, [pc, #740]	@ (80025f4 <network_configure_activations+0xd30>)
 8002310:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_71_output_array.data = AI_PTR(g_network_activations_map[1] + 9216);
 8002314:	4fb8      	ldr	r7, [pc, #736]	@ (80025f8 <network_configure_activations+0xd34>)
 8002316:	e9c7 aa02 	strd	sl, sl, [r7, #8]
    conv2d_72_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 800231a:	4fb8      	ldr	r7, [pc, #736]	@ (80025fc <network_configure_activations+0xd38>)
 800231c:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_72_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8002320:	4fb7      	ldr	r7, [pc, #732]	@ (8002600 <network_configure_activations+0xd3c>)
 8002322:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_73_output_array.data = AI_PTR(g_network_activations_map[1] + 9216);
 8002326:	4fb7      	ldr	r7, [pc, #732]	@ (8002604 <network_configure_activations+0xd40>)
 8002328:	e9c7 aa02 	strd	sl, sl, [r7, #8]
    conv2d_74_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 800232c:	4fb6      	ldr	r7, [pc, #728]	@ (8002608 <network_configure_activations+0xd44>)
 800232e:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_74_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8002332:	4fb6      	ldr	r7, [pc, #728]	@ (800260c <network_configure_activations+0xd48>)
 8002334:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_75_output_array.data = AI_PTR(g_network_activations_map[1] + 9216);
 8002338:	4fb5      	ldr	r7, [pc, #724]	@ (8002610 <network_configure_activations+0xd4c>)
 800233a:	e9c7 aa02 	strd	sl, sl, [r7, #8]
    conv2d_76_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 800233e:	4fb5      	ldr	r7, [pc, #724]	@ (8002614 <network_configure_activations+0xd50>)
 8002340:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_76_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8002344:	4fb4      	ldr	r7, [pc, #720]	@ (8002618 <network_configure_activations+0xd54>)
 8002346:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_77_output_array.data = AI_PTR(g_network_activations_map[1] + 32256);
 800234a:	4fb4      	ldr	r7, [pc, #720]	@ (800261c <network_configure_activations+0xd58>)
 800234c:	e9c7 0002 	strd	r0, r0, [r7, #8]
    conv2d_82_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 8002350:	4fb3      	ldr	r7, [pc, #716]	@ (8002620 <network_configure_activations+0xd5c>)
    conv2d_95_output_array.data = AI_PTR(g_network_activations_map[1] + 5760);
 8002352:	48b4      	ldr	r0, [pc, #720]	@ (8002624 <network_configure_activations+0xd60>)
    conv2d_82_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 8002354:	e9c7 8802 	strd	r8, r8, [r7, #8]
    conv2d_82_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8002358:	4fb3      	ldr	r7, [pc, #716]	@ (8002628 <network_configure_activations+0xd64>)
 800235a:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_83_output_array.data = AI_PTR(g_network_activations_map[1] + 9216);
 800235e:	4fb3      	ldr	r7, [pc, #716]	@ (800262c <network_configure_activations+0xd68>)
 8002360:	e9c7 aa02 	strd	sl, sl, [r7, #8]
    conv2d_94_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 8002364:	4fb2      	ldr	r7, [pc, #712]	@ (8002630 <network_configure_activations+0xd6c>)
 8002366:	e9c7 8802 	strd	r8, r8, [r7, #8]
    conv2d_94_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 800236a:	4fb2      	ldr	r7, [pc, #712]	@ (8002634 <network_configure_activations+0xd70>)
 800236c:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_95_output_array.data = AI_PTR(g_network_activations_map[1] + 5760);
 8002370:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8002372:	e9c0 7702 	strd	r7, r7, [r0, #8]
    conv2d_96_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8002376:	48b0      	ldr	r0, [pc, #704]	@ (8002638 <network_configure_activations+0xd74>)
 8002378:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_96_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 800237c:	48af      	ldr	r0, [pc, #700]	@ (800263c <network_configure_activations+0xd78>)
 800237e:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_97_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8002382:	48af      	ldr	r0, [pc, #700]	@ (8002640 <network_configure_activations+0xd7c>)
 8002384:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_98_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8002388:	48ae      	ldr	r0, [pc, #696]	@ (8002644 <network_configure_activations+0xd80>)
 800238a:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_98_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 800238e:	48ae      	ldr	r0, [pc, #696]	@ (8002648 <network_configure_activations+0xd84>)
 8002390:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_99_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 8002394:	48ad      	ldr	r0, [pc, #692]	@ (800264c <network_configure_activations+0xd88>)
 8002396:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_100_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 800239a:	48ad      	ldr	r0, [pc, #692]	@ (8002650 <network_configure_activations+0xd8c>)
 800239c:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_100_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 80023a0:	48ac      	ldr	r0, [pc, #688]	@ (8002654 <network_configure_activations+0xd90>)
 80023a2:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_101_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 80023a6:	48ac      	ldr	r0, [pc, #688]	@ (8002658 <network_configure_activations+0xd94>)
 80023a8:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_102_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80023ac:	48ab      	ldr	r0, [pc, #684]	@ (800265c <network_configure_activations+0xd98>)
 80023ae:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_102_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 80023b2:	48ab      	ldr	r0, [pc, #684]	@ (8002660 <network_configure_activations+0xd9c>)
 80023b4:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_103_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 80023b8:	48aa      	ldr	r0, [pc, #680]	@ (8002664 <network_configure_activations+0xda0>)
 80023ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_104_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80023be:	48aa      	ldr	r0, [pc, #680]	@ (8002668 <network_configure_activations+0xda4>)
 80023c0:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_104_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 80023c4:	48a9      	ldr	r0, [pc, #676]	@ (800266c <network_configure_activations+0xda8>)
 80023c6:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_105_output_array.data = AI_PTR(g_network_activations_map[1] + 8064);
 80023ca:	48a9      	ldr	r0, [pc, #676]	@ (8002670 <network_configure_activations+0xdac>)
 80023cc:	e9c0 5502 	strd	r5, r5, [r0, #8]
    conv2d_110_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80023d0:	48a8      	ldr	r0, [pc, #672]	@ (8002674 <network_configure_activations+0xdb0>)
 80023d2:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_110_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 80023d6:	48a8      	ldr	r0, [pc, #672]	@ (8002678 <network_configure_activations+0xdb4>)
 80023d8:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_111_output_array.data = AI_PTR(g_network_activations_map[1] + 6912);
 80023dc:	48a7      	ldr	r0, [pc, #668]	@ (800267c <network_configure_activations+0xdb8>)
 80023de:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_122_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80023e2:	48a7      	ldr	r0, [pc, #668]	@ (8002680 <network_configure_activations+0xdbc>)
    conv2d_127_output_array.data = AI_PTR(g_network_activations_map[1] + 5024);
 80023e4:	f503 549d 	add.w	r4, r3, #5024	@ 0x13a0
    conv2d_123_output_array.data = AI_PTR(g_network_activations_map[1] + 5120);
 80023e8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
    conv2d_125_output_array.data = AI_PTR(g_network_activations_map[1] + 5064);
 80023ea:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
    conv2d_122_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80023ec:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_122_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 80023f0:	48a4      	ldr	r0, [pc, #656]	@ (8002684 <network_configure_activations+0xdc0>)
 80023f2:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_123_output_array.data = AI_PTR(g_network_activations_map[1] + 5120);
 80023f6:	48a4      	ldr	r0, [pc, #656]	@ (8002688 <network_configure_activations+0xdc4>)
 80023f8:	e9c0 5502 	strd	r5, r5, [r0, #8]
    conv2d_124_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80023fc:	48a3      	ldr	r0, [pc, #652]	@ (800268c <network_configure_activations+0xdc8>)
 80023fe:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_124_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8002402:	48a3      	ldr	r0, [pc, #652]	@ (8002690 <network_configure_activations+0xdcc>)
 8002404:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_125_output_array.data = AI_PTR(g_network_activations_map[1] + 5064);
 8002408:	48a2      	ldr	r0, [pc, #648]	@ (8002694 <network_configure_activations+0xdd0>)
 800240a:	e9c0 7702 	strd	r7, r7, [r0, #8]
    conv2d_126_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 800240e:	48a2      	ldr	r0, [pc, #648]	@ (8002698 <network_configure_activations+0xdd4>)
 8002410:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_126_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8002414:	48a1      	ldr	r0, [pc, #644]	@ (800269c <network_configure_activations+0xdd8>)
 8002416:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_127_output_array.data = AI_PTR(g_network_activations_map[1] + 5024);
 800241a:	48a1      	ldr	r0, [pc, #644]	@ (80026a0 <network_configure_activations+0xddc>)
 800241c:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_128_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8002420:	48a0      	ldr	r0, [pc, #640]	@ (80026a4 <network_configure_activations+0xde0>)
    conv2d_133_output_array.data = AI_PTR(g_network_activations_map[1] + 5632);
 8002422:	f503 54b0 	add.w	r4, r3, #5632	@ 0x1600
    conv2d_128_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8002426:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_128_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 800242a:	489f      	ldr	r0, [pc, #636]	@ (80026a8 <network_configure_activations+0xde4>)
 800242c:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_129_output_array.data = AI_PTR(g_network_activations_map[1] + 5120);
 8002430:	489e      	ldr	r0, [pc, #632]	@ (80026ac <network_configure_activations+0xde8>)
 8002432:	e9c0 5502 	strd	r5, r5, [r0, #8]
    conv2d_130_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8002436:	489e      	ldr	r0, [pc, #632]	@ (80026b0 <network_configure_activations+0xdec>)
 8002438:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_130_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 800243c:	489d      	ldr	r0, [pc, #628]	@ (80026b4 <network_configure_activations+0xdf0>)
 800243e:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_131_output_array.data = AI_PTR(g_network_activations_map[1] + 5120);
 8002442:	489d      	ldr	r0, [pc, #628]	@ (80026b8 <network_configure_activations+0xdf4>)
 8002444:	e9c0 5502 	strd	r5, r5, [r0, #8]
    conv2d_132_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8002448:	489c      	ldr	r0, [pc, #624]	@ (80026bc <network_configure_activations+0xdf8>)
 800244a:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_132_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 800244e:	489c      	ldr	r0, [pc, #624]	@ (80026c0 <network_configure_activations+0xdfc>)
 8002450:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_133_output_array.data = AI_PTR(g_network_activations_map[1] + 5632);
 8002454:	489b      	ldr	r0, [pc, #620]	@ (80026c4 <network_configure_activations+0xe00>)
 8002456:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_138_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 800245a:	489b      	ldr	r0, [pc, #620]	@ (80026c8 <network_configure_activations+0xe04>)
 800245c:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_138_output_array.data = AI_PTR(g_network_activations_map[1] + 4608);
 8002460:	489a      	ldr	r0, [pc, #616]	@ (80026cc <network_configure_activations+0xe08>)
 8002462:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_139_output_array.data = AI_PTR(g_network_activations_map[1] + 5120);
 8002466:	499a      	ldr	r1, [pc, #616]	@ (80026d0 <network_configure_activations+0xe0c>)
    conv2d_157_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 152160);
 8002468:	981e      	ldr	r0, [sp, #120]	@ 0x78
    conv2d_139_output_array.data = AI_PTR(g_network_activations_map[1] + 5120);
 800246a:	e9c1 5502 	strd	r5, r5, [r1, #8]
    upsample_150_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 800246e:	4999      	ldr	r1, [pc, #612]	@ (80026d4 <network_configure_activations+0xe10>)
 8002470:	e9c1 8802 	strd	r8, r8, [r1, #8]
    eltwise_152_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8002474:	4998      	ldr	r1, [pc, #608]	@ (80026d8 <network_configure_activations+0xe14>)
 8002476:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_153_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 800247a:	4998      	ldr	r1, [pc, #608]	@ (80026dc <network_configure_activations+0xe18>)
 800247c:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_153_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8002480:	4997      	ldr	r1, [pc, #604]	@ (80026e0 <network_configure_activations+0xe1c>)
 8002482:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_154_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 8002486:	4997      	ldr	r1, [pc, #604]	@ (80026e4 <network_configure_activations+0xe20>)
 8002488:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_155_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 800248c:	4996      	ldr	r1, [pc, #600]	@ (80026e8 <network_configure_activations+0xe24>)
 800248e:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_155_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 8002492:	4996      	ldr	r1, [pc, #600]	@ (80026ec <network_configure_activations+0xe28>)
 8002494:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_156_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 8002498:	4995      	ldr	r1, [pc, #596]	@ (80026f0 <network_configure_activations+0xe2c>)
 800249a:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_157_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 152160);
 800249e:	4995      	ldr	r1, [pc, #596]	@ (80026f4 <network_configure_activations+0xe30>)
 80024a0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_157_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80024a4:	4994      	ldr	r1, [pc, #592]	@ (80026f8 <network_configure_activations+0xe34>)
 80024a6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_158_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80024aa:	4994      	ldr	r1, [pc, #592]	@ (80026fc <network_configure_activations+0xe38>)
    conv2d_170_output_array.data = AI_PTR(g_network_activations_map[1] + 28368);
 80024ac:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
    conv2d_158_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80024ae:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_159_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 152160);
 80024b2:	4993      	ldr	r1, [pc, #588]	@ (8002700 <network_configure_activations+0xe3c>)
 80024b4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_159_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80024b8:	4992      	ldr	r1, [pc, #584]	@ (8002704 <network_configure_activations+0xe40>)
 80024ba:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_160_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80024be:	4992      	ldr	r1, [pc, #584]	@ (8002708 <network_configure_activations+0xe44>)
 80024c0:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_161_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 152160);
 80024c4:	4991      	ldr	r1, [pc, #580]	@ (800270c <network_configure_activations+0xe48>)
 80024c6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_161_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80024ca:	4991      	ldr	r1, [pc, #580]	@ (8002710 <network_configure_activations+0xe4c>)
 80024cc:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_162_output_array.data = AI_PTR(g_network_activations_map[1] + 133728);
 80024d0:	4990      	ldr	r1, [pc, #576]	@ (8002714 <network_configure_activations+0xe50>)
 80024d2:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_163_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 152160);
 80024d6:	4990      	ldr	r1, [pc, #576]	@ (8002718 <network_configure_activations+0xe54>)
 80024d8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_163_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80024dc:	498f      	ldr	r1, [pc, #572]	@ (800271c <network_configure_activations+0xe58>)
 80024de:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_164_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 80024e2:	498f      	ldr	r1, [pc, #572]	@ (8002720 <network_configure_activations+0xe5c>)
 80024e4:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_169_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 152160);
 80024e8:	498e      	ldr	r1, [pc, #568]	@ (8002724 <network_configure_activations+0xe60>)
 80024ea:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_169_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80024ee:	498e      	ldr	r1, [pc, #568]	@ (8002728 <network_configure_activations+0xe64>)
    eltwise_183_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 80024f0:	9804      	ldr	r0, [sp, #16]
    conv2d_169_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80024f2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_170_output_array.data = AI_PTR(g_network_activations_map[1] + 28368);
 80024f6:	498d      	ldr	r1, [pc, #564]	@ (800272c <network_configure_activations+0xe68>)
 80024f8:	e9c1 5502 	strd	r5, r5, [r1, #8]
    upsample_181_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 80024fc:	498c      	ldr	r1, [pc, #560]	@ (8002730 <network_configure_activations+0xe6c>)
 80024fe:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    eltwise_183_output_array.data = AI_PTR(g_network_activations_map[1] + 60000);
 8002502:	498c      	ldr	r1, [pc, #560]	@ (8002734 <network_configure_activations+0xe70>)
 8002504:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_184_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 47200);
 8002508:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 800250a:	498b      	ldr	r1, [pc, #556]	@ (8002738 <network_configure_activations+0xe74>)
    conv2d_186_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 800250c:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
    conv2d_188_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 94084);
 800250e:	9821      	ldr	r0, [sp, #132]	@ 0x84
    conv2d_184_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 47200);
 8002510:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_184_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 8002514:	4989      	ldr	r1, [pc, #548]	@ (800273c <network_configure_activations+0xe78>)
    conv2d_203_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8002516:	4d8a      	ldr	r5, [pc, #552]	@ (8002740 <network_configure_activations+0xe7c>)
    conv2d_184_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 8002518:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_185_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 800251c:	4989      	ldr	r1, [pc, #548]	@ (8002744 <network_configure_activations+0xe80>)
 800251e:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_186_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8002522:	4989      	ldr	r1, [pc, #548]	@ (8002748 <network_configure_activations+0xe84>)
 8002524:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_186_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 8002528:	4988      	ldr	r1, [pc, #544]	@ (800274c <network_configure_activations+0xe88>)
 800252a:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_187_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 800252e:	4988      	ldr	r1, [pc, #544]	@ (8002750 <network_configure_activations+0xe8c>)
 8002530:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_188_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 94084);
 8002534:	4987      	ldr	r1, [pc, #540]	@ (8002754 <network_configure_activations+0xe90>)
 8002536:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_188_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 800253a:	4987      	ldr	r1, [pc, #540]	@ (8002758 <network_configure_activations+0xe94>)
 800253c:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_189_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 8002540:	4986      	ldr	r1, [pc, #536]	@ (800275c <network_configure_activations+0xe98>)
 8002542:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_190_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8002546:	4986      	ldr	r1, [pc, #536]	@ (8002760 <network_configure_activations+0xe9c>)
 8002548:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_190_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 800254c:	4985      	ldr	r1, [pc, #532]	@ (8002764 <network_configure_activations+0xea0>)
 800254e:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_191_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8002552:	4985      	ldr	r1, [pc, #532]	@ (8002768 <network_configure_activations+0xea4>)
 8002554:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_192_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 94084);
 8002558:	4984      	ldr	r1, [pc, #528]	@ (800276c <network_configure_activations+0xea8>)
 800255a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_192_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 800255e:	4984      	ldr	r1, [pc, #528]	@ (8002770 <network_configure_activations+0xeac>)
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[2] + 9264);
 8002560:	4884      	ldr	r0, [pc, #528]	@ (8002774 <network_configure_activations+0xeb0>)
    conv2d_192_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 8002562:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_193_output_array.data = AI_PTR(g_network_activations_map[1] + 33156);
 8002566:	4984      	ldr	r1, [pc, #528]	@ (8002778 <network_configure_activations+0xeb4>)
 8002568:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_194_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 800256c:	4983      	ldr	r1, [pc, #524]	@ (800277c <network_configure_activations+0xeb8>)
    nl_201_output_array.data = AI_PTR(g_network_activations_map[1] + 126112);
 800256e:	9c22      	ldr	r4, [sp, #136]	@ 0x88
    conv2d_194_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8002570:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_194_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 8002574:	4982      	ldr	r1, [pc, #520]	@ (8002780 <network_configure_activations+0xebc>)
 8002576:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_195_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 800257a:	4982      	ldr	r1, [pc, #520]	@ (8002784 <network_configure_activations+0xec0>)
 800257c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    concat_200_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 8002580:	4981      	ldr	r1, [pc, #516]	@ (8002788 <network_configure_activations+0xec4>)
 8002582:	e9c1 6602 	strd	r6, r6, [r1, #8]
    nl_201_output_array.data = AI_PTR(g_network_activations_map[1] + 126112);
 8002586:	4981      	ldr	r1, [pc, #516]	@ (800278c <network_configure_activations+0xec8>)
 8002588:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conversion_202_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 800258c:	4980      	ldr	r1, [pc, #512]	@ (8002790 <network_configure_activations+0xecc>)
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[2] + 9264);
 800258e:	6884      	ldr	r4, [r0, #8]
    conversion_210_output_array.data = AI_PTR(g_network_activations_map[1] + 46628);
 8002590:	f24b 6024 	movw	r0, #46628	@ 0xb624
    conversion_202_output_array.data = AI_PTR(g_network_activations_map[1] + 263108);
 8002594:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_203_output_array.data = AI_PTR(g_network_activations_map[1] + 31248);
 8002598:	f647 2110 	movw	r1, #31248	@ 0x7a10
    conversion_210_output_array.data = AI_PTR(g_network_activations_map[1] + 46628);
 800259c:	4418      	add	r0, r3
    conv2d_203_output_array.data = AI_PTR(g_network_activations_map[1] + 31248);
 800259e:	4419      	add	r1, r3
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[2] + 9264);
 80025a0:	f242 4330 	movw	r3, #9264	@ 0x2430
    conv2d_203_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 106884);
 80025a4:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_203_output_array.data = AI_PTR(g_network_activations_map[1] + 31248);
 80025a8:	4d7a      	ldr	r5, [pc, #488]	@ (8002794 <network_configure_activations+0xed0>)
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[2] + 9264);
 80025aa:	4423      	add	r3, r4
    conv2d_203_output_array.data = AI_PTR(g_network_activations_map[1] + 31248);
 80025ac:	e9c5 1102 	strd	r1, r1, [r5, #8]
    conv2d_204_output_array.data = AI_PTR(g_network_activations_map[1] + 9936);
 80025b0:	4d79      	ldr	r5, [pc, #484]	@ (8002798 <network_configure_activations+0xed4>)
 80025b2:	e9c5 2202 	strd	r2, r2, [r5, #8]
    concat_209_output_array.data = AI_PTR(g_network_activations_map[1] + 31248);
 80025b6:	4a79      	ldr	r2, [pc, #484]	@ (800279c <network_configure_activations+0xed8>)
 80025b8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conversion_210_output_array.data = AI_PTR(g_network_activations_map[1] + 46628);
 80025bc:	4a78      	ldr	r2, [pc, #480]	@ (80027a0 <network_configure_activations+0xedc>)
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[2] + 9264);
 80025be:	4979      	ldr	r1, [pc, #484]	@ (80027a4 <network_configure_activations+0xee0>)
    conversion_210_output_array.data = AI_PTR(g_network_activations_map[1] + 46628);
 80025c0:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_6_pad_before_output_array.data = AI_PTR(g_network_activations_map[2] + 0);
 80025c4:	4a78      	ldr	r2, [pc, #480]	@ (80027a8 <network_configure_activations+0xee4>)
}
 80025c6:	9805      	ldr	r0, [sp, #20]
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[2] + 9264);
 80025c8:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_6_pad_before_output_array.data = AI_PTR(g_network_activations_map[2] + 0);
 80025cc:	e9c2 4402 	strd	r4, r4, [r2, #8]
}
 80025d0:	b025      	add	sp, #148	@ 0x94
 80025d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025d6:	bf00      	nop
 80025d8:	240108a0 	.word	0x240108a0
 80025dc:	24010890 	.word	0x24010890
 80025e0:	24010880 	.word	0x24010880
 80025e4:	24010870 	.word	0x24010870
 80025e8:	24010860 	.word	0x24010860
 80025ec:	24010850 	.word	0x24010850
 80025f0:	24010840 	.word	0x24010840
 80025f4:	24010830 	.word	0x24010830
 80025f8:	24010820 	.word	0x24010820
 80025fc:	24010810 	.word	0x24010810
 8002600:	24010800 	.word	0x24010800
 8002604:	240107f0 	.word	0x240107f0
 8002608:	240107e0 	.word	0x240107e0
 800260c:	240107d0 	.word	0x240107d0
 8002610:	240107c0 	.word	0x240107c0
 8002614:	240107b0 	.word	0x240107b0
 8002618:	240107a0 	.word	0x240107a0
 800261c:	24010790 	.word	0x24010790
 8002620:	24010780 	.word	0x24010780
 8002624:	24010730 	.word	0x24010730
 8002628:	24010770 	.word	0x24010770
 800262c:	24010760 	.word	0x24010760
 8002630:	24010750 	.word	0x24010750
 8002634:	24010740 	.word	0x24010740
 8002638:	24010720 	.word	0x24010720
 800263c:	24010710 	.word	0x24010710
 8002640:	24010700 	.word	0x24010700
 8002644:	240106f0 	.word	0x240106f0
 8002648:	240106e0 	.word	0x240106e0
 800264c:	240106d0 	.word	0x240106d0
 8002650:	240106c0 	.word	0x240106c0
 8002654:	240106b0 	.word	0x240106b0
 8002658:	240106a0 	.word	0x240106a0
 800265c:	24010690 	.word	0x24010690
 8002660:	24010680 	.word	0x24010680
 8002664:	24010670 	.word	0x24010670
 8002668:	24010660 	.word	0x24010660
 800266c:	24010650 	.word	0x24010650
 8002670:	24010640 	.word	0x24010640
 8002674:	24010630 	.word	0x24010630
 8002678:	24010620 	.word	0x24010620
 800267c:	24010610 	.word	0x24010610
 8002680:	24010600 	.word	0x24010600
 8002684:	240105f0 	.word	0x240105f0
 8002688:	240105e0 	.word	0x240105e0
 800268c:	240105d0 	.word	0x240105d0
 8002690:	240105c0 	.word	0x240105c0
 8002694:	240105b0 	.word	0x240105b0
 8002698:	240105a0 	.word	0x240105a0
 800269c:	24010590 	.word	0x24010590
 80026a0:	24010580 	.word	0x24010580
 80026a4:	24010570 	.word	0x24010570
 80026a8:	24010560 	.word	0x24010560
 80026ac:	24010550 	.word	0x24010550
 80026b0:	24010540 	.word	0x24010540
 80026b4:	24010530 	.word	0x24010530
 80026b8:	24010520 	.word	0x24010520
 80026bc:	24010510 	.word	0x24010510
 80026c0:	24010500 	.word	0x24010500
 80026c4:	240104f0 	.word	0x240104f0
 80026c8:	240104e0 	.word	0x240104e0
 80026cc:	240104d0 	.word	0x240104d0
 80026d0:	240104c0 	.word	0x240104c0
 80026d4:	240104b0 	.word	0x240104b0
 80026d8:	240104a0 	.word	0x240104a0
 80026dc:	24010490 	.word	0x24010490
 80026e0:	24010480 	.word	0x24010480
 80026e4:	24010470 	.word	0x24010470
 80026e8:	24010460 	.word	0x24010460
 80026ec:	24010450 	.word	0x24010450
 80026f0:	24010440 	.word	0x24010440
 80026f4:	24010430 	.word	0x24010430
 80026f8:	24010420 	.word	0x24010420
 80026fc:	24010410 	.word	0x24010410
 8002700:	24010400 	.word	0x24010400
 8002704:	240103f0 	.word	0x240103f0
 8002708:	240103e0 	.word	0x240103e0
 800270c:	240103d0 	.word	0x240103d0
 8002710:	240103c0 	.word	0x240103c0
 8002714:	240103b0 	.word	0x240103b0
 8002718:	240103a0 	.word	0x240103a0
 800271c:	24010390 	.word	0x24010390
 8002720:	24010380 	.word	0x24010380
 8002724:	24010370 	.word	0x24010370
 8002728:	24010360 	.word	0x24010360
 800272c:	24010350 	.word	0x24010350
 8002730:	24010340 	.word	0x24010340
 8002734:	24010330 	.word	0x24010330
 8002738:	24010320 	.word	0x24010320
 800273c:	24010310 	.word	0x24010310
 8002740:	240101d0 	.word	0x240101d0
 8002744:	24010300 	.word	0x24010300
 8002748:	240102f0 	.word	0x240102f0
 800274c:	240102e0 	.word	0x240102e0
 8002750:	240102d0 	.word	0x240102d0
 8002754:	240102c0 	.word	0x240102c0
 8002758:	240102b0 	.word	0x240102b0
 800275c:	240102a0 	.word	0x240102a0
 8002760:	24010290 	.word	0x24010290
 8002764:	24010280 	.word	0x24010280
 8002768:	24010270 	.word	0x24010270
 800276c:	24010260 	.word	0x24010260
 8002770:	24010250 	.word	0x24010250
 8002774:	24014ae4 	.word	0x24014ae4
 8002778:	24010240 	.word	0x24010240
 800277c:	24010230 	.word	0x24010230
 8002780:	24010220 	.word	0x24010220
 8002784:	24010210 	.word	0x24010210
 8002788:	24010200 	.word	0x24010200
 800278c:	240101f0 	.word	0x240101f0
 8002790:	240101e0 	.word	0x240101e0
 8002794:	240101c0 	.word	0x240101c0
 8002798:	240101b0 	.word	0x240101b0
 800279c:	240101a0 	.word	0x240101a0
 80027a0:	24010190 	.word	0x24010190
 80027a4:	24010d50 	.word	0x24010d50
 80027a8:	24010d40 	.word	0x24010d40
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80027ac:	2213      	movs	r2, #19
 80027ae:	2130      	movs	r1, #48	@ 0x30
 80027b0:	4620      	mov	r0, r4
 80027b2:	f00d fdfd 	bl	80103b0 <ai_platform_network_set_error>
}
 80027b6:	9805      	ldr	r0, [sp, #20]
 80027b8:	b025      	add	sp, #148	@ 0x94
 80027ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027be:	bf00      	nop

080027c0 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80027c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 80027c4:	2300      	movs	r3, #0
{
 80027c6:	b091      	sub	sp, #68	@ 0x44
  return ai_platform_network_create(
 80027c8:	2405      	movs	r4, #5
{
 80027ca:	4689      	mov	r9, r1
  return ai_platform_network_create(
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	4619      	mov	r1, r3
{
 80027d0:	4616      	mov	r6, r2
  return ai_platform_network_create(
 80027d2:	2301      	movs	r3, #1
 80027d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002894 <ai_network_create_and_init+0xd4>)
{
 80027d6:	4607      	mov	r7, r0
  return ai_platform_network_create(
 80027d8:	9400      	str	r4, [sp, #0]
 80027da:	f00d fedd 	bl	8010598 <ai_platform_network_create>
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
  if (err.type != AI_ERROR_NONE) {
 80027de:	f010 08ff 	ands.w	r8, r0, #255	@ 0xff
  return ai_platform_network_create(
 80027e2:	4605      	mov	r5, r0
  if (err.type != AI_ERROR_NONE) {
 80027e4:	d003      	beq.n	80027ee <ai_network_create_and_init+0x2e>
#endif
  if (ai_network_init(*network, &params) != true) {
    err = ai_network_get_error(*network);
  }
  return err;
}
 80027e6:	4628      	mov	r0, r5
 80027e8:	b011      	add	sp, #68	@ 0x44
 80027ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ai_network_data_params_get(&params) != true) {
 80027ee:	a802      	add	r0, sp, #8
 80027f0:	f000 f870 	bl	80028d4 <ai_network_data_params_get>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d047      	beq.n	8002888 <ai_network_create_and_init+0xc8>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80027f8:	f1b9 0f00 	cmp.w	r9, #0
 80027fc:	d00f      	beq.n	800281e <ai_network_create_and_init+0x5e>
 80027fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8002802:	b163      	cbz	r3, 800281e <ai_network_create_and_init+0x5e>
 8002804:	4644      	mov	r4, r8
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002806:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8002808:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800280a:	a805      	add	r0, sp, #20
 800280c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 8002810:	f00d fce8 	bl	80101e4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8002814:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8002818:	b2a3      	uxth	r3, r4
 800281a:	429a      	cmp	r2, r3
 800281c:	d8f3      	bhi.n	8002806 <ai_network_create_and_init+0x46>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800281e:	b17e      	cbz	r6, 8002840 <ai_network_create_and_init+0x80>
 8002820:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002824:	b163      	cbz	r3, 8002840 <ai_network_create_and_init+0x80>
 8002826:	2400      	movs	r4, #0
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002828:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800282a:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800282c:	a803      	add	r0, sp, #12
 800282e:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 8002832:	f00d fcd7 	bl	80101e4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8002836:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800283a:	b2a3      	uxth	r3, r4
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f3      	bhi.n	8002828 <ai_network_create_and_init+0x68>
  if (ai_network_init(*network, &params) != true) {
 8002840:	f8d7 9000 	ldr.w	r9, [r7]

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8002844:	a902      	add	r1, sp, #8
 8002846:	4648      	mov	r0, r9
 8002848:	f00d fee8 	bl	801061c <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 800284c:	4606      	mov	r6, r0
 800284e:	b1a0      	cbz	r0, 800287a <ai_network_create_and_init+0xba>
  ok &= network_configure_weights(net_ctx, params);
 8002850:	a902      	add	r1, sp, #8
 8002852:	f7fd fd9d 	bl	8000390 <network_configure_weights>
 8002856:	4604      	mov	r4, r0
  ok &= network_configure_activations(net_ctx, params);
 8002858:	a902      	add	r1, sp, #8
 800285a:	4630      	mov	r0, r6
 800285c:	f7ff f832 	bl	80018c4 <network_configure_activations>
 8002860:	4004      	ands	r4, r0

  ok &= ai_platform_network_post_init(network);
 8002862:	4648      	mov	r0, r9
 8002864:	b2e4      	uxtb	r4, r4
 8002866:	f00d ff99 	bl	801079c <ai_platform_network_post_init>
  if (ai_network_init(*network, &params) != true) {
 800286a:	b134      	cbz	r4, 800287a <ai_network_create_and_init+0xba>
 800286c:	b128      	cbz	r0, 800287a <ai_network_create_and_init+0xba>
  return err;
 800286e:	f368 0507 	bfi	r5, r8, #0, #8
}
 8002872:	4628      	mov	r0, r5
 8002874:	b011      	add	sp, #68	@ 0x44
 8002876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	f00d fd8c 	bl	8010398 <ai_platform_network_get_error>
 8002880:	4605      	mov	r5, r0
 8002882:	fa5f f880 	uxtb.w	r8, r0
 8002886:	e7f2      	b.n	800286e <ai_network_create_and_init+0xae>
 8002888:	6838      	ldr	r0, [r7, #0]
 800288a:	f00d fd85 	bl	8010398 <ai_platform_network_get_error>
 800288e:	4605      	mov	r5, r0
    return err;
 8002890:	e7a9      	b.n	80027e6 <ai_network_create_and_init+0x26>
 8002892:	bf00      	nop
 8002894:	24000000 	.word	0x24000000

08002898 <ai_network_inputs_get>:
  if (network == AI_HANDLE_NULL) {
 8002898:	b108      	cbz	r0, 800289e <ai_network_inputs_get+0x6>
  return ai_platform_inputs_get(network, n_buffer);
 800289a:	f00d bd8f 	b.w	80103bc <ai_platform_inputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800289e:	4b03      	ldr	r3, [pc, #12]	@ (80028ac <ai_network_inputs_get+0x14>)
 80028a0:	4a03      	ldr	r2, [pc, #12]	@ (80028b0 <ai_network_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80028a2:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80028a4:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 80028a6:	f00d bd89 	b.w	80103bc <ai_platform_inputs_get>
 80028aa:	bf00      	nop
 80028ac:	24000000 	.word	0x24000000
 80028b0:	a1c00100 	.word	0xa1c00100

080028b4 <ai_network_outputs_get>:
  if (network == AI_HANDLE_NULL) {
 80028b4:	b108      	cbz	r0, 80028ba <ai_network_outputs_get+0x6>
  return ai_platform_outputs_get(network, n_buffer);
 80028b6:	f00d bdf9 	b.w	80104ac <ai_platform_outputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80028ba:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <ai_network_outputs_get+0x14>)
 80028bc:	4a03      	ldr	r2, [pc, #12]	@ (80028cc <ai_network_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80028be:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80028c0:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 80028c2:	f00d bdf3 	b.w	80104ac <ai_platform_outputs_get>
 80028c6:	bf00      	nop
 80028c8:	24000000 	.word	0x24000000
 80028cc:	a1c00100 	.word	0xa1c00100

080028d0 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80028d0:	f00d bf94 	b.w	80107fc <ai_platform_network_process>

080028d4 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 80028d4:	4603      	mov	r3, r0
 80028d6:	b1a0      	cbz	r0, 8002902 <ai_network_data_params_get+0x2e>
{
 80028d8:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 80028da:	4c0a      	ldr	r4, [pc, #40]	@ (8002904 <ai_network_data_params_get+0x30>)
{
 80028dc:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 80028de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028e2:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80028e4:	3408      	adds	r4, #8
 80028e6:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 80028ea:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80028ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f2:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80028f6:	4661      	mov	r1, ip
 80028f8:	4618      	mov	r0, r3
 80028fa:	f00d fd33 	bl	8010364 <ai_platform_bind_network_params>
}
 80028fe:	b004      	add	sp, #16
 8002900:	bd10      	pop	{r4, pc}
 8002902:	4770      	bx	lr
 8002904:	0801ba98 	.word	0x0801ba98

08002908 <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <Reset_Handler_m4>
	...

0800290c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800290c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002944 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002910:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002912:	e003      	b.n	800291c <LoopCopyDataInit>

08002914 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002916:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002918:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800291a:	3104      	adds	r1, #4

0800291c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800291c:	480b      	ldr	r0, [pc, #44]	@ (800294c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002920:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002922:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002924:	d3f6      	bcc.n	8002914 <CopyDataInit>
  ldr  r2, =_sbss
 8002926:	4a0b      	ldr	r2, [pc, #44]	@ (8002954 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002928:	e002      	b.n	8002930 <LoopFillZerobss>

0800292a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800292a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800292c:	f842 3b04 	str.w	r3, [r2], #4

08002930 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002930:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002932:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002934:	d3f9      	bcc.n	800292a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002936:	f001 f871 	bl	8003a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800293a:	f016 ff8f 	bl	801985c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800293e:	f000 fed5 	bl	80036ec <main>
  bx  lr    
 8002942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002944:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002948:	0804bce8 	.word	0x0804bce8
  ldr  r0, =_sdata
 800294c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002950:	24013be8 	.word	0x24013be8
  ldr  r2, =_sbss
 8002954:	24013c40 	.word	0x24013c40
  ldr  r3, = _ebss
 8002958:	24015c20 	.word	0x24015c20

0800295c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800295c:	e7fe      	b.n	800295c <ADC3_IRQHandler>
	...

08002960 <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 8002960:	4b02      	ldr	r3, [pc, #8]	@ (800296c <ai_get_output_format+0xc>)
 8002962:	681b      	ldr	r3, [r3, #0]
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 8002964:	6818      	ldr	r0, [r3, #0]
}
 8002966:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800296a:	4770      	bx	lr
 800296c:	24014af0 	.word	0x24014af0

08002970 <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <ai_get_output_quantization_scheme+0x3c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	6893      	ldr	r3, [r2, #8]
 8002976:	b1b3      	cbz	r3, 80029a6 <ai_get_output_quantization_scheme+0x36>
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	f010 0001 	ands.w	r0, r0, #1
 800297e:	d013      	beq.n	80029a8 <ai_get_output_quantization_scheme+0x38>
 8002980:	6858      	ldr	r0, [r3, #4]
 8002982:	b188      	cbz	r0, 80029a8 <ai_get_output_quantization_scheme+0x38>
 8002984:	6843      	ldr	r3, [r0, #4]
 8002986:	b173      	cbz	r3, 80029a6 <ai_get_output_quantization_scheme+0x36>
 8002988:	8840      	ldrh	r0, [r0, #2]
 800298a:	b168      	cbz	r0, 80029a8 <ai_get_output_quantization_scheme+0x38>
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	f3c0 50c0 	ubfx	r0, r0, #23, #1
 8002998:	eef5 7a40 	vcmp.f32	s15, #0.0
 800299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a0:	d001      	beq.n	80029a6 <ai_get_output_quantization_scheme+0x36>
    if(sign==0)
 80029a2:	3001      	adds	r0, #1
 80029a4:	4770      	bx	lr
    return AI_FXP_Q;
 80029a6:	2000      	movs	r0, #0
}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	24014af0 	.word	0x24014af0

080029b0 <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 80029b0:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <ai_get_output_fxp_scale+0x24>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 80029b2:	2301      	movs	r3, #1
 80029b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 80029b8:	6812      	ldr	r2, [r2, #0]
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029c0:	3a40      	subs	r2, #64	@ 0x40
 80029c2:	4093      	lsls	r3, r2
 80029c4:	ee00 3a10 	vmov	s0, r3
 80029c8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 80029cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	24014af0 	.word	0x24014af0

080029d8 <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80029d8:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <ai_get_output_scale+0x28>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	b163      	cbz	r3, 80029fa <ai_get_output_scale+0x22>
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	07d2      	lsls	r2, r2, #31
 80029e4:	d509      	bpl.n	80029fa <ai_get_output_scale+0x22>
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	b13b      	cbz	r3, 80029fa <ai_get_output_scale+0x22>
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	b12a      	cbz	r2, 80029fa <ai_get_output_scale+0x22>
 80029ee:	885b      	ldrh	r3, [r3, #2]
 80029f0:	b11b      	cbz	r3, 80029fa <ai_get_output_scale+0x22>
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	ed93 0a00 	vldr	s0, [r3]
 80029f8:	4770      	bx	lr
 80029fa:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8002a04 <ai_get_output_scale+0x2c>
}
 80029fe:	4770      	bx	lr
 8002a00:	24014af0 	.word	0x24014af0
 8002a04:	00000000 	.word	0x00000000

08002a08 <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8002a08:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <ai_get_output_zero_point+0x44>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	b18a      	cbz	r2, 8002a34 <ai_get_output_zero_point+0x2c>
 8002a10:	6813      	ldr	r3, [r2, #0]
 8002a12:	f013 0001 	ands.w	r0, r3, #1
 8002a16:	d00c      	beq.n	8002a32 <ai_get_output_zero_point+0x2a>
 8002a18:	6850      	ldr	r0, [r2, #4]
 8002a1a:	b150      	cbz	r0, 8002a32 <ai_get_output_zero_point+0x2a>
 8002a1c:	8802      	ldrh	r2, [r0, #0]
 8002a1e:	6843      	ldr	r3, [r0, #4]
 8002a20:	0792      	lsls	r2, r2, #30
 8002a22:	d509      	bpl.n	8002a38 <ai_get_output_zero_point+0x30>
 8002a24:	b123      	cbz	r3, 8002a30 <ai_get_output_zero_point+0x28>
 8002a26:	8840      	ldrh	r0, [r0, #2]
 8002a28:	b118      	cbz	r0, 8002a32 <ai_get_output_zero_point+0x2a>
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	7818      	ldrb	r0, [r3, #0]
 8002a2e:	4770      	bx	lr
 8002a30:	4618      	mov	r0, r3
}
 8002a32:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8002a34:	4610      	mov	r0, r2
 8002a36:	4770      	bx	lr
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f9      	beq.n	8002a30 <ai_get_output_zero_point+0x28>
 8002a3c:	8840      	ldrh	r0, [r0, #2]
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d0f7      	beq.n	8002a32 <ai_get_output_zero_point+0x2a>
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f993 0000 	ldrsb.w	r0, [r3]
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	24014af0 	.word	0x24014af0

08002a50 <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
void ai_init(void** activation_buffer, ai_handle* inputs_buff_Ptr, ai_handle* outputs_buff_Ptr)
{
 8002a50:	b5f0      	push	{r4, r5, r6, r7, lr}
#if AI_NETWORK_DATA_ACTIVATIONS_COUNT == 1
  const ai_handle acts[] = { activation_buffer[0] };
#elif AI_NETWORK_DATA_ACTIVATIONS_COUNT == 2
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1] };
#elif AI_NETWORK_DATA_ACTIVATIONS_COUNT == 3
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8002a52:	6843      	ldr	r3, [r0, #4]
{
 8002a54:	b085      	sub	sp, #20
  network_handle = AI_HANDLE_NULL;
 8002a56:	4d15      	ldr	r5, [pc, #84]	@ (8002aac <ai_init+0x5c>)
 8002a58:	2600      	movs	r6, #0
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8002a5a:	9302      	str	r3, [sp, #8]
{
 8002a5c:	4614      	mov	r4, r2
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8002a5e:	6883      	ldr	r3, [r0, #8]
#endif
  ai_network_create_and_init(&network_handle, acts, NULL);
 8002a60:	4632      	mov	r2, r6
  network_handle = AI_HANDLE_NULL;
 8002a62:	602e      	str	r6, [r5, #0]
{
 8002a64:	460f      	mov	r7, r1
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8002a66:	9303      	str	r3, [sp, #12]
  ai_network_create_and_init(&network_handle, acts, NULL);
 8002a68:	a901      	add	r1, sp, #4
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8002a6a:	6803      	ldr	r3, [r0, #0]
  ai_network_create_and_init(&network_handle, acts, NULL);
 8002a6c:	4628      	mov	r0, r5
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8002a6e:	9301      	str	r3, [sp, #4]
  ai_network_create_and_init(&network_handle, acts, NULL);
 8002a70:	f7ff fea6 	bl	80027c0 <ai_network_create_and_init>
  uint16_t size_output = 0;
  
  /* Retrieve pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network_handle, NULL);
 8002a74:	4631      	mov	r1, r6
 8002a76:	6828      	ldr	r0, [r5, #0]
  uint16_t size_output = 0;
 8002a78:	f8ad 6002 	strh.w	r6, [sp, #2]
  ai_input = ai_network_inputs_get(network_handle, NULL);
 8002a7c:	f7ff ff0c 	bl	8002898 <ai_network_inputs_get>
 8002a80:	4e0b      	ldr	r6, [pc, #44]	@ (8002ab0 <ai_init+0x60>)
 8002a82:	4603      	mov	r3, r0
  ai_output = ai_network_outputs_get(network_handle, &size_output);
 8002a84:	f10d 0102 	add.w	r1, sp, #2
 8002a88:	6828      	ldr	r0, [r5, #0]
  ai_input = ai_network_inputs_get(network_handle, NULL);
 8002a8a:	6033      	str	r3, [r6, #0]
  ai_output = ai_network_outputs_get(network_handle, &size_output);
 8002a8c:	f7ff ff12 	bl	80028b4 <ai_network_outputs_get>

  /*Initialize the input and output buffer pointers*/
  *inputs_buff_Ptr=ai_input[0].data;  
 8002a90:	6833      	ldr	r3, [r6, #0]
  ai_output = ai_network_outputs_get(network_handle, &size_output);
 8002a92:	4a08      	ldr	r2, [pc, #32]	@ (8002ab4 <ai_init+0x64>)
  *inputs_buff_Ptr=ai_input[0].data;  
 8002a94:	685b      	ldr	r3, [r3, #4]
  ai_output = ai_network_outputs_get(network_handle, &size_output);
 8002a96:	6010      	str	r0, [r2, #0]
  *inputs_buff_Ptr=ai_input[0].data;  
 8002a98:	603b      	str	r3, [r7, #0]
  for (uint8_t i = 0; i < AI_NETWORK_OUT_NUM; i++)
  {
    outputs_buff_Ptr[i]=ai_output[i].data;
 8002a9a:	6843      	ldr	r3, [r0, #4]
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	6a03      	ldr	r3, [r0, #32]
 8002aa0:	6063      	str	r3, [r4, #4]
 8002aa2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002aa4:	60a3      	str	r3, [r4, #8]
  }
}
 8002aa6:	b005      	add	sp, #20
 8002aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	24014af8 	.word	0x24014af8
 8002ab0:	24014af4 	.word	0x24014af4
 8002ab4:	24014af0 	.word	0x24014af0

08002ab8 <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void** output)
{
 8002ab8:	b510      	push	{r4, lr}
  ai_i32 nbatch;
  ai_input[0].data = AI_HANDLE_PTR(input);
 8002aba:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae4 <ai_run+0x2c>)
{
 8002abc:	460b      	mov	r3, r1
  for (uint8_t i = 0; i < AI_NETWORK_OUT_NUM; i++)
  {
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <ai_run+0x30>)
  ai_input[0].data = AI_HANDLE_PTR(input);
 8002ac0:	6821      	ldr	r1, [r4, #0]
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 8002ac2:	6812      	ldr	r2, [r2, #0]
  ai_input[0].data = AI_HANDLE_PTR(input);
 8002ac4:	6048      	str	r0, [r1, #4]
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 8002ac6:	681c      	ldr	r4, [r3, #0]
  }
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8002ac8:	4808      	ldr	r0, [pc, #32]	@ (8002aec <ai_run+0x34>)
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 8002aca:	6054      	str	r4, [r2, #4]
 8002acc:	685c      	ldr	r4, [r3, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8002ace:	6800      	ldr	r0, [r0, #0]
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 8002ad0:	6214      	str	r4, [r2, #32]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	63d3      	str	r3, [r2, #60]	@ 0x3c
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8002ad6:	f7ff fefb 	bl	80028d0 <ai_network_run>
  
  if (nbatch != 1) {
 8002ada:	2801      	cmp	r0, #1
 8002adc:	d000      	beq.n	8002ae0 <ai_run+0x28>
        while(1);
 8002ade:	e7fe      	b.n	8002ade <ai_run+0x26>
  }
}
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	24014af4 	.word	0x24014af4
 8002ae8:	24014af0 	.word	0x24014af0
 8002aec:	24014af8 	.word	0x24014af8

08002af0 <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8002af0:	6802      	ldr	r2, [r0, #0]
 8002af2:	68d3      	ldr	r3, [r2, #12]
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 8002afa:	f000 bde5 	b.w	80036c8 <Error_Handler>
 8002afe:	bf00      	nop

08002b00 <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002b02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b04:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002b06:	2a02      	cmp	r2, #2
 8002b08:	d006      	beq.n	8002b18 <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002b10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b16:	64da      	str	r2, [r3, #76]	@ 0x4c
  Error_Handler();
 8002b18:	f000 bdd6 	b.w	80036c8 <Error_Handler>

08002b1c <DCMI_DMALineXferCplt>:
{
 8002b1c:	4603      	mov	r3, r0
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8002b1e:	490b      	ldr	r1, [pc, #44]	@ (8002b4c <DCMI_DMALineXferCplt+0x30>)
 8002b20:	480b      	ldr	r0, [pc, #44]	@ (8002b50 <DCMI_DMALineXferCplt+0x34>)
{
 8002b22:	b570      	push	{r4, r5, r6, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b24:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
{
 8002b26:	b082      	sub	sp, #8
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8002b28:	2601      	movs	r6, #1
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8002b2a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 8002b2c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002b2e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8002b30:	009b      	lsls	r3, r3, #2
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8002b32:	9600      	str	r6, [sp, #0]
 8002b34:	fb03 2205 	mla	r2, r3, r5, r2
 8002b38:	f009 fdb8 	bl	800c6ac <HAL_MDMA_Start_IT>
 8002b3c:	b908      	cbnz	r0, 8002b42 <DCMI_DMALineXferCplt+0x26>
}
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
 8002b42:	b002      	add	sp, #8
 8002b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8002b48:	f000 bdbe 	b.w	80036c8 <Error_Handler>
 8002b4c:	30000000 	.word	0x30000000
 8002b50:	24014b00 	.word	0x24014b00

08002b54 <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 8002b54:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 8002b58:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002b5a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  __HAL_MDMA_DISABLE(hmdma);
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 8002b62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b64:	3201      	adds	r2, #1
 8002b66:	639a      	str	r2, [r3, #56]	@ 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b6a:	4282      	cmp	r2, r0
 8002b6c:	d000      	beq.n	8002b70 <DCMI_MDMAFrameXferCplt+0x1c>
}
 8002b6e:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68d1      	ldr	r1, [r2, #12]
 8002b74:	f041 0101 	orr.w	r1, r1, #1
 8002b78:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	f012 0202 	ands.w	r2, r2, #2
 8002b80:	d003      	beq.n	8002b8a <DCMI_MDMAFrameXferCplt+0x36>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002b88:	4770      	bx	lr
      hdcmi->XferCount = 0;
 8002b8a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	24015818 	.word	0x24015818

08002b94 <Camera_GetNextReadyFrame>:
  while(App_Config_Ptr->new_frame_ready == 0);
 8002b94:	7b03      	ldrb	r3, [r0, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0fc      	beq.n	8002b94 <Camera_GetNextReadyFrame>
}
 8002b9a:	4770      	bx	lr

08002b9c <Camera_StartNewFrameAcquisition>:
  App_Config_Ptr->new_frame_ready = 0;
 8002b9c:	2200      	movs	r2, #0
{ 
 8002b9e:	4603      	mov	r3, r0
  BSP_CAMERA_Resume(0);
 8002ba0:	4610      	mov	r0, r2
  App_Config_Ptr->new_frame_ready = 0;
 8002ba2:	731a      	strb	r2, [r3, #12]
  BSP_CAMERA_Resume(0);
 8002ba4:	f004 bf9a 	b.w	8007adc <BSP_CAMERA_Resume>

08002ba8 <Camera_Init>:
  __HAL_RCC_MDMA_CLK_ENABLE();
 8002ba8:	4a5f      	ldr	r2, [pc, #380]	@ (8002d28 <Camera_Init+0x180>)
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002baa:	2300      	movs	r3, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8002bac:	f8d2 10d4 	ldr.w	r1, [r2, #212]	@ 0xd4
{
 8002bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_MDMA_CLK_ENABLE();
 8002bb4:	f041 0101 	orr.w	r1, r1, #1
  hmdma.Instance = MDMA_Channel0;
 8002bb8:	4c5c      	ldr	r4, [pc, #368]	@ (8002d2c <Camera_Init+0x184>)
  uint8_t *camera_capture_buffer = App_Config_Ptr->camera_capture_buffer;
 8002bba:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
{
 8002bbe:	b082      	sub	sp, #8
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002bc0:	6123      	str	r3, [r4, #16]
{
 8002bc2:	4605      	mov	r5, r0
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 8002bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 8002bc6:	4620      	mov	r0, r4
  hmdma.Init.SourceBlockAddressOffset = 0;
 8002bc8:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
  __HAL_RCC_MDMA_CLK_ENABLE();
 8002bcc:	f8c2 10d4 	str.w	r1, [r2, #212]	@ 0xd4
 8002bd0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
  hmdma.Instance = MDMA_Channel0;
 8002bd4:	4a56      	ldr	r2, [pc, #344]	@ (8002d30 <Camera_Init+0x188>)
  __HAL_RCC_MDMA_CLK_ENABLE();
 8002bd6:	f003 0301 	and.w	r3, r3, #1
  hmdma.Instance = MDMA_Channel0;
 8002bda:	6022      	str	r2, [r4, #0]
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002bdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_MDMA_CLK_ENABLE();
 8002be0:	9301      	str	r3, [sp, #4]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8002be2:	2380      	movs	r3, #128	@ 0x80
  __HAL_RCC_MDMA_CLK_ENABLE();
 8002be4:	9901      	ldr	r1, [sp, #4]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8002be6:	60e3      	str	r3, [r4, #12]
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8002be8:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 8002bea:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002bec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002bf0:	e9c4 2301 	strd	r2, r3, [r4, #4]
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8002bf4:	f240 2202 	movw	r2, #514	@ 0x202
 8002bf8:	f640 0308 	movw	r3, #2056	@ 0x808
 8002bfc:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002c00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8002c04:	2220      	movs	r2, #32
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002c06:	6263      	str	r3, [r4, #36]	@ 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8002c08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8002c0c:	61e2      	str	r2, [r4, #28]
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8002c0e:	6323      	str	r3, [r4, #48]	@ 0x30
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 8002c10:	f009 fcd2 	bl	800c5b8 <HAL_MDMA_Init>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d17e      	bne.n	8002d16 <Camera_Init+0x16e>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	207a      	movs	r0, #122	@ 0x7a
 8002c1e:	f006 f865 	bl	8008cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002c22:	207a      	movs	r0, #122	@ 0x7a
 8002c24:	f006 f89e 	bl	8008d64 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f004 ff8d 	bl	8007b48 <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 8002c2e:	20c8      	movs	r0, #200	@ 0xc8
 8002c30:	f006 f82a 	bl	8008c88 <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE)
 8002c34:	2200      	movs	r2, #0
 8002c36:	2101      	movs	r1, #1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f004 fd19 	bl	8007670 <BSP_CAMERA_Init>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d166      	bne.n	8002d10 <Camera_Init+0x168>
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 8002c42:	4a3c      	ldr	r2, [pc, #240]	@ (8002d34 <Camera_Init+0x18c>)
 8002c44:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002c46:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002c4a:	6593      	str	r3, [r2, #88]	@ 0x58
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_MBURST, DMA_MBURST_INC4);
 8002c4c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002c4e:	f023 73c0 	bic.w	r3, r3, #25165824	@ 0x1800000
 8002c52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c56:	6593      	str	r3, [r2, #88]	@ 0x58
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 8002c58:	f245 6340 	movw	r3, #22080	@ 0x5640
 8002c5c:	4a36      	ldr	r2, [pc, #216]	@ (8002d38 <Camera_Init+0x190>)
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d045      	beq.n	8002cf0 <Camera_Init+0x148>
  if (BSP_CAMERA_SetMirrorFlip(0, MirrorFlip) != BSP_ERROR_NONE)
 8002c64:	6929      	ldr	r1, [r5, #16]
 8002c66:	2000      	movs	r0, #0
 8002c68:	f004 ff48 	bl	8007afc <BSP_CAMERA_SetMirrorFlip>
 8002c6c:	4607      	mov	r7, r0
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d13d      	bne.n	8002cee <Camera_Init+0x146>
  __HAL_LOCK(hdcmi);
 8002c72:	4d32      	ldr	r5, [pc, #200]	@ (8002d3c <Camera_Init+0x194>)
  HAL_Delay(100);
 8002c74:	2064      	movs	r0, #100	@ 0x64
 8002c76:	f006 f807 	bl	8008c88 <HAL_Delay>
  __HAL_LOCK(hdcmi);
 8002c7a:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d050      	beq.n	8002d24 <Camera_Init+0x17c>
  __HAL_DCMI_ENABLE(hdcmi);
 8002c82:	6829      	ldr	r1, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c84:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 8002c86:	f04f 0801 	mov.w	r8, #1
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8002c8a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c8c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8002c90:	f885 8034 	strb.w	r8, [r5, #52]	@ 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 8002c94:	680b      	ldr	r3, [r1, #0]
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8002c96:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <Camera_Init+0x198>)
  __HAL_DCMI_ENABLE(hdcmi);
 8002c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c9c:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002c9e:	680b      	ldr	r3, [r1, #0]
 8002ca0:	f023 0302 	bic.w	r3, r3, #2
 8002ca4:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002ca6:	680b      	ldr	r3, [r1, #0]
 8002ca8:	f841 3b28 	str.w	r3, [r1], #40
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8002cac:	4b25      	ldr	r3, [pc, #148]	@ (8002d44 <Camera_Init+0x19c>)
  hdcmi->XferCount = 0;
 8002cae:	63af      	str	r7, [r5, #56]	@ 0x38
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8002cb0:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hdcmi->XferSize = line_size / 4U;
 8002cb2:	23a0      	movs	r3, #160	@ 0xa0
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8002cb4:	6462      	str	r2, [r4, #68]	@ 0x44
  hdcmi->XferSize = line_size / 4U;
 8002cb6:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8002cb8:	4a23      	ldr	r2, [pc, #140]	@ (8002d48 <Camera_Init+0x1a0>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002cba:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <Camera_Init+0x1a4>)
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002cbc:	6507      	str	r7, [r0, #80]	@ 0x50
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002cbe:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8002cc0:	6562      	str	r2, [r4, #84]	@ 0x54
  hdcmi->XferTransferNumber = num_lines;
 8002cc2:	22f0      	movs	r2, #240	@ 0xf0
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8002cc4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
  hdcmi->XferTransferNumber = num_lines;
 8002cc6:	642a      	str	r2, [r5, #64]	@ 0x40
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8002cc8:	4a21      	ldr	r2, [pc, #132]	@ (8002d50 <Camera_Init+0x1a8>)
  hdcmi->pBuffPtr = (uint32_t) pData;
 8002cca:	646e      	str	r6, [r5, #68]	@ 0x44
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8002ccc:	f006 fd70 	bl	80097b0 <HAL_DMA_Start_IT>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	bb18      	cbnz	r0, 8002d1c <Camera_Init+0x174>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002cd4:	6829      	ldr	r1, [r5, #0]
  HAL_Delay(200);
 8002cd6:	20c8      	movs	r0, #200	@ 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002cd8:	680a      	ldr	r2, [r1, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 8002ce0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
}
 8002ce4:	b002      	add	sp, #8
 8002ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Delay(200);
 8002cea:	f005 bfcd 	b.w	8008c88 <HAL_Delay>
    while(1);
 8002cee:	e7fe      	b.n	8002cee <Camera_Init+0x146>
    OV5640_Object_t *pObj = Camera_CompObj;
 8002cf0:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <Camera_Init+0x1ac>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 8002cf2:	23c0      	movs	r3, #192	@ 0xc0
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8002cf4:	f243 0136 	movw	r1, #12342	@ 0x3036
    OV5640_Object_t *pObj = Camera_CompObj;
 8002cf8:	6810      	ldr	r0, [r2, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8002cfa:	f10d 0203 	add.w	r2, sp, #3
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 8002cfe:	f88d 3003 	strb.w	r3, [sp, #3]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8002d02:	2301      	movs	r3, #1
 8002d04:	3018      	adds	r0, #24
 8002d06:	f003 fb61 	bl	80063cc <ov5640_write_reg>
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	d0aa      	beq.n	8002c64 <Camera_Init+0xbc>
      while(1);
 8002d0e:	e7fe      	b.n	8002d0e <Camera_Init+0x166>
    Error_Handler();
 8002d10:	f000 fcda 	bl	80036c8 <Error_Handler>
 8002d14:	e795      	b.n	8002c42 <Camera_Init+0x9a>
    Error_Handler();
 8002d16:	f000 fcd7 	bl	80036c8 <Error_Handler>
 8002d1a:	e77d      	b.n	8002c18 <Camera_Init+0x70>
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002d1c:	2340      	movs	r3, #64	@ 0x40
 8002d1e:	64eb      	str	r3, [r5, #76]	@ 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002d20:	f885 8035 	strb.w	r8, [r5, #53]	@ 0x35
    while(1);
 8002d24:	e7fe      	b.n	8002d24 <Camera_Init+0x17c>
 8002d26:	bf00      	nop
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	24014b00 	.word	0x24014b00
 8002d30:	52000040 	.word	0x52000040
 8002d34:	40020400 	.word	0x40020400
 8002d38:	240157e4 	.word	0x240157e4
 8002d3c:	24015818 	.word	0x24015818
 8002d40:	08002b55 	.word	0x08002b55
 8002d44:	08002b1d 	.word	0x08002b1d
 8002d48:	08002af1 	.word	0x08002af1
 8002d4c:	08002b01 	.word	0x08002b01
 8002d50:	30000000 	.word	0x30000000
 8002d54:	24015868 	.word	0x24015868

08002d58 <BSP_CAMERA_FrameEventCallback>:
{
 8002d58:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d5a:	b672      	cpsid	i
  App_Config.new_frame_ready = 1;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <BSP_CAMERA_FrameEventCallback+0x14>)
 8002d5e:	2201      	movs	r2, #1
  BSP_CAMERA_Suspend(0);
 8002d60:	2000      	movs	r0, #0
  App_Config.new_frame_ready = 1;
 8002d62:	731a      	strb	r2, [r3, #12]
  BSP_CAMERA_Suspend(0);
 8002d64:	f004 feaa 	bl	8007abc <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 8002d68:	b662      	cpsie	i
}
 8002d6a:	bd08      	pop	{r3, pc}
 8002d6c:	d0a214b8 	.word	0xd0a214b8

08002d70 <BSP_CAMERA_VsyncEventCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002d70:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 8002d72:	b662      	cpsie	i
}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop

08002d78 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 8002d78:	f000 bca6 	b.w	80036c8 <Error_Handler>

08002d7c <Display_Init>:

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dfc <Display_Init+0x80>)

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8002d7e:	2101      	movs	r1, #1
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8002d80:	6813      	ldr	r3, [r2, #0]
{
 8002d82:	b530      	push	{r4, r5, lr}
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8002d84:	f023 0301 	bic.w	r3, r3, #1

  config.X0          = 0;
  config.X1          = LCD_DEFAULT_WIDTH;
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d88:	2500      	movs	r5, #0
{
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	4604      	mov	r4, r0
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8002d8e:	6013      	str	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8002d90:	4628      	mov	r0, r5
 8002d92:	f005 fcdb 	bl	800874c <BSP_LCD_Init>
  config.X0          = 0;
 8002d96:	2000      	movs	r0, #0
 8002d98:	f44f 7148 	mov.w	r1, #800	@ 0x320
  config.Address     = (uint32_t)App_Config_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8002d9c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8002da0:	466a      	mov	r2, sp
  config.X0          = 0;
 8002da2:	e9cd 0100 	strd	r0, r1, [sp]
 8002da6:	2000      	movs	r0, #0
 8002da8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8002db0:	4629      	mov	r1, r5
 8002db2:	4628      	mov	r0, r5
  config.Address     = (uint32_t)App_Config_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8002db4:	e9cd 5304 	strd	r5, r3, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8002db8:	f005 fcd4 	bl	8008764 <BSP_LCD_ConfigLayer>
  
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8002dbc:	4810      	ldr	r0, [pc, #64]	@ (8002e00 <Display_Init+0x84>)
 8002dbe:	f00c ff67 	bl	800fc90 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f00c ff94 	bl	800fcf0 <UTIL_LCD_SetLayer>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8002dc8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002dcc:	f00c ffa8 	bl	800fd20 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f00c ff9c 	bl	800fd10 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8002dd8:	480a      	ldr	r0, [pc, #40]	@ (8002e04 <Display_Init+0x88>)
 8002dda:	f00c ffa9 	bl	800fd30 <UTIL_LCD_SetFont>
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)App_Config_Ptr->lcd_frame_write_buff;
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <Display_Init+0x8c>)
 8002de0:	480a      	ldr	r0, [pc, #40]	@ (8002e0c <Display_Init+0x90>)
 8002de2:	2534      	movs	r5, #52	@ 0x34
 8002de4:	689b      	ldr	r3, [r3, #8]
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8002de6:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)App_Config_Ptr->lcd_frame_write_buff;
 8002de8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002dec:	fb05 0303 	mla	r3, r5, r3, r0
 8002df0:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8002df2:	f009 fbc5 	bl	800c580 <HAL_LTDC_Reload>
}
 8002df6:	b007      	add	sp, #28
 8002df8:	bd30      	pop	{r4, r5, pc}
 8002dfa:	bf00      	nop
 8002dfc:	52004000 	.word	0x52004000
 8002e00:	08049c00 	.word	0x08049c00
 8002e04:	24013a18 	.word	0x24013a18
 8002e08:	240158b0 	.word	0x240158b0
 8002e0c:	240158cc 	.word	0x240158cc

08002e10 <Display_WelcomeScreen>:
 *
 * @param App_Config_Ptr pointer to application context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
void Display_WelcomeScreen(AppConfig_TypeDef *App_Config_Ptr)
{
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4604      	mov	r4, r0
 8002e14:	b088      	sub	sp, #32
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002e16:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002e1a:	f00c ffed 	bl	800fdf8 <UTIL_LCD_Clear>
  
  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 8002e1e:	4b42      	ldr	r3, [pc, #264]	@ (8002f28 <Display_WelcomeScreen+0x118>)
 8002e20:	224d      	movs	r2, #77	@ 0x4d
 8002e22:	2132      	movs	r1, #50	@ 0x32
 8002e24:	2000      	movs	r0, #0
 8002e26:	f004 ffa3 	bl	8007d70 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 8002e2a:	4b40      	ldr	r3, [pc, #256]	@ (8002f2c <Display_WelcomeScreen+0x11c>)
 8002e2c:	2255      	movs	r2, #85	@ 0x55
 8002e2e:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 8002e32:	2000      	movs	r0, #0
 8002e34:	f004 ff9c 	bl	8007d70 <BSP_LCD_DrawBitmap>
  
  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"OBJECT DETECTION", CENTER_MODE);
 8002e38:	f00c ff82 	bl	800fd40 <UTIL_LCD_GetFont>
 8002e3c:	4601      	mov	r1, r0
 8002e3e:	2301      	movs	r3, #1
 8002e40:	4a3b      	ldr	r2, [pc, #236]	@ (8002f30 <Display_WelcomeScreen+0x120>)
 8002e42:	88c9      	ldrh	r1, [r1, #6]
 8002e44:	2000      	movs	r0, #0
 8002e46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002e4a:	f00d f8b1 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)" GETTING STARTED", CENTER_MODE);
 8002e4e:	f00c ff77 	bl	800fd40 <UTIL_LCD_GetFont>
 8002e52:	4601      	mov	r1, r0
 8002e54:	2301      	movs	r3, #1
 8002e56:	4a37      	ldr	r2, [pc, #220]	@ (8002f34 <Display_WelcomeScreen+0x124>)
 8002e58:	88c9      	ldrh	r1, [r1, #6]
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002e60:	4099      	lsls	r1, r3
 8002e62:	f00d f8a5 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 8002e66:	f00c ff6b 	bl	800fd40 <UTIL_LCD_GetFont>
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	4a32      	ldr	r2, [pc, #200]	@ (8002f38 <Display_WelcomeScreen+0x128>)
 8002e70:	88c9      	ldrh	r1, [r1, #6]
 8002e72:	2000      	movs	r0, #0
 8002e74:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002e78:	4099      	lsls	r1, r3
 8002e7a:	f00d f899 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 8002e7e:	f00c ff5f 	bl	800fd40 <UTIL_LCD_GetFont>
 8002e82:	88c1      	ldrh	r1, [r0, #6]
 8002e84:	2301      	movs	r3, #1
 8002e86:	4a2d      	ldr	r2, [pc, #180]	@ (8002f3c <Display_WelcomeScreen+0x12c>)
 8002e88:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8002e8c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002e90:	2000      	movs	r0, #0
 8002e92:	f00d f88d 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 8002e96:	f00c ff53 	bl	800fd40 <UTIL_LCD_GetFont>
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	4a28      	ldr	r2, [pc, #160]	@ (8002f40 <Display_WelcomeScreen+0x130>)
 8002ea0:	88c9      	ldrh	r1, [r1, #6]
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002ea8:	4099      	lsls	r1, r3
 8002eaa:	f00d f881 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 8002eae:	f00c ff47 	bl	800fd40 <UTIL_LCD_GetFont>
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4a23      	ldr	r2, [pc, #140]	@ (8002f44 <Display_WelcomeScreen+0x134>)
 8002eb8:	88c9      	ldrh	r1, [r1, #6]
 8002eba:	2000      	movs	r0, #0
 8002ebc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002ec0:	f00d f876 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(16), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 8002ec4:	f00c ff3c 	bl	800fd40 <UTIL_LCD_GetFont>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <Display_WelcomeScreen+0x138>)
 8002ece:	88c9      	ldrh	r1, [r1, #6]
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	0109      	lsls	r1, r1, #4
 8002ed4:	f00d f86c 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
 */
static void Display_Refresh(AppConfig_TypeDef *App_Config_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  App_Config_Ptr->lcd_sync =0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6223      	str	r3, [r4, #32]
  while(App_Config_Ptr->lcd_sync==0);
 8002edc:	6a23      	ldr	r3, [r4, #32]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0fc      	beq.n	8002edc <Display_WelcomeScreen+0xcc>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  Utility_DCache_Coherency_Maintenance((void *)App_Config_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8002ee2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	4918      	ldr	r1, [pc, #96]	@ (8002f4c <Display_WelcomeScreen+0x13c>)
 8002eea:	f000 fbb7 	bl	800365c <Utility_DCache_Coherency_Maintenance>
  
  Utility_Dma2d_Memcpy((uint32_t *)(App_Config_Ptr->lcd_frame_write_buff), (uint32_t *)(App_Config_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002ef4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	9100      	str	r1, [sp, #0]
 8002efc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002f00:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002f04:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002f08:	e9d4 1023 	ldrd	r1, r0, [r4, #140]	@ 0x8c
 8002f0c:	f000 fb44 	bl	8003598 <Utility_Dma2d_Memcpy>
  HAL_Delay(4000);
 8002f10:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002f14:	f005 feb8 	bl	8008c88 <HAL_Delay>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002f18:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
}
 8002f1c:	b008      	add	sp, #32
 8002f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002f22:	f00c bf69 	b.w	800fdf8 <UTIL_LCD_Clear>
 8002f26:	bf00      	nop
 8002f28:	080410b8 	.word	0x080410b8
 8002f2c:	080305b4 	.word	0x080305b4
 8002f30:	08030430 	.word	0x08030430
 8002f34:	08030444 	.word	0x08030444
 8002f38:	08030458 	.word	0x08030458
 8002f3c:	08030468 	.word	0x08030468
 8002f40:	08030494 	.word	0x08030494
 8002f44:	080304c0 	.word	0x080304c0
 8002f48:	080304dc 	.word	0x080304dc
 8002f4c:	00177000 	.word	0x00177000

08002f50 <Display_CameraPreview>:
{
 8002f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *camera_capture_buffer = App_Config_Ptr->camera_capture_buffer;
 8002f54:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
{
 8002f58:	4605      	mov	r5, r0
  Utility_DCache_Coherency_Maintenance((void*)camera_capture_buffer,
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8002f60:	4620      	mov	r0, r4
 8002f62:	f000 fb7b 	bl	800365c <Utility_DCache_Coherency_Maintenance>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002f66:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002f6a:	f00c ff45 	bl	800fdf8 <UTIL_LCD_Clear>
  for (int row = 0; row < CAM_RES_HEIGHT; row++)
 8002f6e:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 8002f72:	4d1d      	ldr	r5, [pc, #116]	@ (8002fe8 <Display_CameraPreview+0x98>)
  uint32_t *lcd_buffer = (uint32_t *) App_Config_Ptr->lcd_frame_write_buff;
 8002f74:	f44f 7e48 	mov.w	lr, #800	@ 0x320
 8002f78:	f04f 0c00 	mov.w	ip, #0
 8002f7c:	4405      	add	r5, r0
    for (int col = 0; col < CAM_RES_WIDTH; col++)
 8002f7e:	ebae 010c 	sub.w	r1, lr, ip
{
 8002f82:	4606      	mov	r6, r0
 8002f84:	f504 7720 	add.w	r7, r4, #640	@ 0x280
 8002f88:	0089      	lsls	r1, r1, #2
      uint16_t pixel = *cam_buffer++;
 8002f8a:	f834 2b02 	ldrh.w	r2, [r4], #2
      uint32_t blue  = ((pixel & 0x001fu) >>  0);
 8002f8e:	f002 081f 	and.w	r8, r2, #31
      uint32_t green = ((pixel & 0x07e0u) >>  5);
 8002f92:	f3c2 1b45 	ubfx	fp, r2, #5, #6
      green = (green << 2) | (green >> 4);
 8002f96:	f3c2 2941 	ubfx	r9, r2, #9, #2
      blue  = (blue  << 3) | (blue  >> 2);
 8002f9a:	f3c2 0382 	ubfx	r3, r2, #2, #3
      uint32_t red   = ((pixel & 0xf800u) >> 11);
 8002f9e:	ea4f 2ad2 	mov.w	sl, r2, lsr #11
    for (int col = 0; col < CAM_RES_WIDTH; col++)
 8002fa2:	42bc      	cmp	r4, r7
      blue  = (blue  << 3) | (blue  >> 2);
 8002fa4:	ea43 03c8 	orr.w	r3, r3, r8, lsl #3
      lcd_buffer[(rowlcd + 1) * LCD_RES_WIDTH + collcd] = argb_pix;
 8002fa8:	eb06 0801 	add.w	r8, r6, r1
      green = (green << 2) | (green >> 4);
 8002fac:	ea49 098b 	orr.w	r9, r9, fp, lsl #2
      red   = (red   << 3) | (red   >> 2);
 8002fb0:	ea4f 3252 	mov.w	r2, r2, lsr #13
      uint32_t argb_pix = 0xFF000000 | (r8 << 16) | (g8 << 8) | b8;
 8002fb4:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
      red   = (red   << 3) | (red   >> 2);
 8002fb8:	ea42 02ca 	orr.w	r2, r2, sl, lsl #3
      uint32_t argb_pix = 0xFF000000 | (r8 << 16) | (g8 << 8) | b8;
 8002fbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
      lcd_buffer[rowlcd * LCD_RES_WIDTH + collcd] = argb_pix;
 8002fc4:	e9c6 3300 	strd	r3, r3, [r6]
      lcd_buffer[(rowlcd + 1) * LCD_RES_WIDTH + collcd] = argb_pix;
 8002fc8:	5073      	str	r3, [r6, r1]
    for (int col = 0; col < CAM_RES_WIDTH; col++)
 8002fca:	f106 0608 	add.w	r6, r6, #8
      lcd_buffer[(rowlcd + 1) * LCD_RES_WIDTH + collcd] = argb_pix;
 8002fce:	f8c8 3004 	str.w	r3, [r8, #4]
    for (int col = 0; col < CAM_RES_WIDTH; col++)
 8002fd2:	d1da      	bne.n	8002f8a <Display_CameraPreview+0x3a>
  for (int row = 0; row < CAM_RES_HEIGHT; row++)
 8002fd4:	f500 50c8 	add.w	r0, r0, #6400	@ 0x1900
 8002fd8:	f50c 6cc8 	add.w	ip, ip, #1600	@ 0x640
 8002fdc:	f50e 6ec8 	add.w	lr, lr, #1600	@ 0x640
 8002fe0:	4285      	cmp	r5, r0
 8002fe2:	d1cc      	bne.n	8002f7e <Display_CameraPreview+0x2e>
}
 8002fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe8:	00177000 	.word	0x00177000

08002fec <Display_NetworkOutput>:
{
 8002fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  postprocess_outBuffer_t *pOutBuff = App_Config_Ptr->output.pOutBuff;
 8002ff0:	e9d0 5318 	ldrd	r5, r3, [r0, #96]	@ 0x60
{
 8002ff4:	ed2d 8b04 	vpush	{d8-d9}
  for (int32_t i = 0; i < App_Config_Ptr->output.nb_detect; ++i)
 8002ff8:	2b00      	cmp	r3, #0
{
 8002ffa:	b0a1      	sub	sp, #132	@ 0x84
 8002ffc:	4682      	mov	sl, r0
  for (int32_t i = 0; i < App_Config_Ptr->output.nb_detect; ++i)
 8002ffe:	f340 8136 	ble.w	800326e <Display_NetworkOutput+0x282>
 8003002:	ab0e      	add	r3, sp, #56	@ 0x38
 8003004:	3518      	adds	r5, #24
  int32_t nb_objects = 0;
 8003006:	f04f 0b00 	mov.w	fp, #0
  uint32_t box_w = (uint32_t) (width * res_display_width) ;
  uint32_t box_h = (uint32_t) (height * res_display_width) ;
  uint32_t box_x = box_center_x - (box_w / 2) ;
  uint32_t box_y = box_center_y - (box_h / 2) ;
#else
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 800300a:	ed9f 9aa6 	vldr	s18, [pc, #664]	@ 80032a4 <Display_NetworkOutput+0x2b8>
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 800300e:	eddf 8aa6 	vldr	s17, [pc, #664]	@ 80032a8 <Display_NetworkOutput+0x2bc>
 8003012:	930d      	str	r3, [sp, #52]	@ 0x34
 8003014:	e056      	b.n	80030c4 <Display_NetworkOutput+0xd8>
                       App_Config_Ptr->nn_output_labels[pOutBuff->class_index], colors_table[pOutBuff->class_index]);
 8003016:	48a5      	ldr	r0, [pc, #660]	@ (80032ac <Display_NetworkOutput+0x2c0>)
 8003018:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   uint32_t box_x = box_center_x - (box_w / 2) ;
   uint32_t box_y = box_center_y - (box_h / 2) ;
#endif

   /* Draw box */
  UTIL_LCD_DrawRect(box_x, box_y, box_w, box_h, color);
 800301c:	4639      	mov	r1, r7
 800301e:	4640      	mov	r0, r8
 8003020:	9600      	str	r6, [sp, #0]
 8003022:	f00d f81d 	bl	8010060 <UTIL_LCD_DrawRect>

   /* Draw box center */
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, color);
 8003026:	4633      	mov	r3, r6
 8003028:	4621      	mov	r1, r4
 800302a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800302c:	220a      	movs	r2, #10
 800302e:	f00c fe8f 	bl	800fd50 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, color);
 8003032:	4633      	mov	r3, r6
 8003034:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003036:	220a      	movs	r2, #10
 8003038:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800303a:	f00c feb3 	bl	800fda4 <UTIL_LCD_DrawVLine>
  UTIL_LCD_SetBackColor(color);
 800303e:	4630      	mov	r0, r6
 8003040:	f00c fe6e 	bl	800fd20 <UTIL_LCD_SetBackColor>

  uint8_t red = (color & 0x00FF0000) >> 16;
  uint8_t green = (color & 0x0000FF00) >> 8;
  uint8_t blue = color & 0x000000FF;
  uint32_t brightness = red + green + blue;
 8003044:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8003048:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800304c:	4413      	add	r3, r2
 800304e:	fa53 f686 	uxtab	r6, r3, r6

  /* Increase lisibility by setting black for dark colors, white otherwise. */
  if (brightness < 0x17E) /* lower than mid value */ 
 8003052:	f5b6 7fbf 	cmp.w	r6, #382	@ 0x17e
  {
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003056:	bfb4      	ite	lt
 8003058:	f04f 30ff 	movlt.w	r0, #4294967295
  }
  else
  {
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800305c:	f04f 407f 	movge.w	r0, #4278190080	@ 0xff000000
 8003060:	f00c fe56 	bl	800fd10 <UTIL_LCD_SetTextColor>
  }
  char confidence_as_char[5];
  snprintf(confidence_as_char, sizeof(confidence_as_char), "%0.2f", confidence);
 8003064:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8003068:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800306a:	2105      	movs	r1, #5
 800306c:	4a90      	ldr	r2, [pc, #576]	@ (80032b0 <Display_NetworkOutput+0x2c4>)
 800306e:	4630      	mov	r0, r6
 8003070:	ed8d 7b00 	vstr	d7, [sp]
 8003074:	f016 fade 	bl	8019634 <sniprintf>
  sFONT *tmpFontSize = UTIL_LCD_GetFont();
 8003078:	f00c fe62 	bl	800fd40 <UTIL_LCD_GetFont>
  UTIL_LCD_DisplayStringAt(box_x, box_y, (uint8_t*)class_name, LEFT_MODE);
 800307c:	464a      	mov	r2, r9
  sFONT *tmpFontSize = UTIL_LCD_GetFont();
 800307e:	4604      	mov	r4, r0
  UTIL_LCD_DisplayStringAt(box_x, box_y, (uint8_t*)class_name, LEFT_MODE);
 8003080:	4639      	mov	r1, r7
 8003082:	2303      	movs	r3, #3
 8003084:	4640      	mov	r0, r8
 8003086:	f00c ff93 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(box_x + strlen(class_name)*tmpFontSize->Width+1, box_y, (unsigned char *)confidence_as_char, LEFT_MODE);
 800308a:	4648      	mov	r0, r9
 800308c:	f7fd f978 	bl	8000380 <strlen>
 8003090:	4632      	mov	r2, r6
 8003092:	88a4      	ldrh	r4, [r4, #4]
 8003094:	2303      	movs	r3, #3
 8003096:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8003098:	4639      	mov	r1, r7
    nb_objects++;
 800309a:	f10b 0b01 	add.w	fp, fp, #1
  for (int32_t i = 0; i < App_Config_Ptr->output.nb_detect; ++i)
 800309e:	3518      	adds	r5, #24
  UTIL_LCD_DisplayStringAt(box_x + strlen(class_name)*tmpFontSize->Width+1, box_y, (unsigned char *)confidence_as_char, LEFT_MODE);
 80030a0:	fb00 6004 	mla	r0, r0, r4, r6
 80030a4:	f00c ff84 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80030a8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80030ac:	f00c fe38 	bl	800fd20 <UTIL_LCD_SetBackColor>
    BSP_LED_Off(LED_RED);
 80030b0:	2002      	movs	r0, #2
 80030b2:	f003 fe0f 	bl	8006cd4 <BSP_LED_Off>
    BSP_LED_On(LED_GREEN);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f003 fdfa 	bl	8006cb0 <BSP_LED_On>
  for (int32_t i = 0; i < App_Config_Ptr->output.nb_detect; ++i)
 80030bc:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
 80030c0:	455b      	cmp	r3, fp
 80030c2:	dd64      	ble.n	800318e <Display_NetworkOutput+0x1a2>
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 80030c4:	ed15 6a06 	vldr	s12, [r5, #-24]	@ 0xffffffe8
   uint32_t box_w = (uint32_t) (width * res_display_width) ;
 80030c8:	ed55 7a04 	vldr	s15, [r5, #-16]
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 80030cc:	ee26 6a09 	vmul.f32	s12, s12, s18
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 80030d0:	ed55 6a05 	vldr	s13, [r5, #-20]	@ 0xffffffec
   uint32_t box_w = (uint32_t) (width * res_display_width) ;
 80030d4:	ee67 7a89 	vmul.f32	s15, s15, s18
    if (pOutBuff->class_index < AVAILABLE_LABELS)
 80030d8:	f855 1c04 	ldr.w	r1, [r5, #-4]
      Display_DrawBBox(pOutBuff->x_center, pOutBuff->y_center, pOutBuff->width, pOutBuff->height, pOutBuff->conf,
 80030dc:	f8da 0040 	ldr.w	r0, [sl, #64]	@ 0x40
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 80030e0:	ee66 6aa8 	vmul.f32	s13, s13, s17
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 80030e4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
   uint32_t box_h = (uint32_t) (height * res_display_height) ;
 80030e8:	ed15 7a03 	vldr	s14, [r5, #-12]
   uint32_t box_w = (uint32_t) (width * res_display_width) ;
 80030ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      Display_DrawBBox(pOutBuff->x_center, pOutBuff->y_center, pOutBuff->width, pOutBuff->height, pOutBuff->conf,
 80030f0:	f850 9021 	ldr.w	r9, [r0, r1, lsl #2]
   uint32_t box_h = (uint32_t) (height * res_display_height) ;
 80030f4:	ee27 7a28 	vmul.f32	s14, s14, s17
    if (pOutBuff->class_index < AVAILABLE_LABELS)
 80030f8:	2923      	cmp	r1, #35	@ 0x23
   uint32_t box_x = box_center_x - (box_w / 2) ;
 80030fa:	ee16 0a10 	vmov	r0, s12
      Display_DrawBBox(pOutBuff->x_center, pOutBuff->y_center, pOutBuff->width, pOutBuff->height, pOutBuff->conf,
 80030fe:	ed15 8a02 	vldr	s16, [r5, #-8]
   uint32_t box_w = (uint32_t) (width * res_display_width) ;
 8003102:	ee17 2a90 	vmov	r2, s15
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 8003106:	eefc 7ae6 	vcvt.u32.f32	s15, s13
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 800310a:	ed8d 6a09 	vstr	s12, [sp, #36]	@ 0x24
   uint32_t box_x = box_center_x - (box_w / 2) ;
 800310e:	eba0 0852 	sub.w	r8, r0, r2, lsr #1
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 8003112:	ee17 4a90 	vmov	r4, s15
   uint32_t box_h = (uint32_t) (height * res_display_height) ;
 8003116:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800311a:	f108 0601 	add.w	r6, r8, #1
 800311e:	960a      	str	r6, [sp, #40]	@ 0x28
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, color);
 8003120:	f1a0 0605 	sub.w	r6, r0, #5
   uint32_t box_h = (uint32_t) (height * res_display_height) ;
 8003124:	ee17 3a90 	vmov	r3, s15
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, color);
 8003128:	960b      	str	r6, [sp, #44]	@ 0x2c
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, color);
 800312a:	f1a4 0605 	sub.w	r6, r4, #5
   uint32_t box_y = box_center_y - (box_h / 2) ;
 800312e:	eba4 0753 	sub.w	r7, r4, r3, lsr #1
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, color);
 8003132:	960c      	str	r6, [sp, #48]	@ 0x30
    if (pOutBuff->class_index < AVAILABLE_LABELS)
 8003134:	f77f af6f 	ble.w	8003016 <Display_NetworkOutput+0x2a>
  UTIL_LCD_DrawRect(box_x, box_y, box_w, box_h, color);
 8003138:	495e      	ldr	r1, [pc, #376]	@ (80032b4 <Display_NetworkOutput+0x2c8>)
 800313a:	4640      	mov	r0, r8
 800313c:	9100      	str	r1, [sp, #0]
 800313e:	4639      	mov	r1, r7
 8003140:	f00c ff8e 	bl	8010060 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, color);
 8003144:	4621      	mov	r1, r4
 8003146:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003148:	220a      	movs	r2, #10
 800314a:	4b5a      	ldr	r3, [pc, #360]	@ (80032b4 <Display_NetworkOutput+0x2c8>)
 800314c:	f00c fe00 	bl	800fd50 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, color);
 8003150:	4b58      	ldr	r3, [pc, #352]	@ (80032b4 <Display_NetworkOutput+0x2c8>)
 8003152:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003154:	220a      	movs	r2, #10
 8003156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003158:	f00c fe24 	bl	800fda4 <UTIL_LCD_DrawVLine>
  UTIL_LCD_SetBackColor(color);
 800315c:	4855      	ldr	r0, [pc, #340]	@ (80032b4 <Display_NetworkOutput+0x2c8>)
 800315e:	f00c fddf 	bl	800fd20 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8003162:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003166:	f00c fdd3 	bl	800fd10 <UTIL_LCD_SetTextColor>
  snprintf(confidence_as_char, sizeof(confidence_as_char), "%0.2f", confidence);
 800316a:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800316e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8003170:	2105      	movs	r1, #5
 8003172:	4a4f      	ldr	r2, [pc, #316]	@ (80032b0 <Display_NetworkOutput+0x2c4>)
 8003174:	4630      	mov	r0, r6
 8003176:	ed8d 7b00 	vstr	d7, [sp]
 800317a:	f016 fa5b 	bl	8019634 <sniprintf>
  sFONT *tmpFontSize = UTIL_LCD_GetFont();
 800317e:	f00c fddf 	bl	800fd40 <UTIL_LCD_GetFont>
  UTIL_LCD_DisplayStringAt(box_x, box_y, (uint8_t*)class_name, LEFT_MODE);
 8003182:	2303      	movs	r3, #3
  sFONT *tmpFontSize = UTIL_LCD_GetFont();
 8003184:	4604      	mov	r4, r0
  UTIL_LCD_DisplayStringAt(box_x, box_y, (uint8_t*)class_name, LEFT_MODE);
 8003186:	464a      	mov	r2, r9
 8003188:	4640      	mov	r0, r8
 800318a:	4639      	mov	r1, r7
 800318c:	e77b      	b.n	8003086 <Display_NetworkOutput+0x9a>
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800318e:	2400      	movs	r4, #0
 8003190:	4b49      	ldr	r3, [pc, #292]	@ (80032b8 <Display_NetworkOutput+0x2cc>)
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8003192:	220f      	movs	r2, #15
 8003194:	f44f 7120 	mov.w	r1, #640	@ 0x280
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8003198:	659c      	str	r4, [r3, #88]	@ 0x58
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 800319a:	4620      	mov	r0, r4
 800319c:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <Display_NetworkOutput+0x2d0>)
 800319e:	f004 fde7 	bl	8007d70 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 640, 200, (uint8_t *)cubeai_logo);
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <Display_NetworkOutput+0x2d4>)
 80031a4:	22c8      	movs	r2, #200	@ 0xc8
 80031a6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80031aa:	4620      	mov	r0, r4
 80031ac:	f004 fde0 	bl	8007d70 <BSP_LCD_DrawBitmap>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f00c fdac 	bl	800fd10 <UTIL_LCD_SetTextColor>
  if (nb_objects > 1)
 80031b8:	f1bb 0f01 	cmp.w	fp, #1
 80031bc:	d06f      	beq.n	800329e <Display_NetworkOutput+0x2b2>
    sprintf(msg, "%ld objects", nb_objects);
 80031be:	465a      	mov	r2, fp
 80031c0:	4940      	ldr	r1, [pc, #256]	@ (80032c4 <Display_NetworkOutput+0x2d8>)
    sprintf(msg, "%ld object", nb_objects);
 80031c2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80031c4:	4620      	mov	r0, r4
 80031c6:	f016 fa69 	bl	801969c <siprintf>
    UTIL_LCD_DisplayStringAt(320, LINE(16), (uint8_t *)msg, CENTER_MODE);
 80031ca:	f00c fdb9 	bl	800fd40 <UTIL_LCD_GetFont>
 80031ce:	88c1      	ldrh	r1, [r0, #6]
 80031d0:	4622      	mov	r2, r4
 80031d2:	2301      	movs	r3, #1
 80031d4:	0109      	lsls	r1, r1, #4
 80031d6:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80031da:	f00c fee9 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80031de:	f04f 30ff 	mov.w	r0, #4294967295
 80031e2:	f00c fd95 	bl	800fd10 <UTIL_LCD_SetTextColor>
  sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Config_Ptr->Tfps_stop - App_Config_Ptr->Tfps_start));
 80031e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032c8 <Display_NetworkOutput+0x2dc>
 80031ea:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80031ec:	4937      	ldr	r1, [pc, #220]	@ (80032cc <Display_NetworkOutput+0x2e0>)
 80031ee:	4620      	mov	r0, r4
 80031f0:	e9da 230b 	ldrd	r2, r3, [sl, #44]	@ 0x2c
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003202:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003206:	ec53 2b17 	vmov	r2, r3, d7
 800320a:	f016 fa47 	bl	801969c <siprintf>
  UTIL_LCD_DisplayStringAt(320, LINE(18), (uint8_t *)msg, CENTER_MODE);
 800320e:	f00c fd97 	bl	800fd40 <UTIL_LCD_GetFont>
 8003212:	4601      	mov	r1, r0
 8003214:	2301      	movs	r3, #1
 8003216:	4622      	mov	r2, r4
 8003218:	88c9      	ldrh	r1, [r1, #6]
 800321a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800321e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003222:	4099      	lsls	r1, r3
 8003224:	f00c fec4 	bl	800ffb0 <UTIL_LCD_DisplayStringAt>
  App_Config_Ptr->lcd_sync =0;
 8003228:	2300      	movs	r3, #0
 800322a:	f8ca 3020 	str.w	r3, [sl, #32]
  while(App_Config_Ptr->lcd_sync==0);
 800322e:	f8da 3020 	ldr.w	r3, [sl, #32]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0fb      	beq.n	800322e <Display_NetworkOutput+0x242>
  Utility_DCache_Coherency_Maintenance((void *)App_Config_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8003236:	f8da 0090 	ldr.w	r0, [sl, #144]	@ 0x90
 800323a:	2202      	movs	r2, #2
 800323c:	4924      	ldr	r1, [pc, #144]	@ (80032d0 <Display_NetworkOutput+0x2e4>)
 800323e:	f000 fa0d 	bl	800365c <Utility_DCache_Coherency_Maintenance>
  Utility_Dma2d_Memcpy((uint32_t *)(App_Config_Ptr->lcd_frame_write_buff), (uint32_t *)(App_Config_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8003242:	2300      	movs	r3, #0
 8003244:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8003248:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800324c:	461a      	mov	r2, r3
 800324e:	9100      	str	r1, [sp, #0]
 8003250:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003254:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003258:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800325c:	e9da 1023 	ldrd	r1, r0, [sl, #140]	@ 0x8c
 8003260:	f000 f99a 	bl	8003598 <Utility_Dma2d_Memcpy>
}
 8003264:	b021      	add	sp, #132	@ 0x84
 8003266:	ecbd 8b04 	vpop	{d8-d9}
 800326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800326e:	2400      	movs	r4, #0
 8003270:	4911      	ldr	r1, [pc, #68]	@ (80032b8 <Display_NetworkOutput+0x2cc>)
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8003272:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <Display_NetworkOutput+0x2d0>)
 8003274:	220f      	movs	r2, #15
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8003276:	658c      	str	r4, [r1, #88]	@ 0x58
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8003278:	4620      	mov	r0, r4
 800327a:	f44f 7120 	mov.w	r1, #640	@ 0x280
  int32_t nb_objects = 0;
 800327e:	46a3      	mov	fp, r4
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8003280:	f004 fd76 	bl	8007d70 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 640, 200, (uint8_t *)cubeai_logo);
 8003284:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <Display_NetworkOutput+0x2d4>)
 8003286:	22c8      	movs	r2, #200	@ 0xc8
 8003288:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800328c:	4620      	mov	r0, r4
 800328e:	f004 fd6f 	bl	8007d70 <BSP_LCD_DrawBitmap>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003292:	ab0e      	add	r3, sp, #56	@ 0x38
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	930d      	str	r3, [sp, #52]	@ 0x34
 800329a:	f00c fd39 	bl	800fd10 <UTIL_LCD_SetTextColor>
    sprintf(msg, "%ld object", nb_objects);
 800329e:	465a      	mov	r2, fp
 80032a0:	490c      	ldr	r1, [pc, #48]	@ (80032d4 <Display_NetworkOutput+0x2e8>)
 80032a2:	e78e      	b.n	80031c2 <Display_NetworkOutput+0x1d6>
 80032a4:	44200000 	.word	0x44200000
 80032a8:	43f00000 	.word	0x43f00000
 80032ac:	08030524 	.word	0x08030524
 80032b0:	080304f8 	.word	0x080304f8
 80032b4:	ffffa500 	.word	0xffffa500
 80032b8:	24015974 	.word	0x24015974
 80032bc:	080410b8 	.word	0x080410b8
 80032c0:	080350ec 	.word	0x080350ec
 80032c4:	08030500 	.word	0x08030500
 80032c8:	447a0000 	.word	0x447a0000
 80032cc:	08030518 	.word	0x08030518
 80032d0:	00177000 	.word	0x00177000
 80032d4:	0803050c 	.word	0x0803050c

080032d8 <HAL_LTDC_ReloadEventCallback>:
  App_Config.lcd_sync=1;
 80032d8:	4b02      	ldr	r3, [pc, #8]	@ (80032e4 <HAL_LTDC_ReloadEventCallback+0xc>)
 80032da:	2201      	movs	r2, #1
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80032dc:	2102      	movs	r1, #2
  App_Config.lcd_sync=1;
 80032de:	621a      	str	r2, [r3, #32]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80032e0:	f009 b94e 	b.w	800c580 <HAL_LTDC_Reload>
 80032e4:	d0a214b8 	.word	0xd0a214b8

080032e8 <Network_Preprocess>:
/**
 * @brief Run preprocessing stages on captured frame
 * @param App_Config_Ptr pointer to application context
 */
void Network_Preprocess(AppConfig_TypeDef *App_Config_Ptr)
{ 
 80032e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ec:	4604      	mov	r4, r0
 80032ee:	b090      	sub	sp, #64	@ 0x40
  image_t src_img;
  image_t dst_img;
  
  App_Config_Ptr->Tfps_start =Utility_GetTimeStamp();
 80032f0:	f000 f950 	bl	8003594 <Utility_GetTimeStamp>
  src_img.data=App_Config_Ptr->camera_capture_buffer;
#if ASPECT_RATIO_MODE == ASPECT_RATIO_PADDING
  src_img.w=CAM_RES_WITH_BORDERS;
  src_img.h=CAM_RES_WITH_BORDERS;
#else
  src_img.w=CAM_RES_WIDTH;
 80032f4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
  src_img.data=App_Config_Ptr->camera_capture_buffer;
 80032f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  src_img.h=CAM_RES_HEIGHT;
#endif
  src_img.bpp=IMAGE_BPP_RGB565;
 80032fc:	f04f 0802 	mov.w	r8, #2
  dst_img.data=App_Config_Ptr->rescaled_image_buffer;
  dst_img.w=AI_NETWORK_WIDTH;
 8003300:	26c0      	movs	r6, #192	@ 0xc0
 8003302:	27c0      	movs	r7, #192	@ 0xc0
  src_img.data=App_Config_Ptr->camera_capture_buffer;
 8003304:	930b      	str	r3, [sp, #44]	@ 0x2c
 * @param src Pointer to source image
 * @param dst Pointer to destination image
 */
static void ImageResize(image_t *src, image_t *dst)
{
  if (STM32Ipl_Downscale(src, dst, 0) != stm32ipl_err_Ok)
 8003306:	a90c      	add	r1, sp, #48	@ 0x30
  dst_img.data=App_Config_Ptr->rescaled_image_buffer;
 8003308:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
  App_Config_Ptr->Tfps_start =Utility_GetTimeStamp();
 800330c:	62e0      	str	r0, [r4, #44]	@ 0x2c
  if (STM32Ipl_Downscale(src, dst, 0) != stm32ipl_err_Ok)
 800330e:	a808      	add	r0, sp, #32
  dst_img.data=App_Config_Ptr->rescaled_image_buffer;
 8003310:	930f      	str	r3, [sp, #60]	@ 0x3c
  src_img.w=CAM_RES_WIDTH;
 8003312:	23f0      	movs	r3, #240	@ 0xf0
  src_img.bpp=IMAGE_BPP_RGB565;
 8003314:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  dst_img.bpp=IMAGE_BPP_RGB565;
 8003318:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  src_img.w=CAM_RES_WIDTH;
 800331c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (STM32Ipl_Downscale(src, dst, 0) != stm32ipl_err_Ok)
 8003320:	2200      	movs	r2, #0
  dst_img.w=AI_NETWORK_WIDTH;
 8003322:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
  if (STM32Ipl_Downscale(src, dst, 0) != stm32ipl_err_Ok)
 8003326:	f00c fad5 	bl	800f8d4 <STM32Ipl_Downscale>
 800332a:	bb48      	cbnz	r0, 8003380 <Network_Preprocess+0x98>
  if(App_Config_Ptr->PixelFormatConv == HW_PFC)
 800332c:	69e3      	ldr	r3, [r4, #28]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d028      	beq.n	8003384 <Network_Preprocess+0x9c>
  dst_img.bpp = IMAGE_BPP_RGB888;
 8003332:	2204      	movs	r2, #4
  src_img.data=App_Config_Ptr->rescaled_image_buffer;
 8003334:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
  dst_img.data=App_Config_Ptr->nn_input_buffer;
 8003338:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
  dst_img.bpp = IMAGE_BPP_RGB888;
 800333a:	920e      	str	r2, [sp, #56]	@ 0x38
 */
static void PixelFormatConversion(AppConfig_TypeDef *App_Config_Ptr, image_t *src, image_t *dst)
{
  image_t *src_img = src;
  image_t *dst_img = dst;
  uint32_t rb_swap = App_Config_Ptr->red_blue_swap;
 800333c:	69a2      	ldr	r2, [r4, #24]
  src_img.bpp=IMAGE_BPP_RGB565;
 800333e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  src_img.data=App_Config_Ptr->rescaled_image_buffer;
 8003342:	900b      	str	r0, [sp, #44]	@ 0x2c
  dst_img.data=App_Config_Ptr->nn_input_buffer;
 8003344:	910f      	str	r1, [sp, #60]	@ 0x3c
  src_img.w=AI_NETWORK_WIDTH;
 8003346:	e9cd 6708 	strd	r6, r7, [sp, #32]
  dst_img.w=AI_NETWORK_WIDTH;
 800334a:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
  
  switch (App_Config_Ptr->PixelFormatConv)
 800334e:	2b02      	cmp	r3, #2
 8003350:	d117      	bne.n	8003382 <Network_Preprocess+0x9a>
    
    break;
    
  case SW_PFC: /* Use SW routine to perform pixel format convertion from RGB565 to grayscale */
   
    if (rb_swap != 0)
 8003352:	b172      	cbz	r2, 8003372 <Network_Preprocess+0x8a>
 8003354:	4a2d      	ldr	r2, [pc, #180]	@ (800340c <Network_Preprocess+0x124>)
 8003356:	188b      	adds	r3, r1, r2
 8003358:	4402      	add	r2, r0
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
  {
    tmp_r=pivot[i].r;
 800335a:	7815      	ldrb	r5, [r2, #0]
  for (int i = pixels-1; i >= 0; i--)
 800335c:	4282      	cmp	r2, r0
    
    dest[i].r = pivot[i].b;
 800335e:	7891      	ldrb	r1, [r2, #2]
  for (int i = pixels-1; i >= 0; i--)
 8003360:	f1a3 0303 	sub.w	r3, r3, #3
    dest[i].b = tmp_r;
 8003364:	715d      	strb	r5, [r3, #5]
  for (int i = pixels-1; i >= 0; i--)
 8003366:	f1a2 0203 	sub.w	r2, r2, #3
    dest[i].r = pivot[i].b;
 800336a:	70d9      	strb	r1, [r3, #3]
    dest[i].g = pivot[i].g;
 800336c:	7915      	ldrb	r5, [r2, #4]
 800336e:	711d      	strb	r5, [r3, #4]
  for (int i = pixels-1; i >= 0; i--)
 8003370:	d1f3      	bne.n	800335a <Network_Preprocess+0x72>
    if (STM32Ipl_ConvertRev(src_img, dst_img, 0) != stm32ipl_err_Ok)
 8003372:	2200      	movs	r2, #0
 8003374:	a90c      	add	r1, sp, #48	@ 0x30
 8003376:	a808      	add	r0, sp, #32
 8003378:	f00b fcb8 	bl	800ecec <STM32Ipl_ConvertRev>
 800337c:	b340      	cbz	r0, 80033d0 <Network_Preprocess+0xe8>
      while (1);
 800337e:	e7fe      	b.n	800337e <Network_Preprocess+0x96>
    while (1);
 8003380:	e7fe      	b.n	8003380 <Network_Preprocess+0x98>
    while(1);
 8003382:	e7fe      	b.n	8003382 <Network_Preprocess+0x9a>
    Utility_DCache_Coherency_Maintenance((void *)(App_Config_Ptr->rescaled_image_buffer), RESCALED_FRAME_BUFFER_SIZE, CLEAN);
 8003384:	4642      	mov	r2, r8
 8003386:	f44f 3190 	mov.w	r1, #73728	@ 0x12000
 800338a:	4605      	mov	r5, r0
 800338c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003390:	f000 f964 	bl	800365c <Utility_DCache_Coherency_Maintenance>
  dst_img.bpp = IMAGE_BPP_RGB888;
 8003394:	2304      	movs	r3, #4
  src_img.data=App_Config_Ptr->rescaled_image_buffer;
 8003396:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
  dst_img.bpp = IMAGE_BPP_RGB888;
 800339a:	930e      	str	r3, [sp, #56]	@ 0x38
  dst_img.data=App_Config_Ptr->nn_input_buffer;
 800339c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
  src_img.bpp=IMAGE_BPP_RGB565;
 800339e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  src_img.data=App_Config_Ptr->rescaled_image_buffer;
 80033a2:	900b      	str	r0, [sp, #44]	@ 0x2c
  dst_img.data=App_Config_Ptr->nn_input_buffer;
 80033a4:	910f      	str	r1, [sp, #60]	@ 0x3c
  uint32_t rb_swap = App_Config_Ptr->red_blue_swap;
 80033a6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
  src_img.w=AI_NETWORK_WIDTH;
 80033aa:	e9cd 6708 	strd	r6, r7, [sp, #32]
  switch (App_Config_Ptr->PixelFormatConv)
 80033ae:	2b01      	cmp	r3, #1
  dst_img.w=AI_NETWORK_WIDTH;
 80033b0:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
  switch (App_Config_Ptr->PixelFormatConv)
 80033b4:	d1cb      	bne.n	800334e <Network_Preprocess+0x66>
      Utility_Dma2d_Memcpy((uint32_t *)(src_img->data),
 80033b6:	9206      	str	r2, [sp, #24]
 80033b8:	462a      	mov	r2, r5
 80033ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80033be:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80033c2:	23c0      	movs	r3, #192	@ 0xc0
 80033c4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	462b      	mov	r3, r5
 80033cc:	f000 f8e4 	bl	8003598 <Utility_Dma2d_Memcpy>
  if(App_Config_Ptr->PixelFormatConv == HW_PFC)
 80033d0:	69e2      	ldr	r2, [r4, #28]
 80033d2:	2a01      	cmp	r2, #1
 80033d4:	d012      	beq.n	80033fc <Network_Preprocess+0x114>
* @retval None
*/
void PixelValueConversion(AppConfig_TypeDef *App_Config_Ptr, void *pSrc)
{
  /**Check data format expected by the model input and perform the right conversion**/
  if(App_Config_Ptr->nn_input_type == UINT8_FORMAT)
 80033d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d00c      	beq.n	80033f6 <Network_Preprocess+0x10e>
  {
	  /*Nothing to do*/
  }
  else if(App_Config_Ptr->nn_input_type == INT8_FORMAT)
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d000      	beq.n	80033e2 <Network_Preprocess+0xfa>
		destination[i]= signed_input_value;
	}
  }
  else
  {
	  while(1);
 80033e0:	e7fe      	b.n	80033e0 <Network_Preprocess+0xf8>
 80033e2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80033e4:	f503 31d8 	add.w	r1, r3, #110592	@ 0x1b000
		unsigned_input_value= (uint8_t)source[i];
 80033e8:	681a      	ldr	r2, [r3, #0]
		signed_input_value= ((int16_t)unsigned_input_value)-128;
 80033ea:	f082 3280 	eor.w	r2, r2, #2155905152	@ 0x80808080
		destination[i]= signed_input_value;
 80033ee:	f843 2b04 	str.w	r2, [r3], #4
	for (int32_t i = 0; i < nb_pixels; i++)
 80033f2:	4299      	cmp	r1, r3
 80033f4:	d1f8      	bne.n	80033e8 <Network_Preprocess+0x100>
}
 80033f6:	b010      	add	sp, #64	@ 0x40
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Utility_DCache_Coherency_Maintenance((void *)(App_Config_Ptr->activation_buffer[AI_NETWORK_INPUTS_IN_ACTIVATIONS_INDEX]),
 80033fc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80033fe:	f243 5160 	movw	r1, #13664	@ 0x3560
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	f000 f92a 	bl	800365c <Utility_DCache_Coherency_Maintenance>
 8003408:	e7e5      	b.n	80033d6 <Network_Preprocess+0xee>
 800340a:	bf00      	nop
 800340c:	0001affd 	.word	0x0001affd

08003410 <Network_Inference>:
{
 8003410:	b510      	push	{r4, lr}
 8003412:	4604      	mov	r4, r0
  App_Config_Ptr->Tinf_start =Utility_GetTimeStamp();
 8003414:	f000 f8be 	bl	8003594 <Utility_GetTimeStamp>
 8003418:	4603      	mov	r3, r0
  ai_run((void*)App_Config_Ptr->nn_input_buffer, (void**)App_Config_Ptr->nn_output_buffer);
 800341a:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 800341e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
  App_Config_Ptr->Tinf_start =Utility_GetTimeStamp();
 8003420:	6263      	str	r3, [r4, #36]	@ 0x24
  ai_run((void*)App_Config_Ptr->nn_input_buffer, (void**)App_Config_Ptr->nn_output_buffer);
 8003422:	f7ff fb49 	bl	8002ab8 <ai_run>
  App_Config_Ptr->Tinf_stop =Utility_GetTimeStamp();
 8003426:	f000 f8b5 	bl	8003594 <Utility_GetTimeStamp>
 800342a:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800342c:	bd10      	pop	{r4, pc}
 800342e:	bf00      	nop

08003430 <Network_Postprocess>:
{
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4604      	mov	r4, r0
 8003434:	ed2d 8b02 	vpush	{d8}
  while(App_Config_Ptr->new_frame_ready == 0);
 8003438:	7b23      	ldrb	r3, [r4, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0fc      	beq.n	8003438 <Network_Postprocess+0x8>
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 800343e:	f7ff fa8f 	bl	8002960 <ai_get_output_format>
 8003442:	2802      	cmp	r0, #2
 8003444:	d00e      	beq.n	8003464 <Network_Postprocess+0x34>
  if (App_Config_Ptr->error == AI_OBJDETECT_POSTPROCESS_ERROR_NO)
 8003446:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003448:	b103      	cbz	r3, 800344c <Network_Postprocess+0x1c>
    while(1);
 800344a:	e7fe      	b.n	800344a <Network_Postprocess+0x1a>
    App_Config_Ptr->error = app_postprocess_run( App_Config_Ptr->nn_output_buffer,
 800344c:	f104 0248 	add.w	r2, r4, #72	@ 0x48
 8003450:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 8003454:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8003458:	f000 f88e 	bl	8003578 <app_postprocess_run>
 800345c:	6460      	str	r0, [r4, #68]	@ 0x44
  if (App_Config_Ptr->error != AI_OBJDETECT_POSTPROCESS_ERROR_NO)
 800345e:	2800      	cmp	r0, #0
 8003460:	d053      	beq.n	800350a <Network_Postprocess+0xda>
    while(1);
 8003462:	e7fe      	b.n	8003462 <Network_Postprocess+0x32>
    switch(ai_get_output_quantization_scheme())
 8003464:	f7ff fa84 	bl	8002970 <ai_get_output_quantization_scheme>
 8003468:	2801      	cmp	r0, #1
 800346a:	d034      	beq.n	80034d6 <Network_Postprocess+0xa6>
 800346c:	2802      	cmp	r0, #2
 800346e:	d018      	beq.n	80034a2 <Network_Postprocess+0x72>
 8003470:	2800      	cmp	r0, #0
 8003472:	d1e8      	bne.n	8003446 <Network_Postprocess+0x16>
      scale=ai_get_output_fxp_scale();
 8003474:	f7ff fa9c 	bl	80029b0 <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) App_Config_Ptr->nn_output_buffer[0];
 8003478:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800347a:	f644 3319 	movw	r3, #19225	@ 0x4b19
 800347e:	4a26      	ldr	r2, [pc, #152]	@ (8003518 <Network_Postprocess+0xe8>)
      scale=ai_get_output_fxp_scale();
 8003480:	eeb0 7a40 	vmov.f32	s14, s0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8003484:	440b      	add	r3, r1
 8003486:	440a      	add	r2, r1
        float q_value = (float) *(nn_output_i8 + i);
 8003488:	f913 0d01 	ldrsb.w	r0, [r3, #-1]!
 800348c:	ee07 0a90 	vmov	s15, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8003490:	4299      	cmp	r1, r3
        float q_value = (float) *(nn_output_i8 + i);
 8003492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        *(nn_output_f32 + i) = scale * q_value;
 8003496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349a:	ed62 7a01 	vstmdb	r2!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 800349e:	d1f3      	bne.n	8003488 <Network_Postprocess+0x58>
 80034a0:	e7d1      	b.n	8003446 <Network_Postprocess+0x16>
      scale = ai_get_output_scale();
 80034a2:	f7ff fa99 	bl	80029d8 <ai_get_output_scale>
 80034a6:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 80034aa:	f7ff faad 	bl	8002a08 <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) App_Config_Ptr->nn_output_buffer[0];
 80034ae:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80034b0:	f644 3219 	movw	r2, #19225	@ 0x4b19
 80034b4:	4918      	ldr	r1, [pc, #96]	@ (8003518 <Network_Postprocess+0xe8>)
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 80034b6:	442a      	add	r2, r5
 80034b8:	4429      	add	r1, r5
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 80034ba:	f912 3d01 	ldrsb.w	r3, [r2, #-1]!
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 80034be:	1a1b      	subs	r3, r3, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 80034c0:	4295      	cmp	r5, r2
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ca:	ee67 7a88 	vmul.f32	s15, s15, s16
 80034ce:	ed61 7a01 	vstmdb	r1!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 80034d2:	d1f2      	bne.n	80034ba <Network_Postprocess+0x8a>
 80034d4:	e7b7      	b.n	8003446 <Network_Postprocess+0x16>
      scale = ai_get_output_scale();
 80034d6:	f7ff fa7f 	bl	80029d8 <ai_get_output_scale>
 80034da:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 80034de:	f7ff fa93 	bl	8002a08 <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) App_Config_Ptr->nn_output_buffer[0];
 80034e2:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80034e4:	f644 3219 	movw	r2, #19225	@ 0x4b19
 80034e8:	490b      	ldr	r1, [pc, #44]	@ (8003518 <Network_Postprocess+0xe8>)
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 80034ea:	442a      	add	r2, r5
 80034ec:	4429      	add	r1, r5
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 80034ee:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 80034f2:	1a1b      	subs	r3, r3, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 80034f4:	4295      	cmp	r5, r2
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fe:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003502:	ed61 7a01 	vstmdb	r1!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8003506:	d1f2      	bne.n	80034ee <Network_Postprocess+0xbe>
 8003508:	e79d      	b.n	8003446 <Network_Postprocess+0x16>
  App_Config_Ptr->Tfps_stop =Utility_GetTimeStamp();
 800350a:	f000 f843 	bl	8003594 <Utility_GetTimeStamp>
 800350e:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8003510:	ecbd 8b02 	vpop	{d8}
 8003514:	bd38      	pop	{r3, r4, r5, pc}
 8003516:	bf00      	nop
 8003518:	00012c64 	.word	0x00012c64

0800351c <Network_Init>:
{
 800351c:	b510      	push	{r4, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	4604      	mov	r4, r0
  ai_init((void*)(App_Config_Ptr->activation_buffer), &input_data_ptr, output_data_ptr);
 8003522:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8003524:	aa01      	add	r2, sp, #4
 8003526:	4669      	mov	r1, sp
 8003528:	f7ff fa92 	bl	8002a50 <ai_init>
  if(input_data_ptr!= NULL)
 800352c:	9b00      	ldr	r3, [sp, #0]
 800352e:	b15b      	cbz	r3, 8003548 <Network_Init+0x2c>
    if(output_data_ptr[i]!= NULL)
 8003530:	9a01      	ldr	r2, [sp, #4]
    App_Config_Ptr->nn_input_buffer=input_data_ptr;
 8003532:	67a3      	str	r3, [r4, #120]	@ 0x78
    if(output_data_ptr[i]!= NULL)
 8003534:	b14a      	cbz	r2, 800354a <Network_Init+0x2e>
 8003536:	9b02      	ldr	r3, [sp, #8]
      App_Config_Ptr->nn_output_buffer[i] = output_data_ptr[i];
 8003538:	66e2      	str	r2, [r4, #108]	@ 0x6c
    if(output_data_ptr[i]!= NULL)
 800353a:	b133      	cbz	r3, 800354a <Network_Init+0x2e>
 800353c:	9a03      	ldr	r2, [sp, #12]
      App_Config_Ptr->nn_output_buffer[i] = output_data_ptr[i];
 800353e:	6723      	str	r3, [r4, #112]	@ 0x70
    if(output_data_ptr[i]!= NULL)
 8003540:	b11a      	cbz	r2, 800354a <Network_Init+0x2e>
      App_Config_Ptr->nn_output_buffer[i] = output_data_ptr[i];
 8003542:	6762      	str	r2, [r4, #116]	@ 0x74
}
 8003544:	b004      	add	sp, #16
 8003546:	bd10      	pop	{r4, pc}
    while(1);
 8003548:	e7fe      	b.n	8003548 <Network_Init+0x2c>
      while (1);     
 800354a:	e7fe      	b.n	800354a <Network_Init+0x2e>

0800354c <app_postprocess_init>:
#if POSTPROCESS_TYPE == POSTPROCESS_SSD
#include "anchors.h"
#endif

int32_t app_postprocess_init( AppConfig_TypeDef *App_Config_Ptr)
{
 800354c:	4603      	mov	r3, r0
    App_Config_Ptr->input_static_param.pAnchors         = AI_OBJDETECT_YOLOV2_PP_ANCHORS;		// Pointer on Anchor boxes, aligned with the training phase
    App_Config_Ptr->input_static_param.max_boxes_limit  = AI_OBJDETECT_YOLOV2_PP_MAX_BOXES_LIMIT;	// Maximum number of boxes as output of the post processing, that can be tuned by the user
    App_Config_Ptr->input_static_param.optim            = AI_OBJDETECT_YOLOV2_PP_OPTIM_NORMAL;	// Only this mode is supported for now.
    error = objdetect_yolov2_pp_reset((yolov2_pp_static_param_t *) &App_Config_Ptr->input_static_param);
#elif POSTPROCESS_TYPE == POSTPROCESS_ST_SSD
    App_Config_Ptr->input_static_param.nb_classes = AI_OBJDETECT_SSD_ST_PP_NB_CLASSES;
 800354e:	2105      	movs	r1, #5
 8003550:	f640 7205 	movw	r2, #3845	@ 0xf05
    App_Config_Ptr->input_static_param.nb_detections = AI_OBJDETECT_SSD_ST_PP_TOTAL_DETECTIONS;
    App_Config_Ptr->input_static_param.max_boxes_limit = AI_OBJDETECT_SSD_ST_PP_MAX_BOXES_LIMIT;
 8003554:	200a      	movs	r0, #10
    App_Config_Ptr->input_static_param.conf_threshold = AI_OBJDETECT_SSD_ST_PP_CONF_THRESHOLD;
    App_Config_Ptr->input_static_param.iou_threshold = AI_OBJDETECT_SSD_ST_PP_IOU_THRESHOLD;
 8003556:	f04f 5c7c 	mov.w	ip, #1056964608	@ 0x3f000000
    App_Config_Ptr->input_static_param.max_boxes_limit = AI_OBJDETECT_SSD_ST_PP_MAX_BOXES_LIMIT;
 800355a:	6518      	str	r0, [r3, #80]	@ 0x50
    App_Config_Ptr->input_static_param.nb_detect = 1;
    error = objdetect_ssd_st_pp_reset((ssd_st_pp_static_param_t *) &App_Config_Ptr->input_static_param);
 800355c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
    App_Config_Ptr->input_static_param.iou_threshold = AI_OBJDETECT_SSD_ST_PP_IOU_THRESHOLD;
 8003560:	f8c3 c058 	str.w	ip, [r3, #88]	@ 0x58
    App_Config_Ptr->input_static_param.nb_classes = AI_OBJDETECT_SSD_ST_PP_NB_CLASSES;
 8003564:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
    App_Config_Ptr->input_static_param.conf_threshold = AI_OBJDETECT_SSD_ST_PP_CONF_THRESHOLD;
 8003568:	4902      	ldr	r1, [pc, #8]	@ (8003574 <app_postprocess_init+0x28>)
    App_Config_Ptr->input_static_param.nb_detect = 1;
 800356a:	2201      	movs	r2, #1
    App_Config_Ptr->input_static_param.conf_threshold = AI_OBJDETECT_SSD_ST_PP_CONF_THRESHOLD;
 800356c:	6559      	str	r1, [r3, #84]	@ 0x54
    App_Config_Ptr->input_static_param.nb_detect = 1;
 800356e:	65da      	str	r2, [r3, #92]	@ 0x5c
    error = objdetect_ssd_st_pp_reset((ssd_st_pp_static_param_t *) &App_Config_Ptr->input_static_param);
 8003570:	f015 b9e8 	b.w	8018944 <objdetect_ssd_st_pp_reset>
 8003574:	3f19999a 	.word	0x3f19999a

08003578 <app_postprocess_run>:
}

int32_t app_postprocess_run( void **pInput,
                            postprocess_out_t*pOutput,
                            void *pInput_static_param)
{
 8003578:	b510      	push	{r4, lr}
#elif POSTPROCESS_TYPE == POSTPROCESS_YOLO_V2
    error = objdetect_yolov2_pp_process((yolov2_pp_in_t*) pInput[0],
                                        (postprocess_out_t*) pOutput,
                                        (yolov2_pp_static_param_t*) pInput_static_param);
#elif POSTPROCESS_TYPE == POSTPROCESS_ST_SSD
    ssd_st_pp_in_centroid_t pp_input = 
 800357a:	6803      	ldr	r3, [r0, #0]
{
 800357c:	b084      	sub	sp, #16
    ssd_st_pp_in_centroid_t pp_input = 
 800357e:	9303      	str	r3, [sp, #12]
 8003580:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
    {
        .pAnchors = pInput[2],
        .pBoxes = pInput[1],
        .pScores = pInput[0],
    };
    error = objdetect_ssd_st_pp_process((ssd_st_pp_in_centroid_t*) &pp_input,
 8003584:	a801      	add	r0, sp, #4
    ssd_st_pp_in_centroid_t pp_input = 
 8003586:	9402      	str	r4, [sp, #8]
 8003588:	9301      	str	r3, [sp, #4]
    error = objdetect_ssd_st_pp_process((ssd_st_pp_in_centroid_t*) &pp_input,
 800358a:	f015 f9e1 	bl	8018950 <objdetect_ssd_st_pp_process>
                                     (ssd_pp_static_param_t*) pInput_static_param);
#else
    #error "PostProcessing type not supported" 
#endif
    return error;
}
 800358e:	b004      	add	sp, #16
 8003590:	bd10      	pop	{r4, pc}
 8003592:	bf00      	nop

08003594 <Utility_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t Utility_GetTimeStamp(void)
{
  return HAL_GetTick();
 8003594:	f005 bb72 	b.w	8008c7c <HAL_GetTick>

08003598 <Utility_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void Utility_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 8003598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359c:	b087      	sub	sp, #28
 800359e:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 80035a2:	f8bd b040 	ldrh.w	fp, [sp, #64]	@ 0x40
 80035a6:	f1b9 0f04 	cmp.w	r9, #4
 80035aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80035b4:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	@ 0x48
 80035b8:	e9dd 5615 	ldrd	r5, r6, [sp, #84]	@ 0x54
 80035bc:	9305      	str	r3, [sp, #20]
 80035be:	d82c      	bhi.n	800361a <Utility_Dma2d_Memcpy+0x82>
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
 80035c0:	fb07 2200 	mla	r2, r7, r0, r2
 80035c4:	4823      	ldr	r0, [pc, #140]	@ (8003654 <Utility_Dma2d_Memcpy+0xbc>)
 80035c6:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 80035ca:	fb00 f302 	mul.w	r3, r0, r2
 80035ce:	9302      	str	r3, [sp, #8]
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 80035d0:	4c21      	ldr	r4, [pc, #132]	@ (8003658 <Utility_Dma2d_Memcpy+0xc0>)

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hlcd_dma2d.XferCpltCallback = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80035d2:	f04f 0a01 	mov.w	sl, #1
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 80035d6:	eba7 070b 	sub.w	r7, r7, fp
  HAL_DMA2D_DeInit(&hlcd_dma2d);
 80035da:	4620      	mov	r0, r4
 80035dc:	f007 f932 	bl	800a844 <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 80035e0:	3d00      	subs	r5, #0
  hlcd_dma2d.XferCpltCallback = NULL;
 80035e2:	f04f 0300 	mov.w	r3, #0
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80035e6:	4620      	mov	r0, r4
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 80035e8:	bf18      	it	ne
 80035ea:	2501      	movne	r5, #1
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 80035ec:	1e31      	subs	r1, r6, #0
  hlcd_dma2d.XferCpltCallback = NULL;
 80035ee:	6223      	str	r3, [r4, #32]
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 80035f0:	bf18      	it	ne
 80035f2:	2101      	movne	r1, #1
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 80035f4:	042d      	lsls	r5, r5, #16
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80035f6:	6463      	str	r3, [r4, #68]	@ 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80035f8:	23ff      	movs	r3, #255	@ 0xff
  hlcd_dma2d.Init.ColorMode = output_color_format;
 80035fa:	f8c4 9008 	str.w	r9, [r4, #8]
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 80035fe:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8003602:	60e7      	str	r7, [r4, #12]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8003604:	6065      	str	r5, [r4, #4]
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8003606:	65a1      	str	r1, [r4, #88]	@ 0x58
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8003608:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800360c:	6523      	str	r3, [r4, #80]	@ 0x50
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800360e:	f007 f8d7 	bl	800a7c0 <HAL_DMA2D_Init>
 8003612:	b128      	cbz	r0, 8003620 <Utility_Dma2d_Memcpy+0x88>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8003614:	b007      	add	sp, #28
 8003616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 800361a:	2300      	movs	r3, #0
 800361c:	9302      	str	r3, [sp, #8]
 800361e:	e7d7      	b.n	80035d0 <Utility_Dma2d_Memcpy+0x38>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003620:	4651      	mov	r1, sl
 8003622:	4620      	mov	r0, r4
 8003624:	f007 fb20 	bl	800ac68 <HAL_DMA2D_ConfigLayer>
 8003628:	2800      	cmp	r0, #0
 800362a:	d1f3      	bne.n	8003614 <Utility_Dma2d_Memcpy+0x7c>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 800362c:	9b02      	ldr	r3, [sp, #8]
 800362e:	4620      	mov	r0, r4
 8003630:	9a04      	ldr	r2, [sp, #16]
 8003632:	9903      	ldr	r1, [sp, #12]
 8003634:	441a      	add	r2, r3
 8003636:	9b05      	ldr	r3, [sp, #20]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	465b      	mov	r3, fp
 800363c:	f007 f988 	bl	800a950 <HAL_DMA2D_Start>
 8003640:	2800      	cmp	r0, #0
 8003642:	d1e7      	bne.n	8003614 <Utility_Dma2d_Memcpy+0x7c>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8003644:	211e      	movs	r1, #30
 8003646:	4620      	mov	r0, r4
}
 8003648:	b007      	add	sp, #28
 800364a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 800364e:	f007 b9db 	b.w	800aa08 <HAL_DMA2D_PollForTransfer>
 8003652:	bf00      	nop
 8003654:	08049300 	.word	0x08049300
 8003658:	24015974 	.word	0x24015974

0800365c <Utility_DCache_Coherency_Maintenance>:
 * @retval None
 */
void Utility_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 800365c:	ea40 0301 	orr.w	r3, r0, r1
 8003660:	06db      	lsls	r3, r3, #27
 8003662:	d106      	bne.n	8003672 <Utility_DCache_Coherency_Maintenance+0x16>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 8003664:	2a01      	cmp	r2, #1
 8003666:	d005      	beq.n	8003674 <Utility_DCache_Coherency_Maintenance+0x18>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003668:	2900      	cmp	r1, #0
 800366a:	dd01      	ble.n	8003670 <Utility_DCache_Coherency_Maintenance+0x14>
 800366c:	2a02      	cmp	r2, #2
 800366e:	d01a      	beq.n	80036a6 <Utility_DCache_Coherency_Maintenance+0x4a>
 8003670:	4770      	bx	lr
    while(1);
 8003672:	e7fe      	b.n	8003672 <Utility_DCache_Coherency_Maintenance+0x16>
    if ( dsize > 0 ) { 
 8003674:	2900      	cmp	r1, #0
 8003676:	ddfb      	ble.n	8003670 <Utility_DCache_Coherency_Maintenance+0x14>
{
 8003678:	b410      	push	{r4}
 800367a:	4604      	mov	r4, r0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	1e4b      	subs	r3, r1, #1
 8003682:	f100 0120 	add.w	r1, r0, #32
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003686:	4a0f      	ldr	r2, [pc, #60]	@ (80036c4 <Utility_DCache_Coherency_Maintenance+0x68>)
 8003688:	f023 031f 	bic.w	r3, r3, #31
 800368c:	440b      	add	r3, r1
 800368e:	f8c2 425c 	str.w	r4, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003692:	3420      	adds	r4, #32
      } while ( op_size > 0 );
 8003694:	429c      	cmp	r4, r3
 8003696:	d1fa      	bne.n	800368e <Utility_DCache_Coherency_Maintenance+0x32>
 8003698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800369c:	f3bf 8f6f 	isb	sy
  }
  else if(Maintenance_operation == CLEAN)
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 80036a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036a4:	4770      	bx	lr
  __ASM volatile ("dsb 0xF":::"memory");
 80036a6:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80036aa:	4a06      	ldr	r2, [pc, #24]	@ (80036c4 <Utility_DCache_Coherency_Maintenance+0x68>)
 80036ac:	4401      	add	r1, r0
 80036ae:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80036b2:	3020      	adds	r0, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80036b4:	1a0b      	subs	r3, r1, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	dcf9      	bgt.n	80036ae <Utility_DCache_Coherency_Maintenance+0x52>
 80036ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 80036c8:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 80036ca:	2000      	movs	r0, #0
 80036cc:	f003 fb02 	bl	8006cd4 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 80036d0:	2001      	movs	r0, #1
 80036d2:	f003 faff 	bl	8006cd4 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 80036d6:	2002      	movs	r0, #2
 80036d8:	f003 fafc 	bl	8006cd4 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 80036dc:	2003      	movs	r0, #3
 80036de:	f003 faf9 	bl	8006cd4 <BSP_LED_Off>

  /* Turn LED RED on */
  BSP_LED_On(LED_RED);
 80036e2:	2002      	movs	r0, #2
 80036e4:	f003 fae4 	bl	8006cb0 <BSP_LED_On>
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <Error_Handler+0x20>
 80036ea:	bf00      	nop

080036ec <main>:
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b09e      	sub	sp, #120	@ 0x78
  HAL_MPU_Disable();
 80036f0:	f005 fb5c 	bl	8008dac <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80036f4:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80036f8:	4a9d      	ldr	r2, [pc, #628]	@ (8003970 <main+0x284>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036fa:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80036fc:	4b9d      	ldr	r3, [pc, #628]	@ (8003974 <main+0x288>)
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80036fe:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003700:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003702:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8003706:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800370a:	f005 fb6d 	bl	8008de8 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800370e:	2004      	movs	r0, #4
 8003710:	f005 fb5a 	bl	8008dc8 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003714:	4a98      	ldr	r2, [pc, #608]	@ (8003978 <main+0x28c>)
 8003716:	6953      	ldr	r3, [r2, #20]
 8003718:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800371c:	d111      	bne.n	8003742 <main+0x56>
  __ASM volatile ("dsb 0xF":::"memory");
 800371e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003722:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003726:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800372a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800372e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003732:	6953      	ldr	r3, [r2, #20]
 8003734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003738:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800373a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800373e:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003742:	488d      	ldr	r0, [pc, #564]	@ (8003978 <main+0x28c>)
 8003744:	6943      	ldr	r3, [r0, #20]
 8003746:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800374a:	d124      	bne.n	8003796 <main+0xaa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800374c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003750:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003754:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003758:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800375c:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003760:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8003764:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003766:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800376a:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800376c:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8003770:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003772:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	d1f8      	bne.n	800376c <main+0x80>
    } while(sets-- != 0U);
 800377a:	3c20      	subs	r4, #32
 800377c:	f114 0f20 	cmn.w	r4, #32
 8003780:	d1f1      	bne.n	8003766 <main+0x7a>
 8003782:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003786:	6943      	ldr	r3, [r0, #20]
 8003788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378c:	6143      	str	r3, [r0, #20]
 800378e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003792:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8003796:	f005 fa35 	bl	8008c04 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800379a:	2004      	movs	r0, #4
 800379c:	f009 f8b6 	bl	800c90c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037a0:	4b76      	ldr	r3, [pc, #472]	@ (800397c <main+0x290>)
 80037a2:	2100      	movs	r1, #0
 80037a4:	4a76      	ldr	r2, [pc, #472]	@ (8003980 <main+0x294>)
 80037a6:	9101      	str	r1, [sp, #4]
 80037a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037aa:	f021 0101 	bic.w	r1, r1, #1
 80037ae:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	6993      	ldr	r3, [r2, #24]
 80037ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037be:	6193      	str	r3, [r2, #24]
 80037c0:	6993      	ldr	r3, [r2, #24]
 80037c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	9b01      	ldr	r3, [sp, #4]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80037ca:	6993      	ldr	r3, [r2, #24]
 80037cc:	049b      	lsls	r3, r3, #18
 80037ce:	d5fc      	bpl.n	80037ca <main+0xde>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037d0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037d4:	f04f 0801 	mov.w	r8, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037d8:	2702      	movs	r7, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80037da:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80037dc:	2408      	movs	r4, #8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80037de:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80037e0:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80037e2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80037e4:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037e6:	971a      	str	r7, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80037e8:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80037ea:	941b      	str	r4, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037ec:	e9cd 820b 	strd	r8, r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80037f0:	2205      	movs	r2, #5
 80037f2:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 80037f4:	22a0      	movs	r2, #160	@ 0xa0
 80037f6:	e9cd 2717 	strd	r2, r7, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037fa:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037fc:	e9cd 7714 	strd	r7, r7, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003800:	9219      	str	r2, [sp, #100]	@ 0x64
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003802:	f009 fca7 	bl	800d154 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 8003806:	2800      	cmp	r0, #0
 8003808:	f040 80b0 	bne.w	800396c <main+0x280>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 800380c:	233f      	movs	r3, #63	@ 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800380e:	f04f 0940 	mov.w	r9, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003812:	f04f 0a03 	mov.w	sl, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003816:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8003818:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800381a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800381e:	4639      	mov	r1, r7
 8003820:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003822:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003824:	f8cd a010 	str.w	sl, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003828:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800382c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800382e:	e9cd 9907 	strd	r9, r9, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8003832:	f00a f815 	bl	800d860 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 8003836:	4606      	mov	r6, r0
 8003838:	2800      	cmp	r0, #0
 800383a:	f040 8097 	bne.w	800396c <main+0x280>
  __HAL_RCC_CSI_ENABLE();
 800383e:	4d51      	ldr	r5, [pc, #324]	@ (8003984 <main+0x298>)
  App_Config_Ptr->mirror_flip=CAMERA_MIRRORFLIP_FLIP;
 8003840:	4c51      	ldr	r4, [pc, #324]	@ (8003988 <main+0x29c>)
  __HAL_RCC_CSI_ENABLE();
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003848:	602b      	str	r3, [r5, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800384e:	f043 0302 	orr.w	r3, r3, #2
 8003852:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8003856:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	9302      	str	r3, [sp, #8]
 8003860:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8003862:	f005 fa29 	bl	8008cb8 <HAL_EnableCompensationCell>
  App_Config_Ptr->mirror_flip=CAMERA_MIRRORFLIP_FLIP;
 8003866:	f8c4 8010 	str.w	r8, [r4, #16]
  App_Config_Ptr->error = app_postprocess_init( App_Config_Ptr );
 800386a:	4620      	mov	r0, r4
  App_Config_Ptr->error = AI_OBJDETECT_POSTPROCESS_ERROR_NO;
 800386c:	6466      	str	r6, [r4, #68]	@ 0x44
  App_Config_Ptr->nn_output_type= QUANT_OUTPUT_TYPE;
 800386e:	e9c4 8a0e 	strd	r8, sl, [r4, #56]	@ 0x38
  App_Config_Ptr->PixelFormatConv=HW_PFC;
 8003872:	e9c4 8806 	strd	r8, r8, [r4, #24]
  __HAL_RCC_CRC_CLK_ENABLE();
 8003876:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800387a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800387e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8003882:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8003886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800388a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800388c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  App_Config_Ptr->lut=pixel_conv_lut;
 800388e:	4b3f      	ldr	r3, [pc, #252]	@ (800398c <main+0x2a0>)
  App_Config_Ptr->new_frame_ready=0;
 8003890:	7326      	strb	r6, [r4, #12]
  App_Config_Ptr->lut=pixel_conv_lut;
 8003892:	6363      	str	r3, [r4, #52]	@ 0x34
  App_Config_Ptr->nn_output_labels=classes_table;
 8003894:	4b3e      	ldr	r3, [pc, #248]	@ (8003990 <main+0x2a4>)
  App_Config_Ptr->lcd_sync=0;
 8003896:	6226      	str	r6, [r4, #32]
  App_Config_Ptr->nn_output_labels=classes_table;
 8003898:	6423      	str	r3, [r4, #64]	@ 0x40
  App_Config_Ptr->output.pOutBuff = out_postproc;
 800389a:	4b3e      	ldr	r3, [pc, #248]	@ (8003994 <main+0x2a8>)
 800389c:	6623      	str	r3, [r4, #96]	@ 0x60
  App_Config_Ptr->error = app_postprocess_init( App_Config_Ptr );
 800389e:	f7ff fe55 	bl	800354c <app_postprocess_init>
 80038a2:	4605      	mov	r5, r0
 80038a4:	6460      	str	r0, [r4, #68]	@ 0x44
  if (App_Config_Ptr->error != AI_OBJDETECT_POSTPROCESS_ERROR_NO)
 80038a6:	b100      	cbz	r0, 80038aa <main+0x1be>
    while(1);
 80038a8:	e7fe      	b.n	80038a8 <main+0x1bc>
  App_Config_Ptr->lcd_frame_read_buff=lcd_display_global_memory;
 80038aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003998 <main+0x2ac>)
  memset(App_Config_Ptr->camera_capture_buffer, 0x00, CAM_FRAME_BUFFER_SIZE);
 80038ac:	4601      	mov	r1, r0
  App_Config_Ptr->camera_capture_buffer = CapturedImage_Buffer;
 80038ae:	4b3b      	ldr	r3, [pc, #236]	@ (800399c <main+0x2b0>)
  App_Config_Ptr->lcd_frame_read_buff=lcd_display_global_memory;
 80038b0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  App_Config_Ptr->lcd_frame_write_buff=lcd_display_global_memory + SDRAM_BANK_SIZE;
 80038b4:	f502 0200 	add.w	r2, r2, #8388608	@ 0x800000
  memset(App_Config_Ptr->camera_capture_buffer, 0x00, CAM_FRAME_BUFFER_SIZE);
 80038b8:	4618      	mov	r0, r3
  App_Config_Ptr->camera_capture_buffer = CapturedImage_Buffer;
 80038ba:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  App_Config_Ptr->lcd_frame_write_buff=lcd_display_global_memory + SDRAM_BANK_SIZE;
 80038be:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
  App_Config_Ptr->nn_input_buffer = NN_InputImage_Buffer; 
 80038c2:	4a37      	ldr	r2, [pc, #220]	@ (80039a0 <main+0x2b4>)
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	67a2      	str	r2, [r4, #120]	@ 0x78
  App_Config_Ptr->nn_output_buffer[0]=NN_OutputData_Buffer;
 80038c8:	4a36      	ldr	r2, [pc, #216]	@ (80039a4 <main+0x2b8>)
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	66e2      	str	r2, [r4, #108]	@ 0x6c
  App_Config_Ptr->camera_capture_buffer_no_borders = App_Config_Ptr->camera_capture_buffer+((CAM_RES_WIDTH - CAM_RES_HEIGHT)/2)*CAM_RES_WIDTH*RGB_565_BPP;
 80038ce:	f503 42c8 	add.w	r2, r3, #25600	@ 0x6400
 80038d2:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  App_Config_Ptr->rescaled_image_buffer = RescaledImage_Buffer;
 80038d6:	4a34      	ldr	r2, [pc, #208]	@ (80039a8 <main+0x2bc>)
 80038d8:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  App_Config_Ptr->activation_buffer = NN_Activation_Buffer;
 80038dc:	4a33      	ldr	r2, [pc, #204]	@ (80039ac <main+0x2c0>)
 80038de:	67e2      	str	r2, [r4, #124]	@ 0x7c
  memset(App_Config_Ptr->camera_capture_buffer, 0x00, CAM_FRAME_BUFFER_SIZE);
 80038e0:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 80038e4:	f015 ff57 	bl	8019796 <memset>
  Utility_DCache_Coherency_Maintenance((void *)(App_Config_Ptr->camera_capture_buffer), CAM_FRAME_BUFFER_SIZE, CLEAN);
 80038e8:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 80038ec:	463a      	mov	r2, r7
 80038ee:	f7ff feb5 	bl	800365c <Utility_DCache_Coherency_Maintenance>
  BSP_LED_Init(LED_GREEN);
 80038f2:	4628      	mov	r0, r5
 80038f4:	f003 f9ae 	bl	8006c54 <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 80038f8:	4640      	mov	r0, r8
 80038fa:	f003 f9ab 	bl	8006c54 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80038fe:	4638      	mov	r0, r7
 8003900:	f003 f9a8 	bl	8006c54 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003904:	4650      	mov	r0, sl
 8003906:	f003 f9a5 	bl	8006c54 <BSP_LED_Init>
  Display_Init(App_Config_Ptr);
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff fa36 	bl	8002d7c <Display_Init>
  Camera_Init(App_Config_Ptr); 
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff f949 	bl	8002ba8 <Camera_Init>
  Network_Init(&App_Config);
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff fe00 	bl	800351c <Network_Init>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800391c:	4924      	ldr	r1, [pc, #144]	@ (80039b0 <main+0x2c4>)
 800391e:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8003922:	4628      	mov	r0, r5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8003924:	f881 9002 	strb.w	r9, [r1, #2]
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8003928:	800b      	strh	r3, [r1, #0]
  if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 800392a:	f004 ff45 	bl	80087b8 <BSP_QSPI_Init>
 800392e:	b100      	cbz	r0, 8003932 <main+0x246>
    while(1);
 8003930:	e7fe      	b.n	8003930 <main+0x244>
    if(BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8003932:	f005 f925 	bl	8008b80 <BSP_QSPI_EnableMemoryMappedMode>
 8003936:	b100      	cbz	r0, 800393a <main+0x24e>
      while(1);
 8003938:	e7fe      	b.n	8003938 <main+0x24c>
  Display_WelcomeScreen(&App_Config);
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff fa68 	bl	8002e10 <Display_WelcomeScreen>
    Camera_GetNextReadyFrame(&App_Config);
 8003940:	4620      	mov	r0, r4
 8003942:	f7ff f927 	bl	8002b94 <Camera_GetNextReadyFrame>
    Display_CameraPreview(&App_Config);
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff fb02 	bl	8002f50 <Display_CameraPreview>
    Network_Preprocess(&App_Config);
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff fccb 	bl	80032e8 <Network_Preprocess>
    Camera_StartNewFrameAcquisition(&App_Config);
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff f922 	bl	8002b9c <Camera_StartNewFrameAcquisition>
    Network_Inference(&App_Config);
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff fd59 	bl	8003410 <Network_Inference>
    Network_Postprocess(&App_Config);  
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fd66 	bl	8003430 <Network_Postprocess>
    Display_NetworkOutput(&App_Config);
 8003964:	4620      	mov	r0, r4
 8003966:	f7ff fb41 	bl	8002fec <Display_NetworkOutput>
  while(1)
 800396a:	e7e9      	b.n	8003940 <main+0x254>
    Error_Handler();
 800396c:	f7ff feac 	bl	80036c8 <Error_Handler>
 8003970:	03010018 	.word	0x03010018
 8003974:	01010000 	.word	0x01010000
 8003978:	e000ed00 	.word	0xe000ed00
 800397c:	58000400 	.word	0x58000400
 8003980:	58024800 	.word	0x58024800
 8003984:	58024400 	.word	0x58024400
 8003988:	d0a214b8 	.word	0xd0a214b8
 800398c:	24014b70 	.word	0x24014b70
 8003990:	240138d4 	.word	0x240138d4
 8003994:	d0a0ac40 	.word	0xd0a0ac40
 8003998:	d0000000 	.word	0xd0000000
 800399c:	d09e5440 	.word	0xd09e5440
 80039a0:	24013c20 	.word	0x24013c20
 80039a4:	24013c00 	.word	0x24013c00
 80039a8:	24015c20 	.word	0x24015c20
 80039ac:	240138c8 	.word	0x240138c8
 80039b0:	24014b6c 	.word	0x24014b6c

080039b4 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80039bc:	e7fe      	b.n	80039bc <HardFault_Handler>
 80039be:	bf00      	nop

080039c0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <MemManage_Handler>
 80039c2:	bf00      	nop

080039c4 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <BusFault_Handler>
 80039c6:	bf00      	nop

080039c8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80039c8:	e7fe      	b.n	80039c8 <UsageFault_Handler>
 80039ca:	bf00      	nop

080039cc <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop

080039d4 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop

080039d8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80039d8:	f005 b944 	b.w	8008c64 <HAL_IncTick>

080039dc <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 80039dc:	2000      	movs	r0, #0
 80039de:	f004 b8f1 	b.w	8007bc4 <BSP_CAMERA_DMA_IRQHandler>
 80039e2:	bf00      	nop

080039e4 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f004 b8e7 	b.w	8007bb8 <BSP_CAMERA_IRQHandler>
 80039ea:	bf00      	nop

080039ec <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 80039ec:	4801      	ldr	r0, [pc, #4]	@ (80039f4 <MDMA_IRQHandler+0x8>)
 80039ee:	f008 becf 	b.w	800c790 <HAL_MDMA_IRQHandler>
 80039f2:	bf00      	nop
 80039f4:	24014b00 	.word	0x24014b00

080039f8 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80039f8:	4801      	ldr	r0, [pc, #4]	@ (8003a00 <DSI_IRQHandler+0x8>)
 80039fa:	f007 ba63 	b.w	800aec4 <HAL_DSI_IRQHandler>
 80039fe:	bf00      	nop
 8003a00:	240159dc 	.word	0x240159dc

08003a04 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 8003a04:	4801      	ldr	r0, [pc, #4]	@ (8003a0c <DMA2D_IRQHandler+0x8>)
 8003a06:	f007 b89b 	b.w	800ab40 <HAL_DMA2D_IRQHandler>
 8003a0a:	bf00      	nop
 8003a0c:	24015974 	.word	0x24015974

08003a10 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8003a10:	4801      	ldr	r0, [pc, #4]	@ (8003a18 <LTDC_IRQHandler+0x8>)
 8003a12:	f008 bc7f 	b.w	800c314 <HAL_LTDC_IRQHandler>
 8003a16:	bf00      	nop
 8003a18:	240158cc 	.word	0x240158cc

08003a1c <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003a1c:	4993      	ldr	r1, [pc, #588]	@ (8003c6c <SystemInit+0x250>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a1e:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8003a20:	4b93      	ldr	r3, [pc, #588]	@ (8003c70 <SystemInit+0x254>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003a22:	4894      	ldr	r0, [pc, #592]	@ (8003c74 <SystemInit+0x258>)
{
 8003a24:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003a26:	f8d1 4088 	ldr.w	r4, [r1, #136]	@ 0x88
{
 8003a2a:	b082      	sub	sp, #8

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a2c:	4d92      	ldr	r5, [pc, #584]	@ (8003c78 <SystemInit+0x25c>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003a2e:	f444 0470 	orr.w	r4, r4, #15728640	@ 0xf00000
 8003a32:	f8c1 4088 	str.w	r4, [r1, #136]	@ 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8003a36:	690c      	ldr	r4, [r1, #16]
 8003a38:	f044 0404 	orr.w	r4, r4, #4
 8003a3c:	610c      	str	r4, [r1, #16]
  EXTI_D2->EMR3 |= 0x4000UL;
 8003a3e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  RCC->CR |= RCC_CR_HSION;
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	f041 0101 	orr.w	r1, r1, #1
 8003a48:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003a4a:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	4008      	ands	r0, r1
 8003a50:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8003a52:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003a54:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003a56:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8003a58:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x00000000;
 8003a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8003a5e:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x00000000;
 8003a60:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8003a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8003a64:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003a6e:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8003a70:	661a      	str	r2, [r3, #96]	@ 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8003a72:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a76:	4b81      	ldr	r3, [pc, #516]	@ (8003c7c <SystemInit+0x260>)
  EXTI_D2->EMR3 |= 0x4000UL;
 8003a78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a7c:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a80:	682a      	ldr	r2, [r5, #0]
 8003a82:	4013      	ands	r3, r2
 8003a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a88:	d203      	bcs.n	8003a92 <SystemInit+0x76>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8003a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c80 <SystemInit+0x264>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 8003a92:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 8003a94:	4d76      	ldr	r5, [pc, #472]	@ (8003c70 <SystemInit+0x254>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 8003a96:	497b      	ldr	r1, [pc, #492]	@ (8003c84 <SystemInit+0x268>)
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8003a98:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
  __IO uint32_t tmp = 0;
 8003a9c:	9300      	str	r3, [sp, #0]
  RCC->AHB4ENR |= 0x000001F8;
 8003a9e:	f8d5 00e0 	ldr.w	r0, [r5, #224]	@ 0xe0
  GPIOE->AFR[0] = 0xC00000CC;
 8003aa2:	4a79      	ldr	r2, [pc, #484]	@ (8003c88 <SystemInit+0x26c>)
  RCC->AHB4ENR |= 0x000001F8;
 8003aa4:	f440 70fc 	orr.w	r0, r0, #504	@ 0x1f8
  GPIOE->OTYPER = 0x00000000;
  /* Configure PEx pins in Pull-up */
  GPIOE->PUPDR = 0x55554005;

  /* Connect PFx pins to FMC Alternate function */
  GPIOF->AFR[0] = 0x00CCCCCC;
 8003aa8:	4c78      	ldr	r4, [pc, #480]	@ (8003c8c <SystemInit+0x270>)
 8003aaa:	4f79      	ldr	r7, [pc, #484]	@ (8003c90 <SystemInit+0x274>)
  RCC->AHB4ENR |= 0x000001F8;
 8003aac:	f8c5 00e0 	str.w	r0, [r5, #224]	@ 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8003ab0:	f8d5 00e0 	ldr.w	r0, [r5, #224]	@ 0xe0
  GPIOF->AFR[1] = 0xCCCCC000;
 8003ab4:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 8003cf4 <SystemInit+0x2d8>
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8003ab8:	f000 0010 	and.w	r0, r0, #16
 8003abc:	9000      	str	r0, [sp, #0]
  GPIOD->AFR[0] = 0x000000CC;
 8003abe:	20cc      	movs	r0, #204	@ 0xcc
 8003ac0:	6208      	str	r0, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 8003ac2:	4874      	ldr	r0, [pc, #464]	@ (8003c94 <SystemInit+0x278>)
 8003ac4:	6248      	str	r0, [r1, #36]	@ 0x24
  GPIOD->MODER = 0xAFEAFFFA;
 8003ac6:	4874      	ldr	r0, [pc, #464]	@ (8003c98 <SystemInit+0x27c>)
 8003ac8:	6008      	str	r0, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 8003aca:	4874      	ldr	r0, [pc, #464]	@ (8003c9c <SystemInit+0x280>)
 8003acc:	6088      	str	r0, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 8003ace:	4874      	ldr	r0, [pc, #464]	@ (8003ca0 <SystemInit+0x284>)
  GPIOD->OTYPER = 0x00000000;
 8003ad0:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 8003ad2:	60c8      	str	r0, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 8003ad4:	4973      	ldr	r1, [pc, #460]	@ (8003ca4 <SystemInit+0x288>)
  GPIOF->OTYPER = 0x00000000;
  /* Configure PFx pins in Pull-up */
  GPIOF->PUPDR = 0x55400555;

  /* Connect PGx pins to FMC Alternate function */
  GPIOG->AFR[0] = 0x00CCCCCC;
 8003ad6:	4874      	ldr	r0, [pc, #464]	@ (8003ca8 <SystemInit+0x28c>)
  GPIOE->AFR[0] = 0xC00000CC;
 8003ad8:	6211      	str	r1, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 8003ada:	4974      	ldr	r1, [pc, #464]	@ (8003cac <SystemInit+0x290>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8003adc:	6256      	str	r6, [r2, #36]	@ 0x24
  GPIOE->MODER = 0xAAAABFFA;
 8003ade:	6011      	str	r1, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 8003ae0:	4973      	ldr	r1, [pc, #460]	@ (8003cb0 <SystemInit+0x294>)
 8003ae2:	6091      	str	r1, [r2, #8]
  GPIOE->PUPDR = 0x55554005;
 8003ae4:	4973      	ldr	r1, [pc, #460]	@ (8003cb4 <SystemInit+0x298>)
  GPIOE->OTYPER = 0x00000000;
 8003ae6:	6053      	str	r3, [r2, #4]
  GPIOE->PUPDR = 0x55554005;
 8003ae8:	60d1      	str	r1, [r2, #12]
  GPIOH->OTYPER = 0x00000000;
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8003aea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
  GPIOF->AFR[0] = 0x00CCCCCC;
 8003aee:	6227      	str	r7, [r4, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 8003af0:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
  GPIOF->MODER = 0xAABFFAAA;
 8003af4:	f8df c200 	ldr.w	ip, [pc, #512]	@ 8003cf8 <SystemInit+0x2dc>
  GPIOH->AFR[0] = 0xCCC00000;
 8003af8:	496f      	ldr	r1, [pc, #444]	@ (8003cb8 <SystemInit+0x29c>)
  GPIOF->MODER = 0xAABFFAAA;
 8003afa:	f8c4 c000 	str.w	ip, [r4]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8003afe:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 8003cfc <SystemInit+0x2e0>
 8003b02:	f8c4 c008 	str.w	ip, [r4, #8]
  GPIOF->PUPDR = 0x55400555;
 8003b06:	f8df c1f8 	ldr.w	ip, [pc, #504]	@ 8003d00 <SystemInit+0x2e4>
  GPIOF->OTYPER = 0x00000000;
 8003b0a:	6063      	str	r3, [r4, #4]
  GPIOF->PUPDR = 0x55400555;
 8003b0c:	f8c4 c00c 	str.w	ip, [r4, #12]
  GPIOG->AFR[1] = 0xC000000C;
 8003b10:	4c6a      	ldr	r4, [pc, #424]	@ (8003cbc <SystemInit+0x2a0>)
  GPIOG->AFR[0] = 0x00CCCCCC;
 8003b12:	6207      	str	r7, [r0, #32]
  GPIOG->AFR[1] = 0xC000000C;
 8003b14:	6244      	str	r4, [r0, #36]	@ 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 8003b16:	f5a4 3482 	sub.w	r4, r4, #66560	@ 0x10400
 8003b1a:	f5a4 74b1 	sub.w	r4, r4, #354	@ 0x162
 8003b1e:	6004      	str	r4, [r0, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 8003b20:	f504 2482 	add.w	r4, r4, #266240	@ 0x41000
 8003b24:	f204 5455 	addw	r4, r4, #1365	@ 0x555
 8003b28:	6084      	str	r4, [r0, #8]
  GPIOG->PUPDR = 0x40010555;
 8003b2a:	4c65      	ldr	r4, [pc, #404]	@ (8003cc0 <SystemInit+0x2a4>)
  GPIOG->OTYPER = 0x00000000;
 8003b2c:	6043      	str	r3, [r0, #4]
  GPIOG->PUPDR = 0x40010555;
 8003b2e:	60c4      	str	r4, [r0, #12]
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8003b30:	f240 1465 	movw	r4, #357	@ 0x165
  GPIOH->AFR[0] = 0xCCC00000;
 8003b34:	4863      	ldr	r0, [pc, #396]	@ (8003cc4 <SystemInit+0x2a8>)
 8003b36:	6208      	str	r0, [r1, #32]
  GPIOH->MODER = 0xAAAAABFF;
 8003b38:	4863      	ldr	r0, [pc, #396]	@ (8003cc8 <SystemInit+0x2ac>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 8003b3a:	624e      	str	r6, [r1, #36]	@ 0x24
  GPIOH->MODER = 0xAAAAABFF;
 8003b3c:	6008      	str	r0, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8003b3e:	4863      	ldr	r0, [pc, #396]	@ (8003ccc <SystemInit+0x2b0>)
 8003b40:	6088      	str	r0, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 8003b42:	4863      	ldr	r0, [pc, #396]	@ (8003cd0 <SystemInit+0x2b4>)
  GPIOH->OTYPER = 0x00000000;
 8003b44:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 8003b46:	60c8      	str	r0, [r1, #12]
  GPIOI->AFR[1] = 0x00000CC0;
 8003b48:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
  GPIOI->MODER = 0xFFEBAAAA;
 8003b4c:	4861      	ldr	r0, [pc, #388]	@ (8003cd4 <SystemInit+0x2b8>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8003b4e:	6216      	str	r6, [r2, #32]
  GPIOI->AFR[1] = 0x00000CC0;
 8003b50:	6251      	str	r1, [r2, #36]	@ 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 8003b52:	6010      	str	r0, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8003b54:	4960      	ldr	r1, [pc, #384]	@ (8003cd8 <SystemInit+0x2bc>)
  GPIOI->PUPDR = 0x00145555;
 8003b56:	4861      	ldr	r0, [pc, #388]	@ (8003cdc <SystemInit+0x2c0>)
  GPIOI->OSPEEDR = 0x003CFFFF;
 8003b58:	6091      	str	r1, [r2, #8]
  GPIOI->OTYPER = 0x00000000;
 8003b5a:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 8003b5c:	60d0      	str	r0, [r2, #12]
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8003b5e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8003b62:	f8d5 30d4 	ldr.w	r3, [r5, #212]	@ 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8003b66:	495e      	ldr	r1, [pc, #376]	@ (8003ce0 <SystemInit+0x2c4>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8003b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8003b6c:	485d      	ldr	r0, [pc, #372]	@ (8003ce4 <SystemInit+0x2c8>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8003b6e:	f8c5 30d4 	str.w	r3, [r5, #212]	@ 0xd4
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8003b72:	2309      	movs	r3, #9
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8003b74:	640a      	str	r2, [r1, #64]	@ 0x40
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8003b76:	4a5c      	ldr	r2, [pc, #368]	@ (8003ce8 <SystemInit+0x2cc>)
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8003b78:	644c      	str	r4, [r1, #68]	@ 0x44
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8003b7a:	6488      	str	r0, [r1, #72]	@ 0x48
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8003b7c:	64ca      	str	r2, [r1, #76]	@ 0x4c
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8003b7e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8003b80:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8003b82:	f013 0320 	ands.w	r3, r3, #32
 8003b86:	d061      	beq.n	8003c4c <SystemInit+0x230>
 8003b88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b8c:	e001      	b.n	8003b92 <SystemInit+0x176>
 8003b8e:	3a01      	subs	r2, #1
 8003b90:	d054      	beq.n	8003c3c <SystemInit+0x220>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8003b92:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8003b94:	f013 0320 	ands.w	r3, r3, #32
 8003b98:	d1f9      	bne.n	8003b8e <SystemInit+0x172>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	9b01      	ldr	r3, [sp, #4]
 8003b9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ba2:	d25d      	bcs.n	8003c60 <SystemInit+0x244>
  while ((tmpreg != 0) && (timeout-- > 0))
 8003ba4:	2300      	movs	r3, #0
  for (index = 0; index < 1000; index++)
 8003ba6:	9a01      	ldr	r2, [sp, #4]
 8003ba8:	3201      	adds	r2, #1
 8003baa:	9201      	str	r2, [sp, #4]
 8003bac:	9a01      	ldr	r2, [sp, #4]
 8003bae:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8003bb2:	d3f8      	bcc.n	8003ba6 <SystemInit+0x18a>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8003bb4:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce0 <SystemInit+0x2c4>)
 8003bb6:	210a      	movs	r1, #10
 8003bb8:	6511      	str	r1, [r2, #80]	@ 0x50
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d052      	beq.n	8003c64 <SystemInit+0x248>
  while ((tmpreg != 0) && (timeout-- > 0))
 8003bbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8003bc2:	4947      	ldr	r1, [pc, #284]	@ (8003ce0 <SystemInit+0x2c4>)
 8003bc4:	e001      	b.n	8003bca <SystemInit+0x1ae>
  while ((tmpreg != 0) && (timeout-- > 0))
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	d01e      	beq.n	8003c08 <SystemInit+0x1ec>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8003bca:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8003bcc:	0690      	lsls	r0, r2, #26
 8003bce:	d4fa      	bmi.n	8003bc6 <SystemInit+0x1aa>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8003bd0:	23eb      	movs	r3, #235	@ 0xeb
 8003bd2:	650b      	str	r3, [r1, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8003bd4:	4b42      	ldr	r3, [pc, #264]	@ (8003ce0 <SystemInit+0x2c4>)
 8003bd6:	4a45      	ldr	r2, [pc, #276]	@ (8003cec <SystemInit+0x2d0>)
 8003bd8:	651a      	str	r2, [r3, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8003bda:	4b41      	ldr	r3, [pc, #260]	@ (8003ce0 <SystemInit+0x2c4>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8003bdc:	f640 4206 	movw	r2, #3078	@ 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8003be0:	4943      	ldr	r1, [pc, #268]	@ (8003cf0 <SystemInit+0x2d4>)
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8003be2:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003be4:	4821      	ldr	r0, [pc, #132]	@ (8003c6c <SystemInit+0x250>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8003be6:	4322      	orrs	r2, r4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003be8:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8003bec:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 8003bee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 8003bf0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8003bf6:	680b      	ldr	r3, [r1, #0]
 8003bf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bfc:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 8003bfe:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c00:	6084      	str	r4, [r0, #8]
}
 8003c02:	b002      	add	sp, #8
 8003c04:	bcf0      	pop	{r4, r5, r6, r7}
 8003c06:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8003c08:	22eb      	movs	r2, #235	@ 0xeb
 8003c0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8003c0e:	4834      	ldr	r0, [pc, #208]	@ (8003ce0 <SystemInit+0x2c4>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8003c10:	650a      	str	r2, [r1, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8003c12:	e001      	b.n	8003c18 <SystemInit+0x1fc>
 8003c14:	3b01      	subs	r3, #1
 8003c16:	d005      	beq.n	8003c24 <SystemInit+0x208>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8003c18:	6d82      	ldr	r2, [r0, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8003c1a:	0691      	lsls	r1, r2, #26
 8003c1c:	d4fa      	bmi.n	8003c14 <SystemInit+0x1f8>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8003c1e:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <SystemInit+0x2d0>)
 8003c20:	6503      	str	r3, [r0, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8003c22:	e7da      	b.n	8003bda <SystemInit+0x1be>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8003c24:	4a31      	ldr	r2, [pc, #196]	@ (8003cec <SystemInit+0x2d0>)
 8003c26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8003c2a:	492d      	ldr	r1, [pc, #180]	@ (8003ce0 <SystemInit+0x2c4>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8003c2c:	6502      	str	r2, [r0, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8003c2e:	e001      	b.n	8003c34 <SystemInit+0x218>
 8003c30:	3b01      	subs	r3, #1
 8003c32:	d0d2      	beq.n	8003bda <SystemInit+0x1be>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8003c34:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8003c36:	0692      	lsls	r2, r2, #26
 8003c38:	d5cf      	bpl.n	8003bda <SystemInit+0x1be>
 8003c3a:	e7f9      	b.n	8003c30 <SystemInit+0x214>
  for (index = 0; index < 1000; index++)
 8003c3c:	9201      	str	r2, [sp, #4]
 8003c3e:	9a01      	ldr	r2, [sp, #4]
 8003c40:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8003c44:	d3af      	bcc.n	8003ba6 <SystemInit+0x18a>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8003c46:	230a      	movs	r3, #10
 8003c48:	650b      	str	r3, [r1, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8003c4a:	e7b8      	b.n	8003bbe <SystemInit+0x1a2>
  for (index = 0; index < 1000; index++)
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c54:	d3a6      	bcc.n	8003ba4 <SystemInit+0x188>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8003c56:	220a      	movs	r2, #10
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8003c58:	23eb      	movs	r3, #235	@ 0xeb
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8003c5a:	650a      	str	r2, [r1, #80]	@ 0x50
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8003c5c:	650b      	str	r3, [r1, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8003c5e:	e7b9      	b.n	8003bd4 <SystemInit+0x1b8>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8003c60:	230a      	movs	r3, #10
 8003c62:	650b      	str	r3, [r1, #80]	@ 0x50
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8003c64:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce0 <SystemInit+0x2c4>)
 8003c66:	22eb      	movs	r2, #235	@ 0xeb
 8003c68:	651a      	str	r2, [r3, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8003c6a:	e7b3      	b.n	8003bd4 <SystemInit+0x1b8>
 8003c6c:	e000ed00 	.word	0xe000ed00
 8003c70:	58024400 	.word	0x58024400
 8003c74:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c78:	5c001000 	.word	0x5c001000
 8003c7c:	ffff0000 	.word	0xffff0000
 8003c80:	51008000 	.word	0x51008000
 8003c84:	58020c00 	.word	0x58020c00
 8003c88:	58021000 	.word	0x58021000
 8003c8c:	58021400 	.word	0x58021400
 8003c90:	00cccccc 	.word	0x00cccccc
 8003c94:	cc000ccc 	.word	0xcc000ccc
 8003c98:	afeafffa 	.word	0xafeafffa
 8003c9c:	f03f000f 	.word	0xf03f000f
 8003ca0:	50150005 	.word	0x50150005
 8003ca4:	c00000cc 	.word	0xc00000cc
 8003ca8:	58021800 	.word	0x58021800
 8003cac:	aaaabffa 	.word	0xaaaabffa
 8003cb0:	ffffc00f 	.word	0xffffc00f
 8003cb4:	55554005 	.word	0x55554005
 8003cb8:	58021c00 	.word	0x58021c00
 8003cbc:	c000000c 	.word	0xc000000c
 8003cc0:	40010555 	.word	0x40010555
 8003cc4:	ccc00000 	.word	0xccc00000
 8003cc8:	aaaaabff 	.word	0xaaaaabff
 8003ccc:	fffffc00 	.word	0xfffffc00
 8003cd0:	55555400 	.word	0x55555400
 8003cd4:	ffebaaaa 	.word	0xffebaaaa
 8003cd8:	003cffff 	.word	0x003cffff
 8003cdc:	00145555 	.word	0x00145555
 8003ce0:	52004100 	.word	0x52004100
 8003ce4:	00105000 	.word	0x00105000
 8003ce8:	01010351 	.word	0x01010351
 8003cec:	0004400c 	.word	0x0004400c
 8003cf0:	52004000 	.word	0x52004000
 8003cf4:	ccccc000 	.word	0xccccc000
 8003cf8:	aabffaaa 	.word	0xaabffaaa
 8003cfc:	ffc00fff 	.word	0xffc00fff
 8003d00:	55400555 	.word	0x55400555

08003d04 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8003d04:	b430      	push	{r4, r5}
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8003d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d0a:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 8003d0e:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
{
 8003d12:	4603      	mov	r3, r0
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8003d14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d18:	e9c0 5200 	strd	r5, r2, [r0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8003d1c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8003d20:	e9c0 4102 	strd	r4, r1, [r0, #8]
  return MT25TL01G_OK;
}
 8003d24:	2000      	movs	r0, #0
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8003d26:	611a      	str	r2, [r3, #16]
}
 8003d28:	bc30      	pop	{r4, r5}
 8003d2a:	4770      	bx	lr
 8003d2c:	0000      	movs	r0, r0
	...

08003d30 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003d30:	b510      	push	{r4, lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003d32:	f44f 7440 	mov.w	r4, #768	@ 0x300
{
 8003d36:	b094      	sub	sp, #80	@ 0x50
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8003d38:	2105      	movs	r1, #5
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d3a:	2200      	movs	r2, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003d3c:	940c      	str	r4, [sp, #48]	@ 0x30
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003d3e:	f04f 7440 	mov.w	r4, #50331648	@ 0x3000000
  s_command.DummyCycles       = 2;
 8003d42:	2302      	movs	r3, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8003d44:	9106      	str	r1, [sp, #24]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.Interval        = 0x10;
 8003d46:	2110      	movs	r1, #16
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003d48:	940f      	str	r4, [sp, #60]	@ 0x3c
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8003d4a:	f240 1401 	movw	r4, #257	@ 0x101
  s_command.DummyCycles       = 2;
 8003d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_config.StatusBytesSize = 2;
 8003d50:	9303      	str	r3, [sp, #12]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d52:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d56:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8003d58:	9200      	str	r2, [sp, #0]
  s_config.Interval        = 0x10;
 8003d5a:	9102      	str	r1, [sp, #8]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d5c:	a906      	add	r1, sp, #24
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8003d5e:	9401      	str	r4, [sp, #4]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003d60:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8003d88 <MT25TL01G_AutoPollingMemReady+0x58>
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d64:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d68:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d6c:	466a      	mov	r2, sp
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003d6e:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d72:	f009 f8a1 	bl	800ceb8 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8003d76:	2800      	cmp	r0, #0

}
 8003d78:	bf14      	ite	ne
 8003d7a:	f06f 0004 	mvnne.w	r0, #4
 8003d7e:	2000      	moveq	r0, #0
 8003d80:	b014      	add	sp, #80	@ 0x50
 8003d82:	bd10      	pop	{r4, pc}
 8003d84:	f3af 8000 	nop.w
 8003d88:	00000000 	.word	0x00000000
 8003d8c:	00400000 	.word	0x00400000

08003d90 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003d90:	b530      	push	{r4, r5, lr}

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d92:	2300      	movs	r3, #0
{
 8003d94:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003d96:	2903      	cmp	r1, #3
{
 8003d98:	460c      	mov	r4, r1
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d9a:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.DummyCycles       = 0;
 8003da0:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003da2:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003da4:	9313      	str	r3, [sp, #76]	@ 0x4c
{
 8003da6:	4605      	mov	r5, r0
  s_command.DataMode          = QSPI_DATA_NONE;
 8003da8:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003dac:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003db0:	bf0c      	ite	eq
 8003db2:	f44f 7340 	moveq.w	r3, #768	@ 0x300
 8003db6:	f44f 7380 	movne.w	r3, #256	@ 0x100
 8003dba:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8003dbc:	2306      	movs	r3, #6
 8003dbe:	9306      	str	r3, [sp, #24]
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dc0:	f008 fefe 	bl	800cbc0 <HAL_QSPI_Command>
 8003dc4:	bb20      	cbnz	r0, 8003e10 <MT25TL01G_WriteEnable+0x80>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8003dc6:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
 8003dca:	2202      	movs	r2, #2
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8003dcc:	2c03      	cmp	r4, #3


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dce:	4628      	mov	r0, r5
  s_config.StatusBytesSize = 2;
 8003dd0:	9203      	str	r2, [sp, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003dd2:	f04f 0200 	mov.w	r2, #0
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8003dd6:	bf14      	ite	ne
 8003dd8:	f04f 7580 	movne.w	r5, #16777216	@ 0x1000000
 8003ddc:	f04f 7540 	moveq.w	r5, #50331648	@ 0x3000000
  s_config.Interval        = 0x10;
 8003de0:	2410      	movs	r4, #16
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003de2:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8003de4:	950f      	str	r5, [sp, #60]	@ 0x3c
  s_config.Interval        = 0x10;
 8003de6:	9402      	str	r4, [sp, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8003de8:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003dec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003df0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8003df4:	2205      	movs	r2, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003df6:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8003dfa:	9206      	str	r2, [sp, #24]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dfc:	466a      	mov	r2, sp
 8003dfe:	f009 f85b 	bl	800ceb8 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8003e02:	2800      	cmp	r0, #0
 8003e04:	bf14      	ite	ne
 8003e06:	f06f 0004 	mvnne.w	r0, #4
 8003e0a:	2000      	moveq	r0, #0
}
 8003e0c:	b015      	add	sp, #84	@ 0x54
 8003e0e:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8003e10:	f06f 0001 	mvn.w	r0, #1
 8003e14:	e7fa      	b.n	8003e0c <MT25TL01G_WriteEnable+0x7c>
 8003e16:	bf00      	nop

08003e18 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003e18:	2903      	cmp	r1, #3
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003e1a:	f04f 0300 	mov.w	r3, #0
{
 8003e1e:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003e20:	bf08      	it	eq
 8003e22:	f44f 7240 	moveq.w	r2, #768	@ 0x300
{
 8003e26:	b0a3      	sub	sp, #140	@ 0x8c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003e28:	bf18      	it	ne
 8003e2a:	f44f 7280 	movne.w	r2, #256	@ 0x100
{
 8003e2e:	4605      	mov	r5, r0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003e30:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003e32:	920c      	str	r2, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8003e34:	22b7      	movs	r2, #183	@ 0xb7
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e36:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataMode          = QSPI_DATA_NONE;
 8003e38:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8003e3a:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003e3c:	9311      	str	r3, [sp, #68]	@ 0x44
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8003e3e:	9206      	str	r2, [sp, #24]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e40:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8003e44:	f7ff ffa4 	bl	8003d90 <MT25TL01G_WriteEnable>
 8003e48:	bb60      	cbnz	r0, 8003ea4 <MT25TL01G_Enter4BytesAddressMode+0x8c>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	a906      	add	r1, sp, #24
 8003e52:	4628      	mov	r0, r5
 8003e54:	f008 feb4 	bl	800cbc0 <HAL_QSPI_Command>
 8003e58:	bb20      	cbnz	r0, 8003ea4 <MT25TL01G_Enter4BytesAddressMode+0x8c>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003e5a:	f44f 7140 	mov.w	r1, #768	@ 0x300
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8003e5e:	2205      	movs	r2, #5
  s_command.DummyCycles       = 2;
 8003e60:	2302      	movs	r3, #2
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e62:	4628      	mov	r0, r5
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8003e64:	9214      	str	r2, [sp, #80]	@ 0x50
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003e66:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.DummyCycles       = 2;
 8003e6a:	9319      	str	r3, [sp, #100]	@ 0x64
  s_config.StatusBytesSize = 2;
 8003e6c:	9303      	str	r3, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e6e:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e72:	9421      	str	r4, [sp, #132]	@ 0x84
  s_config.Match           = 0;
 8003e74:	9400      	str	r4, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003e76:	e9cd 141a 	strd	r1, r4, [sp, #104]	@ 0x68
  s_config.Interval        = 0x10;
 8003e7a:	2110      	movs	r1, #16
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003e7c:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8003eb0 <MT25TL01G_Enter4BytesAddressMode+0x98>
  s_config.Interval        = 0x10;
 8003e80:	9102      	str	r1, [sp, #8]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8003e82:	f240 1101 	movw	r1, #257	@ 0x101
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003e86:	e9cd 421c 	strd	r4, r2, [sp, #112]	@ 0x70
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8003e8a:	9101      	str	r1, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e8c:	466a      	mov	r2, sp
 8003e8e:	a914      	add	r1, sp, #80	@ 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003e90:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003e94:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e98:	f009 f80e 	bl	800ceb8 <HAL_QSPI_AutoPolling>
 8003e9c:	b910      	cbnz	r0, 8003ea4 <MT25TL01G_Enter4BytesAddressMode+0x8c>
}
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	b023      	add	sp, #140	@ 0x8c
 8003ea2:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8003ea4:	f06f 0401 	mvn.w	r4, #1
 8003ea8:	e7f9      	b.n	8003e9e <MT25TL01G_Enter4BytesAddressMode+0x86>
 8003eaa:	bf00      	nop
 8003eac:	f3af 8000 	nop.w
 8003eb0:	00000000 	.word	0x00000000
 8003eb4:	00400000 	.word	0x00400000

08003eb8 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8003eb8:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8003eba:	2135      	movs	r1, #53	@ 0x35
{
 8003ebc:	b08e      	sub	sp, #56	@ 0x38
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003ebe:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ec0:	f44f 7480 	mov.w	r4, #256	@ 0x100
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8003ec4:	9100      	str	r1, [sp, #0]
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eca:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 8003ecc:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003ece:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003ed0:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 8003ed4:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ed8:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003edc:	f008 fe70 	bl	800cbc0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8003ee0:	2800      	cmp	r0, #0
}
 8003ee2:	bf14      	ite	ne
 8003ee4:	f06f 0001 	mvnne.w	r0, #1
 8003ee8:	2000      	moveq	r0, #0
 8003eea:	b00e      	add	sp, #56	@ 0x38
 8003eec:	bd10      	pop	{r4, pc}
 8003eee:	bf00      	nop

08003ef0 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8003ef0:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8003ef2:	21f5      	movs	r1, #245	@ 0xf5
{
 8003ef4:	b08e      	sub	sp, #56	@ 0x38
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003ef6:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ef8:	f44f 7480 	mov.w	r4, #256	@ 0x100
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8003efc:	9100      	str	r1, [sp, #0]
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f02:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 8003f04:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003f06:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003f08:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 8003f0c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003f10:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f14:	f008 fe54 	bl	800cbc0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8003f18:	2800      	cmp	r0, #0
}
 8003f1a:	bf14      	ite	ne
 8003f1c:	f06f 0001 	mvnne.w	r0, #1
 8003f20:	2000      	moveq	r0, #0
 8003f22:	b00e      	add	sp, #56	@ 0x38
 8003f24:	bd10      	pop	{r4, pc}
 8003f26:	bf00      	nop

08003f28 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	b090      	sub	sp, #64	@ 0x40
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8003f2c:	2903      	cmp	r1, #3
 8003f2e:	d80c      	bhi.n	8003f4a <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
 8003f30:	e8df f001 	tbb	[pc, r1]
 8003f34:	2802323c 	.word	0x2802323c
    s_command.DataMode          = QSPI_DATA_2_LINES;

    break;
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f38:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8003fc0 <MT25TL01G_EnableMemoryMappedModeDTR+0x98>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8003f3c:	22ee      	movs	r2, #238	@ 0xee
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003f3e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8003f42:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003f44:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f46:	ed8d 7b08 	vstr	d7, [sp, #32]
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003f4a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8003f4e:	2208      	movs	r2, #8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003f50:	2300      	movs	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8003f52:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003f56:	9105      	str	r1, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8003f58:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8003f5c:	9207      	str	r2, [sp, #28]

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003f5e:	466a      	mov	r2, sp
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8003f60:	910e      	str	r1, [sp, #56]	@ 0x38
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003f62:	a902      	add	r1, sp, #8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003f64:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8003f66:	940d      	str	r4, [sp, #52]	@ 0x34
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003f68:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003f6a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8003fc8 <MT25TL01G_EnableMemoryMappedModeDTR+0xa0>
 8003f6e:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003f72:	f009 f819 	bl	800cfa8 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8003f76:	2800      	cmp	r0, #0
}
 8003f78:	bf14      	ite	ne
 8003f7a:	f06f 0005 	mvnne.w	r0, #5
 8003f7e:	2000      	moveq	r0, #0
 8003f80:	b010      	add	sp, #64	@ 0x40
 8003f82:	bd10      	pop	{r4, pc}
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003f84:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8003fd0 <MT25TL01G_EnableMemoryMappedModeDTR+0xa8>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8003f88:	22ed      	movs	r2, #237	@ 0xed
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003f8a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8003f8e:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003f90:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003f92:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8003f96:	e7d8      	b.n	8003f4a <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f98:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8003fd8 <MT25TL01G_EnableMemoryMappedModeDTR+0xb0>
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8003f9c:	223d      	movs	r2, #61	@ 0x3d
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8003f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8003fa2:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8003fa4:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003fa6:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8003faa:	e7ce      	b.n	8003f4a <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003fac:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8003fd8 <MT25TL01G_EnableMemoryMappedModeDTR+0xb0>
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8003fb0:	220e      	movs	r2, #14
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8003fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8003fb6:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8003fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003fba:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8003fbe:	e7c4      	b.n	8003f4a <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
 8003fc0:	00000100 	.word	0x00000100
 8003fc4:	00000c00 	.word	0x00000c00
	...
 8003fd0:	00000300 	.word	0x00000300
 8003fd4:	00000c00 	.word	0x00000c00
 8003fd8:	00000100 	.word	0x00000100
 8003fdc:	00000400 	.word	0x00000400

08003fe0 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003fe0:	b500      	push	{lr}
 8003fe2:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8003fe4:	2903      	cmp	r1, #3
 8003fe6:	d80c      	bhi.n	8004002 <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
 8003fe8:	e8df f001 	tbb	[pc, r1]
 8003fec:	25022f39 	.word	0x25022f39

    break;

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ff0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8004078 <MT25TL01G_EnableMemoryMappedModeSTR+0x98>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8003ff4:	22ec      	movs	r2, #236	@ 0xec
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003ff6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8003ffa:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ffe:	ed8d 7b08 	vstr	d7, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004002:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8004080 <MT25TL01G_EnableMemoryMappedModeSTR+0xa0>
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004006:	2108      	movs	r1, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004008:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800400c:	2300      	movs	r3, #0
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800400e:	9107      	str	r1, [sp, #28]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004010:	4469      	add	r1, sp
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004012:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004014:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004016:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004018:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800401a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800401e:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004022:	f008 ffc1 	bl	800cfa8 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004026:	2800      	cmp	r0, #0
}
 8004028:	bf14      	ite	ne
 800402a:	f06f 0005 	mvnne.w	r0, #5
 800402e:	2000      	moveq	r0, #0
 8004030:	b011      	add	sp, #68	@ 0x44
 8004032:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004036:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8004088 <MT25TL01G_EnableMemoryMappedModeSTR+0xa8>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800403a:	22eb      	movs	r2, #235	@ 0xeb
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800403c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004040:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004042:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004044:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8004048:	e7db      	b.n	8004002 <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800404a:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8004090 <MT25TL01G_EnableMemoryMappedModeSTR+0xb0>
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800404e:	22bc      	movs	r2, #188	@ 0xbc
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004050:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004054:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004056:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004058:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 800405c:	e7d1      	b.n	8004002 <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800405e:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8004098 <MT25TL01G_EnableMemoryMappedModeSTR+0xb8>
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004062:	220c      	movs	r2, #12
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004064:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004068:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800406a:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800406c:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8004070:	e7c7      	b.n	8004002 <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
 8004072:	bf00      	nop
 8004074:	f3af 8000 	nop.w
 8004078:	00000100 	.word	0x00000100
 800407c:	00000c00 	.word	0x00000c00
	...
 8004088:	00000300 	.word	0x00000300
 800408c:	00000c00 	.word	0x00000c00
 8004090:	00000100 	.word	0x00000100
 8004094:	00000800 	.word	0x00000800
 8004098:	00000100 	.word	0x00000100
 800409c:	00000400 	.word	0x00000400

080040a0 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80040a0:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80040a2:	2903      	cmp	r1, #3
{
 80040a4:	b08e      	sub	sp, #56	@ 0x38
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80040a6:	f04f 0466 	mov.w	r4, #102	@ 0x66
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80040aa:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b2:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80040b4:	9400      	str	r4, [sp, #0]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80040b6:	bf14      	ite	ne
 80040b8:	f44f 7480 	movne.w	r4, #256	@ 0x100
 80040bc:	f44f 7440 	moveq.w	r4, #768	@ 0x300
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80040c0:	9307      	str	r3, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80040c2:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80040c4:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80040c8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80040cc:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040d0:	f008 fd76 	bl	800cbc0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80040d4:	2800      	cmp	r0, #0
}
 80040d6:	bf14      	ite	ne
 80040d8:	f06f 0001 	mvnne.w	r0, #1
 80040dc:	2000      	moveq	r0, #0
 80040de:	b00e      	add	sp, #56	@ 0x38
 80040e0:	bd10      	pop	{r4, pc}
 80040e2:	bf00      	nop

080040e4 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80040e4:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80040e6:	2903      	cmp	r1, #3
{
 80040e8:	b08e      	sub	sp, #56	@ 0x38
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80040ea:	f04f 0499 	mov.w	r4, #153	@ 0x99
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80040ee:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f6:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80040f8:	9400      	str	r4, [sp, #0]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80040fa:	bf14      	ite	ne
 80040fc:	f44f 7480 	movne.w	r4, #256	@ 0x100
 8004100:	f44f 7440 	moveq.w	r4, #768	@ 0x300
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004104:	9307      	str	r3, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004106:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004108:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800410c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004110:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004114:	f008 fd54 	bl	800cbc0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004118:	2800      	cmp	r0, #0
}
 800411a:	bf14      	ite	ne
 800411c:	f06f 0001 	mvnne.w	r0, #1
 8004120:	2000      	moveq	r0, #0
 8004122:	b00e      	add	sp, #56	@ 0x38
 8004124:	bd10      	pop	{r4, pc}
 8004126:	bf00      	nop

08004128 <NT35510_DeInit>:
  * @retval Component status
  */
int32_t NT35510_DeInit(NT35510_Object_t *pObj)
{
  return NT35510_ERROR;
}
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop

08004130 <NT35510_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t NT35510_GetBrightness(NT35510_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = NT35510Ctx.Brightness;
 8004130:	4b02      	ldr	r3, [pc, #8]	@ (800413c <NT35510_GetBrightness+0xc>)
  return NT35510_OK;  
}
 8004132:	2000      	movs	r0, #0
  *Brightness = NT35510Ctx.Brightness;
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	600b      	str	r3, [r1, #0]
}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	24014c70 	.word	0x24014c70

08004140 <NT35510_GetOrientation>:
int32_t NT35510_GetOrientation(NT35510_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = NT35510Ctx.Orientation;
 8004140:	4b02      	ldr	r3, [pc, #8]	@ (800414c <NT35510_GetOrientation+0xc>)
  
  return NT35510_OK;
}
 8004142:	2000      	movs	r0, #0
  *Orientation = NT35510Ctx.Orientation;
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	600b      	str	r3, [r1, #0]
}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	24014c70 	.word	0x24014c70

08004150 <NT35510_GetXSize>:
int32_t NT35510_GetXSize(NT35510_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <NT35510_GetXSize+0x18>)
    *Xsize = NT35510_800X480_WIDTH;
    break;
  }
  
  return NT35510_OK;
}
 8004152:	2000      	movs	r0, #0
  switch(NT35510Ctx.Orientation)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4283      	cmp	r3, r0
 8004158:	bf0c      	ite	eq
 800415a:	f44f 73f0 	moveq.w	r3, #480	@ 0x1e0
 800415e:	f44f 7348 	movne.w	r3, #800	@ 0x320
    *Xsize = NT35510_480X800_WIDTH;
 8004162:	600b      	str	r3, [r1, #0]
}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	24014c70 	.word	0x24014c70

0800416c <NT35510_GetYSize>:
int32_t NT35510_GetYSize(NT35510_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <NT35510_GetYSize+0x18>)
    *Ysize = NT35510_800X480_HEIGHT;
    break;
  }
  
  return NT35510_OK;
}
 800416e:	2000      	movs	r0, #0
  switch(NT35510Ctx.Orientation)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4283      	cmp	r3, r0
 8004174:	bf0c      	ite	eq
 8004176:	f44f 7348 	moveq.w	r3, #800	@ 0x320
 800417a:	f44f 73f0 	movne.w	r3, #480	@ 0x1e0
    *Ysize = NT35510_480X800_HEIGHT;
 800417e:	600b      	str	r3, [r1, #0]
}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	24014c70 	.word	0x24014c70

08004188 <NT35510_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop

08004190 <NT35510_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop

08004198 <NT35510_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop

080041a0 <NT35510_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop

080041a8 <NT35510_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop

080041b0 <NT35510_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop

080041b8 <NT35510_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80041b8:	b410      	push	{r4}
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80041ba:	6884      	ldr	r4, [r0, #8]
 80041bc:	8800      	ldrh	r0, [r0, #0]
 80041be:	46a4      	mov	ip, r4
}
 80041c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80041c4:	4760      	bx	ip
 80041c6:	bf00      	nop

080041c8 <NT35510_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80041c8:	b410      	push	{r4}
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80041ca:	6844      	ldr	r4, [r0, #4]
 80041cc:	8800      	ldrh	r0, [r0, #0]
 80041ce:	46a4      	mov	ip, r4
}
 80041d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80041d4:	4760      	bx	ip
 80041d6:	bf00      	nop

080041d8 <NT35510_Init>:
{
 80041d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ret =  nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg, 5);/* LV2:  Page 1 enable */
 80041dc:	f100 0510 	add.w	r5, r0, #16
 80041e0:	2305      	movs	r3, #5
{
 80041e2:	4606      	mov	r6, r0
 80041e4:	4690      	mov	r8, r2
 80041e6:	460f      	mov	r7, r1
  ret =  nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg, 5);/* LV2:  Page 1 enable */
 80041e8:	4a9e      	ldr	r2, [pc, #632]	@ (8004464 <NT35510_Init+0x28c>)
 80041ea:	21f0      	movs	r1, #240	@ 0xf0
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 fa55 	bl	800469c <nt35510_write_reg>
 80041f2:	4604      	mov	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB0, nt35510_reg1, 3);/* AVDD: 5.2V */
 80041f4:	2303      	movs	r3, #3
 80041f6:	4a9c      	ldr	r2, [pc, #624]	@ (8004468 <NT35510_Init+0x290>)
 80041f8:	21b0      	movs	r1, #176	@ 0xb0
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 fa4e 	bl	800469c <nt35510_write_reg>
 8004200:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg2, 3); /* AVDD: Ratio */
 8004202:	2303      	movs	r3, #3
 8004204:	4a99      	ldr	r2, [pc, #612]	@ (800446c <NT35510_Init+0x294>)
 8004206:	21b6      	movs	r1, #182	@ 0xb6
 8004208:	4628      	mov	r0, r5
 800420a:	f000 fa47 	bl	800469c <nt35510_write_reg>
 800420e:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg3, 3);/* AVEE: -5.2V */
 8004210:	2303      	movs	r3, #3
 8004212:	4a97      	ldr	r2, [pc, #604]	@ (8004470 <NT35510_Init+0x298>)
 8004214:	21b1      	movs	r1, #177	@ 0xb1
 8004216:	4628      	mov	r0, r5
 8004218:	f000 fa40 	bl	800469c <nt35510_write_reg>
 800421c:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg4, 3);/* AVEE: Ratio */
 800421e:	2303      	movs	r3, #3
 8004220:	4a94      	ldr	r2, [pc, #592]	@ (8004474 <NT35510_Init+0x29c>)
 8004222:	21b7      	movs	r1, #183	@ 0xb7
 8004224:	4628      	mov	r0, r5
 8004226:	f000 fa39 	bl	800469c <nt35510_write_reg>
 800422a:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB2, nt35510_reg5, 3);/* VCL: -2.5V */
 800422c:	2303      	movs	r3, #3
 800422e:	4a92      	ldr	r2, [pc, #584]	@ (8004478 <NT35510_Init+0x2a0>)
 8004230:	21b2      	movs	r1, #178	@ 0xb2
 8004232:	4628      	mov	r0, r5
 8004234:	f000 fa32 	bl	800469c <nt35510_write_reg>
 8004238:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg6, 3);/* VCL: Ratio */
 800423a:	2303      	movs	r3, #3
 800423c:	4a8f      	ldr	r2, [pc, #572]	@ (800447c <NT35510_Init+0x2a4>)
 800423e:	21b8      	movs	r1, #184	@ 0xb8
 8004240:	4628      	mov	r0, r5
 8004242:	f000 fa2b 	bl	800469c <nt35510_write_reg>
 8004246:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBF, nt35510_reg7, 1);/* VGH: 15V (Free Pump) */
 8004248:	2301      	movs	r3, #1
 800424a:	4a8d      	ldr	r2, [pc, #564]	@ (8004480 <NT35510_Init+0x2a8>)
 800424c:	21bf      	movs	r1, #191	@ 0xbf
 800424e:	4628      	mov	r0, r5
 8004250:	f000 fa24 	bl	800469c <nt35510_write_reg>
 8004254:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB3, nt35510_reg8, 3);
 8004256:	2303      	movs	r3, #3
 8004258:	4a8a      	ldr	r2, [pc, #552]	@ (8004484 <NT35510_Init+0x2ac>)
 800425a:	21b3      	movs	r1, #179	@ 0xb3
 800425c:	4628      	mov	r0, r5
 800425e:	f000 fa1d 	bl	800469c <nt35510_write_reg>
 8004262:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB9, nt35510_reg9, 3);/* VGH: Ratio */ 
 8004264:	2303      	movs	r3, #3
 8004266:	4a88      	ldr	r2, [pc, #544]	@ (8004488 <NT35510_Init+0x2b0>)
 8004268:	21b9      	movs	r1, #185	@ 0xb9
 800426a:	4628      	mov	r0, r5
 800426c:	f000 fa16 	bl	800469c <nt35510_write_reg>
 8004270:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg10, 3);/* VGL_REG: -10V */
 8004272:	2303      	movs	r3, #3
 8004274:	4a85      	ldr	r2, [pc, #532]	@ (800448c <NT35510_Init+0x2b4>)
 8004276:	21b5      	movs	r1, #181	@ 0xb5
 8004278:	4628      	mov	r0, r5
 800427a:	f000 fa0f 	bl	800469c <nt35510_write_reg>
 800427e:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg12, 3);/* VGLX: Ratio */
 8004280:	2303      	movs	r3, #3
 8004282:	4a83      	ldr	r2, [pc, #524]	@ (8004490 <NT35510_Init+0x2b8>)
 8004284:	21ba      	movs	r1, #186	@ 0xba
 8004286:	4628      	mov	r0, r5
 8004288:	f000 fa08 	bl	800469c <nt35510_write_reg>
 800428c:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg13, 3);/* VGMP/VGSP: 4.5V/0V */
 800428e:	2303      	movs	r3, #3
 8004290:	4a80      	ldr	r2, [pc, #512]	@ (8004494 <NT35510_Init+0x2bc>)
 8004292:	21bc      	movs	r1, #188	@ 0xbc
 8004294:	4628      	mov	r0, r5
 8004296:	f000 fa01 	bl	800469c <nt35510_write_reg>
 800429a:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBD, nt35510_reg14, 3);/* VGMN/VGSN:-4.5V/0V */
 800429c:	2303      	movs	r3, #3
 800429e:	4a7e      	ldr	r2, [pc, #504]	@ (8004498 <NT35510_Init+0x2c0>)
 80042a0:	21bd      	movs	r1, #189	@ 0xbd
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 f9fa 	bl	800469c <nt35510_write_reg>
 80042a8:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBE, nt35510_reg15, 2);/* VCOM: -1.325V */
 80042aa:	2302      	movs	r3, #2
 80042ac:	4a7b      	ldr	r2, [pc, #492]	@ (800449c <NT35510_Init+0x2c4>)
 80042ae:	21be      	movs	r1, #190	@ 0xbe
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 f9f3 	bl	800469c <nt35510_write_reg>
 80042b6:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg16, 5);/* LV2: Page 0 enable */
 80042b8:	2305      	movs	r3, #5
 80042ba:	4a79      	ldr	r2, [pc, #484]	@ (80044a0 <NT35510_Init+0x2c8>)
 80042bc:	21f0      	movs	r1, #240	@ 0xf0
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f9ec 	bl	800469c <nt35510_write_reg>
 80042c4:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg17, 2);/* Display optional control */
 80042c6:	2302      	movs	r3, #2
 80042c8:	4a76      	ldr	r2, [pc, #472]	@ (80044a4 <NT35510_Init+0x2cc>)
 80042ca:	21b1      	movs	r1, #177	@ 0xb1
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 f9e5 	bl	800469c <nt35510_write_reg>
 80042d2:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg18, 1);/* Set source output data hold time */
 80042d4:	2301      	movs	r3, #1
 80042d6:	4a74      	ldr	r2, [pc, #464]	@ (80044a8 <NT35510_Init+0x2d0>)
 80042d8:	21b6      	movs	r1, #182	@ 0xb6
 80042da:	4628      	mov	r0, r5
 80042dc:	f000 f9de 	bl	800469c <nt35510_write_reg>
 80042e0:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg19, 1);/*Display resolution control */
 80042e2:	2301      	movs	r3, #1
 80042e4:	4a71      	ldr	r2, [pc, #452]	@ (80044ac <NT35510_Init+0x2d4>)
 80042e6:	21b5      	movs	r1, #181	@ 0xb5
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f9d7 	bl	800469c <nt35510_write_reg>
 80042ee:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg20, 2);/* Gate EQ control */
 80042f0:	2302      	movs	r3, #2
 80042f2:	4a6f      	ldr	r2, [pc, #444]	@ (80044b0 <NT35510_Init+0x2d8>)
 80042f4:	21b7      	movs	r1, #183	@ 0xb7
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 f9d0 	bl	800469c <nt35510_write_reg>
 80042fc:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg21, 4);/* Src EQ control(Mode2) */
 80042fe:	2304      	movs	r3, #4
 8004300:	4a6c      	ldr	r2, [pc, #432]	@ (80044b4 <NT35510_Init+0x2dc>)
 8004302:	21b8      	movs	r1, #184	@ 0xb8
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f9c9 	bl	800469c <nt35510_write_reg>
 800430a:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg22, 3);
 800430c:	2303      	movs	r3, #3
 800430e:	4a6a      	ldr	r2, [pc, #424]	@ (80044b8 <NT35510_Init+0x2e0>)
 8004310:	21bc      	movs	r1, #188	@ 0xbc
 8004312:	4628      	mov	r0, r5
 8004314:	f000 f9c2 	bl	800469c <nt35510_write_reg>
 8004318:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xCC, nt35510_reg23, 3);
 800431a:	2303      	movs	r3, #3
 800431c:	4a67      	ldr	r2, [pc, #412]	@ (80044bc <NT35510_Init+0x2e4>)
 800431e:	21cc      	movs	r1, #204	@ 0xcc
 8004320:	4628      	mov	r0, r5
 8004322:	f000 f9bb 	bl	800469c <nt35510_write_reg>
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 8004326:	2301      	movs	r3, #1
  ret += nt35510_write_reg(&pObj->Ctx, 0xCC, nt35510_reg23, 3);
 8004328:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 800432a:	4a65      	ldr	r2, [pc, #404]	@ (80044c0 <NT35510_Init+0x2e8>)
 800432c:	21ba      	movs	r1, #186	@ 0xba
 800432e:	4628      	mov	r0, r5
 8004330:	f000 f9b4 	bl	800469c <nt35510_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t NT35510_IO_Delay(NT35510_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004334:	68f3      	ldr	r3, [r6, #12]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 8004336:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004338:	4798      	blx	r3
 800433a:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800433c:	68f3      	ldr	r3, [r6, #12]
 800433e:	4798      	blx	r3
 8004340:	eba0 0009 	sub.w	r0, r0, r9
 8004344:	28c7      	cmp	r0, #199	@ 0xc7
 8004346:	d9f9      	bls.n	800433c <NT35510_Init+0x164>
  if(Orientation == NT35510_ORIENTATION_PORTRAIT)
 8004348:	f1b8 0f00 	cmp.w	r8, #0
 800434c:	d163      	bne.n	8004416 <NT35510_Init+0x23e>
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_portrait[1], 0);
 800434e:	4643      	mov	r3, r8
 8004350:	4a5c      	ldr	r2, [pc, #368]	@ (80044c4 <NT35510_Init+0x2ec>)
 8004352:	2136      	movs	r1, #54	@ 0x36
 8004354:	4628      	mov	r0, r5
 8004356:	f000 f9a1 	bl	800469c <nt35510_write_reg>
 800435a:	4404      	add	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 800435c:	2304      	movs	r3, #4
 800435e:	4a5a      	ldr	r2, [pc, #360]	@ (80044c8 <NT35510_Init+0x2f0>)
 8004360:	212a      	movs	r1, #42	@ 0x2a
 8004362:	4628      	mov	r0, r5
 8004364:	f000 f99a 	bl	800469c <nt35510_write_reg>
 8004368:	4404      	add	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 800436a:	2304      	movs	r3, #4
 800436c:	4a57      	ldr	r2, [pc, #348]	@ (80044cc <NT35510_Init+0x2f4>)
 800436e:	212b      	movs	r1, #43	@ 0x2b
 8004370:	4628      	mov	r0, r5
 8004372:	f000 f993 	bl	800469c <nt35510_write_reg>
 8004376:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_SLPOUT, &nt35510_reg27[1], 0);
 8004378:	2300      	movs	r3, #0
 800437a:	4a55      	ldr	r2, [pc, #340]	@ (80044d0 <NT35510_Init+0x2f8>)
 800437c:	2111      	movs	r1, #17
 800437e:	4628      	mov	r0, r5
 8004380:	f000 f98c 	bl	800469c <nt35510_write_reg>
  tickstart = pObj->IO.GetTick();
 8004384:	68f3      	ldr	r3, [r6, #12]
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_SLPOUT, &nt35510_reg27[1], 0);
 8004386:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004388:	4798      	blx	r3
 800438a:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800438c:	68f3      	ldr	r3, [r6, #12]
 800438e:	4798      	blx	r3
 8004390:	eba0 0008 	sub.w	r0, r0, r8
 8004394:	2813      	cmp	r0, #19
 8004396:	d9f9      	bls.n	800438c <NT35510_Init+0x1b4>
  switch(ColorCoding)
 8004398:	2f00      	cmp	r7, #0
 800439a:	d052      	beq.n	8004442 <NT35510_Init+0x26a>
 800439c:	2f02      	cmp	r7, #2
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 800439e:	f04f 0300 	mov.w	r3, #0
  switch(ColorCoding)
 80043a2:	d156      	bne.n	8004452 <NT35510_Init+0x27a>
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg36[1], 0);
 80043a4:	4a4b      	ldr	r2, [pc, #300]	@ (80044d4 <NT35510_Init+0x2fc>)
 80043a6:	213a      	movs	r1, #58	@ 0x3a
 80043a8:	4628      	mov	r0, r5
 80043aa:	f000 f977 	bl	800469c <nt35510_write_reg>
 80043ae:	4404      	add	r4, r0
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RBG565;
 80043b0:	4a49      	ldr	r2, [pc, #292]	@ (80044d8 <NT35510_Init+0x300>)
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &nt35510_reg31[1], 0);
 80043b2:	2300      	movs	r3, #0
 80043b4:	2151      	movs	r1, #81	@ 0x51
 80043b6:	4628      	mov	r0, r5
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RBG565;
 80043b8:	6057      	str	r7, [r2, #4]
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &nt35510_reg31[1], 0);
 80043ba:	4a48      	ldr	r2, [pc, #288]	@ (80044dc <NT35510_Init+0x304>)
 80043bc:	f000 f96e 	bl	800469c <nt35510_write_reg>
 80043c0:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCTRLD, &nt35510_reg32[1], 0);
 80043c2:	2300      	movs	r3, #0
 80043c4:	4a46      	ldr	r2, [pc, #280]	@ (80044e0 <NT35510_Init+0x308>)
 80043c6:	2153      	movs	r1, #83	@ 0x53
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 f967 	bl	800469c <nt35510_write_reg>
 80043ce:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABC, &nt35510_reg33[1], 0);
 80043d0:	2300      	movs	r3, #0
 80043d2:	4a44      	ldr	r2, [pc, #272]	@ (80044e4 <NT35510_Init+0x30c>)
 80043d4:	2155      	movs	r1, #85	@ 0x55
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 f960 	bl	800469c <nt35510_write_reg>
 80043dc:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABCMB, &nt35510_reg34[1], 0);
 80043de:	2300      	movs	r3, #0
 80043e0:	4a41      	ldr	r2, [pc, #260]	@ (80044e8 <NT35510_Init+0x310>)
 80043e2:	215e      	movs	r1, #94	@ 0x5e
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 f959 	bl	800469c <nt35510_write_reg>
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 80043ea:	2300      	movs	r3, #0
 80043ec:	4a3f      	ldr	r2, [pc, #252]	@ (80044ec <NT35510_Init+0x314>)
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABCMB, &nt35510_reg34[1], 0);
 80043ee:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 80043f0:	2129      	movs	r1, #41	@ 0x29
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 f952 	bl	800469c <nt35510_write_reg>
 80043f8:	4601      	mov	r1, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RAMWR, &nt35510_reg35[1], 0);
 80043fa:	2300      	movs	r3, #0
 80043fc:	4a3c      	ldr	r2, [pc, #240]	@ (80044f0 <NT35510_Init+0x318>)
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 80043fe:	440c      	add	r4, r1
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RAMWR, &nt35510_reg35[1], 0);
 8004400:	4628      	mov	r0, r5
 8004402:	212c      	movs	r1, #44	@ 0x2c
 8004404:	f000 f94a 	bl	800469c <nt35510_write_reg>
  if(ret != NT35510_OK)
 8004408:	42c4      	cmn	r4, r0
}
 800440a:	bf14      	ite	ne
 800440c:	f04f 30ff 	movne.w	r0, #4294967295
 8004410:	2000      	moveq	r0, #0
 8004412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_landscape[1], 0);
 8004416:	2300      	movs	r3, #0
 8004418:	4a36      	ldr	r2, [pc, #216]	@ (80044f4 <NT35510_Init+0x31c>)
 800441a:	2136      	movs	r1, #54	@ 0x36
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f93d 	bl	800469c <nt35510_write_reg>
 8004422:	4404      	add	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8004424:	2304      	movs	r3, #4
 8004426:	4a34      	ldr	r2, [pc, #208]	@ (80044f8 <NT35510_Init+0x320>)
 8004428:	212a      	movs	r1, #42	@ 0x2a
 800442a:	4628      	mov	r0, r5
 800442c:	f000 f936 	bl	800469c <nt35510_write_reg>
 8004430:	4404      	add	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8004432:	2304      	movs	r3, #4
 8004434:	4a31      	ldr	r2, [pc, #196]	@ (80044fc <NT35510_Init+0x324>)
 8004436:	212b      	movs	r1, #43	@ 0x2b
 8004438:	4628      	mov	r0, r5
 800443a:	f000 f92f 	bl	800469c <nt35510_write_reg>
 800443e:	4404      	add	r4, r0
 8004440:	e79a      	b.n	8004378 <NT35510_Init+0x1a0>
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8004442:	463b      	mov	r3, r7
 8004444:	4a2e      	ldr	r2, [pc, #184]	@ (8004500 <NT35510_Init+0x328>)
 8004446:	213a      	movs	r1, #58	@ 0x3a
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f927 	bl	800469c <nt35510_write_reg>
 800444e:	4404      	add	r4, r0
      break;
 8004450:	e7ae      	b.n	80043b0 <NT35510_Init+0x1d8>
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8004452:	4a2b      	ldr	r2, [pc, #172]	@ (8004500 <NT35510_Init+0x328>)
 8004454:	213a      	movs	r1, #58	@ 0x3a
 8004456:	4628      	mov	r0, r5
      break;
 8004458:	2700      	movs	r7, #0
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 800445a:	f000 f91f 	bl	800469c <nt35510_write_reg>
 800445e:	4404      	add	r4, r0
      break;
 8004460:	e7a6      	b.n	80043b0 <NT35510_Init+0x1d8>
 8004462:	bf00      	nop
 8004464:	080493c0 	.word	0x080493c0
 8004468:	080493bc 	.word	0x080493bc
 800446c:	080493b8 	.word	0x080493b8
 8004470:	080493b4 	.word	0x080493b4
 8004474:	080493b0 	.word	0x080493b0
 8004478:	080493ac 	.word	0x080493ac
 800447c:	080493a8 	.word	0x080493a8
 8004480:	080493a4 	.word	0x080493a4
 8004484:	080493a0 	.word	0x080493a0
 8004488:	0804939c 	.word	0x0804939c
 800448c:	08049398 	.word	0x08049398
 8004490:	08049394 	.word	0x08049394
 8004494:	08049390 	.word	0x08049390
 8004498:	0804938c 	.word	0x0804938c
 800449c:	08049388 	.word	0x08049388
 80044a0:	08049380 	.word	0x08049380
 80044a4:	0804937c 	.word	0x0804937c
 80044a8:	08049378 	.word	0x08049378
 80044ac:	08049374 	.word	0x08049374
 80044b0:	08049370 	.word	0x08049370
 80044b4:	0804936c 	.word	0x0804936c
 80044b8:	08049368 	.word	0x08049368
 80044bc:	08049364 	.word	0x08049364
 80044c0:	08049360 	.word	0x08049360
 80044c4:	080493ed 	.word	0x080493ed
 80044c8:	080493e4 	.word	0x080493e4
 80044cc:	080493dc 	.word	0x080493dc
 80044d0:	0804935d 	.word	0x0804935d
 80044d4:	08049359 	.word	0x08049359
 80044d8:	24014c70 	.word	0x24014c70
 80044dc:	08049351 	.word	0x08049351
 80044e0:	0804934d 	.word	0x0804934d
 80044e4:	08049349 	.word	0x08049349
 80044e8:	08049345 	.word	0x08049345
 80044ec:	08049341 	.word	0x08049341
 80044f0:	0804933d 	.word	0x0804933d
 80044f4:	080493d9 	.word	0x080493d9
 80044f8:	080493d0 	.word	0x080493d0
 80044fc:	080493c8 	.word	0x080493c8
 8004500:	08049355 	.word	0x08049355

08004504 <NT35510_SetBrightness>:
{
 8004504:	b530      	push	{r4, r5, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004506:	ebc1 2c01 	rsb	ip, r1, r1, lsl #8
 800450a:	4d0c      	ldr	r5, [pc, #48]	@ (800453c <NT35510_SetBrightness+0x38>)
{
 800450c:	b083      	sub	sp, #12
 800450e:	460c      	mov	r4, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004510:	fba5 5c0c 	umull	r5, ip, r5, ip
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 8004514:	2300      	movs	r3, #0
 8004516:	f10d 0207 	add.w	r2, sp, #7
 800451a:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800451c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 8004520:	2151      	movs	r1, #81	@ 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004522:	f88d c007 	strb.w	ip, [sp, #7]
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 8004526:	f000 f8b9 	bl	800469c <nt35510_write_reg>
 800452a:	b918      	cbnz	r0, 8004534 <NT35510_SetBrightness+0x30>
    NT35510Ctx.Brightness = Brightness;
 800452c:	4b04      	ldr	r3, [pc, #16]	@ (8004540 <NT35510_SetBrightness+0x3c>)
 800452e:	609c      	str	r4, [r3, #8]
}
 8004530:	b003      	add	sp, #12
 8004532:	bd30      	pop	{r4, r5, pc}
    ret = NT35510_ERROR;
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004538:	e7fa      	b.n	8004530 <NT35510_SetBrightness+0x2c>
 800453a:	bf00      	nop
 800453c:	51eb851f 	.word	0x51eb851f
 8004540:	24014c70 	.word	0x24014c70

08004544 <NT35510_DisplayOn>:
{
 8004544:	b500      	push	{lr}
 8004546:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004548:	2300      	movs	r3, #0
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &display, 0) != NT35510_OK)
 800454a:	2129      	movs	r1, #41	@ 0x29
 800454c:	3010      	adds	r0, #16
 800454e:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004552:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &display, 0) != NT35510_OK)
 8004556:	f000 f8a1 	bl	800469c <nt35510_write_reg>
 800455a:	3800      	subs	r0, #0
 800455c:	bf18      	it	ne
 800455e:	2001      	movne	r0, #1
}
 8004560:	4240      	negs	r0, r0
 8004562:	b003      	add	sp, #12
 8004564:	f85d fb04 	ldr.w	pc, [sp], #4

08004568 <NT35510_DisplayOff>:
{
 8004568:	b500      	push	{lr}
 800456a:	b083      	sub	sp, #12
  uint8_t display = 0;
 800456c:	2300      	movs	r3, #0
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPOFF, &display, 0) != NT35510_OK)
 800456e:	2128      	movs	r1, #40	@ 0x28
 8004570:	3010      	adds	r0, #16
 8004572:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004576:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPOFF, &display, 0) != NT35510_OK)
 800457a:	f000 f88f 	bl	800469c <nt35510_write_reg>
 800457e:	3800      	subs	r0, #0
 8004580:	bf18      	it	ne
 8004582:	2001      	movne	r0, #1
}
 8004584:	4240      	negs	r0, r0
 8004586:	b003      	add	sp, #12
 8004588:	f85d fb04 	ldr.w	pc, [sp], #4

0800458c <NT35510_SetOrientation>:
{
 800458c:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = NT35510_MADCTR_MODE_LANDSCAPE;
 800458e:	2260      	movs	r2, #96	@ 0x60
{
 8004590:	b082      	sub	sp, #8
  uint8_t tmp1 = NT35510_MADCTR_MODE_PORTRAIT;
 8004592:	2300      	movs	r3, #0
  if((Orientation != NT35510_ORIENTATION_LANDSCAPE) && (Orientation != NT35510_ORIENTATION_PORTRAIT))
 8004594:	2901      	cmp	r1, #1
  uint8_t tmp = NT35510_MADCTR_MODE_LANDSCAPE;
 8004596:	f88d 2006 	strb.w	r2, [sp, #6]
  uint8_t tmp1 = NT35510_MADCTR_MODE_PORTRAIT;
 800459a:	f88d 3007 	strb.w	r3, [sp, #7]
  if((Orientation != NT35510_ORIENTATION_LANDSCAPE) && (Orientation != NT35510_ORIENTATION_PORTRAIT))
 800459e:	d839      	bhi.n	8004614 <NT35510_SetOrientation+0x88>
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 80045a0:	f100 0610 	add.w	r6, r0, #16
  else if(Orientation == NT35510_ORIENTATION_LANDSCAPE)
 80045a4:	d01e      	beq.n	80045e4 <NT35510_SetOrientation+0x58>
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 80045a6:	f10d 0207 	add.w	r2, sp, #7
 80045aa:	2136      	movs	r1, #54	@ 0x36
 80045ac:	4630      	mov	r0, r6
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 80045ae:	461d      	mov	r5, r3
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 80045b0:	f000 f874 	bl	800469c <nt35510_write_reg>
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 80045b4:	2304      	movs	r3, #4
 80045b6:	4a19      	ldr	r2, [pc, #100]	@ (800461c <NT35510_SetOrientation+0x90>)
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 80045b8:	4604      	mov	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 80045ba:	212a      	movs	r1, #42	@ 0x2a
 80045bc:	4630      	mov	r0, r6
 80045be:	f000 f86d 	bl	800469c <nt35510_write_reg>
 80045c2:	4602      	mov	r2, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 80045c4:	2304      	movs	r3, #4
 80045c6:	4630      	mov	r0, r6
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 80045c8:	4414      	add	r4, r2
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 80045ca:	212b      	movs	r1, #43	@ 0x2b
 80045cc:	4a14      	ldr	r2, [pc, #80]	@ (8004620 <NT35510_SetOrientation+0x94>)
 80045ce:	f000 f865 	bl	800469c <nt35510_write_reg>
 80045d2:	4420      	add	r0, r4
  if(ret != NT35510_OK)
 80045d4:	3800      	subs	r0, #0
    NT35510Ctx.Orientation = NT35510_ORIENTATION_PORTRAIT;
 80045d6:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <NT35510_SetOrientation+0x98>)
  if(ret != NT35510_OK)
 80045d8:	bf18      	it	ne
 80045da:	2001      	movne	r0, #1
    NT35510Ctx.Orientation = NT35510_ORIENTATION_PORTRAIT;
 80045dc:	601d      	str	r5, [r3, #0]
  if(ret != NT35510_OK)
 80045de:	4240      	negs	r0, r0
}
 80045e0:	b002      	add	sp, #8
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 80045e4:	f10d 0206 	add.w	r2, sp, #6
 80045e8:	460d      	mov	r5, r1
 80045ea:	4630      	mov	r0, r6
 80045ec:	210b      	movs	r1, #11
 80045ee:	f000 f855 	bl	800469c <nt35510_write_reg>
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 80045f2:	2304      	movs	r3, #4
 80045f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004628 <NT35510_SetOrientation+0x9c>)
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 80045f6:	4604      	mov	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 80045f8:	212a      	movs	r1, #42	@ 0x2a
 80045fa:	4630      	mov	r0, r6
 80045fc:	f000 f84e 	bl	800469c <nt35510_write_reg>
 8004600:	4602      	mov	r2, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8004602:	2304      	movs	r3, #4
 8004604:	4630      	mov	r0, r6
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8004606:	4414      	add	r4, r2
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8004608:	212b      	movs	r1, #43	@ 0x2b
 800460a:	4a08      	ldr	r2, [pc, #32]	@ (800462c <NT35510_SetOrientation+0xa0>)
 800460c:	f000 f846 	bl	800469c <nt35510_write_reg>
 8004610:	4420      	add	r0, r4
    NT35510Ctx.Orientation = NT35510_ORIENTATION_LANDSCAPE;
 8004612:	e7df      	b.n	80045d4 <NT35510_SetOrientation+0x48>
    ret = NT35510_ERROR;
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004618:	e7e2      	b.n	80045e0 <NT35510_SetOrientation+0x54>
 800461a:	bf00      	nop
 800461c:	080493e4 	.word	0x080493e4
 8004620:	080493dc 	.word	0x080493dc
 8004624:	24014c70 	.word	0x24014c70
 8004628:	080493d0 	.word	0x080493d0
 800462c:	080493c8 	.word	0x080493c8

08004630 <NT35510_ReadID>:
{ 
 8004630:	460a      	mov	r2, r1
  if(nt35510_read_reg(&pObj->Ctx, NT35510_CMD_RDID2, (uint8_t *)Id, 1)!= NT35510_OK)
 8004632:	3010      	adds	r0, #16
 8004634:	21db      	movs	r1, #219	@ 0xdb
{ 
 8004636:	b508      	push	{r3, lr}
  if(nt35510_read_reg(&pObj->Ctx, NT35510_CMD_RDID2, (uint8_t *)Id, 1)!= NT35510_OK)
 8004638:	2301      	movs	r3, #1
 800463a:	f000 f827 	bl	800468c <nt35510_read_reg>
 800463e:	3800      	subs	r0, #0
 8004640:	bf18      	it	ne
 8004642:	2001      	movne	r0, #1
}  
 8004644:	4240      	negs	r0, r0
 8004646:	bd08      	pop	{r3, pc}

08004648 <NT35510_DrawVLine>:
int32_t NT35510_DrawVLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop

08004650 <NT35510_GetPixel>:
int32_t NT35510_GetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop

08004658 <NT35510_RegisterBusIO>:
  if(pObj == NULL)
 8004658:	b180      	cbz	r0, 800467c <NT35510_RegisterBusIO+0x24>
 800465a:	4603      	mov	r3, r0
{
 800465c:	b410      	push	{r4}
    pObj->IO.WriteReg  = pIO->WriteReg;
 800465e:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 8004662:	68c8      	ldr	r0, [r1, #12]
 8004664:	605a      	str	r2, [r3, #4]
    pObj->Ctx.ReadReg  = NT35510_ReadRegWrap;
 8004666:	4907      	ldr	r1, [pc, #28]	@ (8004684 <NT35510_RegisterBusIO+0x2c>)
    pObj->Ctx.WriteReg = NT35510_WriteRegWrap;
 8004668:	4a07      	ldr	r2, [pc, #28]	@ (8004688 <NT35510_RegisterBusIO+0x30>)
    pObj->Ctx.handle   = pObj;
 800466a:	619b      	str	r3, [r3, #24]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800466c:	e9c3 4002 	strd	r4, r0, [r3, #8]
    pObj->Ctx.WriteReg = NT35510_WriteRegWrap;
 8004670:	e9c3 2104 	strd	r2, r1, [r3, #16]
  int32_t ret = NT35510_OK;
 8004674:	2000      	movs	r0, #0
}
 8004676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800467a:	4770      	bx	lr
    ret = NT35510_ERROR;
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	080041b9 	.word	0x080041b9
 8004688:	080041c9 	.word	0x080041c9

0800468c <nt35510_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t nt35510_read_reg(nt35510_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800468c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800468e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004692:	46a4      	mov	ip, r4
}
 8004694:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004698:	4760      	bx	ip
 800469a:	bf00      	nop

0800469c <nt35510_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t nt35510_write_reg(nt35510_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800469c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800469e:	6804      	ldr	r4, [r0, #0]
 80046a0:	6880      	ldr	r0, [r0, #8]
 80046a2:	46a4      	mov	ip, r4
}
 80046a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80046a8:	4760      	bx	ip
 80046aa:	bf00      	nop

080046ac <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop

080046b4 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 80046b4:	4b02      	ldr	r3, [pc, #8]	@ (80046c0 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 80046b6:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	600b      	str	r3, [r1, #0]
}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	24014c7c 	.word	0x24014c7c

080046c4 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 80046c4:	4b02      	ldr	r3, [pc, #8]	@ (80046d0 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 80046c6:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	600b      	str	r3, [r1, #0]
}
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	24014c7c 	.word	0x24014c7c

080046d4 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80046d4:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <OTM8009A_GetXSize+0x18>)
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 80046d6:	2000      	movs	r0, #0
  switch(OTM8009ACtx.Orientation)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4283      	cmp	r3, r0
 80046dc:	bf0c      	ite	eq
 80046de:	f44f 73f0 	moveq.w	r3, #480	@ 0x1e0
 80046e2:	f44f 7348 	movne.w	r3, #800	@ 0x320
    *Xsize = OTM8009A_480X800_WIDTH;
 80046e6:	600b      	str	r3, [r1, #0]
}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	24014c7c 	.word	0x24014c7c

080046f0 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <OTM8009A_GetYSize+0x18>)
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 80046f2:	2000      	movs	r0, #0
  switch(OTM8009ACtx.Orientation)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4283      	cmp	r3, r0
 80046f8:	bf0c      	ite	eq
 80046fa:	f44f 7348 	moveq.w	r3, #800	@ 0x320
 80046fe:	f44f 73f0 	movne.w	r3, #480	@ 0x1e0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004702:	600b      	str	r3, [r1, #0]
}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	24014c7c 	.word	0x24014c7c

0800470c <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop

08004714 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop

0800471c <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop

08004724 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop

0800472c <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop

08004734 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop

0800473c <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800473c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800473e:	6884      	ldr	r4, [r0, #8]
 8004740:	8800      	ldrh	r0, [r0, #0]
 8004742:	46a4      	mov	ip, r4
}
 8004744:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004748:	4760      	bx	ip
 800474a:	bf00      	nop

0800474c <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800474c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800474e:	6844      	ldr	r4, [r0, #4]
 8004750:	8800      	ldrh	r0, [r0, #0]
 8004752:	46a4      	mov	ip, r4
}
 8004754:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004758:	4760      	bx	ip
 800475a:	bf00      	nop

0800475c <OTM8009A_Init>:
{
 800475c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004760:	2300      	movs	r3, #0
 8004762:	f100 0510 	add.w	r5, r0, #16
{
 8004766:	b083      	sub	sp, #12
 8004768:	4606      	mov	r6, r0
 800476a:	460f      	mov	r7, r1
 800476c:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800476e:	4619      	mov	r1, r3
 8004770:	4ada      	ldr	r2, [pc, #872]	@ (8004adc <OTM8009A_Init+0x380>)
 8004772:	4628      	mov	r0, r5
 8004774:	f000 fc62 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004778:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800477a:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800477c:	4ad8      	ldr	r2, [pc, #864]	@ (8004ae0 <OTM8009A_Init+0x384>)
 800477e:	21ff      	movs	r1, #255	@ 0xff
 8004780:	4628      	mov	r0, r5
 8004782:	f000 fc5b 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004786:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004788:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800478a:	4ad6      	ldr	r2, [pc, #856]	@ (8004ae4 <OTM8009A_Init+0x388>)
 800478c:	4619      	mov	r1, r3
 800478e:	4628      	mov	r0, r5
 8004790:	f000 fc54 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004794:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004796:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004798:	4ad3      	ldr	r2, [pc, #844]	@ (8004ae8 <OTM8009A_Init+0x38c>)
 800479a:	21ff      	movs	r1, #255	@ 0xff
 800479c:	4628      	mov	r0, r5
 800479e:	f000 fc4d 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80047a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80047a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80047a6:	4acf      	ldr	r2, [pc, #828]	@ (8004ae4 <OTM8009A_Init+0x388>)
 80047a8:	4619      	mov	r1, r3
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 fc46 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80047b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80047b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80047b4:	4acd      	ldr	r2, [pc, #820]	@ (8004aec <OTM8009A_Init+0x390>)
 80047b6:	21c4      	movs	r1, #196	@ 0xc4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 fc3f 	bl	800503c <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80047be:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80047c0:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80047c2:	4798      	blx	r3
 80047c4:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80047c6:	68f3      	ldr	r3, [r6, #12]
 80047c8:	4798      	blx	r3
 80047ca:	eba0 0009 	sub.w	r0, r0, r9
 80047ce:	2809      	cmp	r0, #9
 80047d0:	d9f9      	bls.n	80047c6 <OTM8009A_Init+0x6a>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80047d2:	2300      	movs	r3, #0
 80047d4:	4ac6      	ldr	r2, [pc, #792]	@ (8004af0 <OTM8009A_Init+0x394>)
 80047d6:	4628      	mov	r0, r5
 80047d8:	4619      	mov	r1, r3
 80047da:	f000 fc2f 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80047de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80047e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80047e2:	4ac4      	ldr	r2, [pc, #784]	@ (8004af4 <OTM8009A_Init+0x398>)
 80047e4:	21c4      	movs	r1, #196	@ 0xc4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 fc28 	bl	800503c <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80047ec:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80047ee:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80047f0:	4798      	blx	r3
 80047f2:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80047f4:	68f3      	ldr	r3, [r6, #12]
 80047f6:	4798      	blx	r3
 80047f8:	eba0 0009 	sub.w	r0, r0, r9
 80047fc:	2809      	cmp	r0, #9
 80047fe:	d9f9      	bls.n	80047f4 <OTM8009A_Init+0x98>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004800:	2300      	movs	r3, #0
 8004802:	4abd      	ldr	r2, [pc, #756]	@ (8004af8 <OTM8009A_Init+0x39c>)
 8004804:	4628      	mov	r0, r5
 8004806:	4619      	mov	r1, r3
 8004808:	f000 fc18 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800480c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800480e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004810:	4aba      	ldr	r2, [pc, #744]	@ (8004afc <OTM8009A_Init+0x3a0>)
 8004812:	21c5      	movs	r1, #197	@ 0xc5
 8004814:	4628      	mov	r0, r5
 8004816:	f000 fc11 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800481a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800481c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800481e:	4ab8      	ldr	r2, [pc, #736]	@ (8004b00 <OTM8009A_Init+0x3a4>)
 8004820:	4619      	mov	r1, r3
 8004822:	4628      	mov	r0, r5
 8004824:	f000 fc0a 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004828:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800482a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800482c:	4ab5      	ldr	r2, [pc, #724]	@ (8004b04 <OTM8009A_Init+0x3a8>)
 800482e:	21c5      	movs	r1, #197	@ 0xc5
 8004830:	4628      	mov	r0, r5
 8004832:	f000 fc03 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004836:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004838:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800483a:	4ab3      	ldr	r2, [pc, #716]	@ (8004b08 <OTM8009A_Init+0x3ac>)
 800483c:	4619      	mov	r1, r3
 800483e:	4628      	mov	r0, r5
 8004840:	f000 fbfc 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004844:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004846:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004848:	4ab0      	ldr	r2, [pc, #704]	@ (8004b0c <OTM8009A_Init+0x3b0>)
 800484a:	21c0      	movs	r1, #192	@ 0xc0
 800484c:	4628      	mov	r0, r5
 800484e:	f000 fbf5 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004852:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004854:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004856:	4aa1      	ldr	r2, [pc, #644]	@ (8004adc <OTM8009A_Init+0x380>)
 8004858:	4619      	mov	r1, r3
 800485a:	4628      	mov	r0, r5
 800485c:	f000 fbee 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004860:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004862:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004864:	4aaa      	ldr	r2, [pc, #680]	@ (8004b10 <OTM8009A_Init+0x3b4>)
 8004866:	21d9      	movs	r1, #217	@ 0xd9
 8004868:	4628      	mov	r0, r5
 800486a:	f000 fbe7 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800486e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004870:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004872:	4aa8      	ldr	r2, [pc, #672]	@ (8004b14 <OTM8009A_Init+0x3b8>)
 8004874:	4619      	mov	r1, r3
 8004876:	4628      	mov	r0, r5
 8004878:	f000 fbe0 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800487c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800487e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004880:	4aa5      	ldr	r2, [pc, #660]	@ (8004b18 <OTM8009A_Init+0x3bc>)
 8004882:	21c1      	movs	r1, #193	@ 0xc1
 8004884:	4628      	mov	r0, r5
 8004886:	f000 fbd9 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800488a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800488c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800488e:	4aa3      	ldr	r2, [pc, #652]	@ (8004b1c <OTM8009A_Init+0x3c0>)
 8004890:	4619      	mov	r1, r3
 8004892:	4628      	mov	r0, r5
 8004894:	f000 fbd2 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004898:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800489a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800489c:	4aa0      	ldr	r2, [pc, #640]	@ (8004b20 <OTM8009A_Init+0x3c4>)
 800489e:	21c1      	movs	r1, #193	@ 0xc1
 80048a0:	4628      	mov	r0, r5
 80048a2:	f000 fbcb 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80048a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80048a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80048aa:	4a9e      	ldr	r2, [pc, #632]	@ (8004b24 <OTM8009A_Init+0x3c8>)
 80048ac:	4619      	mov	r1, r3
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 fbc4 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80048b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80048b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80048b8:	4a9b      	ldr	r2, [pc, #620]	@ (8004b28 <OTM8009A_Init+0x3cc>)
 80048ba:	21c5      	movs	r1, #197	@ 0xc5
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 fbbd 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80048c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80048c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80048c6:	4a99      	ldr	r2, [pc, #612]	@ (8004b2c <OTM8009A_Init+0x3d0>)
 80048c8:	4619      	mov	r1, r3
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 fbb6 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80048d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80048d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80048d4:	4a8b      	ldr	r2, [pc, #556]	@ (8004b04 <OTM8009A_Init+0x3a8>)
 80048d6:	21c5      	movs	r1, #197	@ 0xc5
 80048d8:	4628      	mov	r0, r5
 80048da:	f000 fbaf 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80048e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048e2:	4a7e      	ldr	r2, [pc, #504]	@ (8004adc <OTM8009A_Init+0x380>)
 80048e4:	4619      	mov	r1, r3
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 fba8 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80048ec:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80048f0:	4a8f      	ldr	r2, [pc, #572]	@ (8004b30 <OTM8009A_Init+0x3d4>)
 80048f2:	21d8      	movs	r1, #216	@ 0xd8
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 fba1 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80048fa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80048fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80048fe:	4a8d      	ldr	r2, [pc, #564]	@ (8004b34 <OTM8009A_Init+0x3d8>)
 8004900:	4619      	mov	r1, r3
 8004902:	4628      	mov	r0, r5
 8004904:	f000 fb9a 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004908:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800490a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800490c:	4a8a      	ldr	r2, [pc, #552]	@ (8004b38 <OTM8009A_Init+0x3dc>)
 800490e:	21c5      	movs	r1, #197	@ 0xc5
 8004910:	4628      	mov	r0, r5
 8004912:	f000 fb93 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004916:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004918:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800491a:	4a88      	ldr	r2, [pc, #544]	@ (8004b3c <OTM8009A_Init+0x3e0>)
 800491c:	4619      	mov	r1, r3
 800491e:	4628      	mov	r0, r5
 8004920:	f000 fb8c 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004924:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004926:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004928:	4a85      	ldr	r2, [pc, #532]	@ (8004b40 <OTM8009A_Init+0x3e4>)
 800492a:	21c0      	movs	r1, #192	@ 0xc0
 800492c:	4628      	mov	r0, r5
 800492e:	f000 fb85 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004932:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004934:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004936:	4a83      	ldr	r2, [pc, #524]	@ (8004b44 <OTM8009A_Init+0x3e8>)
 8004938:	4619      	mov	r1, r3
 800493a:	4628      	mov	r0, r5
 800493c:	f000 fb7e 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004940:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004942:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004944:	4a80      	ldr	r2, [pc, #512]	@ (8004b48 <OTM8009A_Init+0x3ec>)
 8004946:	21c5      	movs	r1, #197	@ 0xc5
 8004948:	4628      	mov	r0, r5
 800494a:	f000 fb77 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800494e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004950:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004952:	4a70      	ldr	r2, [pc, #448]	@ (8004b14 <OTM8009A_Init+0x3b8>)
 8004954:	4619      	mov	r1, r3
 8004956:	4628      	mov	r0, r5
 8004958:	f000 fb70 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800495c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800495e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004960:	4a7a      	ldr	r2, [pc, #488]	@ (8004b4c <OTM8009A_Init+0x3f0>)
 8004962:	21c4      	movs	r1, #196	@ 0xc4
 8004964:	4628      	mov	r0, r5
 8004966:	f000 fb69 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800496a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800496c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800496e:	4a6b      	ldr	r2, [pc, #428]	@ (8004b1c <OTM8009A_Init+0x3c0>)
 8004970:	4619      	mov	r1, r3
 8004972:	4628      	mov	r0, r5
 8004974:	f000 fb62 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004978:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800497a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800497c:	4a74      	ldr	r2, [pc, #464]	@ (8004b50 <OTM8009A_Init+0x3f4>)
 800497e:	21c1      	movs	r1, #193	@ 0xc1
 8004980:	4628      	mov	r0, r5
 8004982:	f000 fb5b 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004986:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004988:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800498a:	4a72      	ldr	r2, [pc, #456]	@ (8004b54 <OTM8009A_Init+0x3f8>)
 800498c:	4619      	mov	r1, r3
 800498e:	4628      	mov	r0, r5
 8004990:	f000 fb54 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004994:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004996:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004998:	4a6f      	ldr	r2, [pc, #444]	@ (8004b58 <OTM8009A_Init+0x3fc>)
 800499a:	21b3      	movs	r1, #179	@ 0xb3
 800499c:	4628      	mov	r0, r5
 800499e:	f000 fb4d 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80049a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80049a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80049a6:	4a4f      	ldr	r2, [pc, #316]	@ (8004ae4 <OTM8009A_Init+0x388>)
 80049a8:	4619      	mov	r1, r3
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 fb46 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80049b0:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80049b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80049b4:	4a69      	ldr	r2, [pc, #420]	@ (8004b5c <OTM8009A_Init+0x400>)
 80049b6:	21ce      	movs	r1, #206	@ 0xce
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 fb3f 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80049be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80049c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80049c2:	4a67      	ldr	r2, [pc, #412]	@ (8004b60 <OTM8009A_Init+0x404>)
 80049c4:	4619      	mov	r1, r3
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 fb38 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80049cc:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80049ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80049d0:	4a64      	ldr	r2, [pc, #400]	@ (8004b64 <OTM8009A_Init+0x408>)
 80049d2:	21ce      	movs	r1, #206	@ 0xce
 80049d4:	4628      	mov	r0, r5
 80049d6:	f000 fb31 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80049da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80049dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80049de:	4a62      	ldr	r2, [pc, #392]	@ (8004b68 <OTM8009A_Init+0x40c>)
 80049e0:	4619      	mov	r1, r3
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 fb2a 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80049e8:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80049ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80049ec:	4a5f      	ldr	r2, [pc, #380]	@ (8004b6c <OTM8009A_Init+0x410>)
 80049ee:	21ce      	movs	r1, #206	@ 0xce
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 fb23 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80049f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80049f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80049fa:	4a5d      	ldr	r2, [pc, #372]	@ (8004b70 <OTM8009A_Init+0x414>)
 80049fc:	4619      	mov	r1, r3
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 fb1c 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004a04:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004a06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004a08:	4a5a      	ldr	r2, [pc, #360]	@ (8004b74 <OTM8009A_Init+0x418>)
 8004a0a:	21cf      	movs	r1, #207	@ 0xcf
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f000 fb15 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004a12:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004a14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004a16:	4a58      	ldr	r2, [pc, #352]	@ (8004b78 <OTM8009A_Init+0x41c>)
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 fb0e 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004a20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004a22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004a24:	4a55      	ldr	r2, [pc, #340]	@ (8004b7c <OTM8009A_Init+0x420>)
 8004a26:	21cf      	movs	r1, #207	@ 0xcf
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 fb07 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a2e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004a30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a32:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae4 <OTM8009A_Init+0x388>)
 8004a34:	4619      	mov	r1, r3
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 fb00 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004a3c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004a40:	4a4f      	ldr	r2, [pc, #316]	@ (8004b80 <OTM8009A_Init+0x424>)
 8004a42:	21cb      	movs	r1, #203	@ 0xcb
 8004a44:	4628      	mov	r0, r5
 8004a46:	f000 faf9 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004a4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004a4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004a4e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b84 <OTM8009A_Init+0x428>)
 8004a50:	4619      	mov	r1, r3
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 faf2 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004a58:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004a5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b88 <OTM8009A_Init+0x42c>)
 8004a5e:	21cb      	movs	r1, #203	@ 0xcb
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 faeb 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004a66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004a68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8004b60 <OTM8009A_Init+0x404>)
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 fae4 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004a74:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004a76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004a78:	4a44      	ldr	r2, [pc, #272]	@ (8004b8c <OTM8009A_Init+0x430>)
 8004a7a:	21cb      	movs	r1, #203	@ 0xcb
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f000 fadd 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004a82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004a84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004a86:	4a38      	ldr	r2, [pc, #224]	@ (8004b68 <OTM8009A_Init+0x40c>)
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 fad6 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004a90:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004a92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004a94:	4a3e      	ldr	r2, [pc, #248]	@ (8004b90 <OTM8009A_Init+0x434>)
 8004a96:	21cb      	movs	r1, #203	@ 0xcb
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 facf 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004a9e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004aa0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004aa2:	4a33      	ldr	r2, [pc, #204]	@ (8004b70 <OTM8009A_Init+0x414>)
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f000 fac8 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004aac:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004aae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004ab0:	4a38      	ldr	r2, [pc, #224]	@ (8004b94 <OTM8009A_Init+0x438>)
 8004ab2:	21cb      	movs	r1, #203	@ 0xcb
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 fac1 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004aba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004abc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004abe:	4a2e      	ldr	r2, [pc, #184]	@ (8004b78 <OTM8009A_Init+0x41c>)
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 faba 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004ac8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004aca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004acc:	4a32      	ldr	r2, [pc, #200]	@ (8004b98 <OTM8009A_Init+0x43c>)
 8004ace:	21cb      	movs	r1, #203	@ 0xcb
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 fab3 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e060      	b.n	8004b9c <OTM8009A_Init+0x440>
 8004ada:	bf00      	nop
 8004adc:	08049521 	.word	0x08049521
 8004ae0:	0804951c 	.word	0x0804951c
 8004ae4:	08049522 	.word	0x08049522
 8004ae8:	08049518 	.word	0x08049518
 8004aec:	08049523 	.word	0x08049523
 8004af0:	08049524 	.word	0x08049524
 8004af4:	08049525 	.word	0x08049525
 8004af8:	08049526 	.word	0x08049526
 8004afc:	08049527 	.word	0x08049527
 8004b00:	08049528 	.word	0x08049528
 8004b04:	08049529 	.word	0x08049529
 8004b08:	0804952a 	.word	0x0804952a
 8004b0c:	0804952b 	.word	0x0804952b
 8004b10:	0804952c 	.word	0x0804952c
 8004b14:	0804952d 	.word	0x0804952d
 8004b18:	0804952e 	.word	0x0804952e
 8004b1c:	0804952f 	.word	0x0804952f
 8004b20:	08049530 	.word	0x08049530
 8004b24:	08049531 	.word	0x08049531
 8004b28:	08049532 	.word	0x08049532
 8004b2c:	08049533 	.word	0x08049533
 8004b30:	08049514 	.word	0x08049514
 8004b34:	08049534 	.word	0x08049534
 8004b38:	08049535 	.word	0x08049535
 8004b3c:	08049536 	.word	0x08049536
 8004b40:	08049537 	.word	0x08049537
 8004b44:	08049538 	.word	0x08049538
 8004b48:	08049539 	.word	0x08049539
 8004b4c:	0804953a 	.word	0x0804953a
 8004b50:	0804953b 	.word	0x0804953b
 8004b54:	0804953c 	.word	0x0804953c
 8004b58:	08049510 	.word	0x08049510
 8004b5c:	08049508 	.word	0x08049508
 8004b60:	0804953d 	.word	0x0804953d
 8004b64:	080494f8 	.word	0x080494f8
 8004b68:	0804953e 	.word	0x0804953e
 8004b6c:	080494e8 	.word	0x080494e8
 8004b70:	0804953f 	.word	0x0804953f
 8004b74:	080494dc 	.word	0x080494dc
 8004b78:	08049540 	.word	0x08049540
 8004b7c:	0804954d 	.word	0x0804954d
 8004b80:	080494d0 	.word	0x080494d0
 8004b84:	08049541 	.word	0x08049541
 8004b88:	080494c0 	.word	0x080494c0
 8004b8c:	080494b0 	.word	0x080494b0
 8004b90:	080494a4 	.word	0x080494a4
 8004b94:	08049494 	.word	0x08049494
 8004b98:	08049484 	.word	0x08049484
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004b9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004b9e:	4aa7      	ldr	r2, [pc, #668]	@ (8004e3c <OTM8009A_Init+0x6e0>)
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f000 fa4a 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004ba8:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004baa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004bac:	4aa4      	ldr	r2, [pc, #656]	@ (8004e40 <OTM8009A_Init+0x6e4>)
 8004bae:	21cb      	movs	r1, #203	@ 0xcb
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 fa43 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004bb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004bb8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004bba:	4aa2      	ldr	r2, [pc, #648]	@ (8004e44 <OTM8009A_Init+0x6e8>)
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 fa3c 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004bc4:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004bc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004bc8:	4a9f      	ldr	r2, [pc, #636]	@ (8004e48 <OTM8009A_Init+0x6ec>)
 8004bca:	21cb      	movs	r1, #203	@ 0xcb
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 fa35 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004bd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bd6:	4a9d      	ldr	r2, [pc, #628]	@ (8004e4c <OTM8009A_Init+0x6f0>)
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 fa2e 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004be0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004be2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004be4:	4a9a      	ldr	r2, [pc, #616]	@ (8004e50 <OTM8009A_Init+0x6f4>)
 8004be6:	21cc      	movs	r1, #204	@ 0xcc
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fa27 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004bf0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bf2:	4a98      	ldr	r2, [pc, #608]	@ (8004e54 <OTM8009A_Init+0x6f8>)
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f000 fa20 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004bfc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004c00:	4a95      	ldr	r2, [pc, #596]	@ (8004e58 <OTM8009A_Init+0x6fc>)
 8004c02:	21cc      	movs	r1, #204	@ 0xcc
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 fa19 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004c0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c0e:	4a93      	ldr	r2, [pc, #588]	@ (8004e5c <OTM8009A_Init+0x700>)
 8004c10:	4619      	mov	r1, r3
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 fa12 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004c18:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004c1c:	4a90      	ldr	r2, [pc, #576]	@ (8004e60 <OTM8009A_Init+0x704>)
 8004c1e:	21cc      	movs	r1, #204	@ 0xcc
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 fa0b 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004c28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c2a:	4a8e      	ldr	r2, [pc, #568]	@ (8004e64 <OTM8009A_Init+0x708>)
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 fa04 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004c34:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004c38:	4a8b      	ldr	r2, [pc, #556]	@ (8004e68 <OTM8009A_Init+0x70c>)
 8004c3a:	21cc      	movs	r1, #204	@ 0xcc
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 f9fd 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004c44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c46:	4a89      	ldr	r2, [pc, #548]	@ (8004e6c <OTM8009A_Init+0x710>)
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f000 f9f6 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004c50:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004c54:	4a86      	ldr	r2, [pc, #536]	@ (8004e70 <OTM8009A_Init+0x714>)
 8004c56:	21cc      	movs	r1, #204	@ 0xcc
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f000 f9ef 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c5e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004c60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c62:	4a84      	ldr	r2, [pc, #528]	@ (8004e74 <OTM8009A_Init+0x718>)
 8004c64:	4619      	mov	r1, r3
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 f9e8 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004c6c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004c70:	4a81      	ldr	r2, [pc, #516]	@ (8004e78 <OTM8009A_Init+0x71c>)
 8004c72:	21cc      	movs	r1, #204	@ 0xcc
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f9e1 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004c7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c7e:	4a7f      	ldr	r2, [pc, #508]	@ (8004e7c <OTM8009A_Init+0x720>)
 8004c80:	4619      	mov	r1, r3
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 f9da 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004c88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004c8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004c8c:	4a7c      	ldr	r2, [pc, #496]	@ (8004e80 <OTM8009A_Init+0x724>)
 8004c8e:	21c5      	movs	r1, #197	@ 0xc5
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 f9d3 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004c96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004c98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004c9a:	4a7a      	ldr	r2, [pc, #488]	@ (8004e84 <OTM8009A_Init+0x728>)
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 f9cc 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004ca4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004ca6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004ca8:	4a77      	ldr	r2, [pc, #476]	@ (8004e88 <OTM8009A_Init+0x72c>)
 8004caa:	21f5      	movs	r1, #245	@ 0xf5
 8004cac:	4628      	mov	r0, r5
 8004cae:	f000 f9c5 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004cb2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004cb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004cb6:	4a75      	ldr	r2, [pc, #468]	@ (8004e8c <OTM8009A_Init+0x730>)
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 f9be 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004cc0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004cc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004cc4:	4a72      	ldr	r2, [pc, #456]	@ (8004e90 <OTM8009A_Init+0x734>)
 8004cc6:	21c6      	movs	r1, #198	@ 0xc6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 f9b7 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004cd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cd2:	4a70      	ldr	r2, [pc, #448]	@ (8004e94 <OTM8009A_Init+0x738>)
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f9b0 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004cdc:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004ce0:	4a6d      	ldr	r2, [pc, #436]	@ (8004e98 <OTM8009A_Init+0x73c>)
 8004ce2:	21ff      	movs	r1, #255	@ 0xff
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 f9a9 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004cec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cee:	4a69      	ldr	r2, [pc, #420]	@ (8004e94 <OTM8009A_Init+0x738>)
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 f9a2 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cf8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cfa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cfc:	4a65      	ldr	r2, [pc, #404]	@ (8004e94 <OTM8009A_Init+0x738>)
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 f99b 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004d06:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004d0a:	4a64      	ldr	r2, [pc, #400]	@ (8004e9c <OTM8009A_Init+0x740>)
 8004d0c:	21e1      	movs	r1, #225	@ 0xe1
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 f994 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004d16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d18:	4a5e      	ldr	r2, [pc, #376]	@ (8004e94 <OTM8009A_Init+0x738>)
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 f98d 	bl	800503c <otm8009a_write_reg>
 8004d22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004d24:	2310      	movs	r3, #16
 8004d26:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea0 <OTM8009A_Init+0x744>)
 8004d28:	21e2      	movs	r1, #226	@ 0xe2
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 f986 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004d30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004d32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004d34:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea4 <OTM8009A_Init+0x748>)
 8004d36:	2111      	movs	r1, #17
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f000 f97f 	bl	800503c <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004d3e:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004d40:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004d42:	4798      	blx	r3
 8004d44:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004d46:	68f3      	ldr	r3, [r6, #12]
 8004d48:	4798      	blx	r3
 8004d4a:	eba0 0009 	sub.w	r0, r0, r9
 8004d4e:	2877      	cmp	r0, #119	@ 0x77
 8004d50:	d9f9      	bls.n	8004d46 <OTM8009A_Init+0x5ea>
  switch(ColorCoding)
 8004d52:	2f00      	cmp	r7, #0
 8004d54:	d06f      	beq.n	8004e36 <OTM8009A_Init+0x6da>
 8004d56:	2f02      	cmp	r7, #2
 8004d58:	d14c      	bne.n	8004df4 <OTM8009A_Init+0x698>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4a52      	ldr	r2, [pc, #328]	@ (8004ea8 <OTM8009A_Init+0x74c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004d5e:	213a      	movs	r1, #58	@ 0x3a
 8004d60:	4628      	mov	r0, r5
 8004d62:	f000 f96b 	bl	800503c <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004d66:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 8004ed0 <OTM8009A_Init+0x774>
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004d6a:	f1b8 0f01 	cmp.w	r8, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004d6e:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004d70:	f8c9 7004 	str.w	r7, [r9, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004d74:	d043      	beq.n	8004dfe <OTM8009A_Init+0x6a2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f8c9 3000 	str.w	r3, [r9]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4a4b      	ldr	r2, [pc, #300]	@ (8004eac <OTM8009A_Init+0x750>)
 8004d80:	2151      	movs	r1, #81	@ 0x51
 8004d82:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004d84:	461e      	mov	r6, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004d86:	f000 f959 	bl	800503c <otm8009a_write_reg>
 8004d8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004d8c:	4a48      	ldr	r2, [pc, #288]	@ (8004eb0 <OTM8009A_Init+0x754>)
 8004d8e:	4633      	mov	r3, r6
 8004d90:	2153      	movs	r1, #83	@ 0x53
 8004d92:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004d94:	f8c9 6008 	str.w	r6, [r9, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004d98:	f000 f950 	bl	800503c <otm8009a_write_reg>
 8004d9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004d9e:	4633      	mov	r3, r6
 8004da0:	4a44      	ldr	r2, [pc, #272]	@ (8004eb4 <OTM8009A_Init+0x758>)
 8004da2:	2155      	movs	r1, #85	@ 0x55
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 f949 	bl	800503c <otm8009a_write_reg>
 8004daa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004dac:	4633      	mov	r3, r6
 8004dae:	4a42      	ldr	r2, [pc, #264]	@ (8004eb8 <OTM8009A_Init+0x75c>)
 8004db0:	215e      	movs	r1, #94	@ 0x5e
 8004db2:	4628      	mov	r0, r5
 8004db4:	f000 f942 	bl	800503c <otm8009a_write_reg>
 8004db8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004dba:	4633      	mov	r3, r6
 8004dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8004ebc <OTM8009A_Init+0x760>)
 8004dbe:	2129      	movs	r1, #41	@ 0x29
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f000 f93b 	bl	800503c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004dc6:	4633      	mov	r3, r6
 8004dc8:	4631      	mov	r1, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004dca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004dcc:	4a31      	ldr	r2, [pc, #196]	@ (8004e94 <OTM8009A_Init+0x738>)
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f934 	bl	800503c <otm8009a_write_reg>
 8004dd4:	4601      	mov	r1, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004dd6:	4633      	mov	r3, r6
 8004dd8:	4a39      	ldr	r2, [pc, #228]	@ (8004ec0 <OTM8009A_Init+0x764>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004dda:	440c      	add	r4, r1
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004ddc:	4628      	mov	r0, r5
 8004dde:	212c      	movs	r1, #44	@ 0x2c
 8004de0:	f000 f92c 	bl	800503c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8004de4:	42c4      	cmn	r4, r0
}
 8004de6:	bf14      	ite	ne
 8004de8:	f04f 30ff 	movne.w	r0, #4294967295
 8004dec:	4630      	moveq	r0, r6
 8004dee:	b003      	add	sp, #12
 8004df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004df4:	f1b8 0f01 	cmp.w	r8, #1
 8004df8:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 8004ed0 <OTM8009A_Init+0x774>
 8004dfc:	d1bb      	bne.n	8004d76 <OTM8009A_Init+0x61a>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004dfe:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004e00:	f10d 0207 	add.w	r2, sp, #7
 8004e04:	2136      	movs	r1, #54	@ 0x36
 8004e06:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004e08:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f000 f915 	bl	800503c <otm8009a_write_reg>
 8004e12:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004e14:	2304      	movs	r3, #4
 8004e16:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <OTM8009A_Init+0x768>)
 8004e18:	212a      	movs	r1, #42	@ 0x2a
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 f90e 	bl	800503c <otm8009a_write_reg>
 8004e20:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004e22:	2304      	movs	r3, #4
 8004e24:	4a28      	ldr	r2, [pc, #160]	@ (8004ec8 <OTM8009A_Init+0x76c>)
 8004e26:	212b      	movs	r1, #43	@ 0x2b
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 f907 	bl	800503c <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004e2e:	f8c9 8000 	str.w	r8, [r9]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004e32:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004e34:	e7a2      	b.n	8004d7c <OTM8009A_Init+0x620>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004e36:	463b      	mov	r3, r7
 8004e38:	4a24      	ldr	r2, [pc, #144]	@ (8004ecc <OTM8009A_Init+0x770>)
 8004e3a:	e790      	b.n	8004d5e <OTM8009A_Init+0x602>
 8004e3c:	08049542 	.word	0x08049542
 8004e40:	08049478 	.word	0x08049478
 8004e44:	08049543 	.word	0x08049543
 8004e48:	0804946c 	.word	0x0804946c
 8004e4c:	08049522 	.word	0x08049522
 8004e50:	08049460 	.word	0x08049460
 8004e54:	08049541 	.word	0x08049541
 8004e58:	08049450 	.word	0x08049450
 8004e5c:	0804953d 	.word	0x0804953d
 8004e60:	08049440 	.word	0x08049440
 8004e64:	0804953e 	.word	0x0804953e
 8004e68:	08049434 	.word	0x08049434
 8004e6c:	0804953f 	.word	0x0804953f
 8004e70:	08049424 	.word	0x08049424
 8004e74:	08049540 	.word	0x08049540
 8004e78:	08049414 	.word	0x08049414
 8004e7c:	0804952d 	.word	0x0804952d
 8004e80:	0804954e 	.word	0x0804954e
 8004e84:	0804954f 	.word	0x0804954f
 8004e88:	08049550 	.word	0x08049550
 8004e8c:	08049551 	.word	0x08049551
 8004e90:	08049552 	.word	0x08049552
 8004e94:	08049521 	.word	0x08049521
 8004e98:	08049410 	.word	0x08049410
 8004e9c:	08049400 	.word	0x08049400
 8004ea0:	080493f0 	.word	0x080493f0
 8004ea4:	08049544 	.word	0x08049544
 8004ea8:	08049545 	.word	0x08049545
 8004eac:	08049547 	.word	0x08049547
 8004eb0:	08049548 	.word	0x08049548
 8004eb4:	08049549 	.word	0x08049549
 8004eb8:	0804954a 	.word	0x0804954a
 8004ebc:	0804954b 	.word	0x0804954b
 8004ec0:	0804954c 	.word	0x0804954c
 8004ec4:	08049558 	.word	0x08049558
 8004ec8:	08049554 	.word	0x08049554
 8004ecc:	08049546 	.word	0x08049546
 8004ed0:	24014c7c 	.word	0x24014c7c

08004ed4 <OTM8009A_SetBrightness>:
{
 8004ed4:	b530      	push	{r4, r5, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004ed6:	ebc1 2c01 	rsb	ip, r1, r1, lsl #8
 8004eda:	4d0c      	ldr	r5, [pc, #48]	@ (8004f0c <OTM8009A_SetBrightness+0x38>)
{
 8004edc:	b083      	sub	sp, #12
 8004ede:	460c      	mov	r4, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004ee0:	fba5 5c0c 	umull	r5, ip, r5, ip
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f10d 0207 	add.w	r2, sp, #7
 8004eea:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004eec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004ef0:	2151      	movs	r1, #81	@ 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004ef2:	f88d c007 	strb.w	ip, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004ef6:	f000 f8a1 	bl	800503c <otm8009a_write_reg>
 8004efa:	b918      	cbnz	r0, 8004f04 <OTM8009A_SetBrightness+0x30>
    OTM8009ACtx.Brightness = Brightness;
 8004efc:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <OTM8009A_SetBrightness+0x3c>)
 8004efe:	609c      	str	r4, [r3, #8]
}
 8004f00:	b003      	add	sp, #12
 8004f02:	bd30      	pop	{r4, r5, pc}
    ret = OTM8009A_ERROR;
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004f08:	e7fa      	b.n	8004f00 <OTM8009A_SetBrightness+0x2c>
 8004f0a:	bf00      	nop
 8004f0c:	51eb851f 	.word	0x51eb851f
 8004f10:	24014c7c 	.word	0x24014c7c

08004f14 <OTM8009A_DisplayOn>:
{
 8004f14:	b500      	push	{lr}
 8004f16:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004f18:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004f1a:	2129      	movs	r1, #41	@ 0x29
 8004f1c:	3010      	adds	r0, #16
 8004f1e:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004f22:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004f26:	f000 f889 	bl	800503c <otm8009a_write_reg>
 8004f2a:	3800      	subs	r0, #0
 8004f2c:	bf18      	it	ne
 8004f2e:	2001      	movne	r0, #1
}
 8004f30:	4240      	negs	r0, r0
 8004f32:	b003      	add	sp, #12
 8004f34:	f85d fb04 	ldr.w	pc, [sp], #4

08004f38 <OTM8009A_DisplayOff>:
{
 8004f38:	b500      	push	{lr}
 8004f3a:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004f3c:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004f3e:	2128      	movs	r1, #40	@ 0x28
 8004f40:	3010      	adds	r0, #16
 8004f42:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004f46:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004f4a:	f000 f877 	bl	800503c <otm8009a_write_reg>
 8004f4e:	3800      	subs	r0, #0
 8004f50:	bf18      	it	ne
 8004f52:	2001      	movne	r0, #1
}
 8004f54:	4240      	negs	r0, r0
 8004f56:	b003      	add	sp, #12
 8004f58:	f85d fb04 	ldr.w	pc, [sp], #4

08004f5c <OTM8009A_SetOrientation>:
{
 8004f5c:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004f5e:	2260      	movs	r2, #96	@ 0x60
{
 8004f60:	b082      	sub	sp, #8
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004f62:	2300      	movs	r3, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004f64:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004f66:	f88d 2006 	strb.w	r2, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004f6a:	f88d 3007 	strb.w	r3, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004f6e:	d826      	bhi.n	8004fbe <OTM8009A_SetOrientation+0x62>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004f70:	f100 0610 	add.w	r6, r0, #16
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004f74:	d01e      	beq.n	8004fb4 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004f76:	f10d 0207 	add.w	r2, sp, #7
 8004f7a:	2136      	movs	r1, #54	@ 0x36
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004f7c:	461d      	mov	r5, r3
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f000 f85c 	bl	800503c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004f84:	2304      	movs	r3, #4
 8004f86:	4a0f      	ldr	r2, [pc, #60]	@ (8004fc4 <OTM8009A_SetOrientation+0x68>)
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004f88:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004f8a:	212a      	movs	r1, #42	@ 0x2a
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f000 f855 	bl	800503c <otm8009a_write_reg>
 8004f92:	4602      	mov	r2, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004f94:	2304      	movs	r3, #4
 8004f96:	4630      	mov	r0, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004f98:	4414      	add	r4, r2
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004f9a:	212b      	movs	r1, #43	@ 0x2b
 8004f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc8 <OTM8009A_SetOrientation+0x6c>)
 8004f9e:	f000 f84d 	bl	800503c <otm8009a_write_reg>
 8004fa2:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004fa4:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <OTM8009A_SetOrientation+0x70>)
  if(ret != OTM8009A_OK)
 8004fa6:	3800      	subs	r0, #0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004fa8:	601d      	str	r5, [r3, #0]
  if(ret != OTM8009A_OK)
 8004faa:	bf18      	it	ne
 8004fac:	2001      	movne	r0, #1
 8004fae:	4240      	negs	r0, r0
}
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004fb4:	460d      	mov	r5, r1
 8004fb6:	f10d 0206 	add.w	r2, sp, #6
 8004fba:	2136      	movs	r1, #54	@ 0x36
 8004fbc:	e7df      	b.n	8004f7e <OTM8009A_SetOrientation+0x22>
    ret = OTM8009A_ERROR;
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004fc2:	e7f5      	b.n	8004fb0 <OTM8009A_SetOrientation+0x54>
 8004fc4:	08049558 	.word	0x08049558
 8004fc8:	08049554 	.word	0x08049554
 8004fcc:	24014c7c 	.word	0x24014c7c

08004fd0 <OTM8009A_ReadID>:
{ 
 8004fd0:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 1)!= OTM8009A_OK)
 8004fd2:	3010      	adds	r0, #16
 8004fd4:	21da      	movs	r1, #218	@ 0xda
{ 
 8004fd6:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 1)!= OTM8009A_OK)
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f000 f827 	bl	800502c <otm8009a_read_reg>
 8004fde:	3800      	subs	r0, #0
 8004fe0:	bf18      	it	ne
 8004fe2:	2001      	movne	r0, #1
}  
 8004fe4:	4240      	negs	r0, r0
 8004fe6:	bd08      	pop	{r3, pc}

08004fe8 <OTM8009A_DrawVLine>:
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop

08004ff0 <OTM8009A_GetPixel>:
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop

08004ff8 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8004ff8:	b180      	cbz	r0, 800501c <OTM8009A_RegisterBusIO+0x24>
 8004ffa:	4603      	mov	r3, r0
{
 8004ffc:	b410      	push	{r4}
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004ffe:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 8005002:	68c8      	ldr	r0, [r1, #12]
 8005004:	605a      	str	r2, [r3, #4]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005006:	4907      	ldr	r1, [pc, #28]	@ (8005024 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005008:	4a07      	ldr	r2, [pc, #28]	@ (8005028 <OTM8009A_RegisterBusIO+0x30>)
    pObj->Ctx.handle   = pObj;
 800500a:	619b      	str	r3, [r3, #24]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800500c:	e9c3 4002 	strd	r4, r0, [r3, #8]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005010:	e9c3 2104 	strd	r2, r1, [r3, #16]
  int32_t ret = OTM8009A_OK;
 8005014:	2000      	movs	r0, #0
}
 8005016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800501a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800501c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	0800473d 	.word	0x0800473d
 8005028:	0800474d 	.word	0x0800474d

0800502c <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800502c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800502e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005032:	46a4      	mov	ip, r4
}
 8005034:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005038:	4760      	bx	ip
 800503a:	bf00      	nop

0800503c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800503c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800503e:	6804      	ldr	r4, [r0, #0]
 8005040:	6880      	ldr	r0, [r0, #8]
 8005042:	46a4      	mov	ip, r4
}
 8005044:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005048:	4760      	bx	ip
 800504a:	bf00      	nop

0800504c <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 800504c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8005050:	2b01      	cmp	r3, #1
 8005052:	d102      	bne.n	800505a <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  }

  return OV5640_OK;
}
 800505a:	2000      	movs	r0, #0
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop

08005060 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8005068:	b160      	cbz	r0, 8005084 <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 800506a:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 800506c:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 800506e:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8005070:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8005072:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_Resolution    = 1;
 8005074:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8005076:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8005078:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 1;
 800507a:	e9c1 3305 	strd	r3, r3, [r1, #20]
    Capabilities->Config_Zoom          = 1;
 800507e:	e9c1 3308 	strd	r3, r3, [r1, #32]
    ret = OV5640_OK;
 8005082:	4770      	bx	lr
    ret = OV5640_ERROR;
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop

0800508c <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800508c:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800508e:	6904      	ldr	r4, [r0, #16]
 8005090:	8900      	ldrh	r0, [r0, #8]
 8005092:	46a4      	mov	ip, r4
}
 8005094:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005098:	4760      	bx	ip
 800509a:	bf00      	nop

0800509c <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800509c:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800509e:	68c4      	ldr	r4, [r0, #12]
 80050a0:	8900      	ldrh	r0, [r0, #8]
 80050a2:	46a4      	mov	ip, r4
}
 80050a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80050a8:	4760      	bx	ip
 80050aa:	bf00      	nop

080050ac <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 80050ac:	2904      	cmp	r1, #4
 80050ae:	f200 80b3 	bhi.w	8005218 <OV5640_SetResolution+0x16c>
    switch (Resolution)
 80050b2:	3901      	subs	r1, #1
{
 80050b4:	b530      	push	{r4, r5, lr}
 80050b6:	b083      	sub	sp, #12
    switch (Resolution)
 80050b8:	2903      	cmp	r1, #3
 80050ba:	f200 80b0 	bhi.w	800521e <OV5640_SetResolution+0x172>
 80050be:	e8df f001 	tbb	[pc, r1]
 80050c2:	5016      	.short	0x5016
 80050c4:	027b      	.short	0x027b
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80050c6:	2103      	movs	r1, #3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80050c8:	f100 0418 	add.w	r4, r0, #24
 80050cc:	2301      	movs	r3, #1
 80050ce:	f10d 0207 	add.w	r2, sp, #7
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80050d2:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80050d6:	4620      	mov	r0, r4
 80050d8:	f643 0108 	movw	r1, #14344	@ 0x3808
 80050dc:	f001 f976 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f000 8097 	beq.w	8005214 <OV5640_SetResolution+0x168>
{
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80050ea:	b003      	add	sp, #12
 80050ec:	bd30      	pop	{r4, r5, pc}
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80050ee:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80050f0:	f100 0418 	add.w	r4, r0, #24
 80050f4:	f10d 0207 	add.w	r2, sp, #7
 80050f8:	f643 0108 	movw	r1, #14344	@ 0x3808
 80050fc:	462b      	mov	r3, r5
 80050fe:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8005100:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8005104:	f001 f962 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005108:	2800      	cmp	r0, #0
 800510a:	d1ec      	bne.n	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800510c:	2240      	movs	r2, #64	@ 0x40
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800510e:	462b      	mov	r3, r5
 8005110:	f643 0109 	movw	r1, #14345	@ 0x3809
 8005114:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8005116:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800511a:	f10d 0207 	add.w	r2, sp, #7
 800511e:	f001 f955 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005122:	2800      	cmp	r0, #0
 8005124:	d1df      	bne.n	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8005126:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800512a:	462b      	mov	r3, r5
 800512c:	f10d 0207 	add.w	r2, sp, #7
 8005130:	f643 010a 	movw	r1, #14346	@ 0x380a
 8005134:	4620      	mov	r0, r4
 8005136:	f001 f949 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800513a:	2800      	cmp	r0, #0
 800513c:	d1d3      	bne.n	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800513e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8005142:	462b      	mov	r3, r5
 8005144:	f10d 0207 	add.w	r2, sp, #7
 8005148:	f643 010b 	movw	r1, #14347	@ 0x380b
 800514c:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800514e:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8005152:	f001 f93b 	bl	80063cc <ov5640_write_reg>
 8005156:	3800      	subs	r0, #0
 8005158:	bf18      	it	ne
 800515a:	2001      	movne	r0, #1
 800515c:	4240      	negs	r0, r0
}
 800515e:	b003      	add	sp, #12
 8005160:	bd30      	pop	{r4, r5, pc}
            tmp = (uint8_t)OV5640_480x272[index][1];
 8005162:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8005164:	f100 0418 	add.w	r4, r0, #24
 8005168:	f10d 0207 	add.w	r2, sp, #7
 800516c:	f643 0108 	movw	r1, #14344	@ 0x3808
 8005170:	462b      	mov	r3, r5
 8005172:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 8005174:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8005178:	f001 f928 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800517c:	2800      	cmp	r0, #0
 800517e:	d1b2      	bne.n	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_480x272[index][1];
 8005180:	22e0      	movs	r2, #224	@ 0xe0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8005182:	462b      	mov	r3, r5
 8005184:	f643 0109 	movw	r1, #14345	@ 0x3809
 8005188:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 800518a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 800518e:	f10d 0207 	add.w	r2, sp, #7
 8005192:	f001 f91b 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005196:	2800      	cmp	r0, #0
 8005198:	d1a5      	bne.n	80050e6 <OV5640_SetResolution+0x3a>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 800519a:	462b      	mov	r3, r5
 800519c:	f10d 0207 	add.w	r2, sp, #7
 80051a0:	f643 010a 	movw	r1, #14346	@ 0x380a
 80051a4:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 80051a6:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80051aa:	f001 f90f 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d199      	bne.n	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_480x272[index][1];
 80051b2:	f04f 0c10 	mov.w	ip, #16
 80051b6:	e7c4      	b.n	8005142 <OV5640_SetResolution+0x96>
            tmp = (uint8_t)OV5640_VGA[index][1];
 80051b8:	2102      	movs	r1, #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80051ba:	f100 0418 	add.w	r4, r0, #24
 80051be:	2301      	movs	r3, #1
 80051c0:	f10d 0207 	add.w	r2, sp, #7
            tmp = (uint8_t)OV5640_VGA[index][1];
 80051c4:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80051c8:	4620      	mov	r0, r4
 80051ca:	f643 0108 	movw	r1, #14344	@ 0x3808
 80051ce:	f001 f8fd 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d187      	bne.n	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_VGA[index][1];
 80051d6:	2180      	movs	r1, #128	@ 0x80
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80051d8:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80051dc:	2301      	movs	r3, #1
 80051de:	f10d 0207 	add.w	r2, sp, #7
 80051e2:	f643 0109 	movw	r1, #14345	@ 0x3809
 80051e6:	4620      	mov	r0, r4
 80051e8:	f001 f8f0 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80051ec:	2800      	cmp	r0, #0
 80051ee:	f47f af7a 	bne.w	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80051f2:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80051f4:	f10d 0207 	add.w	r2, sp, #7
 80051f8:	f643 010a 	movw	r1, #14346	@ 0x380a
 80051fc:	4620      	mov	r0, r4
 80051fe:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8005200:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8005204:	f001 f8e2 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005208:	2800      	cmp	r0, #0
 800520a:	f47f af6c 	bne.w	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800520e:	f04f 0ce0 	mov.w	ip, #224	@ 0xe0
 8005212:	e796      	b.n	8005142 <OV5640_SetResolution+0x96>
 8005214:	2120      	movs	r1, #32
 8005216:	e7df      	b.n	80051d8 <OV5640_SetResolution+0x12c>
    ret = OV5640_ERROR;
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
}
 800521c:	4770      	bx	lr
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800521e:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8005220:	f100 0418 	add.w	r4, r0, #24
 8005224:	2301      	movs	r3, #1
 8005226:	f10d 0207 	add.w	r2, sp, #7
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800522a:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800522e:	4620      	mov	r0, r4
 8005230:	f643 0108 	movw	r1, #14344	@ 0x3808
 8005234:	f001 f8ca 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005238:	2800      	cmp	r0, #0
 800523a:	f47f af54 	bne.w	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800523e:	21a0      	movs	r1, #160	@ 0xa0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8005240:	2301      	movs	r3, #1
 8005242:	f10d 0207 	add.w	r2, sp, #7
 8005246:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8005248:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800524c:	f643 0109 	movw	r1, #14345	@ 0x3809
 8005250:	f001 f8bc 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005254:	2800      	cmp	r0, #0
 8005256:	f47f af46 	bne.w	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800525a:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800525e:	2301      	movs	r3, #1
 8005260:	f10d 0207 	add.w	r2, sp, #7
 8005264:	f643 010a 	movw	r1, #14346	@ 0x380a
 8005268:	4620      	mov	r0, r4
 800526a:	f001 f8af 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800526e:	2800      	cmp	r0, #0
 8005270:	f47f af39 	bne.w	80050e6 <OV5640_SetResolution+0x3a>
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8005274:	2578      	movs	r5, #120	@ 0x78
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8005276:	2301      	movs	r3, #1
 8005278:	f10d 0207 	add.w	r2, sp, #7
 800527c:	f643 010b 	movw	r1, #14347	@ 0x380b
 8005280:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8005282:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8005286:	f001 f8a1 	bl	80063cc <ov5640_write_reg>
 800528a:	3800      	subs	r0, #0
 800528c:	bf18      	it	ne
 800528e:	2001      	movne	r0, #1
 8005290:	4240      	negs	r0, r0
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8005292:	e72a      	b.n	80050ea <OV5640_SetResolution+0x3e>

08005294 <OV5640_SetLightMode>:
{
 8005294:	b570      	push	{r4, r5, r6, lr}
  tmp = 0x00;
 8005296:	2200      	movs	r2, #0
{
 8005298:	b082      	sub	sp, #8
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800529a:	f100 0418 	add.w	r4, r0, #24
{
 800529e:	460d      	mov	r5, r1
  tmp = 0x00;
 80052a0:	f88d 2007 	strb.w	r2, [sp, #7]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80052a4:	2301      	movs	r3, #1
 80052a6:	f10d 0207 	add.w	r2, sp, #7
 80052aa:	f243 4106 	movw	r1, #13318	@ 0x3406
 80052ae:	4620      	mov	r0, r4
 80052b0:	f001 f88c 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 80052b4:	b108      	cbz	r0, 80052ba <OV5640_SetLightMode+0x26>
}
 80052b6:	b002      	add	sp, #8
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
    tmp = 0x46;
 80052ba:	2246      	movs	r2, #70	@ 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 80052bc:	2301      	movs	r3, #1
 80052be:	f245 1190 	movw	r1, #20880	@ 0x5190
 80052c2:	4620      	mov	r0, r4
    tmp = 0x46;
 80052c4:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 80052c8:	f10d 0207 	add.w	r2, sp, #7
 80052cc:	f001 f87e 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d1f0      	bne.n	80052b6 <OV5640_SetLightMode+0x22>
    tmp = 0xF8;
 80052d4:	22f8      	movs	r2, #248	@ 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80052d6:	2301      	movs	r3, #1
 80052d8:	f245 1191 	movw	r1, #20881	@ 0x5191
 80052dc:	4620      	mov	r0, r4
    tmp = 0xF8;
 80052de:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80052e2:	f10d 0207 	add.w	r2, sp, #7
 80052e6:	f001 f871 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d1e3      	bne.n	80052b6 <OV5640_SetLightMode+0x22>
    tmp = 0x04;
 80052ee:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80052f0:	2301      	movs	r3, #1
 80052f2:	f245 1192 	movw	r1, #20882	@ 0x5192
 80052f6:	4620      	mov	r0, r4
    tmp = 0x04;
 80052f8:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80052fc:	f10d 0207 	add.w	r2, sp, #7
 8005300:	f001 f864 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005304:	2800      	cmp	r0, #0
 8005306:	d1d6      	bne.n	80052b6 <OV5640_SetLightMode+0x22>
    switch (LightMode)
 8005308:	1e69      	subs	r1, r5, #1
 800530a:	2907      	cmp	r1, #7
 800530c:	d809      	bhi.n	8005322 <OV5640_SetLightMode+0x8e>
 800530e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005312:	011e      	.short	0x011e
 8005314:	000800ca 	.word	0x000800ca
 8005318:	0008016d 	.word	0x0008016d
 800531c:	00080008 	.word	0x00080008
 8005320:	0068      	.short	0x0068
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8005322:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005324:	2301      	movs	r3, #1
 8005326:	f10d 0207 	add.w	r2, sp, #7
 800532a:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 800532c:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005330:	f243 4106 	movw	r1, #13318	@ 0x3406
 8005334:	f001 f84a 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005338:	2800      	cmp	r0, #0
 800533a:	f040 819f 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 800533e:	2504      	movs	r5, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005340:	2301      	movs	r3, #1
 8005342:	f10d 0207 	add.w	r2, sp, #7
 8005346:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 800534a:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 800534c:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005350:	f001 f83c 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005354:	2800      	cmp	r0, #0
 8005356:	f040 8191 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 800535a:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 800535e:	2301      	movs	r3, #1
 8005360:	f10d 0207 	add.w	r2, sp, #7
 8005364:	f243 4101 	movw	r1, #13313	@ 0x3401
 8005368:	4620      	mov	r0, r4
 800536a:	f001 f82f 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800536e:	2800      	cmp	r0, #0
 8005370:	f040 8184 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005374:	2301      	movs	r3, #1
 8005376:	f10d 0207 	add.w	r2, sp, #7
 800537a:	f243 4102 	movw	r1, #13314	@ 0x3402
 800537e:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8005380:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005384:	f001 f822 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005388:	2800      	cmp	r0, #0
 800538a:	f040 8177 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 800538e:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005392:	2301      	movs	r3, #1
 8005394:	f10d 0207 	add.w	r2, sp, #7
 8005398:	f243 4103 	movw	r1, #13315	@ 0x3403
 800539c:	4620      	mov	r0, r4
 800539e:	f001 f815 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80053a2:	2800      	cmp	r0, #0
 80053a4:	f040 816a 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80053a8:	2301      	movs	r3, #1
 80053aa:	f10d 0207 	add.w	r2, sp, #7
 80053ae:	f243 4104 	movw	r1, #13316	@ 0x3404
 80053b2:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80053b4:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80053b8:	f001 f808 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80053bc:	4605      	mov	r5, r0
 80053be:	2800      	cmp	r0, #0
 80053c0:	f040 815c 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80053c4:	2301      	movs	r3, #1
 80053c6:	f10d 0207 	add.w	r2, sp, #7
 80053ca:	f243 4105 	movw	r1, #13317	@ 0x3405
 80053ce:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80053d0:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80053d4:	f000 fffa 	bl	80063cc <ov5640_write_reg>
 80053d8:	3800      	subs	r0, #0
 80053da:	bf18      	it	ne
 80053dc:	2001      	movne	r0, #1
 80053de:	4240      	negs	r0, r0
  return ret;
 80053e0:	e769      	b.n	80052b6 <OV5640_SetLightMode+0x22>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80053e2:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80053e4:	f10d 0207 	add.w	r2, sp, #7
 80053e8:	f243 4106 	movw	r1, #13318	@ 0x3406
 80053ec:	4620      	mov	r0, r4
 80053ee:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80053f0:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80053f4:	f000 ffea 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f040 813f 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80053fe:	2206      	movs	r2, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8005400:	462b      	mov	r3, r5
 8005402:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8005406:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8005408:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800540c:	f10d 0207 	add.w	r2, sp, #7
 8005410:	f000 ffdc 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005414:	2800      	cmp	r0, #0
 8005416:	f040 8131 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800541a:	2248      	movs	r2, #72	@ 0x48
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800541c:	462b      	mov	r3, r5
 800541e:	f243 4101 	movw	r1, #13313	@ 0x3401
 8005422:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8005424:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8005428:	f10d 0207 	add.w	r2, sp, #7
 800542c:	f000 ffce 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005430:	2800      	cmp	r0, #0
 8005432:	f040 8123 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8005436:	2604      	movs	r6, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8005438:	462b      	mov	r3, r5
 800543a:	f10d 0207 	add.w	r2, sp, #7
 800543e:	f243 4102 	movw	r1, #13314	@ 0x3402
 8005442:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8005444:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8005448:	f000 ffc0 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800544c:	2800      	cmp	r0, #0
 800544e:	f040 8115 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8005452:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8005456:	462b      	mov	r3, r5
 8005458:	f10d 0207 	add.w	r2, sp, #7
 800545c:	f243 4103 	movw	r1, #13315	@ 0x3403
 8005460:	4620      	mov	r0, r4
 8005462:	f000 ffb3 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005466:	2800      	cmp	r0, #0
 8005468:	f040 8108 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800546c:	462b      	mov	r3, r5
 800546e:	f10d 0207 	add.w	r2, sp, #7
 8005472:	f243 4104 	movw	r1, #13316	@ 0x3404
 8005476:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8005478:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800547c:	f000 ffa6 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005480:	2800      	cmp	r0, #0
 8005482:	f040 80fb 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8005486:	26d3      	movs	r6, #211	@ 0xd3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8005488:	462b      	mov	r3, r5
 800548a:	f10d 0207 	add.w	r2, sp, #7
 800548e:	f243 4105 	movw	r1, #13317	@ 0x3405
 8005492:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8005494:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8005498:	f000 ff98 	bl	80063cc <ov5640_write_reg>
 800549c:	3800      	subs	r0, #0
 800549e:	bf18      	it	ne
 80054a0:	2001      	movne	r0, #1
 80054a2:	4240      	negs	r0, r0
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80054a4:	e707      	b.n	80052b6 <OV5640_SetLightMode+0x22>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80054a6:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80054a8:	f10d 0207 	add.w	r2, sp, #7
 80054ac:	f243 4106 	movw	r1, #13318	@ 0x3406
 80054b0:	4620      	mov	r0, r4
 80054b2:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80054b4:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80054b8:	f000 ff88 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80054bc:	2800      	cmp	r0, #0
 80054be:	f040 80dd 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80054c2:	2205      	movs	r2, #5
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80054c4:	462b      	mov	r3, r5
 80054c6:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 80054ca:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80054cc:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80054d0:	f10d 0207 	add.w	r2, sp, #7
 80054d4:	f000 ff7a 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80054d8:	2800      	cmp	r0, #0
 80054da:	f040 80cf 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80054de:	2248      	movs	r2, #72	@ 0x48
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80054e0:	462b      	mov	r3, r5
 80054e2:	f243 4101 	movw	r1, #13313	@ 0x3401
 80054e6:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80054e8:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80054ec:	f10d 0207 	add.w	r2, sp, #7
 80054f0:	f000 ff6c 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f040 80c1 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80054fa:	2204      	movs	r2, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80054fc:	462b      	mov	r3, r5
 80054fe:	f243 4102 	movw	r1, #13314	@ 0x3402
 8005502:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8005504:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8005508:	f10d 0207 	add.w	r2, sp, #7
 800550c:	f000 ff5e 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005510:	2800      	cmp	r0, #0
 8005512:	f040 80b3 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8005516:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800551a:	462b      	mov	r3, r5
 800551c:	f10d 0207 	add.w	r2, sp, #7
 8005520:	f243 4103 	movw	r1, #13315	@ 0x3403
 8005524:	4620      	mov	r0, r4
 8005526:	f000 ff51 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800552a:	2800      	cmp	r0, #0
 800552c:	f040 80a6 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8005530:	2207      	movs	r2, #7
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8005532:	462b      	mov	r3, r5
 8005534:	f243 4104 	movw	r1, #13316	@ 0x3404
 8005538:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 800553a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800553e:	446a      	add	r2, sp
 8005540:	f000 ff44 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005544:	2800      	cmp	r0, #0
 8005546:	f040 8099 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 800554a:	26cf      	movs	r6, #207	@ 0xcf
 800554c:	e79c      	b.n	8005488 <OV5640_SetLightMode+0x1f4>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800554e:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8005550:	f10d 0207 	add.w	r2, sp, #7
 8005554:	f243 4106 	movw	r1, #13318	@ 0x3406
 8005558:	4620      	mov	r0, r4
 800555a:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800555c:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8005560:	f000 ff34 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005564:	2800      	cmp	r0, #0
 8005566:	f040 8089 	bne.w	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800556a:	2206      	movs	r2, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800556c:	462b      	mov	r3, r5
 800556e:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8005572:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8005574:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8005578:	f10d 0207 	add.w	r2, sp, #7
 800557c:	f000 ff26 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005580:	2800      	cmp	r0, #0
 8005582:	d17b      	bne.n	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8005584:	221c      	movs	r2, #28
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8005586:	462b      	mov	r3, r5
 8005588:	f243 4101 	movw	r1, #13313	@ 0x3401
 800558c:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800558e:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8005592:	f10d 0207 	add.w	r2, sp, #7
 8005596:	f000 ff19 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800559a:	2800      	cmp	r0, #0
 800559c:	d16e      	bne.n	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800559e:	2604      	movs	r6, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80055a0:	462b      	mov	r3, r5
 80055a2:	f10d 0207 	add.w	r2, sp, #7
 80055a6:	f243 4102 	movw	r1, #13314	@ 0x3402
 80055aa:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80055ac:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80055b0:	f000 ff0c 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d161      	bne.n	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80055b8:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80055bc:	462b      	mov	r3, r5
 80055be:	f10d 0207 	add.w	r2, sp, #7
 80055c2:	f243 4103 	movw	r1, #13315	@ 0x3403
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 ff00 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d155      	bne.n	800567c <OV5640_SetLightMode+0x3e8>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80055d0:	462b      	mov	r3, r5
 80055d2:	f10d 0207 	add.w	r2, sp, #7
 80055d6:	f243 4104 	movw	r1, #13316	@ 0x3404
 80055da:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80055dc:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80055e0:	f000 fef4 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d149      	bne.n	800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80055e8:	26f3      	movs	r6, #243	@ 0xf3
 80055ea:	e74d      	b.n	8005488 <OV5640_SetLightMode+0x1f4>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80055ec:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80055ee:	f10d 0207 	add.w	r2, sp, #7
 80055f2:	f243 4106 	movw	r1, #13318	@ 0x3406
 80055f6:	4620      	mov	r0, r4
 80055f8:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80055fa:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80055fe:	f000 fee5 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005602:	bbd8      	cbnz	r0, 800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8005604:	2604      	movs	r6, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8005606:	462b      	mov	r3, r5
 8005608:	f10d 0207 	add.w	r2, sp, #7
 800560c:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8005610:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8005612:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8005616:	f000 fed9 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800561a:	bb78      	cbnz	r0, 800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800561c:	2310      	movs	r3, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800561e:	f10d 0207 	add.w	r2, sp, #7
 8005622:	f243 4101 	movw	r1, #13313	@ 0x3401
 8005626:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8005628:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800562c:	462b      	mov	r3, r5
 800562e:	f000 fecd 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005632:	bb18      	cbnz	r0, 800567c <OV5640_SetLightMode+0x3e8>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8005634:	462b      	mov	r3, r5
 8005636:	f10d 0207 	add.w	r2, sp, #7
 800563a:	f243 4102 	movw	r1, #13314	@ 0x3402
 800563e:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8005640:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8005644:	f000 fec2 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005648:	b9c0      	cbnz	r0, 800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800564a:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800564e:	462b      	mov	r3, r5
 8005650:	f10d 0207 	add.w	r2, sp, #7
 8005654:	f243 4103 	movw	r1, #13315	@ 0x3403
 8005658:	4620      	mov	r0, r4
 800565a:	f000 feb7 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 800565e:	b968      	cbnz	r0, 800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8005660:	2208      	movs	r2, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8005662:	462b      	mov	r3, r5
 8005664:	f243 4104 	movw	r1, #13316	@ 0x3404
 8005668:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800566a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800566e:	f10d 0207 	add.w	r2, sp, #7
 8005672:	f000 feab 	bl	80063cc <ov5640_write_reg>
          if (ret != OV5640_ERROR)
 8005676:	b908      	cbnz	r0, 800567c <OV5640_SetLightMode+0x3e8>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8005678:	26b6      	movs	r6, #182	@ 0xb6
 800567a:	e705      	b.n	8005488 <OV5640_SetLightMode+0x1f4>
{
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	e619      	b.n	80052b6 <OV5640_SetLightMode+0x22>
 8005682:	bf00      	nop

08005684 <OV5640_SetColorEffect>:
  switch (Effect)
 8005684:	3901      	subs	r1, #1
{
 8005686:	b530      	push	{r4, r5, lr}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005688:	f100 0418 	add.w	r4, r0, #24
{
 800568c:	b083      	sub	sp, #12
  switch (Effect)
 800568e:	291f      	cmp	r1, #31
 8005690:	d821      	bhi.n	80056d6 <OV5640_SetColorEffect+0x52>
 8005692:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005696:	003d      	.short	0x003d
 8005698:	0020004f 	.word	0x0020004f
 800569c:	00200087 	.word	0x00200087
 80056a0:	00200020 	.word	0x00200020
 80056a4:	002000b4 	.word	0x002000b4
 80056a8:	00200020 	.word	0x00200020
 80056ac:	00200020 	.word	0x00200020
 80056b0:	00200020 	.word	0x00200020
 80056b4:	002000d1 	.word	0x002000d1
 80056b8:	00200020 	.word	0x00200020
 80056bc:	00200020 	.word	0x00200020
 80056c0:	00200020 	.word	0x00200020
 80056c4:	00200020 	.word	0x00200020
 80056c8:	00200020 	.word	0x00200020
 80056cc:	00200020 	.word	0x00200020
 80056d0:	00200020 	.word	0x00200020
 80056d4:	00fd      	.short	0x00fd
      tmp = 0x7F;
 80056d6:	217f      	movs	r1, #127	@ 0x7f
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80056d8:	2301      	movs	r3, #1
 80056da:	f10d 0207 	add.w	r2, sp, #7
 80056de:	4620      	mov	r0, r4
      tmp = 0x7F;
 80056e0:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80056e4:	f245 0101 	movw	r1, #20481	@ 0x5001
 80056e8:	f000 fe70 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 80056ec:	4684      	mov	ip, r0
 80056ee:	b9e8      	cbnz	r0, 800572c <OV5640_SetColorEffect+0xa8>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80056f0:	2301      	movs	r3, #1
 80056f2:	f10d 0207 	add.w	r2, sp, #7
 80056f6:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80056fa:	4620      	mov	r0, r4
        tmp = 0x00;
 80056fc:	f88d c007 	strb.w	ip, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005700:	f000 fe64 	bl	80063cc <ov5640_write_reg>
      if (ret != OV5640_OK)
 8005704:	3800      	subs	r0, #0
 8005706:	bf18      	it	ne
 8005708:	2001      	movne	r0, #1
 800570a:	4240      	negs	r0, r0
}
 800570c:	b003      	add	sp, #12
 800570e:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8005710:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005712:	2301      	movs	r3, #1
 8005714:	f10d 0207 	add.w	r2, sp, #7
 8005718:	4620      	mov	r0, r4
      tmp = 0xFF;
 800571a:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800571e:	f245 0101 	movw	r1, #20481	@ 0x5001
 8005722:	f000 fe53 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005726:	2800      	cmp	r0, #0
 8005728:	f000 80c7 	beq.w	80058ba <OV5640_SetColorEffect+0x236>
        ret = OV5640_ERROR;
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005730:	b003      	add	sp, #12
 8005732:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8005734:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005736:	2301      	movs	r3, #1
 8005738:	f10d 0207 	add.w	r2, sp, #7
 800573c:	4620      	mov	r0, r4
      tmp = 0xFF;
 800573e:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005742:	f245 0101 	movw	r1, #20481	@ 0x5001
 8005746:	f000 fe41 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 800574a:	2800      	cmp	r0, #0
 800574c:	d1ee      	bne.n	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x18;
 800574e:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005750:	2301      	movs	r3, #1
 8005752:	f10d 0207 	add.w	r2, sp, #7
 8005756:	4620      	mov	r0, r4
        tmp = 0x18;
 8005758:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800575c:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8005760:	f000 fe34 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005764:	2800      	cmp	r0, #0
 8005766:	d1e1      	bne.n	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x80;
 8005768:	2180      	movs	r1, #128	@ 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800576a:	2301      	movs	r3, #1
 800576c:	f10d 0207 	add.w	r2, sp, #7
 8005770:	4620      	mov	r0, r4
        tmp = 0x80;
 8005772:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8005776:	f245 5183 	movw	r1, #21891	@ 0x5583
 800577a:	f000 fe27 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 800577e:	2800      	cmp	r0, #0
 8005780:	d1d4      	bne.n	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0xC0;
 8005782:	25c0      	movs	r5, #192	@ 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8005784:	2301      	movs	r3, #1
 8005786:	f10d 0207 	add.w	r2, sp, #7
 800578a:	f245 5184 	movw	r1, #21892	@ 0x5584
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800578e:	4620      	mov	r0, r4
        tmp = 0x40;
 8005790:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005794:	f000 fe1a 	bl	80063cc <ov5640_write_reg>
      if (ret != OV5640_OK)
 8005798:	3800      	subs	r0, #0
 800579a:	bf18      	it	ne
 800579c:	2001      	movne	r0, #1
 800579e:	4240      	negs	r0, r0
}
 80057a0:	b003      	add	sp, #12
 80057a2:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 80057a4:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80057a6:	2301      	movs	r3, #1
 80057a8:	f10d 0207 	add.w	r2, sp, #7
 80057ac:	4620      	mov	r0, r4
      tmp = 0xFF;
 80057ae:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80057b2:	f245 0101 	movw	r1, #20481	@ 0x5001
 80057b6:	f000 fe09 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d1b6      	bne.n	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x18;
 80057be:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80057c0:	2301      	movs	r3, #1
 80057c2:	f10d 0207 	add.w	r2, sp, #7
 80057c6:	4620      	mov	r0, r4
        tmp = 0x18;
 80057c8:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80057cc:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80057d0:	f000 fdfc 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d1a9      	bne.n	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x60;
 80057d8:	2560      	movs	r5, #96	@ 0x60
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80057da:	2301      	movs	r3, #1
 80057dc:	f10d 0207 	add.w	r2, sp, #7
 80057e0:	f245 5183 	movw	r1, #21891	@ 0x5583
 80057e4:	4620      	mov	r0, r4
        tmp = 0x80;
 80057e6:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80057ea:	f000 fdef 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d19c      	bne.n	800572c <OV5640_SetColorEffect+0xa8>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80057f2:	2301      	movs	r3, #1
 80057f4:	f10d 0207 	add.w	r2, sp, #7
 80057f8:	f245 5184 	movw	r1, #21892	@ 0x5584
 80057fc:	e7c7      	b.n	800578e <OV5640_SetColorEffect+0x10a>
      tmp = 0xFF;
 80057fe:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005800:	2301      	movs	r3, #1
 8005802:	f10d 0207 	add.w	r2, sp, #7
 8005806:	4620      	mov	r0, r4
      tmp = 0xFF;
 8005808:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800580c:	f245 0101 	movw	r1, #20481	@ 0x5001
 8005810:	f000 fddc 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005814:	2800      	cmp	r0, #0
 8005816:	d189      	bne.n	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x18;
 8005818:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800581a:	2301      	movs	r3, #1
 800581c:	f10d 0207 	add.w	r2, sp, #7
 8005820:	4620      	mov	r0, r4
        tmp = 0x18;
 8005822:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005826:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 800582a:	f000 fdcf 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 800582e:	2800      	cmp	r0, #0
 8005830:	f47f af7c 	bne.w	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x80;
 8005834:	2580      	movs	r5, #128	@ 0x80
 8005836:	e7d0      	b.n	80057da <OV5640_SetColorEffect+0x156>
      tmp = 0xFF;
 8005838:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800583a:	2301      	movs	r3, #1
 800583c:	f10d 0207 	add.w	r2, sp, #7
 8005840:	4620      	mov	r0, r4
      tmp = 0xFF;
 8005842:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005846:	f245 0101 	movw	r1, #20481	@ 0x5001
 800584a:	f000 fdbf 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 800584e:	2800      	cmp	r0, #0
 8005850:	f47f af6c 	bne.w	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x18;
 8005854:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005856:	2301      	movs	r3, #1
 8005858:	f10d 0207 	add.w	r2, sp, #7
 800585c:	4620      	mov	r0, r4
        tmp = 0x18;
 800585e:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005862:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8005866:	f000 fdb1 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 800586a:	2800      	cmp	r0, #0
 800586c:	f47f af5e 	bne.w	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x40;
 8005870:	2140      	movs	r1, #64	@ 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8005872:	2301      	movs	r3, #1
 8005874:	f10d 0207 	add.w	r2, sp, #7
 8005878:	4620      	mov	r0, r4
        tmp = 0x40;
 800587a:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800587e:	f245 5183 	movw	r1, #21891	@ 0x5583
 8005882:	f000 fda3 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005886:	2800      	cmp	r0, #0
 8005888:	f47f af50 	bne.w	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0xA0;
 800588c:	25a0      	movs	r5, #160	@ 0xa0
 800588e:	e7b0      	b.n	80057f2 <OV5640_SetColorEffect+0x16e>
      tmp = 0xFF;
 8005890:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005892:	2301      	movs	r3, #1
 8005894:	f10d 0207 	add.w	r2, sp, #7
 8005898:	4620      	mov	r0, r4
      tmp = 0xFF;
 800589a:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800589e:	f245 0101 	movw	r1, #20481	@ 0x5001
 80058a2:	f000 fd93 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f47f af40 	bne.w	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x40;
 80058ac:	2540      	movs	r5, #64	@ 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80058ae:	2301      	movs	r3, #1
 80058b0:	f10d 0207 	add.w	r2, sp, #7
 80058b4:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80058b8:	e769      	b.n	800578e <OV5640_SetColorEffect+0x10a>
        tmp = 0x18;
 80058ba:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80058bc:	2301      	movs	r3, #1
 80058be:	f10d 0207 	add.w	r2, sp, #7
 80058c2:	4620      	mov	r0, r4
        tmp = 0x18;
 80058c4:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80058c8:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80058cc:	f000 fd7e 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 80058d0:	2800      	cmp	r0, #0
 80058d2:	f47f af2b 	bne.w	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0xA0;
 80058d6:	21a0      	movs	r1, #160	@ 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80058d8:	2301      	movs	r3, #1
 80058da:	f10d 0207 	add.w	r2, sp, #7
 80058de:	4620      	mov	r0, r4
        tmp = 0xA0;
 80058e0:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80058e4:	f245 5183 	movw	r1, #21891	@ 0x5583
 80058e8:	f000 fd70 	bl	80063cc <ov5640_write_reg>
      if (ret == OV5640_OK)
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f47f af1d 	bne.w	800572c <OV5640_SetColorEffect+0xa8>
        tmp = 0x40;
 80058f2:	2540      	movs	r5, #64	@ 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80058f4:	2301      	movs	r3, #1
 80058f6:	f10d 0207 	add.w	r2, sp, #7
 80058fa:	f245 5184 	movw	r1, #21892	@ 0x5584
 80058fe:	e746      	b.n	800578e <OV5640_SetColorEffect+0x10a>

08005900 <OV5640_SetBrightness>:
{
 8005900:	b530      	push	{r4, r5, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8005902:	4a2c      	ldr	r2, [pc, #176]	@ (80059b4 <OV5640_SetBrightness+0xb4>)
{
 8005904:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005906:	f100 0418 	add.w	r4, r0, #24
{
 800590a:	460d      	mov	r5, r1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800590c:	ab01      	add	r3, sp, #4
 800590e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005910:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 8005912:	21ff      	movs	r1, #255	@ 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8005914:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005916:	4620      	mov	r0, r4
 8005918:	2301      	movs	r3, #1
  tmp = 0xFF;
 800591a:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800591e:	f10d 0203 	add.w	r2, sp, #3
 8005922:	f245 0101 	movw	r1, #20481	@ 0x5001
 8005926:	f000 fd51 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 800592a:	b108      	cbz	r0, 8005930 <OV5640_SetBrightness+0x30>
}
 800592c:	b005      	add	sp, #20
 800592e:	bd30      	pop	{r4, r5, pc}
    tmp = brightness_level[Level + 4];
 8005930:	f105 0210 	add.w	r2, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8005934:	2301      	movs	r3, #1
 8005936:	f245 5187 	movw	r1, #21895	@ 0x5587
 800593a:	4620      	mov	r0, r4
    tmp = brightness_level[Level + 4];
 800593c:	446a      	add	r2, sp
 800593e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8005942:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8005946:	f10d 0203 	add.w	r2, sp, #3
 800594a:	f000 fd3f 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 800594e:	2800      	cmp	r0, #0
 8005950:	d1ec      	bne.n	800592c <OV5640_SetBrightness+0x2c>
    tmp = 0x04;
 8005952:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005954:	2301      	movs	r3, #1
 8005956:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 800595a:	4620      	mov	r0, r4
    tmp = 0x04;
 800595c:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005960:	f10d 0203 	add.w	r2, sp, #3
 8005964:	f000 fd32 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005968:	2800      	cmp	r0, #0
 800596a:	d1df      	bne.n	800592c <OV5640_SetBrightness+0x2c>
    if (Level < 0)
 800596c:	2d00      	cmp	r5, #0
 800596e:	db10      	blt.n	8005992 <OV5640_SetBrightness+0x92>
      tmp = 0x09;
 8005970:	2509      	movs	r5, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8005972:	2301      	movs	r3, #1
 8005974:	f10d 0203 	add.w	r2, sp, #3
 8005978:	f245 5188 	movw	r1, #21896	@ 0x5588
 800597c:	4620      	mov	r0, r4
      tmp = 0x09;
 800597e:	f88d 5003 	strb.w	r5, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8005982:	f000 fd23 	bl	80063cc <ov5640_write_reg>
 8005986:	3800      	subs	r0, #0
 8005988:	bf18      	it	ne
 800598a:	2001      	movne	r0, #1
 800598c:	4240      	negs	r0, r0
}
 800598e:	b005      	add	sp, #20
 8005990:	bd30      	pop	{r4, r5, pc}
      tmp = 0x01;
 8005992:	2301      	movs	r3, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8005994:	f10d 0203 	add.w	r2, sp, #3
 8005998:	f245 5188 	movw	r1, #21896	@ 0x5588
 800599c:	4620      	mov	r0, r4
      tmp = 0x01;
 800599e:	f88d 3003 	strb.w	r3, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80059a2:	f000 fd13 	bl	80063cc <ov5640_write_reg>
 80059a6:	3800      	subs	r0, #0
 80059a8:	bf18      	it	ne
 80059aa:	2001      	movne	r0, #1
 80059ac:	4240      	negs	r0, r0
}
 80059ae:	b005      	add	sp, #20
 80059b0:	bd30      	pop	{r4, r5, pc}
 80059b2:	bf00      	nop
 80059b4:	0801baa8 	.word	0x0801baa8

080059b8 <OV5640_SetSaturation>:
{
 80059b8:	b530      	push	{r4, r5, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80059ba:	4a29      	ldr	r2, [pc, #164]	@ (8005a60 <OV5640_SetSaturation+0xa8>)
{
 80059bc:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80059be:	f100 0418 	add.w	r4, r0, #24
{
 80059c2:	460d      	mov	r5, r1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80059c4:	ab01      	add	r3, sp, #4
 80059c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80059c8:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 80059ca:	21ff      	movs	r1, #255	@ 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80059cc:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80059ce:	4620      	mov	r0, r4
 80059d0:	2301      	movs	r3, #1
  tmp = 0xFF;
 80059d2:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80059d6:	f10d 0203 	add.w	r2, sp, #3
 80059da:	f245 0101 	movw	r1, #20481	@ 0x5001
 80059de:	f000 fcf5 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 80059e2:	b118      	cbz	r0, 80059ec <OV5640_SetSaturation+0x34>
    ret = OV5640_ERROR;
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80059e8:	b005      	add	sp, #20
 80059ea:	bd30      	pop	{r4, r5, pc}
    tmp = saturation_level[Level + 4];
 80059ec:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80059f0:	f10d 0203 	add.w	r2, sp, #3
 80059f4:	4620      	mov	r0, r4
    tmp = saturation_level[Level + 4];
 80059f6:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80059fa:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 80059fc:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8005a00:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8005a04:	f245 5183 	movw	r1, #21891	@ 0x5583
 8005a08:	f000 fce0 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d1e9      	bne.n	80059e4 <OV5640_SetSaturation+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8005a10:	2301      	movs	r3, #1
 8005a12:	f10d 0203 	add.w	r2, sp, #3
 8005a16:	f245 5184 	movw	r1, #21892	@ 0x5584
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 fcd6 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d1df      	bne.n	80059e4 <OV5640_SetSaturation+0x2c>
    tmp = 0x02;
 8005a24:	2102      	movs	r1, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005a26:	2301      	movs	r3, #1
 8005a28:	f10d 0203 	add.w	r2, sp, #3
 8005a2c:	4620      	mov	r0, r4
    tmp = 0x02;
 8005a2e:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005a32:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8005a36:	f000 fcc9 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d1d2      	bne.n	80059e4 <OV5640_SetSaturation+0x2c>
    tmp = 0x41;
 8005a3e:	2541      	movs	r5, #65	@ 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005a40:	2301      	movs	r3, #1
 8005a42:	f10d 0203 	add.w	r2, sp, #3
 8005a46:	f245 5188 	movw	r1, #21896	@ 0x5588
 8005a4a:	4620      	mov	r0, r4
    tmp = 0x41;
 8005a4c:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005a50:	f000 fcbc 	bl	80063cc <ov5640_write_reg>
  if (ret != OV5640_OK)
 8005a54:	3800      	subs	r0, #0
 8005a56:	bf18      	it	ne
 8005a58:	2001      	movne	r0, #1
 8005a5a:	4240      	negs	r0, r0
}
 8005a5c:	b005      	add	sp, #20
 8005a5e:	bd30      	pop	{r4, r5, pc}
 8005a60:	0801bab4 	.word	0x0801bab4

08005a64 <OV5640_SetContrast>:
{
 8005a64:	b530      	push	{r4, r5, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8005a66:	4a29      	ldr	r2, [pc, #164]	@ (8005b0c <OV5640_SetContrast+0xa8>)
{
 8005a68:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005a6a:	f100 0418 	add.w	r4, r0, #24
{
 8005a6e:	460d      	mov	r5, r1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8005a70:	ab01      	add	r3, sp, #4
 8005a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a74:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 8005a76:	21ff      	movs	r1, #255	@ 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8005a78:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	2301      	movs	r3, #1
  tmp = 0xFF;
 8005a7e:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005a82:	f10d 0203 	add.w	r2, sp, #3
 8005a86:	f245 0101 	movw	r1, #20481	@ 0x5001
 8005a8a:	f000 fc9f 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005a8e:	b118      	cbz	r0, 8005a98 <OV5640_SetContrast+0x34>
    ret = OV5640_ERROR;
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005a94:	b005      	add	sp, #20
 8005a96:	bd30      	pop	{r4, r5, pc}
    tmp = 0x04;
 8005a98:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8005aa0:	4620      	mov	r0, r4
    tmp = 0x04;
 8005aa2:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005aa6:	f10d 0203 	add.w	r2, sp, #3
 8005aaa:	f000 fc8f 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d1ee      	bne.n	8005a90 <OV5640_SetContrast+0x2c>
    tmp = contrast_level[Level + 4];
 8005ab2:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8005ab6:	f10d 0203 	add.w	r2, sp, #3
 8005aba:	4620      	mov	r0, r4
    tmp = contrast_level[Level + 4];
 8005abc:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8005ac0:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 8005ac2:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8005ac6:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8005aca:	f245 5186 	movw	r1, #21894	@ 0x5586
 8005ace:	f000 fc7d 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d1dc      	bne.n	8005a90 <OV5640_SetContrast+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f10d 0203 	add.w	r2, sp, #3
 8005adc:	f245 5185 	movw	r1, #21893	@ 0x5585
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 fc73 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1d2      	bne.n	8005a90 <OV5640_SetContrast+0x2c>
    tmp = 0x41;
 8005aea:	2541      	movs	r5, #65	@ 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005aec:	2301      	movs	r3, #1
 8005aee:	f10d 0203 	add.w	r2, sp, #3
 8005af2:	f245 5188 	movw	r1, #21896	@ 0x5588
 8005af6:	4620      	mov	r0, r4
    tmp = 0x41;
 8005af8:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005afc:	f000 fc66 	bl	80063cc <ov5640_write_reg>
  if (ret != OV5640_OK)
 8005b00:	3800      	subs	r0, #0
 8005b02:	bf18      	it	ne
 8005b04:	2001      	movne	r0, #1
 8005b06:	4240      	negs	r0, r0
}
 8005b08:	b005      	add	sp, #20
 8005b0a:	bd30      	pop	{r4, r5, pc}
 8005b0c:	0804955c 	.word	0x0804955c

08005b10 <OV5640_SetHueDegree>:
{
 8005b10:	b570      	push	{r4, r5, r6, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8005b12:	4b33      	ldr	r3, [pc, #204]	@ (8005be0 <OV5640_SetHueDegree+0xd0>)
{
 8005b14:	b08a      	sub	sp, #40	@ 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005b16:	f100 0418 	add.w	r4, r0, #24
{
 8005b1a:	460d      	mov	r5, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8005b1c:	f103 0c0c 	add.w	ip, r3, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8005b20:	f10d 0e04 	add.w	lr, sp, #4
 8005b24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8005b28:	ab04      	add	r3, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8005b2a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8005b2e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005b32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8005b36:	4b2b      	ldr	r3, [pc, #172]	@ (8005be4 <OV5640_SetHueDegree+0xd4>)
 8005b38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b3c:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b3e:	e903 0007 	stmdb	r3, {r0, r1, r2}
  tmp = 0xFF;
 8005b42:	22ff      	movs	r2, #255	@ 0xff
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005b44:	2301      	movs	r3, #1
 8005b46:	f245 0101 	movw	r1, #20481	@ 0x5001
 8005b4a:	4620      	mov	r0, r4
  tmp = 0xFF;
 8005b4c:	f88d 2003 	strb.w	r2, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005b50:	f10d 0203 	add.w	r2, sp, #3
 8005b54:	f000 fc3a 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005b58:	b118      	cbz	r0, 8005b62 <OV5640_SetHueDegree+0x52>
    ret = OV5640_ERROR;
 8005b5a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005b5e:	b00a      	add	sp, #40	@ 0x28
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
    tmp = 0x01;
 8005b62:	2601      	movs	r6, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005b64:	f10d 0203 	add.w	r2, sp, #3
 8005b68:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	4633      	mov	r3, r6
    tmp = 0x01;
 8005b70:	f88d 6003 	strb.w	r6, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005b74:	f000 fc2a 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d1ee      	bne.n	8005b5a <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 8005b7c:	f105 032e 	add.w	r3, r5, #46	@ 0x2e
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8005b80:	f10d 0203 	add.w	r2, sp, #3
 8005b84:	f245 5181 	movw	r1, #21889	@ 0x5581
 8005b88:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl1[Degree + 6];
 8005b8a:	eb0d 0503 	add.w	r5, sp, r3
 8005b8e:	f815 3c24 	ldrb.w	r3, [r5, #-36]
 8005b92:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8005b96:	4633      	mov	r3, r6
 8005b98:	f000 fc18 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d1dc      	bne.n	8005b5a <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 8005ba0:	f815 3c18 	ldrb.w	r3, [r5, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8005ba4:	f10d 0203 	add.w	r2, sp, #3
 8005ba8:	f245 5182 	movw	r1, #21890	@ 0x5582
 8005bac:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl2[Degree + 6];
 8005bae:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8005bb2:	4633      	mov	r3, r6
 8005bb4:	f000 fc0a 	bl	80063cc <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d1ce      	bne.n	8005b5a <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 8005bbc:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005bc0:	4633      	mov	r3, r6
 8005bc2:	f10d 0203 	add.w	r2, sp, #3
 8005bc6:	f245 5188 	movw	r1, #21896	@ 0x5588
 8005bca:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl8[Degree + 6];
 8005bcc:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005bd0:	f000 fbfc 	bl	80063cc <ov5640_write_reg>
  if (ret != OV5640_OK)
 8005bd4:	3800      	subs	r0, #0
 8005bd6:	bf18      	it	ne
 8005bd8:	2001      	movne	r0, #1
 8005bda:	4240      	negs	r0, r0
}
 8005bdc:	b00a      	add	sp, #40	@ 0x28
 8005bde:	bd70      	pop	{r4, r5, r6, pc}
 8005be0:	0801bac0 	.word	0x0801bac0
 8005be4:	08049568 	.word	0x08049568

08005be8 <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8005be8:	2902      	cmp	r1, #2
{
 8005bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bee:	4604      	mov	r4, r0
 8005bf0:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8005bf2:	d95f      	bls.n	8005cb4 <OV5640_SetPixelFormat+0xcc>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8005bf4:	2907      	cmp	r1, #7
 8005bf6:	f000 80bb 	beq.w	8005d70 <OV5640_SetPixelFormat+0x188>
 8005bfa:	2908      	cmp	r1, #8
 8005bfc:	d154      	bne.n	8005ca8 <OV5640_SetPixelFormat+0xc0>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8005bfe:	2230      	movs	r2, #48	@ 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8005c00:	f100 0718 	add.w	r7, r0, #24
 8005c04:	f10d 0607 	add.w	r6, sp, #7
 8005c08:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8005c0a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8005c0e:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 8005c12:	4632      	mov	r2, r6
 8005c14:	4638      	mov	r0, r7
 8005c16:	f000 fbd9 	bl	80063cc <ov5640_write_reg>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f000 80d5 	beq.w	8005dca <OV5640_SetPixelFormat+0x1e2>
{
 8005c20:	f04f 35ff 	mov.w	r5, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8005c24:	2301      	movs	r3, #1
 8005c26:	4632      	mov	r2, r6
 8005c28:	f643 0121 	movw	r1, #14369	@ 0x3821
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f000 fbc5 	bl	80063bc <ov5640_read_reg>
 8005c32:	bbc8      	cbnz	r0, 8005ca8 <OV5640_SetPixelFormat+0xc0>
        tmp |= (1 << 5);
 8005c34:	f89d 2007 	ldrb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f643 0121 	movw	r1, #14369	@ 0x3821
 8005c3e:	4638      	mov	r0, r7
        tmp |= (1 << 5);
 8005c40:	f042 0220 	orr.w	r2, r2, #32
 8005c44:	f88d 2007 	strb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8005c48:	4632      	mov	r2, r6
 8005c4a:	f000 fbbf 	bl	80063cc <ov5640_write_reg>
 8005c4e:	bb58      	cbnz	r0, 8005ca8 <OV5640_SetPixelFormat+0xc0>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8005c50:	2301      	movs	r3, #1
 8005c52:	4632      	mov	r2, r6
 8005c54:	f243 0102 	movw	r1, #12290	@ 0x3002
 8005c58:	4638      	mov	r0, r7
 8005c5a:	f000 fbaf 	bl	80063bc <ov5640_read_reg>
 8005c5e:	bb18      	cbnz	r0, 8005ca8 <OV5640_SetPixelFormat+0xc0>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8005c60:	f89d 2007 	ldrb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8005c64:	2301      	movs	r3, #1
 8005c66:	f243 0102 	movw	r1, #12290	@ 0x3002
 8005c6a:	4638      	mov	r0, r7
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8005c6c:	f022 021c 	bic.w	r2, r2, #28
 8005c70:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8005c74:	4632      	mov	r2, r6
 8005c76:	f000 fba9 	bl	80063cc <ov5640_write_reg>
 8005c7a:	b9a8      	cbnz	r0, 8005ca8 <OV5640_SetPixelFormat+0xc0>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	4632      	mov	r2, r6
 8005c80:	f243 0106 	movw	r1, #12294	@ 0x3006
 8005c84:	4638      	mov	r0, r7
 8005c86:	f000 fb99 	bl	80063bc <ov5640_read_reg>
 8005c8a:	b968      	cbnz	r0, 8005ca8 <OV5640_SetPixelFormat+0xc0>
                tmp |= ((1 << 5) | (1 << 3));
 8005c8c:	f89d 1007 	ldrb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8005c90:	2301      	movs	r3, #1
 8005c92:	4632      	mov	r2, r6
 8005c94:	4638      	mov	r0, r7
                tmp |= ((1 << 5) | (1 << 3));
 8005c96:	f041 0128 	orr.w	r1, r1, #40	@ 0x28
 8005c9a:	f88d 1007 	strb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8005c9e:	f243 0106 	movw	r1, #12294	@ 0x3006
 8005ca2:	f000 fb93 	bl	80063cc <ov5640_write_reg>
 8005ca6:	b108      	cbz	r0, 8005cac <OV5640_SetPixelFormat+0xc4>
{
 8005ca8:	f04f 35ff 	mov.w	r5, #4294967295
}
 8005cac:	4628      	mov	r0, r5
 8005cae:	b002      	add	sp, #8
 8005cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (PixelFormat)
 8005cb4:	3901      	subs	r1, #1
 8005cb6:	2901      	cmp	r1, #1
 8005cb8:	f200 80a4 	bhi.w	8005e04 <OV5640_SetPixelFormat+0x21c>
 8005cbc:	e8df f001 	tbb	[pc, r1]
 8005cc0:	012d      	.short	0x012d
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8005cc2:	2230      	movs	r2, #48	@ 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8005cc4:	f100 0518 	add.w	r5, r0, #24
 8005cc8:	f10d 0607 	add.w	r6, sp, #7
 8005ccc:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8005cce:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8005cd2:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f000 fb77 	bl	80063cc <ov5640_write_reg>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d1e2      	bne.n	8005ca8 <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8005ce2:	6963      	ldr	r3, [r4, #20]
 8005ce4:	4798      	blx	r3
 8005ce6:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005ce8:	6963      	ldr	r3, [r4, #20]
 8005cea:	4798      	blx	r3
 8005cec:	4287      	cmp	r7, r0
 8005cee:	d0fb      	beq.n	8005ce8 <OV5640_SetPixelFormat+0x100>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8005cf0:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	4632      	mov	r2, r6
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8005cf8:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8005cfc:	f245 011f 	movw	r1, #20511	@ 0x501f
 8005d00:	f000 fb64 	bl	80063cc <ov5640_write_reg>
 8005d04:	4605      	mov	r5, r0
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d1ce      	bne.n	8005ca8 <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8005d0a:	6963      	ldr	r3, [r4, #20]
 8005d0c:	4798      	blx	r3
 8005d0e:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005d10:	6963      	ldr	r3, [r4, #20]
 8005d12:	4798      	blx	r3
 8005d14:	4286      	cmp	r6, r0
 8005d16:	d0fb      	beq.n	8005d10 <OV5640_SetPixelFormat+0x128>
 8005d18:	e7c8      	b.n	8005cac <OV5640_SetPixelFormat+0xc4>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8005d1a:	2223      	movs	r2, #35	@ 0x23
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8005d1c:	f100 0518 	add.w	r5, r0, #24
 8005d20:	f10d 0607 	add.w	r6, sp, #7
 8005d24:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8005d26:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8005d2a:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 8005d2e:	4632      	mov	r2, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	f000 fb4b 	bl	80063cc <ov5640_write_reg>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1b6      	bne.n	8005ca8 <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8005d3a:	6963      	ldr	r3, [r4, #20]
 8005d3c:	4798      	blx	r3
 8005d3e:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005d40:	6963      	ldr	r3, [r4, #20]
 8005d42:	4798      	blx	r3
 8005d44:	4287      	cmp	r7, r0
 8005d46:	d0fb      	beq.n	8005d40 <OV5640_SetPixelFormat+0x158>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8005d48:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	f245 011f 	movw	r1, #20511	@ 0x501f
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8005d52:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8005d56:	f000 fb39 	bl	80063cc <ov5640_write_reg>
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d1a3      	bne.n	8005ca8 <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8005d60:	6963      	ldr	r3, [r4, #20]
 8005d62:	4798      	blx	r3
 8005d64:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005d66:	6963      	ldr	r3, [r4, #20]
 8005d68:	4798      	blx	r3
 8005d6a:	4286      	cmp	r6, r0
 8005d6c:	d0fb      	beq.n	8005d66 <OV5640_SetPixelFormat+0x17e>
 8005d6e:	e79d      	b.n	8005cac <OV5640_SetPixelFormat+0xc4>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8005d70:	2210      	movs	r2, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8005d72:	f100 0518 	add.w	r5, r0, #24
 8005d76:	f10d 0607 	add.w	r6, sp, #7
 8005d7a:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8005d7c:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8005d80:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 8005d84:	4632      	mov	r2, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	f000 fb20 	bl	80063cc <ov5640_write_reg>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d18b      	bne.n	8005ca8 <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8005d90:	6963      	ldr	r3, [r4, #20]
 8005d92:	4798      	blx	r3
 8005d94:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005d96:	6963      	ldr	r3, [r4, #20]
 8005d98:	4798      	blx	r3
 8005d9a:	4287      	cmp	r7, r0
 8005d9c:	d0fb      	beq.n	8005d96 <OV5640_SetPixelFormat+0x1ae>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8005d9e:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8005da0:	4628      	mov	r0, r5
 8005da2:	2301      	movs	r3, #1
 8005da4:	4632      	mov	r2, r6
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8005da6:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8005daa:	f245 011f 	movw	r1, #20511	@ 0x501f
 8005dae:	f000 fb0d 	bl	80063cc <ov5640_write_reg>
 8005db2:	4605      	mov	r5, r0
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f47f af77 	bne.w	8005ca8 <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8005dba:	6963      	ldr	r3, [r4, #20]
 8005dbc:	4798      	blx	r3
 8005dbe:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005dc0:	6963      	ldr	r3, [r4, #20]
 8005dc2:	4798      	blx	r3
 8005dc4:	4286      	cmp	r6, r0
 8005dc6:	d0fb      	beq.n	8005dc0 <OV5640_SetPixelFormat+0x1d8>
 8005dc8:	e770      	b.n	8005cac <OV5640_SetPixelFormat+0xc4>
  tickstart = pObj->IO.GetTick();
 8005dca:	6963      	ldr	r3, [r4, #20]
 8005dcc:	4798      	blx	r3
 8005dce:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005dd0:	6963      	ldr	r3, [r4, #20]
 8005dd2:	4798      	blx	r3
 8005dd4:	4285      	cmp	r5, r0
 8005dd6:	d0fb      	beq.n	8005dd0 <OV5640_SetPixelFormat+0x1e8>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8005dd8:	2200      	movs	r2, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f245 011f 	movw	r1, #20511	@ 0x501f
 8005de0:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8005de2:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8005de6:	4632      	mov	r2, r6
 8005de8:	f000 faf0 	bl	80063cc <ov5640_write_reg>
 8005dec:	4605      	mov	r5, r0
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f47f af16 	bne.w	8005c20 <OV5640_SetPixelFormat+0x38>
  tickstart = pObj->IO.GetTick();
 8005df4:	6963      	ldr	r3, [r4, #20]
 8005df6:	4798      	blx	r3
 8005df8:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005dfa:	6963      	ldr	r3, [r4, #20]
 8005dfc:	4798      	blx	r3
 8005dfe:	4580      	cmp	r8, r0
 8005e00:	d0fb      	beq.n	8005dfa <OV5640_SetPixelFormat+0x212>
 8005e02:	e70f      	b.n	8005c24 <OV5640_SetPixelFormat+0x3c>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8005e04:	226f      	movs	r2, #111	@ 0x6f
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005e06:	f100 0718 	add.w	r7, r0, #24
 8005e0a:	f10d 0607 	add.w	r6, sp, #7
 8005e0e:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8005e10:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005e14:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 8005e18:	4632      	mov	r2, r6
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f000 fad6 	bl	80063cc <ov5640_write_reg>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f47f af41 	bne.w	8005ca8 <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8005e26:	6963      	ldr	r3, [r4, #20]
 8005e28:	4798      	blx	r3
 8005e2a:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005e2c:	6963      	ldr	r3, [r4, #20]
 8005e2e:	4798      	blx	r3
 8005e30:	4285      	cmp	r5, r0
 8005e32:	d0fb      	beq.n	8005e2c <OV5640_SetPixelFormat+0x244>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8005e34:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005e36:	4632      	mov	r2, r6
 8005e38:	4638      	mov	r0, r7
 8005e3a:	f245 011f 	movw	r1, #20511	@ 0x501f
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8005e3e:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005e42:	f000 fac3 	bl	80063cc <ov5640_write_reg>
 8005e46:	4605      	mov	r5, r0
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f47f af2d 	bne.w	8005ca8 <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8005e4e:	6963      	ldr	r3, [r4, #20]
 8005e50:	4798      	blx	r3
 8005e52:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005e54:	6963      	ldr	r3, [r4, #20]
 8005e56:	4798      	blx	r3
 8005e58:	4286      	cmp	r6, r0
 8005e5a:	d0fb      	beq.n	8005e54 <OV5640_SetPixelFormat+0x26c>
 8005e5c:	e726      	b.n	8005cac <OV5640_SetPixelFormat+0xc4>
 8005e5e:	bf00      	nop

08005e60 <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 8005e60:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8005e64:	b10b      	cbz	r3, 8005e6a <OV5640_Init+0xa>
  int32_t ret = OV5640_OK;
 8005e66:	2000      	movs	r0, #0
}
 8005e68:	4770      	bx	lr
    if ((Resolution > OV5640_R800x480) ||
 8005e6a:	2904      	cmp	r1, #4
{
 8005e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e70:	4689      	mov	r9, r1
 8005e72:	b083      	sub	sp, #12
    if ((Resolution > OV5640_R800x480) ||
 8005e74:	d823      	bhi.n	8005ebe <OV5640_Init+0x5e>
 8005e76:	f032 0302 	bics.w	r3, r2, #2
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	4690      	mov	r8, r2
 8005e7e:	d004      	beq.n	8005e8a <OV5640_Init+0x2a>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8005e80:	1fd3      	subs	r3, r2, #7
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d901      	bls.n	8005e8a <OV5640_Init+0x2a>
 8005e86:	2a01      	cmp	r2, #1
 8005e88:	d119      	bne.n	8005ebe <OV5640_Init+0x5e>
 8005e8a:	4c20      	ldr	r4, [pc, #128]	@ (8005f0c <OV5640_Init+0xac>)
{
 8005e8c:	2100      	movs	r1, #0
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8005e8e:	f107 0518 	add.w	r5, r7, #24
 8005e92:	f504 767e 	add.w	r6, r4, #1016	@ 0x3f8
 8005e96:	2301      	movs	r3, #1
 8005e98:	f10d 0206 	add.w	r2, sp, #6
 8005e9c:	4628      	mov	r0, r5
        if (ret != OV5640_ERROR)
 8005e9e:	b951      	cbnz	r1, 8005eb6 <OV5640_Init+0x56>
          tmp = (uint8_t)OV5640_Common[index][1];
 8005ea0:	f8b4 c002 	ldrh.w	ip, [r4, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8005ea4:	8821      	ldrh	r1, [r4, #0]
          tmp = (uint8_t)OV5640_Common[index][1];
 8005ea6:	f88d c006 	strb.w	ip, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8005eaa:	f000 fa8f 	bl	80063cc <ov5640_write_reg>
 8005eae:	1e01      	subs	r1, r0, #0
 8005eb0:	bf18      	it	ne
 8005eb2:	2101      	movne	r1, #1
 8005eb4:	4249      	negs	r1, r1
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8005eb6:	3404      	adds	r4, #4
 8005eb8:	42a6      	cmp	r6, r4
 8005eba:	d1ec      	bne.n	8005e96 <OV5640_Init+0x36>
      if (ret == OV5640_OK)
 8005ebc:	b121      	cbz	r1, 8005ec8 <OV5640_Init+0x68>
      ret = OV5640_ERROR;
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005ec2:	b003      	add	sp, #12
 8005ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8005ec8:	4649      	mov	r1, r9
 8005eca:	4638      	mov	r0, r7
 8005ecc:	f7ff f8ee 	bl	80050ac <OV5640_SetResolution>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1f4      	bne.n	8005ebe <OV5640_Init+0x5e>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f7ff fe86 	bl	8005be8 <OV5640_SetPixelFormat>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1ee      	bne.n	8005ebe <OV5640_Init+0x5e>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8005ee0:	2022      	movs	r0, #34	@ 0x22
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f10d 0207 	add.w	r2, sp, #7
 8005ee8:	f244 7140 	movw	r1, #18240	@ 0x4740
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8005eec:	f88d 0007 	strb.w	r0, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8005ef0:	f107 0018 	add.w	r0, r7, #24
 8005ef4:	f000 fa6a 	bl	80063cc <ov5640_write_reg>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d1e0      	bne.n	8005ebe <OV5640_Init+0x5e>
          pObj->IsInitialized = 1U;
 8005efc:	2301      	movs	r3, #1
  int32_t ret = OV5640_OK;
 8005efe:	2000      	movs	r0, #0
          pObj->IsInitialized = 1U;
 8005f00:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
}
 8005f04:	b003      	add	sp, #12
 8005f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f0a:	bf00      	nop
 8005f0c:	08049578 	.word	0x08049578

08005f10 <OV5640_GetResolution>:
{
 8005f10:	b570      	push	{r4, r5, r6, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8005f12:	f100 0418 	add.w	r4, r0, #24
{
 8005f16:	b082      	sub	sp, #8
 8005f18:	460e      	mov	r6, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f10d 0207 	add.w	r2, sp, #7
 8005f20:	f643 0108 	movw	r1, #14344	@ 0x3808
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 fa49 	bl	80063bc <ov5640_read_reg>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d14b      	bne.n	8005fc6 <OV5640_GetResolution+0xb6>
    x_size = (uint16_t)tmp << 8U;
 8005f2e:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8005f32:	2301      	movs	r3, #1
 8005f34:	f10d 0207 	add.w	r2, sp, #7
 8005f38:	f643 0109 	movw	r1, #14345	@ 0x3809
 8005f3c:	4620      	mov	r0, r4
    x_size = (uint16_t)tmp << 8U;
 8005f3e:	022d      	lsls	r5, r5, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8005f40:	f000 fa3c 	bl	80063bc <ov5640_read_reg>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d13e      	bne.n	8005fc6 <OV5640_GetResolution+0xb6>
      x_size |= tmp;
 8005f48:	f89d 3007 	ldrb.w	r3, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8005f4c:	f10d 0207 	add.w	r2, sp, #7
 8005f50:	f643 010a 	movw	r1, #14346	@ 0x380a
 8005f54:	4620      	mov	r0, r4
      x_size |= tmp;
 8005f56:	431d      	orrs	r5, r3
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f000 fa2f 	bl	80063bc <ov5640_read_reg>
 8005f5e:	bb90      	cbnz	r0, 8005fc6 <OV5640_GetResolution+0xb6>
        y_size = (uint16_t)tmp << 8U;
 8005f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8005f64:	4620      	mov	r0, r4
 8005f66:	f10d 0207 	add.w	r2, sp, #7
 8005f6a:	f643 010b 	movw	r1, #14347	@ 0x380b
        y_size = (uint16_t)tmp << 8U;
 8005f6e:	021c      	lsls	r4, r3, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8005f70:	2301      	movs	r3, #1
 8005f72:	f000 fa23 	bl	80063bc <ov5640_read_reg>
 8005f76:	bb30      	cbnz	r0, 8005fc6 <OV5640_GetResolution+0xb6>
          y_size |= tmp;
 8005f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 8005f7c:	f5b5 7f48 	cmp.w	r5, #800	@ 0x320
          y_size |= tmp;
 8005f80:	ea43 0304 	orr.w	r3, r3, r4
          if ((x_size == 800U) && (y_size == 480U))
 8005f84:	f5a3 72f0 	sub.w	r2, r3, #480	@ 0x1e0
 8005f88:	fab2 f282 	clz	r2, r2
 8005f8c:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005f90:	d104      	bne.n	8005f9c <OV5640_GetResolution+0x8c>
 8005f92:	b11a      	cbz	r2, 8005f9c <OV5640_GetResolution+0x8c>
 8005f94:	2304      	movs	r3, #4
            *Resolution = OV5640_R480x272;
 8005f96:	6033      	str	r3, [r6, #0]
}
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8005f9c:	f5b5 7f20 	cmp.w	r5, #640	@ 0x280
 8005fa0:	d102      	bne.n	8005fa8 <OV5640_GetResolution+0x98>
 8005fa2:	b10a      	cbz	r2, 8005fa8 <OV5640_GetResolution+0x98>
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e7f6      	b.n	8005f96 <OV5640_GetResolution+0x86>
          else if ((x_size == 480U) && (y_size == 272U))
 8005fa8:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8005fac:	d104      	bne.n	8005fb8 <OV5640_GetResolution+0xa8>
 8005fae:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8005fb2:	d101      	bne.n	8005fb8 <OV5640_GetResolution+0xa8>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e7ee      	b.n	8005f96 <OV5640_GetResolution+0x86>
          else if ((x_size == 320U) && (y_size == 240U))
 8005fb8:	f5b5 7fa0 	cmp.w	r5, #320	@ 0x140
 8005fbc:	d107      	bne.n	8005fce <OV5640_GetResolution+0xbe>
 8005fbe:	2bf0      	cmp	r3, #240	@ 0xf0
 8005fc0:	d105      	bne.n	8005fce <OV5640_GetResolution+0xbe>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e7e7      	b.n	8005f96 <OV5640_GetResolution+0x86>
    ret = OV5640_ERROR;
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005fca:	b002      	add	sp, #8
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 8005fce:	2da0      	cmp	r5, #160	@ 0xa0
 8005fd0:	d1f9      	bne.n	8005fc6 <OV5640_GetResolution+0xb6>
 8005fd2:	2b78      	cmp	r3, #120	@ 0x78
 8005fd4:	d1f7      	bne.n	8005fc6 <OV5640_GetResolution+0xb6>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e7dd      	b.n	8005f96 <OV5640_GetResolution+0x86>
 8005fda:	bf00      	nop

08005fdc <OV5640_ZoomConfig>:
{
 8005fdc:	b530      	push	{r4, r5, lr}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	4604      	mov	r4, r0
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8005fe4:	a901      	add	r1, sp, #4
 8005fe6:	f7ff ff93 	bl	8005f10 <OV5640_GetResolution>
 8005fea:	bb80      	cbnz	r0, 800604e <OV5640_ZoomConfig+0x72>
    if (zoom == OV5640_ZOOM_x1)
 8005fec:	2d44      	cmp	r5, #68	@ 0x44
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8005fee:	f104 0418 	add.w	r4, r4, #24
    if (zoom == OV5640_ZOOM_x1)
 8005ff2:	d025      	beq.n	8006040 <OV5640_ZoomConfig+0x64>
      switch (res)
 8005ff4:	9b01      	ldr	r3, [sp, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d91e      	bls.n	8006038 <OV5640_ZoomConfig+0x5c>
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d100      	bne.n	8006000 <OV5640_ZoomConfig+0x24>
          zoom = zoom >> 2U;
 8005ffe:	08ad      	lsrs	r5, r5, #2
      tmp = 0x00;
 8006000:	2200      	movs	r2, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8006002:	2301      	movs	r3, #1
 8006004:	f44f 41ac 	mov.w	r1, #22016	@ 0x5600
 8006008:	4620      	mov	r0, r4
      tmp = 0x00;
 800600a:	f88d 2003 	strb.w	r2, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 800600e:	f10d 0203 	add.w	r2, sp, #3
 8006012:	f000 f9db 	bl	80063cc <ov5640_write_reg>
 8006016:	b9d0      	cbnz	r0, 800604e <OV5640_ZoomConfig+0x72>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8006018:	2301      	movs	r3, #1
 800601a:	f10d 0203 	add.w	r2, sp, #3
 800601e:	f245 6101 	movw	r1, #22017	@ 0x5601
 8006022:	4620      	mov	r0, r4
        tmp = (uint8_t)zoom;
 8006024:	f88d 5003 	strb.w	r5, [sp, #3]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8006028:	f000 f9d0 	bl	80063cc <ov5640_write_reg>
 800602c:	3800      	subs	r0, #0
 800602e:	bf18      	it	ne
 8006030:	2001      	movne	r0, #1
 8006032:	4240      	negs	r0, r0
}
 8006034:	b003      	add	sp, #12
 8006036:	bd30      	pop	{r4, r5, pc}
      switch (res)
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0e1      	beq.n	8006000 <OV5640_ZoomConfig+0x24>
          zoom = zoom >> 1U;
 800603c:	086d      	lsrs	r5, r5, #1
          break;
 800603e:	e7df      	b.n	8006000 <OV5640_ZoomConfig+0x24>
      tmp = 0x10;
 8006040:	2510      	movs	r5, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8006042:	2301      	movs	r3, #1
 8006044:	f10d 0203 	add.w	r2, sp, #3
 8006048:	f44f 41ac 	mov.w	r1, #22016	@ 0x5600
 800604c:	e7e9      	b.n	8006022 <OV5640_ZoomConfig+0x46>
    ret = OV5640_ERROR;
 800604e:	f04f 30ff 	mov.w	r0, #4294967295
 8006052:	e7ef      	b.n	8006034 <OV5640_ZoomConfig+0x58>

08006054 <OV5640_ReadID>:
{
 8006054:	b5f0      	push	{r4, r5, r6, r7, lr}
  pObj->IO.Init();
 8006056:	4606      	mov	r6, r0
{
 8006058:	b083      	sub	sp, #12
 800605a:	460f      	mov	r7, r1
 800605c:	4604      	mov	r4, r0
  pObj->IO.Init();
 800605e:	f856 3b18 	ldr.w	r3, [r6], #24
 8006062:	4798      	blx	r3
  tmp = 0x80;
 8006064:	2380      	movs	r3, #128	@ 0x80
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8006066:	f10d 0207 	add.w	r2, sp, #7
 800606a:	f243 0108 	movw	r1, #12296	@ 0x3008
  tmp = 0x80;
 800606e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8006072:	4630      	mov	r0, r6
 8006074:	2301      	movs	r3, #1
 8006076:	f000 f9a9 	bl	80063cc <ov5640_write_reg>
 800607a:	bb28      	cbnz	r0, 80060c8 <OV5640_ReadID+0x74>
  tickstart = pObj->IO.GetTick();
 800607c:	6963      	ldr	r3, [r4, #20]
 800607e:	4798      	blx	r3
 8006080:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8006082:	6963      	ldr	r3, [r4, #20]
 8006084:	4798      	blx	r3
 8006086:	1b40      	subs	r0, r0, r5
 8006088:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800608c:	d3f9      	bcc.n	8006082 <OV5640_ReadID+0x2e>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 800608e:	2301      	movs	r3, #1
 8006090:	f10d 0207 	add.w	r2, sp, #7
 8006094:	f243 010a 	movw	r1, #12298	@ 0x300a
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f98f 	bl	80063bc <ov5640_read_reg>
 800609e:	b998      	cbnz	r0, 80060c8 <OV5640_ReadID+0x74>
      *Id = (uint32_t)tmp << 8U;
 80060a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80060a4:	2301      	movs	r3, #1
 80060a6:	f10d 0207 	add.w	r2, sp, #7
 80060aa:	4630      	mov	r0, r6
      *Id = (uint32_t)tmp << 8U;
 80060ac:	0209      	lsls	r1, r1, #8
 80060ae:	6039      	str	r1, [r7, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80060b0:	f243 010b 	movw	r1, #12299	@ 0x300b
 80060b4:	f000 f982 	bl	80063bc <ov5640_read_reg>
 80060b8:	b930      	cbnz	r0, 80060c8 <OV5640_ReadID+0x74>
        *Id |= tmp;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	603b      	str	r3, [r7, #0]
}
 80060c4:	b003      	add	sp, #12
 80060c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	e7fa      	b.n	80060c4 <OV5640_ReadID+0x70>
 80060ce:	bf00      	nop

080060d0 <OV5640_MirrorFlipConfig>:
{
 80060d0:	b530      	push	{r4, r5, lr}
  uint8_t tmp3820 = 0;
 80060d2:	2200      	movs	r2, #0
{
 80060d4:	b083      	sub	sp, #12
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80060d6:	f100 0418 	add.w	r4, r0, #24
{
 80060da:	460d      	mov	r5, r1
  uint8_t tmp3820 = 0;
 80060dc:	f88d 2006 	strb.w	r2, [sp, #6]
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80060e0:	2301      	movs	r3, #1
 80060e2:	f10d 0206 	add.w	r2, sp, #6
 80060e6:	f643 0120 	movw	r1, #14368	@ 0x3820
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 f966 	bl	80063bc <ov5640_read_reg>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d160      	bne.n	80061b6 <OV5640_MirrorFlipConfig+0xe6>
    tmp3820 &= 0xF9U;
 80060f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80060f8:	f10d 0207 	add.w	r2, sp, #7
 80060fc:	f643 0121 	movw	r1, #14369	@ 0x3821
 8006100:	4620      	mov	r0, r4
    tmp3820 &= 0xF9U;
 8006102:	f023 0306 	bic.w	r3, r3, #6
 8006106:	f88d 3006 	strb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800610a:	2301      	movs	r3, #1
 800610c:	f000 f956 	bl	80063bc <ov5640_read_reg>
 8006110:	2800      	cmp	r0, #0
 8006112:	d150      	bne.n	80061b6 <OV5640_MirrorFlipConfig+0xe6>
      tmp3821 &= 0xF9U;
 8006114:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 8006118:	2d02      	cmp	r5, #2
      tmp3821 &= 0xF9U;
 800611a:	f023 0306 	bic.w	r3, r3, #6
 800611e:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 8006122:	d01b      	beq.n	800615c <OV5640_MirrorFlipConfig+0x8c>
 8006124:	2d03      	cmp	r5, #3
 8006126:	d049      	beq.n	80061bc <OV5640_MirrorFlipConfig+0xec>
 8006128:	2d01      	cmp	r5, #1
 800612a:	d034      	beq.n	8006196 <OV5640_MirrorFlipConfig+0xc6>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800612c:	2301      	movs	r3, #1
 800612e:	f10d 0206 	add.w	r2, sp, #6
 8006132:	f643 0120 	movw	r1, #14368	@ 0x3820
 8006136:	4620      	mov	r0, r4
 8006138:	f000 f948 	bl	80063cc <ov5640_write_reg>
 800613c:	2800      	cmp	r0, #0
 800613e:	d13a      	bne.n	80061b6 <OV5640_MirrorFlipConfig+0xe6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8006140:	2301      	movs	r3, #1
 8006142:	f10d 0207 	add.w	r2, sp, #7
 8006146:	f643 0121 	movw	r1, #14369	@ 0x3821
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f93e 	bl	80063cc <ov5640_write_reg>
 8006150:	3800      	subs	r0, #0
 8006152:	bf18      	it	ne
 8006154:	2001      	movne	r0, #1
 8006156:	4240      	negs	r0, r0
}
 8006158:	b003      	add	sp, #12
 800615a:	bd30      	pop	{r4, r5, pc}
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800615c:	2301      	movs	r3, #1
 800615e:	f10d 0206 	add.w	r2, sp, #6
 8006162:	f643 0120 	movw	r1, #14368	@ 0x3820
 8006166:	4620      	mov	r0, r4
 8006168:	f000 f930 	bl	80063cc <ov5640_write_reg>
 800616c:	bb18      	cbnz	r0, 80061b6 <OV5640_MirrorFlipConfig+0xe6>
            tmp3821 |= 0x06U;
 800616e:	f89d 5007 	ldrb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8006172:	2301      	movs	r3, #1
 8006174:	f10d 0207 	add.w	r2, sp, #7
 8006178:	f643 0121 	movw	r1, #14369	@ 0x3821
            tmp3821 |= 0x06U;
 800617c:	f045 0506 	orr.w	r5, r5, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8006180:	4620      	mov	r0, r4
            tmp3821 |= 0x06U;
 8006182:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8006186:	f000 f921 	bl	80063cc <ov5640_write_reg>
 800618a:	3800      	subs	r0, #0
 800618c:	bf18      	it	ne
 800618e:	2001      	movne	r0, #1
 8006190:	4240      	negs	r0, r0
}
 8006192:	b003      	add	sp, #12
 8006194:	bd30      	pop	{r4, r5, pc}
          tmp3820 |= 0x06U;
 8006196:	f89d 3006 	ldrb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800619a:	f10d 0206 	add.w	r2, sp, #6
 800619e:	f643 0120 	movw	r1, #14368	@ 0x3820
 80061a2:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 80061a4:	f043 0306 	orr.w	r3, r3, #6
 80061a8:	f88d 3006 	strb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80061ac:	462b      	mov	r3, r5
 80061ae:	f000 f90d 	bl	80063cc <ov5640_write_reg>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d0c4      	beq.n	8006140 <OV5640_MirrorFlipConfig+0x70>
    ret = OV5640_ERROR;
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ba:	e7cd      	b.n	8006158 <OV5640_MirrorFlipConfig+0x88>
          tmp3820 |= 0x06U;
 80061bc:	f89d 1006 	ldrb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80061c0:	2301      	movs	r3, #1
 80061c2:	f10d 0206 	add.w	r2, sp, #6
 80061c6:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 80061c8:	f041 0106 	orr.w	r1, r1, #6
 80061cc:	f88d 1006 	strb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80061d0:	f643 0120 	movw	r1, #14368	@ 0x3820
 80061d4:	f000 f8fa 	bl	80063cc <ov5640_write_reg>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d0c8      	beq.n	800616e <OV5640_MirrorFlipConfig+0x9e>
 80061dc:	e7eb      	b.n	80061b6 <OV5640_MirrorFlipConfig+0xe6>
 80061de:	bf00      	nop

080061e0 <OV5640_NightModeConfig>:
{
 80061e0:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 80061e2:	2300      	movs	r3, #0
{
 80061e4:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 80061e6:	2901      	cmp	r1, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 80061e8:	f100 0418 	add.w	r4, r0, #24
  uint8_t tmp = 0;
 80061ec:	f88d 3007 	strb.w	r3, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 80061f0:	d01c      	beq.n	800622c <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80061f2:	2301      	movs	r3, #1
 80061f4:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
 80061f8:	4620      	mov	r0, r4
 80061fa:	f10d 0207 	add.w	r2, sp, #7
 80061fe:	f000 f8dd 	bl	80063bc <ov5640_read_reg>
 8006202:	b9e8      	cbnz	r0, 8006240 <OV5640_NightModeConfig+0x60>
      tmp &= 0xFBU;
 8006204:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8006208:	2301      	movs	r3, #1
 800620a:	f10d 0207 	add.w	r2, sp, #7
 800620e:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
      tmp &= 0xFBU;
 8006212:	f025 0504 	bic.w	r5, r5, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8006216:	4620      	mov	r0, r4
      tmp &= 0xFBU;
 8006218:	f88d 5007 	strb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 800621c:	f000 f8d6 	bl	80063cc <ov5640_write_reg>
 8006220:	3800      	subs	r0, #0
 8006222:	bf18      	it	ne
 8006224:	2001      	movne	r0, #1
 8006226:	4240      	negs	r0, r0
}
 8006228:	b002      	add	sp, #8
 800622a:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 800622c:	460d      	mov	r5, r1
 800622e:	460b      	mov	r3, r1
 8006230:	f10d 0207 	add.w	r2, sp, #7
 8006234:	f243 0138 	movw	r1, #12344	@ 0x3038
 8006238:	4620      	mov	r0, r4
 800623a:	f000 f8c7 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 800623e:	b118      	cbz	r0, 8006248 <OV5640_NightModeConfig+0x68>
      ret = OV5640_ERROR;
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006244:	b002      	add	sp, #8
 8006246:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8006248:	462b      	mov	r3, r5
 800624a:	f10d 0207 	add.w	r2, sp, #7
 800624e:	f243 0139 	movw	r1, #12345	@ 0x3039
 8006252:	4620      	mov	r0, r4
 8006254:	f000 f8ba 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006258:	2800      	cmp	r0, #0
 800625a:	d1f1      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      tmp = 0x7C;
 800625c:	227c      	movs	r2, #124	@ 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 800625e:	462b      	mov	r3, r5
 8006260:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
 8006264:	4620      	mov	r0, r4
      tmp = 0x7C;
 8006266:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 800626a:	f10d 0207 	add.w	r2, sp, #7
 800626e:	f000 f8ad 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006272:	2800      	cmp	r0, #0
 8006274:	d1e4      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8006276:	462b      	mov	r3, r5
 8006278:	f10d 0207 	add.w	r2, sp, #7
 800627c:	f643 2108 	movw	r1, #14856	@ 0x3a08
 8006280:	4620      	mov	r0, r4
      tmp = 0x01;
 8006282:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8006286:	f000 f8a1 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 800628a:	2800      	cmp	r0, #0
 800628c:	d1d8      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      tmp = 0x27;
 800628e:	2227      	movs	r2, #39	@ 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8006290:	462b      	mov	r3, r5
 8006292:	f643 2109 	movw	r1, #14857	@ 0x3a09
 8006296:	4620      	mov	r0, r4
      tmp = 0x27;
 8006298:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 800629c:	f10d 0207 	add.w	r2, sp, #7
 80062a0:	f000 f894 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d1cb      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      tmp = 0x00;
 80062a8:	f88d 0007 	strb.w	r0, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 80062ac:	462b      	mov	r3, r5
 80062ae:	f10d 0207 	add.w	r2, sp, #7
 80062b2:	f643 210a 	movw	r1, #14858	@ 0x3a0a
 80062b6:	4620      	mov	r0, r4
 80062b8:	f000 f888 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 80062bc:	2800      	cmp	r0, #0
 80062be:	d1bf      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      tmp = 0xF6;
 80062c0:	22f6      	movs	r2, #246	@ 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80062c2:	462b      	mov	r3, r5
 80062c4:	f643 210b 	movw	r1, #14859	@ 0x3a0b
 80062c8:	4620      	mov	r0, r4
      tmp = 0xF6;
 80062ca:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80062ce:	f10d 0207 	add.w	r2, sp, #7
 80062d2:	f000 f87b 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d1b2      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      tmp = 0x04;
 80062da:	2204      	movs	r2, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80062dc:	462b      	mov	r3, r5
 80062de:	f643 210d 	movw	r1, #14861	@ 0x3a0d
 80062e2:	4620      	mov	r0, r4
      tmp = 0x04;
 80062e4:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80062e8:	f10d 0207 	add.w	r2, sp, #7
 80062ec:	f000 f86e 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d1a5      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 80062f4:	462b      	mov	r3, r5
 80062f6:	f10d 0207 	add.w	r2, sp, #7
 80062fa:	f643 210e 	movw	r1, #14862	@ 0x3a0e
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 f864 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006304:	2800      	cmp	r0, #0
 8006306:	d19b      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      tmp = 0x0B;
 8006308:	250b      	movs	r5, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 800630a:	2301      	movs	r3, #1
 800630c:	f10d 0207 	add.w	r2, sp, #7
 8006310:	f643 2102 	movw	r1, #14850	@ 0x3a02
 8006314:	4620      	mov	r0, r4
      tmp = 0x0B;
 8006316:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 800631a:	f000 f857 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 800631e:	2800      	cmp	r0, #0
 8006320:	d18e      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      tmp = 0x88;
 8006322:	2688      	movs	r6, #136	@ 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8006324:	2301      	movs	r3, #1
 8006326:	f10d 0207 	add.w	r2, sp, #7
 800632a:	f643 2103 	movw	r1, #14851	@ 0x3a03
 800632e:	4620      	mov	r0, r4
      tmp = 0x88;
 8006330:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8006334:	f000 f84a 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006338:	2800      	cmp	r0, #0
 800633a:	d181      	bne.n	8006240 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 800633c:	2301      	movs	r3, #1
 800633e:	f10d 0207 	add.w	r2, sp, #7
 8006342:	f643 2114 	movw	r1, #14868	@ 0x3a14
 8006346:	4620      	mov	r0, r4
      tmp = 0x0B;
 8006348:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 800634c:	f000 f83e 	bl	80063cc <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006350:	2800      	cmp	r0, #0
 8006352:	f47f af75 	bne.w	8006240 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8006356:	2301      	movs	r3, #1
 8006358:	f10d 0207 	add.w	r2, sp, #7
 800635c:	f643 2115 	movw	r1, #14869	@ 0x3a15
 8006360:	4620      	mov	r0, r4
      tmp = 0x88;
 8006362:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8006366:	f000 f831 	bl	80063cc <ov5640_write_reg>
    if (ret != OV5640_OK)
 800636a:	3800      	subs	r0, #0
 800636c:	bf18      	it	ne
 800636e:	2001      	movne	r0, #1
 8006370:	4240      	negs	r0, r0
}
 8006372:	b002      	add	sp, #8
 8006374:	bd70      	pop	{r4, r5, r6, pc}
 8006376:	bf00      	nop

08006378 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8006378:	b1c0      	cbz	r0, 80063ac <OV5640_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
 800637a:	890a      	ldrh	r2, [r1, #8]
{
 800637c:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 800637e:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8006382:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8006384:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006388:	694a      	ldr	r2, [r1, #20]
 800638a:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 800638e:	4909      	ldr	r1, [pc, #36]	@ (80063b4 <OV5640_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006390:	60c5      	str	r5, [r0, #12]
 8006392:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8006396:	4a08      	ldr	r2, [pc, #32]	@ (80063b8 <OV5640_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
 8006398:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800639c:	6182      	str	r2, [r0, #24]
    if (pObj->IO.Init != NULL)
 800639e:	b10b      	cbz	r3, 80063a4 <OV5640_RegisterBusIO+0x2c>
}
 80063a0:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 80063a2:	4718      	bx	r3
}
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	bc30      	pop	{r4, r5}
 80063aa:	4770      	bx	lr
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	0800508d 	.word	0x0800508d
 80063b8:	0800509d 	.word	0x0800509d

080063bc <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80063bc:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80063be:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80063c2:	46a4      	mov	ip, r4
}
 80063c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80063c8:	4760      	bx	ip
 80063ca:	bf00      	nop

080063cc <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80063cc:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80063ce:	6804      	ldr	r4, [r0, #0]
 80063d0:	6880      	ldr	r0, [r0, #8]
 80063d2:	46a4      	mov	ip, r4
}
 80063d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80063d8:	4760      	bx	ip
 80063da:	bf00      	nop

080063dc <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80063dc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d102      	bne.n	80063ea <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  }

  return OV9655_OK;
}
 80063ea:	2000      	movs	r0, #0
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop

080063f0 <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop

080063f8 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 80063f8:	b168      	cbz	r0, 8006416 <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80063fa:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 80063fc:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 80063fe:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 8006400:	4610      	mov	r0, r2
    Capabilities->Config_LightMode     = 0;
 8006402:	604a      	str	r2, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8006404:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_Resolution    = 1;
 8006406:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 0;
 8006408:	610a      	str	r2, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 800640a:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 0;
 800640c:	e9c1 3205 	strd	r3, r2, [r1, #20]
    Capabilities->Config_Zoom          = 0;
 8006410:	e9c1 2308 	strd	r2, r3, [r1, #32]
    ret = OV9655_OK;
 8006414:	4770      	bx	lr
    ret = OV9655_ERROR;
 8006416:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 800641a:	4770      	bx	lr

0800641c <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop

08006424 <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop

0800642c <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800642c:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800642e:	6904      	ldr	r4, [r0, #16]
 8006430:	8900      	ldrh	r0, [r0, #8]
 8006432:	46a4      	mov	ip, r4
}
 8006434:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006438:	4760      	bx	ip
 800643a:	bf00      	nop

0800643c <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800643c:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800643e:	68c4      	ldr	r4, [r0, #12]
 8006440:	8900      	ldrh	r0, [r0, #8]
 8006442:	46a4      	mov	ip, r4
}
 8006444:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006448:	4760      	bx	ip
 800644a:	bf00      	nop

0800644c <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 800644c:	2903      	cmp	r1, #3
{
 800644e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006452:	b083      	sub	sp, #12
  if (Resolution > OV9655_R640x480)
 8006454:	f200 80b1 	bhi.w	80065ba <OV9655_SetResolution+0x16e>
    switch (Resolution)
 8006458:	2901      	cmp	r1, #1
 800645a:	4604      	mov	r4, r0
 800645c:	d027      	beq.n	80064ae <OV9655_SetResolution+0x62>
 800645e:	3902      	subs	r1, #2
 8006460:	2901      	cmp	r1, #1
 8006462:	d867      	bhi.n	8006534 <OV9655_SetResolution+0xe8>
 8006464:	4e56      	ldr	r6, [pc, #344]	@ (80065c0 <OV9655_SetResolution+0x174>)
  int32_t ret = OV9655_OK;
 8006466:	2500      	movs	r5, #0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8006468:	f100 0918 	add.w	r9, r0, #24
 800646c:	f506 7893 	add.w	r8, r6, #294	@ 0x126
        if(ret != OV9655_ERROR)
 8006470:	b135      	cbz	r5, 8006480 <OV9655_SetResolution+0x34>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8006472:	3602      	adds	r6, #2
 8006474:	45b0      	cmp	r8, r6
 8006476:	d1fb      	bne.n	8006470 <OV9655_SetResolution+0x24>
}
 8006478:	4628      	mov	r0, r5
 800647a:	b003      	add	sp, #12
 800647c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          tmp = OV9655_VGA[index][1];
 8006480:	7875      	ldrb	r5, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8006482:	2301      	movs	r3, #1
 8006484:	f10d 0207 	add.w	r2, sp, #7
 8006488:	7831      	ldrb	r1, [r6, #0]
 800648a:	4648      	mov	r0, r9
          tmp = OV9655_VGA[index][1];
 800648c:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8006490:	f000 fbd8 	bl	8006c44 <ov9655_write_reg>
 8006494:	1e05      	subs	r5, r0, #0
  tickstart = pObj->IO.GetTick();
 8006496:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8006498:	bf18      	it	ne
 800649a:	2501      	movne	r5, #1
  tickstart = pObj->IO.GetTick();
 800649c:	4798      	blx	r3
 800649e:	4607      	mov	r7, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80064a0:	426d      	negs	r5, r5
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80064a2:	6963      	ldr	r3, [r4, #20]
 80064a4:	4798      	blx	r3
 80064a6:	1bc0      	subs	r0, r0, r7
 80064a8:	2801      	cmp	r0, #1
 80064aa:	d9fa      	bls.n	80064a2 <OV9655_SetResolution+0x56>
 80064ac:	e7e1      	b.n	8006472 <OV9655_SetResolution+0x26>
 80064ae:	4e45      	ldr	r6, [pc, #276]	@ (80065c4 <OV9655_SetResolution+0x178>)
  int32_t ret = OV9655_OK;
 80064b0:	2500      	movs	r5, #0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80064b2:	f100 0918 	add.w	r9, r0, #24
 80064b6:	f506 7891 	add.w	r8, r6, #290	@ 0x122
        if(ret != OV9655_ERROR)
 80064ba:	b325      	cbz	r5, 8006506 <OV9655_SetResolution+0xba>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80064bc:	3602      	adds	r6, #2
 80064be:	4546      	cmp	r6, r8
 80064c0:	d1fb      	bne.n	80064ba <OV9655_SetResolution+0x6e>
        if(ret != OV9655_ERROR)
 80064c2:	4e41      	ldr	r6, [pc, #260]	@ (80065c8 <OV9655_SetResolution+0x17c>)
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80064c4:	f104 0918 	add.w	r9, r4, #24
 80064c8:	f106 080a 	add.w	r8, r6, #10
        if(ret != OV9655_ERROR)
 80064cc:	b125      	cbz	r5, 80064d8 <OV9655_SetResolution+0x8c>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 80064ce:	3602      	adds	r6, #2
 80064d0:	4546      	cmp	r6, r8
 80064d2:	d0d1      	beq.n	8006478 <OV9655_SetResolution+0x2c>
        if(ret != OV9655_ERROR)
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	d1fa      	bne.n	80064ce <OV9655_SetResolution+0x82>
          tmp = OV9655_QVGA[index][1];
 80064d8:	7873      	ldrb	r3, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80064da:	f10d 0207 	add.w	r2, sp, #7
 80064de:	7831      	ldrb	r1, [r6, #0]
 80064e0:	4648      	mov	r0, r9
          tmp = OV9655_QVGA[index][1];
 80064e2:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80064e6:	2301      	movs	r3, #1
 80064e8:	f000 fbac 	bl	8006c44 <ov9655_write_reg>
 80064ec:	1e05      	subs	r5, r0, #0
  tickstart = pObj->IO.GetTick();
 80064ee:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80064f0:	bf18      	it	ne
 80064f2:	2501      	movne	r5, #1
  tickstart = pObj->IO.GetTick();
 80064f4:	4798      	blx	r3
 80064f6:	4607      	mov	r7, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80064f8:	426d      	negs	r5, r5
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80064fa:	6963      	ldr	r3, [r4, #20]
 80064fc:	4798      	blx	r3
 80064fe:	1bc0      	subs	r0, r0, r7
 8006500:	2801      	cmp	r0, #1
 8006502:	d9fa      	bls.n	80064fa <OV9655_SetResolution+0xae>
 8006504:	e7e3      	b.n	80064ce <OV9655_SetResolution+0x82>
          tmp = OV9655_QVGA_QQVGA[index][1];
 8006506:	7875      	ldrb	r5, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006508:	2301      	movs	r3, #1
 800650a:	f10d 0207 	add.w	r2, sp, #7
 800650e:	7831      	ldrb	r1, [r6, #0]
 8006510:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8006512:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006516:	f000 fb95 	bl	8006c44 <ov9655_write_reg>
 800651a:	1e05      	subs	r5, r0, #0
  tickstart = pObj->IO.GetTick();
 800651c:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800651e:	bf18      	it	ne
 8006520:	2501      	movne	r5, #1
  tickstart = pObj->IO.GetTick();
 8006522:	4798      	blx	r3
 8006524:	4607      	mov	r7, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006526:	426d      	negs	r5, r5
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006528:	6963      	ldr	r3, [r4, #20]
 800652a:	4798      	blx	r3
 800652c:	1bc0      	subs	r0, r0, r7
 800652e:	2801      	cmp	r0, #1
 8006530:	d9fa      	bls.n	8006528 <OV9655_SetResolution+0xdc>
 8006532:	e7c3      	b.n	80064bc <OV9655_SetResolution+0x70>
 8006534:	4e23      	ldr	r6, [pc, #140]	@ (80065c4 <OV9655_SetResolution+0x178>)
  int32_t ret = OV9655_OK;
 8006536:	2500      	movs	r5, #0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006538:	f100 0918 	add.w	r9, r0, #24
 800653c:	f506 7891 	add.w	r8, r6, #290	@ 0x122
        if(ret != OV9655_ERROR)
 8006540:	b325      	cbz	r5, 800658c <OV9655_SetResolution+0x140>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8006542:	3602      	adds	r6, #2
 8006544:	45b0      	cmp	r8, r6
 8006546:	d1fb      	bne.n	8006540 <OV9655_SetResolution+0xf4>
        if(ret != OV9655_ERROR)
 8006548:	4e20      	ldr	r6, [pc, #128]	@ (80065cc <OV9655_SetResolution+0x180>)
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800654a:	f104 0918 	add.w	r9, r4, #24
 800654e:	f106 080a 	add.w	r8, r6, #10
        if(ret != OV9655_ERROR)
 8006552:	b125      	cbz	r5, 800655e <OV9655_SetResolution+0x112>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8006554:	3602      	adds	r6, #2
 8006556:	4546      	cmp	r6, r8
 8006558:	d08e      	beq.n	8006478 <OV9655_SetResolution+0x2c>
        if(ret != OV9655_ERROR)
 800655a:	2d00      	cmp	r5, #0
 800655c:	d1fa      	bne.n	8006554 <OV9655_SetResolution+0x108>
          tmp = OV9655_QQVGA[index][1];
 800655e:	7873      	ldrb	r3, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006560:	f10d 0207 	add.w	r2, sp, #7
 8006564:	7831      	ldrb	r1, [r6, #0]
 8006566:	4648      	mov	r0, r9
          tmp = OV9655_QQVGA[index][1];
 8006568:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800656c:	2301      	movs	r3, #1
 800656e:	f000 fb69 	bl	8006c44 <ov9655_write_reg>
 8006572:	1e05      	subs	r5, r0, #0
  tickstart = pObj->IO.GetTick();
 8006574:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006576:	bf18      	it	ne
 8006578:	2501      	movne	r5, #1
  tickstart = pObj->IO.GetTick();
 800657a:	4798      	blx	r3
 800657c:	4607      	mov	r7, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800657e:	426d      	negs	r5, r5
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006580:	6963      	ldr	r3, [r4, #20]
 8006582:	4798      	blx	r3
 8006584:	1bc0      	subs	r0, r0, r7
 8006586:	2801      	cmp	r0, #1
 8006588:	d9fa      	bls.n	8006580 <OV9655_SetResolution+0x134>
 800658a:	e7e3      	b.n	8006554 <OV9655_SetResolution+0x108>
          tmp = OV9655_QVGA_QQVGA[index][1];
 800658c:	7875      	ldrb	r5, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800658e:	2301      	movs	r3, #1
 8006590:	f10d 0207 	add.w	r2, sp, #7
 8006594:	7831      	ldrb	r1, [r6, #0]
 8006596:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8006598:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800659c:	f000 fb52 	bl	8006c44 <ov9655_write_reg>
 80065a0:	1e05      	subs	r5, r0, #0
  tickstart = pObj->IO.GetTick();
 80065a2:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80065a4:	bf18      	it	ne
 80065a6:	2501      	movne	r5, #1
  tickstart = pObj->IO.GetTick();
 80065a8:	4798      	blx	r3
 80065aa:	4607      	mov	r7, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80065ac:	426d      	negs	r5, r5
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80065ae:	6963      	ldr	r3, [r4, #20]
 80065b0:	4798      	blx	r3
 80065b2:	1bc0      	subs	r0, r0, r7
 80065b4:	2801      	cmp	r0, #1
 80065b6:	d9fa      	bls.n	80065ae <OV9655_SetResolution+0x162>
 80065b8:	e7c3      	b.n	8006542 <OV9655_SetResolution+0xf6>
    ret = OV9655_ERROR;
 80065ba:	f04f 35ff 	mov.w	r5, #4294967295
  return ret;
 80065be:	e75b      	b.n	8006478 <OV9655_SetResolution+0x2c>
 80065c0:	0804997c 	.word	0x0804997c
 80065c4:	08049abc 	.word	0x08049abc
 80065c8:	08049aa4 	.word	0x08049aa4
 80065cc:	08049ab0 	.word	0x08049ab0

080065d0 <OV9655_SetColorEffect>:
  switch(Effect)
 80065d0:	3901      	subs	r1, #1
{
 80065d2:	b570      	push	{r4, r5, r6, lr}
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80065d4:	f100 0518 	add.w	r5, r0, #24
{
 80065d8:	b082      	sub	sp, #8
  switch(Effect)
 80065da:	291f      	cmp	r1, #31
 80065dc:	d821      	bhi.n	8006622 <OV9655_SetColorEffect+0x52>
 80065de:	e8df f011 	tbh	[pc, r1, lsl #1]
 80065e2:	006a      	.short	0x006a
 80065e4:	002000ad 	.word	0x002000ad
 80065e8:	002000de 	.word	0x002000de
 80065ec:	00200020 	.word	0x00200020
 80065f0:	00200123 	.word	0x00200123
 80065f4:	00200020 	.word	0x00200020
 80065f8:	00200020 	.word	0x00200020
 80065fc:	00200020 	.word	0x00200020
 8006600:	0020013b 	.word	0x0020013b
 8006604:	00200020 	.word	0x00200020
 8006608:	00200020 	.word	0x00200020
 800660c:	00200020 	.word	0x00200020
 8006610:	00200020 	.word	0x00200020
 8006614:	00200020 	.word	0x00200020
 8006618:	00200020 	.word	0x00200020
 800661c:	00200020 	.word	0x00200020
 8006620:	0168      	.short	0x0168
    tmp = 0xCC;
 8006622:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006624:	2301      	movs	r3, #1
 8006626:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 800662a:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800662e:	4628      	mov	r0, r5
 8006630:	213a      	movs	r1, #58	@ 0x3a
    tmp = 0x80;
 8006632:	2680      	movs	r6, #128	@ 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006634:	f000 fb06 	bl	8006c44 <ov9655_write_reg>
 8006638:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800663a:	2301      	movs	r3, #1
 800663c:	f10d 0207 	add.w	r2, sp, #7
 8006640:	214f      	movs	r1, #79	@ 0x4f
 8006642:	4628      	mov	r0, r5
    tmp = 0x80;
 8006644:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006648:	f000 fafc 	bl	8006c44 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800664c:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800664e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006650:	f10d 0207 	add.w	r2, sp, #7
 8006654:	2150      	movs	r1, #80	@ 0x50
 8006656:	4628      	mov	r0, r5
 8006658:	f000 faf4 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x00;
 800665c:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800665e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006660:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x00;
 8006664:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006668:	2151      	movs	r1, #81	@ 0x51
 800666a:	2301      	movs	r3, #1
 800666c:	4628      	mov	r0, r5
 800666e:	f000 fae9 	bl	8006c44 <ov9655_write_reg>
 8006672:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006674:	2301      	movs	r3, #1
 8006676:	f10d 0207 	add.w	r2, sp, #7
 800667a:	2152      	movs	r1, #82	@ 0x52
 800667c:	4628      	mov	r0, r5
 800667e:	f000 fae1 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x80;
 8006682:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006686:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006688:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800668a:	f10d 0207 	add.w	r2, sp, #7
 800668e:	2153      	movs	r1, #83	@ 0x53
 8006690:	4628      	mov	r0, r5
 8006692:	f000 fad7 	bl	8006c44 <ov9655_write_reg>
 8006696:	4601      	mov	r1, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8006698:	2301      	movs	r3, #1
 800669a:	f10d 0207 	add.w	r2, sp, #7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800669e:	440c      	add	r4, r1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80066a0:	4628      	mov	r0, r5
 80066a2:	2154      	movs	r1, #84	@ 0x54
 80066a4:	f000 face 	bl	8006c44 <ov9655_write_reg>
 80066a8:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 80066aa:	3800      	subs	r0, #0
 80066ac:	bf18      	it	ne
 80066ae:	2001      	movne	r0, #1
}
 80066b0:	4240      	negs	r0, r0
 80066b2:	b002      	add	sp, #8
 80066b4:	bd70      	pop	{r4, r5, r6, pc}
    tmp = 0xCC;
 80066b6:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80066b8:	2301      	movs	r3, #1
 80066ba:	f10d 0207 	add.w	r2, sp, #7
 80066be:	4628      	mov	r0, r5
    tmp = 0xCC;
 80066c0:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80066c4:	213a      	movs	r1, #58	@ 0x3a
 80066c6:	f000 fabd 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x00;
 80066ca:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80066cc:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80066ce:	2301      	movs	r3, #1
 80066d0:	214f      	movs	r1, #79	@ 0x4f
    tmp = 0x00;
 80066d2:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80066d6:	4628      	mov	r0, r5
 80066d8:	f10d 0207 	add.w	r2, sp, #7
 80066dc:	f000 fab2 	bl	8006c44 <ov9655_write_reg>
 80066e0:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80066e2:	2301      	movs	r3, #1
 80066e4:	f10d 0207 	add.w	r2, sp, #7
 80066e8:	2150      	movs	r1, #80	@ 0x50
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 faaa 	bl	8006c44 <ov9655_write_reg>
 80066f0:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80066f2:	2301      	movs	r3, #1
 80066f4:	f10d 0207 	add.w	r2, sp, #7
 80066f8:	2151      	movs	r1, #81	@ 0x51
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 faa2 	bl	8006c44 <ov9655_write_reg>
 8006700:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006702:	2301      	movs	r3, #1
 8006704:	f10d 0207 	add.w	r2, sp, #7
 8006708:	2152      	movs	r1, #82	@ 0x52
 800670a:	4628      	mov	r0, r5
 800670c:	f000 fa9a 	bl	8006c44 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006710:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006712:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006714:	f10d 0207 	add.w	r2, sp, #7
 8006718:	2153      	movs	r1, #83	@ 0x53
 800671a:	4628      	mov	r0, r5
 800671c:	f000 fa92 	bl	8006c44 <ov9655_write_reg>
 8006720:	4601      	mov	r1, r0
    tmp = 0x60;
 8006722:	2360      	movs	r3, #96	@ 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8006724:	f10d 0207 	add.w	r2, sp, #7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006728:	440c      	add	r4, r1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800672a:	4628      	mov	r0, r5
    tmp = 0x60;
 800672c:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8006730:	2154      	movs	r1, #84	@ 0x54
 8006732:	2301      	movs	r3, #1
 8006734:	f000 fa86 	bl	8006c44 <ov9655_write_reg>
 8006738:	4420      	add	r0, r4
    break;
 800673a:	e7b6      	b.n	80066aa <OV9655_SetColorEffect+0xda>
    tmp = 0xCC;
 800673c:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800673e:	2301      	movs	r3, #1
 8006740:	f10d 0207 	add.w	r2, sp, #7
 8006744:	4628      	mov	r0, r5
    tmp = 0xCC;
 8006746:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800674a:	213a      	movs	r1, #58	@ 0x3a
 800674c:	f000 fa7a 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x60;
 8006750:	2260      	movs	r2, #96	@ 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006752:	2301      	movs	r3, #1
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006754:	4604      	mov	r4, r0
    tmp = 0x60;
 8006756:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800675a:	214f      	movs	r1, #79	@ 0x4f
 800675c:	f10d 0207 	add.w	r2, sp, #7
 8006760:	4628      	mov	r0, r5
 8006762:	f000 fa6f 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x00;
 8006766:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006768:	4404      	add	r4, r0
    tmp = 0x00;
 800676a:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800676e:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006770:	f10d 0207 	add.w	r2, sp, #7
 8006774:	2150      	movs	r1, #80	@ 0x50
 8006776:	4628      	mov	r0, r5
 8006778:	f000 fa64 	bl	8006c44 <ov9655_write_reg>
 800677c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800677e:	f10d 0207 	add.w	r2, sp, #7
 8006782:	2301      	movs	r3, #1
 8006784:	2151      	movs	r1, #81	@ 0x51
 8006786:	4628      	mov	r0, r5
 8006788:	f000 fa5c 	bl	8006c44 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800678c:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800678e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006790:	f10d 0207 	add.w	r2, sp, #7
 8006794:	2152      	movs	r1, #82	@ 0x52
 8006796:	4628      	mov	r0, r5
 8006798:	f000 fa54 	bl	8006c44 <ov9655_write_reg>
 800679c:	e773      	b.n	8006686 <OV9655_SetColorEffect+0xb6>
    tmp = 0xCC;
 800679e:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80067a0:	2301      	movs	r3, #1
 80067a2:	f10d 0207 	add.w	r2, sp, #7
 80067a6:	4628      	mov	r0, r5
    tmp = 0xCC;
 80067a8:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80067ac:	213a      	movs	r1, #58	@ 0x3a
 80067ae:	f000 fa49 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x00;
 80067b2:	2600      	movs	r6, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80067b4:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80067b6:	2301      	movs	r3, #1
 80067b8:	f10d 0207 	add.w	r2, sp, #7
 80067bc:	214f      	movs	r1, #79	@ 0x4f
 80067be:	4628      	mov	r0, r5
    tmp = 0x00;
 80067c0:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80067c4:	f000 fa3e 	bl	8006c44 <ov9655_write_reg>
 80067c8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80067ca:	2301      	movs	r3, #1
 80067cc:	f10d 0207 	add.w	r2, sp, #7
 80067d0:	2150      	movs	r1, #80	@ 0x50
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 fa36 	bl	8006c44 <ov9655_write_reg>
 80067d8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80067da:	2301      	movs	r3, #1
 80067dc:	f10d 0207 	add.w	r2, sp, #7
 80067e0:	2151      	movs	r1, #81	@ 0x51
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 fa2e 	bl	8006c44 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80067e8:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80067ea:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80067ec:	f10d 0207 	add.w	r2, sp, #7
 80067f0:	2152      	movs	r1, #82	@ 0x52
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 fa26 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x80;
 80067f8:	2380      	movs	r3, #128	@ 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80067fa:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80067fc:	f10d 0207 	add.w	r2, sp, #7
 8006800:	2153      	movs	r1, #83	@ 0x53
    tmp = 0x80;
 8006802:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006806:	4628      	mov	r0, r5
 8006808:	2301      	movs	r3, #1
 800680a:	f000 fa1b 	bl	8006c44 <ov9655_write_reg>
 800680e:	4603      	mov	r3, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8006810:	f10d 0207 	add.w	r2, sp, #7
 8006814:	4628      	mov	r0, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006816:	441c      	add	r4, r3
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8006818:	2154      	movs	r1, #84	@ 0x54
 800681a:	2301      	movs	r3, #1
    tmp = 0x00;
 800681c:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8006820:	f000 fa10 	bl	8006c44 <ov9655_write_reg>
 8006824:	4420      	add	r0, r4
    break;
 8006826:	e740      	b.n	80066aa <OV9655_SetColorEffect+0xda>
    tmp = 0xCC;
 8006828:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800682a:	2301      	movs	r3, #1
 800682c:	f10d 0207 	add.w	r2, sp, #7
 8006830:	4628      	mov	r0, r5
    tmp = 0xCC;
 8006832:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006836:	213a      	movs	r1, #58	@ 0x3a
 8006838:	f000 fa04 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x00;
 800683c:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800683e:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006840:	2301      	movs	r3, #1
    tmp = 0x00;
 8006842:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006846:	214f      	movs	r1, #79	@ 0x4f
 8006848:	f10d 0207 	add.w	r2, sp, #7
 800684c:	4628      	mov	r0, r5
 800684e:	f000 f9f9 	bl	8006c44 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006852:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006854:	4404      	add	r4, r0
 8006856:	e78b      	b.n	8006770 <OV9655_SetColorEffect+0x1a0>
    tmp = 0xCC;
 8006858:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800685a:	2301      	movs	r3, #1
 800685c:	f10d 0207 	add.w	r2, sp, #7
 8006860:	4628      	mov	r0, r5
    tmp = 0xCC;
 8006862:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006866:	213a      	movs	r1, #58	@ 0x3a
 8006868:	f000 f9ec 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x00;
 800686c:	2600      	movs	r6, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800686e:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006870:	2301      	movs	r3, #1
 8006872:	f10d 0207 	add.w	r2, sp, #7
 8006876:	214f      	movs	r1, #79	@ 0x4f
 8006878:	4628      	mov	r0, r5
    tmp = 0x00;
 800687a:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800687e:	f000 f9e1 	bl	8006c44 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006882:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006884:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006886:	f10d 0207 	add.w	r2, sp, #7
 800688a:	2150      	movs	r1, #80	@ 0x50
 800688c:	4628      	mov	r0, r5
 800688e:	f000 f9d9 	bl	8006c44 <ov9655_write_reg>
    tmp = 0x20;
 8006892:	2320      	movs	r3, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006894:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006896:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x20;
 800689a:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800689e:	2151      	movs	r1, #81	@ 0x51
 80068a0:	2301      	movs	r3, #1
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 f9ce 	bl	8006c44 <ov9655_write_reg>
    tmp = 0xF0;
 80068a8:	23f0      	movs	r3, #240	@ 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80068aa:	4404      	add	r4, r0
    tmp = 0xF0;
 80068ac:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80068b0:	e6e0      	b.n	8006674 <OV9655_SetColorEffect+0xa4>
    tmp = 0xEC;
 80068b2:	21ec      	movs	r1, #236	@ 0xec
 80068b4:	e6b6      	b.n	8006624 <OV9655_SetColorEffect+0x54>
 80068b6:	bf00      	nop

080068b8 <OV9655_SetBrightness>:
{
 80068b8:	b500      	push	{lr}
  tmp = brightness_level[Level + 4];
 80068ba:	3110      	adds	r1, #16
{
 80068bc:	b085      	sub	sp, #20
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 80068be:	4a0d      	ldr	r2, [pc, #52]	@ (80068f4 <OV9655_SetBrightness+0x3c>)
{
 80068c0:	4686      	mov	lr, r0
  tmp = brightness_level[Level + 4];
 80068c2:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 80068c6:	ab01      	add	r3, sp, #4
 80068c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80068ca:	c303      	stmia	r3!, {r0, r1}
 80068cc:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 80068ce:	2155      	movs	r1, #85	@ 0x55
  tmp = brightness_level[Level + 4];
 80068d0:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 80068d4:	2301      	movs	r3, #1
 80068d6:	f10d 0203 	add.w	r2, sp, #3
 80068da:	f10e 0018 	add.w	r0, lr, #24
  tmp = brightness_level[Level + 4];
 80068de:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 80068e2:	f000 f9af 	bl	8006c44 <ov9655_write_reg>
 80068e6:	3800      	subs	r0, #0
 80068e8:	bf18      	it	ne
 80068ea:	2001      	movne	r0, #1
}
 80068ec:	4240      	negs	r0, r0
 80068ee:	b005      	add	sp, #20
 80068f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80068f4:	0801bad8 	.word	0x0801bad8

080068f8 <OV9655_SetContrast>:
{
 80068f8:	b500      	push	{lr}
  tmp = contrast_level[Level + 4];
 80068fa:	3110      	adds	r1, #16
{
 80068fc:	b085      	sub	sp, #20
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 80068fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006934 <OV9655_SetContrast+0x3c>)
{
 8006900:	4686      	mov	lr, r0
  tmp = contrast_level[Level + 4];
 8006902:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8006906:	ab01      	add	r3, sp, #4
 8006908:	ca07      	ldmia	r2, {r0, r1, r2}
 800690a:	c303      	stmia	r3!, {r0, r1}
 800690c:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800690e:	2156      	movs	r1, #86	@ 0x56
  tmp = contrast_level[Level + 4];
 8006910:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8006914:	2301      	movs	r3, #1
 8006916:	f10d 0203 	add.w	r2, sp, #3
 800691a:	f10e 0018 	add.w	r0, lr, #24
  tmp = contrast_level[Level + 4];
 800691e:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8006922:	f000 f98f 	bl	8006c44 <ov9655_write_reg>
 8006926:	3800      	subs	r0, #0
 8006928:	bf18      	it	ne
 800692a:	2001      	movne	r0, #1
}
 800692c:	4240      	negs	r0, r0
 800692e:	b005      	add	sp, #20
 8006930:	f85d fb04 	ldr.w	pc, [sp], #4
 8006934:	08049970 	.word	0x08049970

08006938 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8006938:	f031 0302 	bics.w	r3, r1, #2
{
 800693c:	b530      	push	{r4, r5, lr}
 800693e:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8006940:	d177      	bne.n	8006a32 <OV9655_SetPixelFormat+0xfa>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006942:	f100 0418 	add.w	r4, r0, #24
 8006946:	460d      	mov	r5, r1
 8006948:	2301      	movs	r3, #1
 800694a:	f10d 0207 	add.w	r2, sp, #7
 800694e:	2112      	movs	r1, #18
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f96f 	bl	8006c34 <ov9655_read_reg>
 8006956:	2800      	cmp	r0, #0
 8006958:	d16b      	bne.n	8006a32 <OV9655_SetPixelFormat+0xfa>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 800695a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 800695e:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8006960:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
    switch (PixelFormat)
 8006964:	d029      	beq.n	80069ba <OV9655_SetPixelFormat+0x82>
      tmp |= 0x03U;
 8006966:	f043 0103 	orr.w	r1, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 800696a:	f10d 0207 	add.w	r2, sp, #7
 800696e:	2301      	movs	r3, #1
 8006970:	4620      	mov	r0, r4
      tmp |= 0x03U;
 8006972:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006976:	2112      	movs	r1, #18
 8006978:	f000 f964 	bl	8006c44 <ov9655_write_reg>
 800697c:	2800      	cmp	r0, #0
 800697e:	d158      	bne.n	8006a32 <OV9655_SetPixelFormat+0xfa>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006980:	2301      	movs	r3, #1
 8006982:	f10d 0207 	add.w	r2, sp, #7
 8006986:	2140      	movs	r1, #64	@ 0x40
 8006988:	4620      	mov	r0, r4
 800698a:	f000 f953 	bl	8006c34 <ov9655_read_reg>
 800698e:	2800      	cmp	r0, #0
 8006990:	d14f      	bne.n	8006a32 <OV9655_SetPixelFormat+0xfa>
        tmp |= 0x10U;
 8006992:	f89d 5007 	ldrb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006996:	2301      	movs	r3, #1
 8006998:	f10d 0207 	add.w	r2, sp, #7
 800699c:	2140      	movs	r1, #64	@ 0x40
        tmp |= 0x10U;
 800699e:	f045 0510 	orr.w	r5, r5, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80069a2:	4620      	mov	r0, r4
        tmp |= 0x10U;
 80069a4:	f88d 5007 	strb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80069a8:	f000 f94c 	bl	8006c44 <ov9655_write_reg>
 80069ac:	1e05      	subs	r5, r0, #0
 80069ae:	bf18      	it	ne
 80069b0:	2501      	movne	r5, #1
 80069b2:	426d      	negs	r5, r5
}
 80069b4:	4628      	mov	r0, r5
 80069b6:	b003      	add	sp, #12
 80069b8:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x02U;
 80069ba:	f043 0102 	orr.w	r1, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80069be:	f10d 0207 	add.w	r2, sp, #7
 80069c2:	2301      	movs	r3, #1
 80069c4:	4620      	mov	r0, r4
      tmp |= 0x02U;
 80069c6:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80069ca:	2112      	movs	r1, #18
 80069cc:	f000 f93a 	bl	8006c44 <ov9655_write_reg>
 80069d0:	bb78      	cbnz	r0, 8006a32 <OV9655_SetPixelFormat+0xfa>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80069d2:	2301      	movs	r3, #1
 80069d4:	f10d 0207 	add.w	r2, sp, #7
 80069d8:	213a      	movs	r1, #58	@ 0x3a
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 f92a 	bl	8006c34 <ov9655_read_reg>
 80069e0:	bb38      	cbnz	r0, 8006a32 <OV9655_SetPixelFormat+0xfa>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 80069e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80069e6:	2301      	movs	r3, #1
 80069e8:	f10d 0207 	add.w	r2, sp, #7
 80069ec:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 80069ee:	f021 012c 	bic.w	r1, r1, #44	@ 0x2c
 80069f2:	f88d 1007 	strb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80069f6:	213a      	movs	r1, #58	@ 0x3a
 80069f8:	f000 f924 	bl	8006c44 <ov9655_write_reg>
 80069fc:	b9c8      	cbnz	r0, 8006a32 <OV9655_SetPixelFormat+0xfa>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80069fe:	2301      	movs	r3, #1
 8006a00:	f10d 0207 	add.w	r2, sp, #7
 8006a04:	2140      	movs	r1, #64	@ 0x40
 8006a06:	4620      	mov	r0, r4
 8006a08:	f000 f914 	bl	8006c34 <ov9655_read_reg>
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	b9a8      	cbnz	r0, 8006a3c <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 8006a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a14:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006a18:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8006a1c:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006a20:	2301      	movs	r3, #1
 8006a22:	f10d 0207 	add.w	r2, sp, #7
 8006a26:	2140      	movs	r1, #64	@ 0x40
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 f90b 	bl	8006c44 <ov9655_write_reg>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d0c0      	beq.n	80069b4 <OV9655_SetPixelFormat+0x7c>
    ret = OV9655_ERROR;
 8006a32:	f04f 35ff 	mov.w	r5, #4294967295
}
 8006a36:	4628      	mov	r0, r5
 8006a38:	b003      	add	sp, #12
 8006a3a:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 8006a3c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a40:	e7ee      	b.n	8006a20 <OV9655_SetPixelFormat+0xe8>
 8006a42:	bf00      	nop

08006a44 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 8006a44:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8006a48:	b10b      	cbz	r3, 8006a4e <OV9655_Init+0xa>
  int32_t ret = OV9655_OK;
 8006a4a:	2000      	movs	r0, #0
}
 8006a4c:	4770      	bx	lr
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8006a4e:	2903      	cmp	r1, #3
{
 8006a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a52:	460e      	mov	r6, r1
 8006a54:	b083      	sub	sp, #12
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8006a56:	d827      	bhi.n	8006aa8 <OV9655_Init+0x64>
 8006a58:	f032 0302 	bics.w	r3, r2, #2
 8006a5c:	4617      	mov	r7, r2
 8006a5e:	d123      	bne.n	8006aa8 <OV9655_Init+0x64>
      tmp = 0x80U;
 8006a60:	2280      	movs	r2, #128	@ 0x80
 8006a62:	4604      	mov	r4, r0
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006a64:	2301      	movs	r3, #1
 8006a66:	2112      	movs	r1, #18
      tmp = 0x80U;
 8006a68:	f88d 2007 	strb.w	r2, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006a6c:	3018      	adds	r0, #24
 8006a6e:	f10d 0207 	add.w	r2, sp, #7
 8006a72:	f000 f8e7 	bl	8006c44 <ov9655_write_reg>
 8006a76:	b9b8      	cbnz	r0, 8006aa8 <OV9655_Init+0x64>
  tickstart = pObj->IO.GetTick();
 8006a78:	6963      	ldr	r3, [r4, #20]
 8006a7a:	4798      	blx	r3
 8006a7c:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006a7e:	6963      	ldr	r3, [r4, #20]
 8006a80:	4798      	blx	r3
 8006a82:	1b43      	subs	r3, r0, r5
 8006a84:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a86:	d9fa      	bls.n	8006a7e <OV9655_Init+0x3a>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff fcde 	bl	800644c <OV9655_SetResolution>
 8006a90:	b950      	cbnz	r0, 8006aa8 <OV9655_Init+0x64>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 8006a92:	4639      	mov	r1, r7
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff ff4f 	bl	8006938 <OV9655_SetPixelFormat>
 8006a9a:	b928      	cbnz	r0, 8006aa8 <OV9655_Init+0x64>
          pObj->IsInitialized = 1U;
 8006a9c:	2301      	movs	r3, #1
  int32_t ret = OV9655_OK;
 8006a9e:	2000      	movs	r0, #0
          pObj->IsInitialized = 1U;
 8006aa0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8006aa4:	b003      	add	sp, #12
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = OV9655_ERROR;
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	e7fa      	b.n	8006aa4 <OV9655_Init+0x60>
 8006aae:	bf00      	nop

08006ab0 <OV9655_GetResolution>:
{
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	2132      	movs	r1, #50	@ 0x32
 8006aba:	f10d 0207 	add.w	r2, sp, #7
 8006abe:	3018      	adds	r0, #24
 8006ac0:	f000 f8b8 	bl	8006c34 <ov9655_read_reg>
 8006ac4:	b938      	cbnz	r0, 8006ad6 <OV9655_GetResolution+0x26>
    switch (tmp)
 8006ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006aca:	2ba4      	cmp	r3, #164	@ 0xa4
 8006acc:	d00d      	beq.n	8006aea <OV9655_GetResolution+0x3a>
 8006ace:	2bff      	cmp	r3, #255	@ 0xff
 8006ad0:	d005      	beq.n	8006ade <OV9655_GetResolution+0x2e>
 8006ad2:	2b12      	cmp	r3, #18
 8006ad4:	d007      	beq.n	8006ae6 <OV9655_GetResolution+0x36>
 8006ad6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ada:	b002      	add	sp, #8
 8006adc:	bd10      	pop	{r4, pc}
    switch (tmp)
 8006ade:	2303      	movs	r3, #3
      *Resolution = OV9655_R320x240;
 8006ae0:	6023      	str	r3, [r4, #0]
}
 8006ae2:	b002      	add	sp, #8
 8006ae4:	bd10      	pop	{r4, pc}
    switch (tmp)
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7fa      	b.n	8006ae0 <OV9655_GetResolution+0x30>
 8006aea:	4603      	mov	r3, r0
 8006aec:	e7f8      	b.n	8006ae0 <OV9655_GetResolution+0x30>
 8006aee:	bf00      	nop

08006af0 <OV9655_ReadID>:
{
 8006af0:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 8006af2:	4604      	mov	r4, r0
{
 8006af4:	b083      	sub	sp, #12
 8006af6:	460d      	mov	r5, r1
  pObj->IO.Init();
 8006af8:	f854 3b18 	ldr.w	r3, [r4], #24
 8006afc:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 8006afe:	2301      	movs	r3, #1
 8006b00:	f10d 0207 	add.w	r2, sp, #7
 8006b04:	210a      	movs	r1, #10
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 f894 	bl	8006c34 <ov9655_read_reg>
 8006b0c:	b990      	cbnz	r0, 8006b34 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 8006b0e:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8006b12:	2301      	movs	r3, #1
 8006b14:	f10d 0207 	add.w	r2, sp, #7
 8006b18:	4620      	mov	r0, r4
      *Id = (uint32_t)tmp << 8U;
 8006b1a:	0209      	lsls	r1, r1, #8
 8006b1c:	6029      	str	r1, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8006b1e:	210b      	movs	r1, #11
 8006b20:	f000 f888 	bl	8006c34 <ov9655_read_reg>
 8006b24:	b930      	cbnz	r0, 8006b34 <OV9655_ReadID+0x44>
        *Id |= tmp;
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	602b      	str	r3, [r5, #0]
}
 8006b30:	b003      	add	sp, #12
 8006b32:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	e7fa      	b.n	8006b30 <OV9655_ReadID+0x40>
 8006b3a:	bf00      	nop

08006b3c <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 8006b3c:	2903      	cmp	r1, #3
 8006b3e:	d824      	bhi.n	8006b8a <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006b40:	2301      	movs	r3, #1
{
 8006b42:	b530      	push	{r4, r5, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006b44:	f100 0418 	add.w	r4, r0, #24
{
 8006b48:	b083      	sub	sp, #12
 8006b4a:	460d      	mov	r5, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006b4c:	211e      	movs	r1, #30
 8006b4e:	f10d 0207 	add.w	r2, sp, #7
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 f86e 	bl	8006c34 <ov9655_read_reg>
 8006b58:	b9a0      	cbnz	r0, 8006b84 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8006b5a:	f89d c007 	ldrb.w	ip, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006b5e:	4620      	mov	r0, r4
 8006b60:	2301      	movs	r3, #1
 8006b62:	f10d 0207 	add.w	r2, sp, #7
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8006b66:	f02c 0430 	bic.w	r4, ip, #48	@ 0x30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 8006b6a:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 8006b6e:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006b72:	211e      	movs	r1, #30
 8006b74:	f000 f866 	bl	8006c44 <ov9655_write_reg>
 8006b78:	3800      	subs	r0, #0
 8006b7a:	bf18      	it	ne
 8006b7c:	2001      	movne	r0, #1
 8006b7e:	4240      	negs	r0, r0
}
 8006b80:	b003      	add	sp, #12
 8006b82:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	e7fa      	b.n	8006b80 <OV9655_MirrorFlipConfig+0x44>
 8006b8a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006b8e:	4770      	bx	lr

08006b90 <OV9655_NightModeConfig>:
{
 8006b90:	b530      	push	{r4, r5, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8006b92:	f100 0418 	add.w	r4, r0, #24
{
 8006b96:	b083      	sub	sp, #12
 8006b98:	460d      	mov	r5, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f10d 0207 	add.w	r2, sp, #7
 8006ba0:	213b      	movs	r1, #59	@ 0x3b
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 f846 	bl	8006c34 <ov9655_read_reg>
 8006ba8:	b9b8      	cbnz	r0, 8006bda <OV9655_NightModeConfig+0x4a>
      tmp |= 0x80U;
 8006baa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(Cmd == NIGHT_MODE_ENABLE)
 8006bae:	2d01      	cmp	r5, #1
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8006bb0:	f10d 0207 	add.w	r2, sp, #7
 8006bb4:	f04f 013b 	mov.w	r1, #59	@ 0x3b
      tmp |= 0x80U;
 8006bb8:	bf0c      	ite	eq
 8006bba:	f043 0580 	orreq.w	r5, r3, #128	@ 0x80
      tmp &= 0x7FU;
 8006bbe:	f003 057f 	andne.w	r5, r3, #127	@ 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f88d 5007 	strb.w	r5, [sp, #7]
 8006bca:	f000 f83b 	bl	8006c44 <ov9655_write_reg>
 8006bce:	3800      	subs	r0, #0
 8006bd0:	bf18      	it	ne
 8006bd2:	2001      	movne	r0, #1
 8006bd4:	4240      	negs	r0, r0
}
 8006bd6:	b003      	add	sp, #12
 8006bd8:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006bde:	e7fa      	b.n	8006bd6 <OV9655_NightModeConfig+0x46>

08006be0 <OV9655_SetHueDegree>:
int32_t OV9655_SetHueDegree(OV9655_Object_t *pObj, int32_t Degree)
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop

08006be8 <OV9655_ZoomConfig>:
int32_t OV9655_ZoomConfig(OV9655_Object_t *pObj, uint32_t Zoom)
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop

08006bf0 <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 8006bf0:	b1c0      	cbz	r0, 8006c24 <OV9655_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
 8006bf2:	890a      	ldrh	r2, [r1, #8]
{
 8006bf4:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 8006bf6:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8006bfa:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8006bfc:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006c00:	694a      	ldr	r2, [r1, #20]
 8006c02:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8006c06:	4909      	ldr	r1, [pc, #36]	@ (8006c2c <OV9655_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006c08:	60c5      	str	r5, [r0, #12]
 8006c0a:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8006c0e:	4a08      	ldr	r2, [pc, #32]	@ (8006c30 <OV9655_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
 8006c10:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8006c14:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8006c16:	b10b      	cbz	r3, 8006c1c <OV9655_RegisterBusIO+0x2c>
}
 8006c18:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 8006c1a:	4718      	bx	r3
}
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	bc30      	pop	{r4, r5}
 8006c22:	4770      	bx	lr
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	0800642d 	.word	0x0800642d
 8006c30:	0800643d 	.word	0x0800643d

08006c34 <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8006c34:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006c36:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006c3a:	46a4      	mov	ip, r4
}
 8006c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006c40:	4760      	bx	ip
 8006c42:	bf00      	nop

08006c44 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8006c44:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8006c46:	6804      	ldr	r4, [r0, #0]
 8006c48:	6880      	ldr	r0, [r0, #8]
 8006c4a:	46a4      	mov	ip, r4
}
 8006c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8006c50:	4760      	bx	ip
 8006c52:	bf00      	nop

08006c54 <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8006c54:	4b13      	ldr	r3, [pc, #76]	@ (8006ca4 <BSP_LED_Init+0x50>)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8006c56:	4914      	ldr	r1, [pc, #80]	@ (8006ca8 <BSP_LED_Init+0x54>)
  LEDx_GPIO_CLK_ENABLE();
 8006c58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 8006c60:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE();
 8006c62:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
{
 8006c66:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE();
 8006c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c6c:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8006cac <BSP_LED_Init+0x58>)
  LEDx_GPIO_CLK_ENABLE();
 8006c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8006c74:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006c78:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
  LEDx_GPIO_CLK_ENABLE();
 8006c7c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c7e:	2303      	movs	r3, #3
  LEDx_GPIO_CLK_ENABLE();
 8006c80:	9900      	ldr	r1, [sp, #0]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006c82:	4630      	mov	r0, r6
 8006c84:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c86:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c88:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c8a:	e9cd 5401 	strd	r5, r4, [sp, #4]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006c8e:	f004 fc15 	bl	800b4bc <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8006c92:	4630      	mov	r0, r6
 8006c94:	4622      	mov	r2, r4
 8006c96:	b2a9      	uxth	r1, r5
 8006c98:	f004 fe1c 	bl	800b8d4 <HAL_GPIO_WritePin>
 return ret;
}
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	b006      	add	sp, #24
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
 8006ca2:	bf00      	nop
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	08049be0 	.word	0x08049be0
 8006cac:	08049bf0 	.word	0x08049bf0

08006cb0 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 8006cb0:	4603      	mov	r3, r0
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8006cb2:	4906      	ldr	r1, [pc, #24]	@ (8006ccc <BSP_LED_On+0x1c>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
{
 8006cba:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8006cbc:	4c04      	ldr	r4, [pc, #16]	@ (8006cd0 <BSP_LED_On+0x20>)
 8006cbe:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8006cc2:	f004 fe07 	bl	800b8d4 <HAL_GPIO_WritePin>
  return ret;
}
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	bd10      	pop	{r4, pc}
 8006cca:	bf00      	nop
 8006ccc:	08049be0 	.word	0x08049be0
 8006cd0:	08049bf0 	.word	0x08049bf0

08006cd4 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 8006cd4:	4603      	mov	r3, r0
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8006cd6:	4906      	ldr	r1, [pc, #24]	@ (8006cf0 <BSP_LED_Off+0x1c>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
{
 8006cde:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8006ce0:	4c04      	ldr	r4, [pc, #16]	@ (8006cf4 <BSP_LED_Off+0x20>)
 8006ce2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8006ce6:	f004 fdf5 	bl	800b8d4 <HAL_GPIO_WritePin>
  return ret;
}
 8006cea:	2000      	movs	r0, #0
 8006cec:	bd10      	pop	{r4, pc}
 8006cee:	bf00      	nop
 8006cf0:	08049be0 	.word	0x08049be0
 8006cf4:	08049bf0 	.word	0x08049bf0

08006cf8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8006cf8:	4a10      	ldr	r2, [pc, #64]	@ (8006d3c <BSP_I2C4_DeInit+0x44>)
{
 8006cfa:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8006d02:	b10b      	cbz	r3, 8006d08 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8006d04:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8006d06:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006d08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006d0c:	480c      	ldr	r0, [pc, #48]	@ (8006d40 <BSP_I2C4_DeInit+0x48>)
 8006d0e:	f004 fd17 	bl	800b740 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8006d12:	480b      	ldr	r0, [pc, #44]	@ (8006d40 <BSP_I2C4_DeInit+0x48>)
 8006d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d18:	f004 fd12 	bl	800b740 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006d1c:	4a09      	ldr	r2, [pc, #36]	@ (8006d44 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006d1e:	480a      	ldr	r0, [pc, #40]	@ (8006d48 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8006d20:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8006d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006d2c:	f004 ff9a 	bl	800bc64 <HAL_I2C_DeInit>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d0e7      	beq.n	8006d04 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8006d34:	f06f 0007 	mvn.w	r0, #7
}
 8006d38:	bd08      	pop	{r3, pc}
 8006d3a:	bf00      	nop
 8006d3c:	240156e0 	.word	0x240156e0
 8006d40:	58020c00 	.word	0x58020c00
 8006d44:	58024400 	.word	0x58024400
 8006d48:	24014c88 	.word	0x24014c88

08006d4c <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 8006d4c:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006d4e:	2201      	movs	r2, #1
{
 8006d50:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
 8006d52:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006d56:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006d5a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006d5e:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
 8006d62:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8006d64:	f004 ff26 	bl	800bbb4 <HAL_I2C_Init>
 8006d68:	b108      	cbz	r0, 8006d6e <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8006d6a:	2001      	movs	r0, #1
}
 8006d6c:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8006d6e:	4601      	mov	r1, r0
 8006d70:	4620      	mov	r0, r4
 8006d72:	f005 fa05 	bl	800c180 <HAL_I2CEx_ConfigAnalogFilter>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d1f7      	bne.n	8006d6a <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f005 fa29 	bl	800c1d4 <HAL_I2CEx_ConfigDigitalFilter>
 8006d82:	3800      	subs	r0, #0
 8006d84:	bf18      	it	ne
 8006d86:	2001      	movne	r0, #1
}
 8006d88:	bd10      	pop	{r4, pc}
 8006d8a:	bf00      	nop

08006d8c <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 8006d8c:	4b9b      	ldr	r3, [pc, #620]	@ (8006ffc <BSP_I2C4_Init+0x270>)
  hbus_i2c4.Instance = BUS_I2C4;
 8006d8e:	489c      	ldr	r0, [pc, #624]	@ (8007000 <BSP_I2C4_Init+0x274>)
 8006d90:	4a9c      	ldr	r2, [pc, #624]	@ (8007004 <BSP_I2C4_Init+0x278>)
{
 8006d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (I2c4InitCounter == 0U)
 8006d96:	681c      	ldr	r4, [r3, #0]
{
 8006d98:	b09d      	sub	sp, #116	@ 0x74
  hbus_i2c4.Instance = BUS_I2C4;
 8006d9a:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 8006d9c:	b11c      	cbz	r4, 8006da6 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006d9e:	2000      	movs	r0, #0
}
 8006da0:	b01d      	add	sp, #116	@ 0x74
 8006da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006daa:	f005 f9e3 	bl	800c174 <HAL_I2C_GetState>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d1f5      	bne.n	8006d9e <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006db2:	4d95      	ldr	r5, [pc, #596]	@ (8007008 <BSP_I2C4_Init+0x27c>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8006db4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006db8:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006dba:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006dbc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8006dc0:	f04f 0800 	mov.w	r8, #0
 8006dc4:	f04f 0902 	mov.w	r9, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006dc8:	f043 0308 	orr.w	r3, r3, #8
 8006dcc:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006dd0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006ddc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006de0:	f043 0308 	orr.w	r3, r3, #8
 8006de4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006de8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006dec:	961a      	str	r6, [sp, #104]	@ 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006dee:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8006df2:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006df6:	9314      	str	r3, [sp, #80]	@ 0x50
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006df8:	a916      	add	r1, sp, #88	@ 0x58
 8006dfa:	4884      	ldr	r0, [pc, #528]	@ (800700c <BSP_I2C4_Init+0x280>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006dfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8006dfe:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006e02:	f004 fb5b 	bl	800b4bc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006e06:	2312      	movs	r3, #18
 8006e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006e0c:	a916      	add	r1, sp, #88	@ 0x58
 8006e0e:	487f      	ldr	r0, [pc, #508]	@ (800700c <BSP_I2C4_Init+0x280>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8006e10:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006e12:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8006e16:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006e1a:	f004 fb4f 	bl	800b4bc <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8006e1e:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e26:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8006e2a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e32:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  BUS_I2C4_FORCE_RESET();
 8006e36:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3e:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8006e42:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8006e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e4a:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006e4e:	f006 fe31 	bl	800dab4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8006e52:	2800      	cmp	r0, #0
 8006e54:	f000 81ff 	beq.w	8007256 <BSP_I2C4_Init+0x4ca>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006e58:	4b6d      	ldr	r3, [pc, #436]	@ (8007010 <BSP_I2C4_Init+0x284>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006e5a:	f06f 011d 	mvn.w	r1, #29
  if (tsdadel_max <= 0)
 8006e5e:	4625      	mov	r5, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8006e60:	f04f 0a10 	mov.w	sl, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006e64:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006e68:	4e6a      	ldr	r6, [pc, #424]	@ (8007014 <BSP_I2C4_Init+0x288>)
 8006e6a:	9401      	str	r4, [sp, #4]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006e6c:	fbb3 f7f0 	udiv	r7, r3, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006e70:	f640 13f6 	movw	r3, #2550	@ 0x9f6
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006e74:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006e78:	9700      	str	r7, [sp, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006e7a:	eba3 0c87 	sub.w	ip, r3, r7, lsl #2
 8006e7e:	4b66      	ldr	r3, [pc, #408]	@ (8007018 <BSP_I2C4_Init+0x28c>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006e80:	eba1 0e02 	sub.w	lr, r1, r2
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006e84:	007a      	lsls	r2, r7, #1
 8006e86:	6819      	ldr	r1, [r3, #0]
  if (tsdadel_max <= 0)
 8006e88:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
 8006e8c:	9202      	str	r2, [sp, #8]
  if (tsdadel_min <= 0)
 8006e8e:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
  if (tsdadel_max <= 0)
 8006e92:	4689      	mov	r9, r1
 8006e94:	4622      	mov	r2, r4
 8006e96:	9111      	str	r1, [sp, #68]	@ 0x44
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006e98:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
 8006e9c:	46b8      	mov	r8, r7
 8006e9e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8006ea2:	bf2c      	ite	cs
 8006ea4:	2001      	movcs	r0, #1
 8006ea6:	2000      	movcc	r0, #0
 8006ea8:	ebbe 0f47 	cmp.w	lr, r7, lsl #1
 8006eac:	f000 0001 	and.w	r0, r0, #1
 8006eb0:	eb07 0187 	add.w	r1, r7, r7, lsl #2
 8006eb4:	bf88      	it	hi
 8006eb6:	2000      	movhi	r0, #0
 8006eb8:	459e      	cmp	lr, r3
 8006eba:	eb07 0483 	add.w	r4, r7, r3, lsl #2
 8006ebe:	9004      	str	r0, [sp, #16]
 8006ec0:	bf8c      	ite	hi
 8006ec2:	2000      	movhi	r0, #0
 8006ec4:	2001      	movls	r0, #1
 8006ec6:	459c      	cmp	ip, r3
 8006ec8:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006eca:	ebc7 0bc7 	rsb	fp, r7, r7, lsl #3
 8006ece:	bf38      	it	cc
 8006ed0:	2000      	movcc	r0, #0
 8006ed2:	ebbe 0f87 	cmp.w	lr, r7, lsl #2
 8006ed6:	9006      	str	r0, [sp, #24]
 8006ed8:	eb07 0041 	add.w	r0, r7, r1, lsl #1
 8006edc:	9005      	str	r0, [sp, #20]
 8006ede:	bf94      	ite	ls
 8006ee0:	2001      	movls	r0, #1
 8006ee2:	2000      	movhi	r0, #0
 8006ee4:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
 8006ee8:	f000 0401 	and.w	r4, r0, #1
 8006eec:	bf38      	it	cc
 8006eee:	2400      	movcc	r4, #0
 8006ef0:	458e      	cmp	lr, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006ef2:	f04f 0000 	mov.w	r0, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006ef6:	9407      	str	r4, [sp, #28]
 8006ef8:	bf8c      	ite	hi
 8006efa:	2400      	movhi	r4, #0
 8006efc:	2401      	movls	r4, #1
 8006efe:	458c      	cmp	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006f00:	9003      	str	r0, [sp, #12]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006f02:	bf38      	it	cc
 8006f04:	2400      	movcc	r4, #0
 8006f06:	ebbe 0f43 	cmp.w	lr, r3, lsl #1
 8006f0a:	bf98      	it	ls
 8006f0c:	2001      	movls	r0, #1
 8006f0e:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 8006f12:	9408      	str	r4, [sp, #32]
 8006f14:	465c      	mov	r4, fp
 8006f16:	f000 0001 	and.w	r0, r0, #1
 8006f1a:	bf38      	it	cc
 8006f1c:	2000      	movcc	r0, #0
 8006f1e:	45de      	cmp	lr, fp
 8006f20:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f22:	4658      	mov	r0, fp
 8006f24:	bf8c      	ite	hi
 8006f26:	2000      	movhi	r0, #0
 8006f28:	2001      	movls	r0, #1
 8006f2a:	45dc      	cmp	ip, fp
 8006f2c:	bf38      	it	cc
 8006f2e:	2000      	movcc	r0, #0
 8006f30:	ebbe 0fc7 	cmp.w	lr, r7, lsl #3
 8006f34:	4683      	mov	fp, r0
 8006f36:	bf94      	ite	ls
 8006f38:	f04f 0b01 	movls.w	fp, #1
 8006f3c:	f04f 0b00 	movhi.w	fp, #0
 8006f40:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
 8006f44:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f46:	f00b 0b01 	and.w	fp, fp, #1
 8006f4a:	bf38      	it	cc
 8006f4c:	f04f 0b00 	movcc.w	fp, #0
 8006f50:	4658      	mov	r0, fp
 8006f52:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8006f56:	eb07 0bc7 	add.w	fp, r7, r7, lsl #3
 8006f5a:	45de      	cmp	lr, fp
 8006f5c:	bf8c      	ite	hi
 8006f5e:	2000      	movhi	r0, #0
 8006f60:	2001      	movls	r0, #1
 8006f62:	45dc      	cmp	ip, fp
 8006f64:	bf38      	it	cc
 8006f66:	2000      	movcc	r0, #0
 8006f68:	ebbe 0f41 	cmp.w	lr, r1, lsl #1
 8006f6c:	900c      	str	r0, [sp, #48]	@ 0x30
 8006f6e:	bf98      	it	ls
 8006f70:	f04f 0b01 	movls.w	fp, #1
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	bf88      	it	hi
 8006f78:	f04f 0b00 	movhi.w	fp, #0
 8006f7c:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
 8006f80:	f00b 0b01 	and.w	fp, fp, #1
 8006f84:	4601      	mov	r1, r0
 8006f86:	bf38      	it	cc
 8006f88:	f04f 0b00 	movcc.w	fp, #0
 8006f8c:	4586      	cmp	lr, r0
 8006f8e:	bf8c      	ite	hi
 8006f90:	2100      	movhi	r1, #0
 8006f92:	2101      	movls	r1, #1
 8006f94:	4584      	cmp	ip, r0
 8006f96:	4620      	mov	r0, r4
 8006f98:	bf38      	it	cc
 8006f9a:	2100      	movcc	r1, #0
 8006f9c:	ebbe 0f83 	cmp.w	lr, r3, lsl #2
 8006fa0:	910d      	str	r1, [sp, #52]	@ 0x34
 8006fa2:	bf94      	ite	ls
 8006fa4:	2101      	movls	r1, #1
 8006fa6:	2100      	movhi	r1, #0
 8006fa8:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
 8006fac:	f001 0101 	and.w	r1, r1, #1
 8006fb0:	bf38      	it	cc
 8006fb2:	2100      	movcc	r1, #0
 8006fb4:	910e      	str	r1, [sp, #56]	@ 0x38
 8006fb6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fb8:	4571      	cmp	r1, lr
 8006fba:	460b      	mov	r3, r1
 8006fbc:	bf34      	ite	cc
 8006fbe:	2300      	movcc	r3, #0
 8006fc0:	2301      	movcs	r3, #1
 8006fc2:	4561      	cmp	r1, ip
 8006fc4:	bf88      	it	hi
 8006fc6:	2300      	movhi	r3, #0
 8006fc8:	ebbe 0f44 	cmp.w	lr, r4, lsl #1
 8006fcc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006fce:	bf94      	ite	ls
 8006fd0:	2301      	movls	r3, #1
 8006fd2:	2300      	movhi	r3, #0
 8006fd4:	ebbc 0f44 	cmp.w	ip, r4, lsl #1
 8006fd8:	f04f 0400 	mov.w	r4, #0
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	bf38      	it	cc
 8006fe2:	2300      	movcc	r3, #0
 8006fe4:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fe6:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 8006fea:	459e      	cmp	lr, r3
 8006fec:	bf8c      	ite	hi
 8006fee:	2100      	movhi	r1, #0
 8006ff0:	2101      	movls	r1, #1
 8006ff2:	459c      	cmp	ip, r3
 8006ff4:	bf38      	it	cc
 8006ff6:	2100      	movcc	r1, #0
 8006ff8:	9105      	str	r1, [sp, #20]
 8006ffa:	e013      	b.n	8007024 <BSP_I2C4_Init+0x298>
 8006ffc:	240156e0 	.word	0x240156e0
 8007000:	24014c88 	.word	0x24014c88
 8007004:	58001c00 	.word	0x58001c00
 8007008:	58024400 	.word	0x58024400
 800700c:	58020c00 	.word	0x58020c00
 8007010:	3b9aca00 	.word	0x3b9aca00
 8007014:	24014ce0 	.word	0x24014ce0
 8007018:	24014cdc 	.word	0x24014cdc
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800701c:	2c10      	cmp	r4, #16
 800701e:	44b8      	add	r8, r7
 8007020:	f000 8276 	beq.w	8007510 <BSP_I2C4_Init+0x784>
      if (tscldel >= (uint32_t)tscldel_min)
 8007024:	f240 3179 	movw	r1, #889	@ 0x379
 8007028:	4623      	mov	r3, r4
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800702a:	3401      	adds	r4, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800702c:	4588      	cmp	r8, r1
 800702e:	d9f5      	bls.n	800701c <BSP_I2C4_Init+0x290>
            if(presc != prev_presc)
 8007030:	ebba 0105 	subs.w	r1, sl, r5
 8007034:	bf18      	it	ne
 8007036:	2101      	movne	r1, #1
 8007038:	f1be 0f00 	cmp.w	lr, #0
 800703c:	bf18      	it	ne
 800703e:	2100      	movne	r1, #0
 8007040:	2900      	cmp	r1, #0
 8007042:	f040 8253 	bne.w	80074ec <BSP_I2C4_Init+0x760>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8007046:	45bc      	cmp	ip, r7
 8007048:	bf34      	ite	cc
 800704a:	2100      	movcc	r1, #0
 800704c:	2101      	movcs	r1, #1
 800704e:	45be      	cmp	lr, r7
 8007050:	bf88      	it	hi
 8007052:	2100      	movhi	r1, #0
            if(presc != prev_presc)
 8007054:	45aa      	cmp	sl, r5
 8007056:	bf0c      	ite	eq
 8007058:	2100      	moveq	r1, #0
 800705a:	f001 0101 	andne.w	r1, r1, #1
 800705e:	2900      	cmp	r1, #0
 8007060:	f000 8103 	beq.w	800726a <BSP_I2C4_Init+0x4de>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007064:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8007068:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800706c:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800706e:	46b2      	mov	sl, r6
 8007070:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007074:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007078:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800707c:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800707e:	6090      	str	r0, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007080:	f200 81aa 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 8007084:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8007086:	9a06      	ldr	r2, [sp, #24]
 8007088:	45aa      	cmp	sl, r5
 800708a:	bf0c      	ite	eq
 800708c:	2200      	moveq	r2, #0
 800708e:	f002 0201 	andne.w	r2, r2, #1
 8007092:	2a00      	cmp	r2, #0
 8007094:	f000 8105 	beq.w	80072a2 <BSP_I2C4_Init+0x516>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007098:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 800709c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80070a0:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80070a2:	46b2      	mov	sl, r6
 80070a4:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80070a8:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80070ac:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80070b0:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80070b2:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80070b4:	f200 8190 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 80070b8:	4611      	mov	r1, r2
 80070ba:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80070bc:	9a08      	ldr	r2, [sp, #32]
 80070be:	45aa      	cmp	sl, r5
 80070c0:	bf0c      	ite	eq
 80070c2:	2200      	moveq	r2, #0
 80070c4:	f002 0201 	andne.w	r2, r2, #1
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	f000 8105 	beq.w	80072d8 <BSP_I2C4_Init+0x54c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80070ce:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 80070d2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80070d6:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80070d8:	46b2      	mov	sl, r6
 80070da:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80070de:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80070e2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80070e6:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80070e8:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80070ea:	f200 8175 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 80070ee:	4611      	mov	r1, r2
 80070f0:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80070f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070f4:	45aa      	cmp	sl, r5
 80070f6:	bf0c      	ite	eq
 80070f8:	2200      	moveq	r2, #0
 80070fa:	f002 0201 	andne.w	r2, r2, #1
 80070fe:	2a00      	cmp	r2, #0
 8007100:	f000 8104 	beq.w	800730c <BSP_I2C4_Init+0x580>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007104:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8007108:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800710c:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800710e:	46b2      	mov	sl, r6
 8007110:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007114:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007118:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800711c:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800711e:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007120:	f200 815a 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 8007124:	4611      	mov	r1, r2
 8007126:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8007128:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800712a:	45aa      	cmp	sl, r5
 800712c:	bf0c      	ite	eq
 800712e:	2200      	moveq	r2, #0
 8007130:	f002 0201 	andne.w	r2, r2, #1
 8007134:	2a00      	cmp	r2, #0
 8007136:	f000 8103 	beq.w	8007340 <BSP_I2C4_Init+0x5b4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800713a:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 800713e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007142:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007144:	46b2      	mov	sl, r6
 8007146:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800714a:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800714e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007152:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007154:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007156:	f200 813f 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 800715a:	4611      	mov	r1, r2
 800715c:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800715e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007160:	4555      	cmp	r5, sl
 8007162:	bf0c      	ite	eq
 8007164:	2000      	moveq	r0, #0
 8007166:	f000 0001 	andne.w	r0, r0, #1
 800716a:	2800      	cmp	r0, #0
 800716c:	f000 8101 	beq.w	8007372 <BSP_I2C4_Init+0x5e6>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007170:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8007174:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007178:	210b      	movs	r1, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800717a:	46b2      	mov	sl, r6
 800717c:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007180:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007184:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007188:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800718a:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800718c:	f200 8124 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 8007190:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8007192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007194:	4555      	cmp	r5, sl
 8007196:	bf0c      	ite	eq
 8007198:	2200      	moveq	r2, #0
 800719a:	f002 0201 	andne.w	r2, r2, #1
 800719e:	2a00      	cmp	r2, #0
 80071a0:	f000 8100 	beq.w	80073a4 <BSP_I2C4_Init+0x618>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80071a4:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 80071a8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80071ac:	200d      	movs	r0, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80071ae:	46b2      	mov	sl, r6
 80071b0:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80071b4:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80071b8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80071bc:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80071be:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80071c0:	f200 810a 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 80071c4:	4610      	mov	r0, r2
 80071c6:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80071c8:	9a05      	ldr	r2, [sp, #20]
 80071ca:	4555      	cmp	r5, sl
 80071cc:	bf0c      	ite	eq
 80071ce:	2200      	moveq	r2, #0
 80071d0:	f002 0201 	andne.w	r2, r2, #1
 80071d4:	2a00      	cmp	r2, #0
 80071d6:	f000 8185 	beq.w	80074e4 <BSP_I2C4_Init+0x758>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80071da:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 80071de:	f8df a368 	ldr.w	sl, [pc, #872]	@ 8007548 <BSP_I2C4_Init+0x7bc>
              I2c_valid_timing_nbr ++;
 80071e2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80071e6:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
 80071ea:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80071ee:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80071f2:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80071f4:	f04f 030f 	mov.w	r3, #15
 80071f8:	608b      	str	r3, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80071fa:	f200 80ed 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 80071fe:	46aa      	mov	sl, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007200:	e70c      	b.n	800701c <BSP_I2C4_Init+0x290>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007202:	9a06      	ldr	r2, [sp, #24]
 8007204:	4661      	mov	r1, ip
 8007206:	f109 0914 	add.w	r9, r9, #20
 800720a:	3201      	adds	r2, #1
 800720c:	e9dd e40a 	ldrd	lr, r4, [sp, #40]	@ 0x28
 8007210:	e9dd c30c 	ldrd	ip, r3, [sp, #48]	@ 0x30
 8007214:	4572      	cmp	r2, lr
 8007216:	9206      	str	r2, [sp, #24]
 8007218:	f040 8105 	bne.w	8007426 <BSP_I2C4_Init+0x69a>
        if (idx < I2C_VALID_TIMING_NBR)
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007220:	e9dd 4008 	ldrd	r4, r0, [sp, #32]
 8007224:	d817      	bhi.n	8007256 <BSP_I2C4_Init+0x4ca>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800722a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800722e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8007232:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8007234:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8007236:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007238:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800723c:	f400 0070 	and.w	r0, r0, #15728640	@ 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8007240:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007244:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007246:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8007248:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800724a:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800724e:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007250:	430b      	orrs	r3, r1
 8007252:	ea43 0402 	orr.w	r4, r3, r2
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8007256:	4621      	mov	r1, r4
 8007258:	48b8      	ldr	r0, [pc, #736]	@ (800753c <BSP_I2C4_Init+0x7b0>)
 800725a:	f7ff fd77 	bl	8006d4c <MX_I2C4_Init>
 800725e:	2800      	cmp	r0, #0
 8007260:	f43f ad9d 	beq.w	8006d9e <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8007264:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007268:	e59a      	b.n	8006da0 <BSP_I2C4_Init+0x14>
            if(presc != prev_presc)
 800726a:	4611      	mov	r1, r2
 800726c:	9a04      	ldr	r2, [sp, #16]
 800726e:	45aa      	cmp	sl, r5
 8007270:	bf0c      	ite	eq
 8007272:	2200      	moveq	r2, #0
 8007274:	f002 0201 	andne.w	r2, r2, #1
 8007278:	2a00      	cmp	r2, #0
 800727a:	f43f af04 	beq.w	8007086 <BSP_I2C4_Init+0x2fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800727e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8007282:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007286:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007288:	46b2      	mov	sl, r6
 800728a:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800728e:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007292:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007296:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007298:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800729a:	f200 809d 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 800729e:	4611      	mov	r1, r2
 80072a0:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80072a2:	9a07      	ldr	r2, [sp, #28]
 80072a4:	45aa      	cmp	sl, r5
 80072a6:	bf0c      	ite	eq
 80072a8:	2200      	moveq	r2, #0
 80072aa:	f002 0201 	andne.w	r2, r2, #1
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	f43f af04 	beq.w	80070bc <BSP_I2C4_Init+0x330>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80072b4:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 80072b8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80072bc:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80072be:	46b2      	mov	sl, r6
 80072c0:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80072c4:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80072c8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80072cc:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80072ce:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80072d0:	f200 8082 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 80072d4:	4611      	mov	r1, r2
 80072d6:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80072d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072da:	45aa      	cmp	sl, r5
 80072dc:	bf0c      	ite	eq
 80072de:	2200      	moveq	r2, #0
 80072e0:	f002 0201 	andne.w	r2, r2, #1
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	f43f af04 	beq.w	80070f2 <BSP_I2C4_Init+0x366>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80072ea:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 80072ee:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80072f2:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80072f4:	46b2      	mov	sl, r6
 80072f6:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80072fa:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80072fe:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007302:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007304:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007306:	d867      	bhi.n	80073d8 <BSP_I2C4_Init+0x64c>
 8007308:	4611      	mov	r1, r2
 800730a:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800730c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800730e:	45aa      	cmp	sl, r5
 8007310:	bf0c      	ite	eq
 8007312:	2200      	moveq	r2, #0
 8007314:	f002 0201 	andne.w	r2, r2, #1
 8007318:	2a00      	cmp	r2, #0
 800731a:	f43f af05 	beq.w	8007128 <BSP_I2C4_Init+0x39c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800731e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8007322:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007326:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007328:	46b2      	mov	sl, r6
 800732a:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800732e:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007332:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007336:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007338:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800733a:	d84d      	bhi.n	80073d8 <BSP_I2C4_Init+0x64c>
 800733c:	4611      	mov	r1, r2
 800733e:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8007340:	45aa      	cmp	sl, r5
 8007342:	bf0c      	ite	eq
 8007344:	2200      	moveq	r2, #0
 8007346:	f00b 0201 	andne.w	r2, fp, #1
 800734a:	2a00      	cmp	r2, #0
 800734c:	f43f af07 	beq.w	800715e <BSP_I2C4_Init+0x3d2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007350:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8007354:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007358:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800735a:	46b2      	mov	sl, r6
 800735c:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007360:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007364:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007368:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800736a:	6088      	str	r0, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800736c:	d834      	bhi.n	80073d8 <BSP_I2C4_Init+0x64c>
 800736e:	4611      	mov	r1, r2
 8007370:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8007372:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007374:	4555      	cmp	r5, sl
 8007376:	bf0c      	ite	eq
 8007378:	2000      	moveq	r0, #0
 800737a:	f000 0001 	andne.w	r0, r0, #1
 800737e:	2800      	cmp	r0, #0
 8007380:	f000 80b2 	beq.w	80074e8 <BSP_I2C4_Init+0x75c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007384:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8007388:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800738c:	210c      	movs	r1, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800738e:	46b2      	mov	sl, r6
 8007390:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007394:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007398:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800739c:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800739e:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80073a0:	d81a      	bhi.n	80073d8 <BSP_I2C4_Init+0x64c>
 80073a2:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80073a4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80073a6:	4555      	cmp	r5, sl
 80073a8:	bf0c      	ite	eq
 80073aa:	2200      	moveq	r2, #0
 80073ac:	f002 0201 	andne.w	r2, r2, #1
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	f43f af09 	beq.w	80071c8 <BSP_I2C4_Init+0x43c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80073b6:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 80073ba:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80073be:	46b2      	mov	sl, r6
 80073c0:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
 80073c4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80073c8:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80073cc:	604b      	str	r3, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80073ce:	f04f 030e 	mov.w	r3, #14
 80073d2:	608b      	str	r3, [r1, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80073d4:	f67f af13 	bls.w	80071fe <BSP_I2C4_Init+0x472>
 80073d8:	4b59      	ldr	r3, [pc, #356]	@ (8007540 <BSP_I2C4_Init+0x7b4>)
 80073da:	4650      	mov	r0, sl
 80073dc:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing_nbr ++;
 80073de:	4649      	mov	r1, r9
 80073e0:	9a02      	ldr	r2, [sp, #8]
 80073e2:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80073e6:	9f00      	ldr	r7, [sp, #0]
 80073e8:	f640 769f 	movw	r6, #3999	@ 0xf9f
 80073ec:	f241 230c 	movw	r3, #4620	@ 0x120c
 80073f0:	4d54      	ldr	r5, [pc, #336]	@ (8007544 <BSP_I2C4_Init+0x7b8>)
 80073f2:	42be      	cmp	r6, r7
 80073f4:	f102 0c32 	add.w	ip, r2, #50	@ 0x32
 80073f8:	eba3 0302 	sub.w	r3, r3, r2
 80073fc:	4415      	add	r5, r2
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80073fe:	f04f 0200 	mov.w	r2, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007402:	468e      	mov	lr, r1
 8007404:	9408      	str	r4, [sp, #32]
 8007406:	bf38      	it	cc
 8007408:	463e      	movcc	r6, r7
 800740a:	461c      	mov	r4, r3
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800740c:	9206      	str	r2, [sp, #24]
 800740e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8007548 <BSP_I2C4_Init+0x7bc>
 8007412:	f04f 32ff 	mov.w	r2, #4294967295
 8007416:	f242 7b10 	movw	fp, #10000	@ 0x2710
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800741a:	f241 0a47 	movw	sl, #4167	@ 0x1047
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800741e:	4639      	mov	r1, r7
 8007420:	462b      	mov	r3, r5
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007422:	9201      	str	r2, [sp, #4]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007424:	9009      	str	r0, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007426:	f8d9 0000 	ldr.w	r0, [r9]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800742a:	2500      	movs	r5, #0
 800742c:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007430:	fb00 1001 	mla	r0, r0, r1, r1
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007434:	930d      	str	r3, [sp, #52]	@ 0x34
 8007436:	1a22      	subs	r2, r4, r0
 8007438:	eb0c 0700 	add.w	r7, ip, r0
 800743c:	468c      	mov	ip, r1
 800743e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8007442:	181a      	adds	r2, r3, r0
 8007444:	e9cd e40a 	strd	lr, r4, [sp, #40]	@ 0x28
 8007448:	9207      	str	r2, [sp, #28]
 800744a:	e006      	b.n	800745a <BSP_I2C4_Init+0x6ce>
 800744c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007450:	4407      	add	r7, r0
 8007452:	eba8 0800 	sub.w	r8, r8, r0
 8007456:	f43f aed4 	beq.w	8007202 <BSP_I2C4_Init+0x476>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800745a:	f241 235c 	movw	r3, #4700	@ 0x125c
 800745e:	9500      	str	r5, [sp, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007460:	3501      	adds	r5, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007462:	429f      	cmp	r7, r3
 8007464:	d9f2      	bls.n	800744c <BSP_I2C4_Init+0x6c0>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007466:	f1a7 0332 	sub.w	r3, r7, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800746a:	ebbc 0f93 	cmp.w	ip, r3, lsr #2
 800746e:	d2ed      	bcs.n	800744c <BSP_I2C4_Init+0x6c0>
 8007470:	f242 4e4a 	movw	lr, #9290	@ 0x244a
 8007474:	4644      	mov	r4, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007476:	2200      	movs	r2, #0
 8007478:	ebae 0e03 	sub.w	lr, lr, r3
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	e9cd 5c02 	strd	r5, ip, [sp, #8]
 8007482:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8007486:	443b      	add	r3, r7
 8007488:	f8dd c004 	ldr.w	ip, [sp, #4]
 800748c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007490:	e005      	b.n	800749e <BSP_I2C4_Init+0x712>
 8007492:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8007496:	4403      	add	r3, r0
 8007498:	eba4 0400 	sub.w	r4, r4, r0
 800749c:	d01a      	beq.n	80074d4 <BSP_I2C4_Init+0x748>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800749e:	eb0e 0103 	add.w	r1, lr, r3
 80074a2:	4617      	mov	r7, r2
 80074a4:	f203 6583 	addw	r5, r3, #1667	@ 0x683
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80074a8:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80074aa:	42b1      	cmp	r1, r6
 80074ac:	d9f1      	bls.n	8007492 <BSP_I2C4_Init+0x706>
 80074ae:	4555      	cmp	r5, sl
 80074b0:	d8ef      	bhi.n	8007492 <BSP_I2C4_Init+0x706>
            if (error < 0)
 80074b2:	ea33 0123 	bics.w	r1, r3, r3, asr #32
 80074b6:	bf28      	it	cs
 80074b8:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
 80074ba:	458b      	cmp	fp, r1
 80074bc:	d9e9      	bls.n	8007492 <BSP_I2C4_Init+0x706>
              I2c_valid_timing[count].sclh = sclh;
 80074be:	468b      	mov	fp, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80074c0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
              I2c_valid_timing[count].scll = scll;
 80074c4:	9900      	ldr	r1, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 80074c6:	46c4      	mov	ip, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80074c8:	4403      	add	r3, r0
 80074ca:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
 80074ce:	e9c9 7103 	strd	r7, r1, [r9, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80074d2:	d1e4      	bne.n	800749e <BSP_I2C4_Init+0x712>
 80074d4:	f8cd c004 	str.w	ip, [sp, #4]
 80074d8:	9d02      	ldr	r5, [sp, #8]
 80074da:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80074de:	e9dd c703 	ldrd	ip, r7, [sp, #12]
 80074e2:	e7b3      	b.n	800744c <BSP_I2C4_Init+0x6c0>
 80074e4:	4602      	mov	r2, r0
 80074e6:	e599      	b.n	800701c <BSP_I2C4_Init+0x290>
            if(presc != prev_presc)
 80074e8:	4608      	mov	r0, r1
 80074ea:	e652      	b.n	8007192 <BSP_I2C4_Init+0x406>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80074ec:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 80074f0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80074f4:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80074f6:	46b2      	mov	sl, r6
 80074f8:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80074fc:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007500:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007504:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007506:	6090      	str	r0, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007508:	f63f af66 	bhi.w	80073d8 <BSP_I2C4_Init+0x64c>
 800750c:	46aa      	mov	sl, r5
 800750e:	e6ad      	b.n	800726c <BSP_I2C4_Init+0x4e0>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007510:	3501      	adds	r5, #1
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	2d10      	cmp	r5, #16
 8007516:	441f      	add	r7, r3
 8007518:	f47f acbe 	bne.w	8006e98 <BSP_I2C4_Init+0x10c>
 800751c:	4693      	mov	fp, r2
 800751e:	9c01      	ldr	r4, [sp, #4]
 8007520:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007522:	9a02      	ldr	r2, [sp, #8]
 8007524:	f1bb 0f00 	cmp.w	fp, #0
 8007528:	d003      	beq.n	8007532 <BSP_I2C4_Init+0x7a6>
 800752a:	4b05      	ldr	r3, [pc, #20]	@ (8007540 <BSP_I2C4_Init+0x7b4>)
 800752c:	4649      	mov	r1, r9
 800752e:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007532:	2900      	cmp	r1, #0
 8007534:	f43f ae8f 	beq.w	8007256 <BSP_I2C4_Init+0x4ca>
 8007538:	4803      	ldr	r0, [pc, #12]	@ (8007548 <BSP_I2C4_Init+0x7bc>)
 800753a:	e754      	b.n	80073e6 <BSP_I2C4_Init+0x65a>
 800753c:	24014c88 	.word	0x24014c88
 8007540:	24014cdc 	.word	0x24014cdc
 8007544:	ffffdbb6 	.word	0xffffdbb6
 8007548:	24014ce0 	.word	0x24014ce0

0800754c <BSP_I2C4_WriteReg>:
{
 800754c:	b530      	push	{r4, r5, lr}
 800754e:	4614      	mov	r4, r2
 8007550:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007552:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 8007556:	460a      	mov	r2, r1
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	4601      	mov	r1, r0
 800755c:	2301      	movs	r3, #1
 800755e:	4809      	ldr	r0, [pc, #36]	@ (8007584 <BSP_I2C4_WriteReg+0x38>)
 8007560:	9502      	str	r5, [sp, #8]
 8007562:	9400      	str	r4, [sp, #0]
 8007564:	f004 fb98 	bl	800bc98 <HAL_I2C_Mem_Write>
 8007568:	b908      	cbnz	r0, 800756e <BSP_I2C4_WriteReg+0x22>
}
 800756a:	b005      	add	sp, #20
 800756c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800756e:	4805      	ldr	r0, [pc, #20]	@ (8007584 <BSP_I2C4_WriteReg+0x38>)
 8007570:	f004 fe04 	bl	800c17c <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007574:	2804      	cmp	r0, #4
 8007576:	bf14      	ite	ne
 8007578:	f06f 0003 	mvnne.w	r0, #3
 800757c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 8007580:	e7f3      	b.n	800756a <BSP_I2C4_WriteReg+0x1e>
 8007582:	bf00      	nop
 8007584:	24014c88 	.word	0x24014c88

08007588 <BSP_I2C4_ReadReg>:
{
 8007588:	b530      	push	{r4, r5, lr}
 800758a:	4614      	mov	r4, r2
 800758c:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800758e:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 8007592:	460a      	mov	r2, r1
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	4601      	mov	r1, r0
 8007598:	2301      	movs	r3, #1
 800759a:	4809      	ldr	r0, [pc, #36]	@ (80075c0 <BSP_I2C4_ReadReg+0x38>)
 800759c:	9502      	str	r5, [sp, #8]
 800759e:	9400      	str	r4, [sp, #0]
 80075a0:	f004 fca8 	bl	800bef4 <HAL_I2C_Mem_Read>
 80075a4:	b908      	cbnz	r0, 80075aa <BSP_I2C4_ReadReg+0x22>
}
 80075a6:	b005      	add	sp, #20
 80075a8:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80075aa:	4805      	ldr	r0, [pc, #20]	@ (80075c0 <BSP_I2C4_ReadReg+0x38>)
 80075ac:	f004 fde6 	bl	800c17c <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80075b0:	2804      	cmp	r0, #4
 80075b2:	bf14      	ite	ne
 80075b4:	f06f 0003 	mvnne.w	r0, #3
 80075b8:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 80075bc:	e7f3      	b.n	80075a6 <BSP_I2C4_ReadReg+0x1e>
 80075be:	bf00      	nop
 80075c0:	24014c88 	.word	0x24014c88

080075c4 <BSP_I2C4_WriteReg16>:
{
 80075c4:	b530      	push	{r4, r5, lr}
 80075c6:	4614      	mov	r4, r2
 80075c8:	b085      	sub	sp, #20
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80075ca:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 80075ce:	460a      	mov	r2, r1
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	4601      	mov	r1, r0
 80075d4:	2302      	movs	r3, #2
 80075d6:	4809      	ldr	r0, [pc, #36]	@ (80075fc <BSP_I2C4_WriteReg16+0x38>)
 80075d8:	9502      	str	r5, [sp, #8]
 80075da:	9400      	str	r4, [sp, #0]
 80075dc:	f004 fb5c 	bl	800bc98 <HAL_I2C_Mem_Write>
 80075e0:	b908      	cbnz	r0, 80075e6 <BSP_I2C4_WriteReg16+0x22>
}
 80075e2:	b005      	add	sp, #20
 80075e4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80075e6:	4805      	ldr	r0, [pc, #20]	@ (80075fc <BSP_I2C4_WriteReg16+0x38>)
 80075e8:	f004 fdc8 	bl	800c17c <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80075ec:	2804      	cmp	r0, #4
 80075ee:	bf14      	ite	ne
 80075f0:	f06f 0003 	mvnne.w	r0, #3
 80075f4:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 80075f8:	e7f3      	b.n	80075e2 <BSP_I2C4_WriteReg16+0x1e>
 80075fa:	bf00      	nop
 80075fc:	24014c88 	.word	0x24014c88

08007600 <BSP_I2C4_ReadReg16>:
{
 8007600:	b530      	push	{r4, r5, lr}
 8007602:	4614      	mov	r4, r2
 8007604:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007606:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800760a:	460a      	mov	r2, r1
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	4601      	mov	r1, r0
 8007610:	2302      	movs	r3, #2
 8007612:	4809      	ldr	r0, [pc, #36]	@ (8007638 <BSP_I2C4_ReadReg16+0x38>)
 8007614:	9502      	str	r5, [sp, #8]
 8007616:	9400      	str	r4, [sp, #0]
 8007618:	f004 fc6c 	bl	800bef4 <HAL_I2C_Mem_Read>
 800761c:	b908      	cbnz	r0, 8007622 <BSP_I2C4_ReadReg16+0x22>
}
 800761e:	b005      	add	sp, #20
 8007620:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8007622:	4805      	ldr	r0, [pc, #20]	@ (8007638 <BSP_I2C4_ReadReg16+0x38>)
 8007624:	f004 fdaa 	bl	800c17c <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007628:	2804      	cmp	r0, #4
 800762a:	bf14      	ite	ne
 800762c:	f06f 0003 	mvnne.w	r0, #3
 8007630:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 8007634:	e7f3      	b.n	800761e <BSP_I2C4_ReadReg16+0x1e>
 8007636:	bf00      	nop
 8007638:	24014c88 	.word	0x24014c88

0800763c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800763c:	f001 bb1e 	b.w	8008c7c <HAL_GetTick>

08007640 <MX_DCMI_Init>:
{
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
  hdcmi->Init.HSPolarity       = HSPolarity;
 8007640:	4909      	ldr	r1, [pc, #36]	@ (8007668 <MX_DCMI_Init+0x28>)
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8007642:	2200      	movs	r2, #0
{
 8007644:	b510      	push	{r4, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 8007646:	6809      	ldr	r1, [r1, #0]
  hdcmi->Instance              = DCMI;
 8007648:	4c08      	ldr	r4, [pc, #32]	@ (800766c <MX_DCMI_Init+0x2c>)
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800764a:	6182      	str	r2, [r0, #24]
  hdcmi->Instance              = DCMI;
 800764c:	6004      	str	r4, [r0, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800764e:	2480      	movs	r4, #128	@ 0x80
  hdcmi->Init.HSPolarity       = HSPolarity;
 8007650:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8007654:	2120      	movs	r1, #32
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8007656:	60c4      	str	r4, [r0, #12]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8007658:	e9c0 2101 	strd	r2, r1, [r0, #4]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 800765c:	f001 fbf8 	bl	8008e50 <HAL_DCMI_Init>
  {
    return HAL_ERROR;
  }
  return HAL_OK;
}
 8007660:	3800      	subs	r0, #0
 8007662:	bf18      	it	ne
 8007664:	2001      	movne	r0, #1
 8007666:	bd10      	pop	{r4, pc}
 8007668:	240157b4 	.word	0x240157b4
 800766c:	48020000 	.word	0x48020000

08007670 <BSP_CAMERA_Init>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007670:	2800      	cmp	r0, #0
 8007672:	f040 820b 	bne.w	8007a8c <BSP_CAMERA_Init+0x41c>
{
 8007676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 800767a:	4cc9      	ldr	r4, [pc, #804]	@ (80079a0 <BSP_CAMERA_Init+0x330>)
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800767c:	260d      	movs	r6, #13
 800767e:	4690      	mov	r8, r2
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8007680:	2250      	movs	r2, #80	@ 0x50
  __HAL_RCC_DCMI_CLK_ENABLE();
 8007682:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 8007686:	4605      	mov	r5, r0
 8007688:	460f      	mov	r7, r1
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800768a:	48c6      	ldr	r0, [pc, #792]	@ (80079a4 <BSP_CAMERA_Init+0x334>)
  __HAL_RCC_DCMI_CLK_ENABLE();
 800768c:	f043 0301 	orr.w	r3, r3, #1
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
  hdma_handler.Instance                 = DMA2_Stream3;

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8007690:	f8df 9360 	ldr.w	r9, [pc, #864]	@ 80079f4 <BSP_CAMERA_Init+0x384>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8007694:	f44f 4a80 	mov.w	sl, #16384	@ 0x4000
{
 8007698:	ed2d 8b02 	vpush	{d8}
  __HAL_RCC_DCMI_CLK_ENABLE();
 800769c:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
{
 80076a0:	b093      	sub	sp, #76	@ 0x4c
  __HAL_RCC_DCMI_CLK_ENABLE();
 80076a2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80076a6:	a90c      	add	r1, sp, #48	@ 0x30
  __HAL_RCC_DCMI_CLK_ENABLE();
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80076b0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80076b4:	f043 0302 	orr.w	r3, r3, #2
 80076b8:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 80076bc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	9304      	str	r3, [sp, #16]
 80076c6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80076d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	9305      	str	r3, [sp, #20]
 80076de:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80076e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80076e4:	f043 0302 	orr.w	r3, r3, #2
 80076e8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80076ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	9306      	str	r3, [sp, #24]
 80076f6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80076fc:	f043 0304 	orr.w	r3, r3, #4
 8007700:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8007704:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	9307      	str	r3, [sp, #28]
 800770e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007710:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8007714:	f043 0308 	orr.w	r3, r3, #8
 8007718:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800771c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	9308      	str	r3, [sp, #32]
 8007726:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007728:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800772c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007730:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8007734:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8007738:	9610      	str	r6, [sp, #64]	@ 0x40
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800773a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800773e:	ed9f 8b92 	vldr	d8, [pc, #584]	@ 8007988 <BSP_CAMERA_Init+0x318>
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007742:	9309      	str	r3, [sp, #36]	@ 0x24
 8007744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8007746:	2302      	movs	r3, #2
 8007748:	ed8d 8b0e 	vstr	d8, [sp, #56]	@ 0x38
 800774c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8007750:	f003 feb4 	bl	800b4bc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8007754:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8007758:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800775a:	a90c      	add	r1, sp, #48	@ 0x30
 800775c:	4892      	ldr	r0, [pc, #584]	@ (80079a8 <BSP_CAMERA_Init+0x338>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800775e:	9610      	str	r6, [sp, #64]	@ 0x40
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8007760:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007764:	ed8d 8b0e 	vstr	d8, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8007768:	f003 fea8 	bl	800b4bc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800776c:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 8007770:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007772:	a90c      	add	r1, sp, #48	@ 0x30
 8007774:	488d      	ldr	r0, [pc, #564]	@ (80079ac <BSP_CAMERA_Init+0x33c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8007776:	9610      	str	r6, [sp, #64]	@ 0x40
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8007778:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800777c:	ed8d 8b0e 	vstr	d8, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007780:	f003 fe9c 	bl	800b4bc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8007784:	2208      	movs	r2, #8
 8007786:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007788:	a90c      	add	r1, sp, #48	@ 0x30
 800778a:	4889      	ldr	r0, [pc, #548]	@ (80079b0 <BSP_CAMERA_Init+0x340>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800778c:	9610      	str	r6, [sp, #64]	@ 0x40
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800778e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007792:	ed8d 8b0e 	vstr	d8, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007796:	f003 fe91 	bl	800b4bc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_10;
 800779a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800779e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80077a0:	a90c      	add	r1, sp, #48	@ 0x30
 80077a2:	4884      	ldr	r0, [pc, #528]	@ (80079b4 <BSP_CAMERA_Init+0x344>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80077a4:	9610      	str	r6, [sp, #64]	@ 0x40
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 80077a6:	f44f 7680 	mov.w	r6, #256	@ 0x100
  gpio_init_structure.Pin       = GPIO_PIN_10;
 80077aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80077ae:	ed8d 8b0e 	vstr	d8, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80077b2:	f003 fe83 	bl	800b4bc <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 80077b6:	4b80      	ldr	r3, [pc, #512]	@ (80079b8 <BSP_CAMERA_Init+0x348>)
 80077b8:	224b      	movs	r2, #75	@ 0x4b
 80077ba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80077be:	f04f 0c04 	mov.w	ip, #4

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80077c2:	210f      	movs	r1, #15
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80077ca:	f8c9 3048 	str.w	r3, [r9, #72]	@ 0x48
 80077ce:	f8c3 9038 	str.w	r9, [r3, #56]	@ 0x38
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 80077d2:	f8c3 a018 	str.w	sl, [r3, #24]
 80077d6:	e9c3 0204 	strd	r0, r2, [r3, #16]
 80077da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80077de:	204e      	movs	r0, #78	@ 0x4e
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 80077e0:	e9c3 6207 	strd	r6, r2, [r3, #28]
 80077e4:	2203      	movs	r2, #3
 80077e6:	e9c3 c209 	strd	ip, r2, [r3, #36]	@ 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 80077ea:	4a74      	ldr	r2, [pc, #464]	@ (80079bc <BSP_CAMERA_Init+0x34c>)
 80077ec:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80077ee:	462a      	mov	r2, r5
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 80077f0:	e9c3 5502 	strd	r5, r5, [r3, #8]
 80077f4:	e9c3 550b 	strd	r5, r5, [r3, #44]	@ 0x2c
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80077f8:	f001 fa78 	bl	8008cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80077fc:	204e      	movs	r0, #78	@ 0x4e
 80077fe:	f001 fab1 	bl	8008d64 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8007802:	462a      	mov	r2, r5
 8007804:	210f      	movs	r1, #15
 8007806:	203b      	movs	r0, #59	@ 0x3b
 8007808:	f001 fa70 	bl	8008cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800780c:	203b      	movs	r0, #59	@ 0x3b
 800780e:	f001 faa9 	bl	8008d64 <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8007812:	f8d9 0048 	ldr.w	r0, [r9, #72]	@ 0x48
 8007816:	f001 fd45 	bl	80092a4 <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800781a:	4648      	mov	r0, r9
 800781c:	f7ff ff10 	bl	8007640 <MX_DCMI_Init>
 8007820:	4681      	mov	r9, r0
 8007822:	2800      	cmp	r0, #0
 8007824:	f040 80ac 	bne.w	8007980 <BSP_CAMERA_Init+0x310>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007828:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800782c:	a90c      	add	r1, sp, #48	@ 0x30
 800782e:	4864      	ldr	r0, [pc, #400]	@ (80079c0 <BSP_CAMERA_Init+0x350>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8007834:	4d63      	ldr	r5, [pc, #396]	@ (80079c4 <BSP_CAMERA_Init+0x354>)
  IOCtx.Init        = BSP_I2C4_Init;
 8007836:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 80079f8 <BSP_CAMERA_Init+0x388>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800783a:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800783e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  IOCtx.GetTick     = BSP_GetTick;
 8007842:	4e61      	ldr	r6, [pc, #388]	@ (80079c8 <BSP_CAMERA_Init+0x358>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007844:	f402 7200 	and.w	r2, r2, #512	@ 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007848:	ed9f 7b51 	vldr	d7, [pc, #324]	@ 8007990 <BSP_CAMERA_Init+0x320>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800784c:	920a      	str	r2, [sp, #40]	@ 0x28
 800784e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007850:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007854:	ed9f 7b50 	vldr	d7, [pc, #320]	@ 8007998 <BSP_CAMERA_Init+0x328>
 8007858:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800785c:	f003 fe2e 	bl	800b4bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 8007860:	2201      	movs	r2, #1
 8007862:	4651      	mov	r1, sl
 8007864:	4856      	ldr	r0, [pc, #344]	@ (80079c0 <BSP_CAMERA_Init+0x350>)
 8007866:	f004 f835 	bl	800b8d4 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800786a:	2064      	movs	r0, #100	@ 0x64
 800786c:	f001 fa0c 	bl	8008c88 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 8007870:	4651      	mov	r1, sl
 8007872:	464a      	mov	r2, r9
 8007874:	4852      	ldr	r0, [pc, #328]	@ (80079c0 <BSP_CAMERA_Init+0x350>)
 8007876:	f004 f82d 	bl	800b8d4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800787a:	2014      	movs	r0, #20
 800787c:	f001 fa04 	bl	8008c88 <HAL_Delay>
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007880:	4b52      	ldr	r3, [pc, #328]	@ (80079cc <BSP_CAMERA_Init+0x35c>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8007882:	a90c      	add	r1, sp, #48	@ 0x30
 8007884:	4628      	mov	r0, r5
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007886:	930d      	str	r3, [sp, #52]	@ 0x34
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8007888:	2360      	movs	r3, #96	@ 0x60
  IOCtx.Init        = BSP_I2C4_Init;
 800788a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800788e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007892:	4b4f      	ldr	r3, [pc, #316]	@ (80079d0 <BSP_CAMERA_Init+0x360>)
  IOCtx.GetTick     = BSP_GetTick;
 8007894:	9611      	str	r6, [sp, #68]	@ 0x44
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007896:	9310      	str	r3, [sp, #64]	@ 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8007898:	4b4e      	ldr	r3, [pc, #312]	@ (80079d4 <BSP_CAMERA_Init+0x364>)
 800789a:	930f      	str	r3, [sp, #60]	@ 0x3c
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800789c:	f7ff f9a8 	bl	8006bf0 <OV9655_RegisterBusIO>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	f040 80ad 	bne.w	8007a00 <BSP_CAMERA_Init+0x390>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 80078a6:	4c4c      	ldr	r4, [pc, #304]	@ (80079d8 <BSP_CAMERA_Init+0x368>)
 80078a8:	4628      	mov	r0, r5
 80078aa:	4621      	mov	r1, r4
 80078ac:	f7ff f920 	bl	8006af0 <OV9655_ReadID>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f040 80a5 	bne.w	8007a00 <BSP_CAMERA_Init+0x390>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 80078b6:	6822      	ldr	r2, [r4, #0]
 80078b8:	4b48      	ldr	r3, [pc, #288]	@ (80079dc <BSP_CAMERA_Init+0x36c>)
 80078ba:	4413      	add	r3, r2
 80078bc:	2b01      	cmp	r3, #1
 80078be:	f200 809f 	bhi.w	8007a00 <BSP_CAMERA_Init+0x390>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
      Camera_CompObj = &OV9655Obj;
 80078c2:	f8df a138 	ldr.w	sl, [pc, #312]	@ 80079fc <BSP_CAMERA_Init+0x38c>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 80078c6:	4628      	mov	r0, r5
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 80078c8:	4b45      	ldr	r3, [pc, #276]	@ (80079e0 <BSP_CAMERA_Init+0x370>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 80078ca:	4642      	mov	r2, r8
      Camera_CompObj = &OV9655Obj;
 80078cc:	f8ca 5000 	str.w	r5, [sl]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 80078d0:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 80078d2:	4d44      	ldr	r5, [pc, #272]	@ (80079e4 <BSP_CAMERA_Init+0x374>)
 80078d4:	602b      	str	r3, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4798      	blx	r3
 80078da:	2800      	cmp	r0, #0
 80078dc:	f040 8090 	bne.w	8007a00 <BSP_CAMERA_Init+0x390>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	f8da 0000 	ldr.w	r0, [sl]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	493f      	ldr	r1, [pc, #252]	@ (80079e8 <BSP_CAMERA_Init+0x378>)
 80078ea:	4798      	blx	r3
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f040 8087 	bne.w	8007a00 <BSP_CAMERA_Init+0x390>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	4b39      	ldr	r3, [pc, #228]	@ (80079dc <BSP_CAMERA_Init+0x36c>)
 80078f6:	4413      	add	r3, r2
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d839      	bhi.n	8007970 <BSP_CAMERA_Init+0x300>
          if(Resolution == CAMERA_R480x272)
 80078fc:	2f02      	cmp	r7, #2
 80078fe:	f000 80b2 	beq.w	8007a66 <BSP_CAMERA_Init+0x3f6>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007902:	4b27      	ldr	r3, [pc, #156]	@ (80079a0 <BSP_CAMERA_Init+0x330>)
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007904:	a90c      	add	r1, sp, #48	@ 0x30
 8007906:	482e      	ldr	r0, [pc, #184]	@ (80079c0 <BSP_CAMERA_Init+0x350>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007908:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800790c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007910:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007914:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800791c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007924:	2301      	movs	r3, #1
 8007926:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800792a:	2302      	movs	r3, #2
 800792c:	2200      	movs	r2, #0
 800792e:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007932:	f003 fdc3 	bl	800b4bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 8007936:	2201      	movs	r2, #1
 8007938:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800793c:	4820      	ldr	r0, [pc, #128]	@ (80079c0 <BSP_CAMERA_Init+0x350>)
 800793e:	f003 ffc9 	bl	800b8d4 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8007942:	2064      	movs	r0, #100	@ 0x64
 8007944:	f001 f9a0 	bl	8008c88 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 8007948:	2200      	movs	r2, #0
 800794a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800794e:	481c      	ldr	r0, [pc, #112]	@ (80079c0 <BSP_CAMERA_Init+0x350>)
 8007950:	f003 ffc0 	bl	800b8d4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8007954:	2014      	movs	r0, #20
 8007956:	f001 f997 	bl	8008c88 <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 800795a:	4b24      	ldr	r3, [pc, #144]	@ (80079ec <BSP_CAMERA_Init+0x37c>)
 800795c:	6822      	ldr	r2, [r4, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800795e:	2000      	movs	r0, #0
 8007960:	e9c3 7801 	strd	r7, r8, [r3, #4]
          Camera_Ctx[Instance].CameraId  = CameraId;
 8007964:	601a      	str	r2, [r3, #0]
}
 8007966:	b013      	add	sp, #76	@ 0x4c
 8007968:	ecbd 8b02 	vpop	{d8}
 800796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 8007970:	4b1f      	ldr	r3, [pc, #124]	@ (80079f0 <BSP_CAMERA_Init+0x380>)
 8007972:	2240      	movs	r2, #64	@ 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8007974:	481f      	ldr	r0, [pc, #124]	@ (80079f4 <BSP_CAMERA_Init+0x384>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 8007976:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8007978:	f7ff fe62 	bl	8007640 <MX_DCMI_Init>
 800797c:	2800      	cmp	r0, #0
 800797e:	d0c0      	beq.n	8007902 <BSP_CAMERA_Init+0x292>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007980:	f06f 0003 	mvn.w	r0, #3
 8007984:	e7ef      	b.n	8007966 <BSP_CAMERA_Init+0x2f6>
 8007986:	bf00      	nop
 8007988:	00000001 	.word	0x00000001
 800798c:	00000003 	.word	0x00000003
 8007990:	00004000 	.word	0x00004000
 8007994:	00000001 	.word	0x00000001
 8007998:	00000000 	.word	0x00000000
 800799c:	00000002 	.word	0x00000002
 80079a0:	58024400 	.word	0x58024400
 80079a4:	58020000 	.word	0x58020000
 80079a8:	58020400 	.word	0x58020400
 80079ac:	58020800 	.word	0x58020800
 80079b0:	58020c00 	.word	0x58020c00
 80079b4:	58021800 	.word	0x58021800
 80079b8:	24015738 	.word	0x24015738
 80079bc:	40020458 	.word	0x40020458
 80079c0:	58022400 	.word	0x58022400
 80079c4:	2401570c 	.word	0x2401570c
 80079c8:	0800763d 	.word	0x0800763d
 80079cc:	08006cf9 	.word	0x08006cf9
 80079d0:	08007589 	.word	0x08007589
 80079d4:	0800754d 	.word	0x0800754d
 80079d8:	240157b0 	.word	0x240157b0
 80079dc:	ffff69aa 	.word	0xffff69aa
 80079e0:	240139cc 	.word	0x240139cc
 80079e4:	240157e0 	.word	0x240157e0
 80079e8:	240157b8 	.word	0x240157b8
 80079ec:	240157e4 	.word	0x240157e4
 80079f0:	240157b4 	.word	0x240157b4
 80079f4:	24015818 	.word	0x24015818
 80079f8:	08006d8d 	.word	0x08006d8d
 80079fc:	24015868 	.word	0x24015868
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007a00:	4b24      	ldr	r3, [pc, #144]	@ (8007a94 <BSP_CAMERA_Init+0x424>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8007a02:	a90c      	add	r1, sp, #48	@ 0x30
 8007a04:	4d24      	ldr	r5, [pc, #144]	@ (8007a98 <BSP_CAMERA_Init+0x428>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007a06:	930d      	str	r3, [sp, #52]	@ 0x34
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8007a08:	4b24      	ldr	r3, [pc, #144]	@ (8007a9c <BSP_CAMERA_Init+0x42c>)
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8007a0a:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 8007a0c:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8007a10:	9310      	str	r3, [sp, #64]	@ 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8007a12:	4b23      	ldr	r3, [pc, #140]	@ (8007aa0 <BSP_CAMERA_Init+0x430>)
  IOCtx.GetTick     = BSP_GetTick;
 8007a14:	9611      	str	r6, [sp, #68]	@ 0x44
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8007a16:	930f      	str	r3, [sp, #60]	@ 0x3c
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8007a18:	2378      	movs	r3, #120	@ 0x78
 8007a1a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8007a1e:	f7fe fcab 	bl	8006378 <OV5640_RegisterBusIO>
 8007a22:	b9e8      	cbnz	r0, 8007a60 <BSP_CAMERA_Init+0x3f0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 8007a24:	4c1f      	ldr	r4, [pc, #124]	@ (8007aa4 <BSP_CAMERA_Init+0x434>)
 8007a26:	4628      	mov	r0, r5
 8007a28:	4621      	mov	r1, r4
 8007a2a:	f7fe fb13 	bl	8006054 <OV5640_ReadID>
 8007a2e:	b9b8      	cbnz	r0, 8007a60 <BSP_CAMERA_Init+0x3f0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 8007a30:	6822      	ldr	r2, [r4, #0]
 8007a32:	f245 6340 	movw	r3, #22080	@ 0x5640
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d112      	bne.n	8007a60 <BSP_CAMERA_Init+0x3f0>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
      Camera_CompObj = &OV5640Obj;
 8007a3a:	4e1b      	ldr	r6, [pc, #108]	@ (8007aa8 <BSP_CAMERA_Init+0x438>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8007a3c:	4628      	mov	r0, r5
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8007a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007aac <BSP_CAMERA_Init+0x43c>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8007a40:	4642      	mov	r2, r8
      Camera_CompObj = &OV5640Obj;
 8007a42:	6035      	str	r5, [r6, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8007a44:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8007a46:	4d1a      	ldr	r5, [pc, #104]	@ (8007ab0 <BSP_CAMERA_Init+0x440>)
 8007a48:	602b      	str	r3, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4798      	blx	r3
 8007a4e:	b938      	cbnz	r0, 8007a60 <BSP_CAMERA_Init+0x3f0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	6830      	ldr	r0, [r6, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	4917      	ldr	r1, [pc, #92]	@ (8007ab4 <BSP_CAMERA_Init+0x444>)
 8007a58:	4798      	blx	r3
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f43f af49 	beq.w	80078f2 <BSP_CAMERA_Init+0x282>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007a60:	f06f 0006 	mvn.w	r0, #6
 8007a64:	e77f      	b.n	8007966 <BSP_CAMERA_Init+0x2f6>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 8007a66:	f240 130f 	movw	r3, #271	@ 0x10f
 8007a6a:	2268      	movs	r2, #104	@ 0x68
 8007a6c:	2150      	movs	r1, #80	@ 0x50
 8007a6e:	4812      	ldr	r0, [pc, #72]	@ (8007ab8 <BSP_CAMERA_Init+0x448>)
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	f240 33bf 	movw	r3, #959	@ 0x3bf
 8007a76:	f001 faf7 	bl	8009068 <HAL_DCMI_ConfigCrop>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d180      	bne.n	8007980 <BSP_CAMERA_Init+0x310>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 8007a7e:	480e      	ldr	r0, [pc, #56]	@ (8007ab8 <BSP_CAMERA_Init+0x448>)
 8007a80:	f001 fb10 	bl	80090a4 <HAL_DCMI_EnableCrop>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f43f af3c 	beq.w	8007902 <BSP_CAMERA_Init+0x292>
 8007a8a:	e779      	b.n	8007980 <BSP_CAMERA_Init+0x310>
    ret = BSP_ERROR_WRONG_PARAM;
 8007a8c:	f06f 0001 	mvn.w	r0, #1
}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	08006cf9 	.word	0x08006cf9
 8007a98:	240156e4 	.word	0x240156e4
 8007a9c:	08007601 	.word	0x08007601
 8007aa0:	080075c5 	.word	0x080075c5
 8007aa4:	240157b0 	.word	0x240157b0
 8007aa8:	24015868 	.word	0x24015868
 8007aac:	24013988 	.word	0x24013988
 8007ab0:	240157e0 	.word	0x240157e0
 8007ab4:	240157b8 	.word	0x240157b8
 8007ab8:	24015818 	.word	0x24015818

08007abc <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007abc:	b948      	cbnz	r0, 8007ad2 <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8007abe:	4806      	ldr	r0, [pc, #24]	@ (8007ad8 <BSP_CAMERA_Suspend+0x1c>)
{
 8007ac0:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8007ac2:	f001 fa13 	bl	8008eec <HAL_DCMI_Suspend>
    ret = BSP_ERROR_NONE;
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	bf14      	ite	ne
 8007aca:	f06f 0003 	mvnne.w	r0, #3
 8007ace:	2000      	moveq	r0, #0
}
 8007ad0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007ad2:	f06f 0001 	mvn.w	r0, #1
}
 8007ad6:	4770      	bx	lr
 8007ad8:	24015818 	.word	0x24015818

08007adc <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007adc:	b948      	cbnz	r0, 8007af2 <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8007ade:	4806      	ldr	r0, [pc, #24]	@ (8007af8 <BSP_CAMERA_Resume+0x1c>)
{
 8007ae0:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8007ae2:	f001 fa47 	bl	8008f74 <HAL_DCMI_Resume>
    ret = BSP_ERROR_PERIPH_FAILURE;
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	bf0c      	ite	eq
 8007aea:	2000      	moveq	r0, #0
 8007aec:	f06f 0003 	mvnne.w	r0, #3
}
 8007af0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007af2:	f06f 0001 	mvn.w	r0, #1
}
 8007af6:	4770      	bx	lr
 8007af8:	24015818 	.word	0x24015818

08007afc <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007afc:	b988      	cbnz	r0, 8007b22 <BSP_CAMERA_SetMirrorFlip+0x26>
{
 8007afe:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.MirrorFlip == 0U)
 8007b00:	4b0c      	ldr	r3, [pc, #48]	@ (8007b34 <BSP_CAMERA_SetMirrorFlip+0x38>)
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	b183      	cbz	r3, 8007b28 <BSP_CAMERA_SetMirrorFlip+0x2c>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 8007b06:	4b0c      	ldr	r3, [pc, #48]	@ (8007b38 <BSP_CAMERA_SetMirrorFlip+0x3c>)
 8007b08:	4604      	mov	r4, r0
 8007b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007b3c <BSP_CAMERA_SetMirrorFlip+0x40>)
 8007b0c:	460d      	mov	r5, r1
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6810      	ldr	r0, [r2, #0]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	4798      	blx	r3
 8007b16:	2800      	cmp	r0, #0
 8007b18:	db09      	blt.n	8007b2e <BSP_CAMERA_SetMirrorFlip+0x32>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 8007b1c:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 8007b1e:	625d      	str	r5, [r3, #36]	@ 0x24
}
 8007b20:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007b22:	f06f 0001 	mvn.w	r0, #1
}
 8007b26:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8007b28:	f06f 000a 	mvn.w	r0, #10
}
 8007b2c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b2e:	f06f 0004 	mvn.w	r0, #4
}
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	240157b8 	.word	0x240157b8
 8007b38:	240157e0 	.word	0x240157e0
 8007b3c:	24015868 	.word	0x24015868
 8007b40:	240157e4 	.word	0x240157e4
 8007b44:	00000000 	.word	0x00000000

08007b48 <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007b48:	bb20      	cbnz	r0, 8007b94 <BSP_CAMERA_PwrDown+0x4c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007b4a:	4b19      	ldr	r3, [pc, #100]	@ (8007bb0 <BSP_CAMERA_PwrDown+0x68>)
 8007b4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007b54:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8007ba0 <BSP_CAMERA_PwrDown+0x58>
{
 8007b58:	b510      	push	{r4, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007b5a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
{
 8007b5e:	b088      	sub	sp, #32
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b64:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007b66:	a902      	add	r1, sp, #8
 8007b68:	4812      	ldr	r0, [pc, #72]	@ (8007bb4 <BSP_CAMERA_PwrDown+0x6c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007b6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b72:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8007ba8 <BSP_CAMERA_PwrDown+0x60>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007b7a:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007b7e:	f003 fc9d 	bl	800b4bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8007b82:	2201      	movs	r2, #1
 8007b84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007b88:	480a      	ldr	r0, [pc, #40]	@ (8007bb4 <BSP_CAMERA_PwrDown+0x6c>)
 8007b8a:	f003 fea3 	bl	800b8d4 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8007b8e:	4620      	mov	r0, r4
}
 8007b90:	b008      	add	sp, #32
 8007b92:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007b94:	f06f 0001 	mvn.w	r0, #1
}
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w
 8007ba0:	00004000 	.word	0x00004000
 8007ba4:	00000001 	.word	0x00000001
 8007ba8:	00000000 	.word	0x00000000
 8007bac:	00000002 	.word	0x00000002
 8007bb0:	58024400 	.word	0x58024400
 8007bb4:	58022400 	.word	0x58022400

08007bb8 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 8007bb8:	4801      	ldr	r0, [pc, #4]	@ (8007bc0 <BSP_CAMERA_IRQHandler+0x8>)
 8007bba:	f001 ba07 	b.w	8008fcc <HAL_DCMI_IRQHandler>
 8007bbe:	bf00      	nop
 8007bc0:	24015818 	.word	0x24015818

08007bc4 <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8007bc4:	4b01      	ldr	r3, [pc, #4]	@ (8007bcc <BSP_CAMERA_DMA_IRQHandler+0x8>)
 8007bc6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007bc8:	f002 baa4 	b.w	800a114 <HAL_DMA_IRQHandler>
 8007bcc:	24015818 	.word	0x24015818

08007bd0 <BSP_CAMERA_LineEventCallback>:
}
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop

08007bd4 <HAL_DCMI_LineEventCallback>:
  BSP_CAMERA_LineEventCallback(0);
 8007bd4:	2000      	movs	r0, #0
{
 8007bd6:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 8007bd8:	f7ff fffa 	bl	8007bd0 <BSP_CAMERA_LineEventCallback>
}
 8007bdc:	bd08      	pop	{r3, pc}
 8007bde:	bf00      	nop

08007be0 <HAL_DCMI_FrameEventCallback>:
  BSP_CAMERA_FrameEventCallback(0);
 8007be0:	2000      	movs	r0, #0
{
 8007be2:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 8007be4:	f7fb f8b8 	bl	8002d58 <BSP_CAMERA_FrameEventCallback>
}
 8007be8:	bd08      	pop	{r3, pc}
 8007bea:	bf00      	nop

08007bec <HAL_DCMI_VsyncEventCallback>:
  BSP_CAMERA_VsyncEventCallback(0);
 8007bec:	2000      	movs	r0, #0
{
 8007bee:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 8007bf0:	f7fb f8be 	bl	8002d70 <BSP_CAMERA_VsyncEventCallback>
}
 8007bf4:	bd08      	pop	{r3, pc}
 8007bf6:	bf00      	nop

08007bf8 <HAL_DCMI_ErrorCallback>:
  BSP_CAMERA_ErrorCallback(0);
 8007bf8:	2000      	movs	r0, #0
{
 8007bfa:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 8007bfc:	f7fb f8bc 	bl	8002d78 <BSP_CAMERA_ErrorCallback>
}
 8007c00:	bd08      	pop	{r3, pc}
 8007c02:	bf00      	nop

08007c04 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8007c04:	b910      	cbnz	r0, 8007c0c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8007c06:	4b03      	ldr	r3, [pc, #12]	@ (8007c14 <BSP_LCD_SetActiveLayer+0x10>)
 8007c08:	6099      	str	r1, [r3, #8]
 8007c0a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8007c0c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	240158b0 	.word	0x240158b0

08007c18 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8007c18:	b918      	cbnz	r0, 8007c22 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8007c1a:	4b03      	ldr	r3, [pc, #12]	@ (8007c28 <BSP_LCD_GetPixelFormat+0x10>)
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	600b      	str	r3, [r1, #0]
 8007c20:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8007c22:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8007c26:	4770      	bx	lr
 8007c28:	240158b0 	.word	0x240158b0

08007c2c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8007c2c:	b940      	cbnz	r0, 8007c40 <BSP_LCD_GetXSize+0x14>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8007c2e:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <BSP_LCD_GetXSize+0x1c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c34:	b113      	cbz	r3, 8007c3c <BSP_LCD_GetXSize+0x10>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8007c36:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <BSP_LCD_GetXSize+0x20>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	600b      	str	r3, [r1, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8007c40:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	240159fc 	.word	0x240159fc
 8007c4c:	240158b0 	.word	0x240158b0

08007c50 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8007c50:	b940      	cbnz	r0, 8007c64 <BSP_LCD_GetYSize+0x14>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8007c52:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <BSP_LCD_GetYSize+0x1c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c58:	b113      	cbz	r3, 8007c60 <BSP_LCD_GetYSize+0x10>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8007c5a:	4b05      	ldr	r3, [pc, #20]	@ (8007c70 <BSP_LCD_GetYSize+0x20>)
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	600b      	str	r3, [r1, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007c60:	2000      	movs	r0, #0
 8007c62:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8007c64:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	240159fc 	.word	0x240159fc
 8007c70:	240158b0 	.word	0x240158b0

08007c74 <BSP_LCD_ReadPixel>:
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c74:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 8007c78:	b410      	push	{r4}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c7a:	4c0f      	ldr	r4, [pc, #60]	@ (8007cb8 <BSP_LCD_ReadPixel+0x44>)
 8007c7c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8007c80:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c84:	f8dc 4008 	ldr.w	r4, [ip, #8]
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8007c88:	fb00 1102 	mla	r1, r0, r2, r1
 8007c8c:	2234      	movs	r2, #52	@ 0x34
 8007c8e:	480b      	ldr	r0, [pc, #44]	@ (8007cbc <BSP_LCD_ReadPixel+0x48>)
 8007c90:	fb02 0004 	mla	r0, r2, r4, r0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c94:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8007c96:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c98:	b934      	cbnz	r4, 8007ca8 <BSP_LCD_ReadPixel+0x34>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8007c9a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
  }

  return BSP_ERROR_NONE;
}
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8007ca8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
}
 8007cac:	2000      	movs	r0, #0
 8007cae:	f85d 4b04 	ldr.w	r4, [sp], #4
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	601a      	str	r2, [r3, #0]
}
 8007cb6:	4770      	bx	lr
 8007cb8:	240158b0 	.word	0x240158b0
 8007cbc:	240158cc 	.word	0x240158cc

08007cc0 <BSP_LCD_WritePixel>:
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007cc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 8007cc4:	b410      	push	{r4}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007cc6:	4c0e      	ldr	r4, [pc, #56]	@ (8007d00 <BSP_LCD_WritePixel+0x40>)
 8007cc8:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007ccc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007cd0:	f8dc 4008 	ldr.w	r4, [ip, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007cd4:	fb00 1102 	mla	r1, r0, r2, r1
 8007cd8:	2234      	movs	r2, #52	@ 0x34
 8007cda:	480a      	ldr	r0, [pc, #40]	@ (8007d04 <BSP_LCD_WritePixel+0x44>)
 8007cdc:	fb02 0004 	mla	r0, r2, r4, r0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007ce0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007ce2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007ce4:	b92c      	cbnz	r4, 8007cf2 <BSP_LCD_WritePixel+0x32>
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }

  return BSP_ERROR_NONE;
}
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007cec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8007cf0:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007cf2:	b29b      	uxth	r3, r3
}
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007cfa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 8007cfe:	4770      	bx	lr
 8007d00:	240158b0 	.word	0x240158b0
 8007d04:	240158cc 	.word	0x240158cc

08007d08 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b084      	sub	sp, #16
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8007d0e:	4601      	mov	r1, r0
 8007d10:	2006      	movs	r0, #6
 8007d12:	9401      	str	r4, [sp, #4]
 8007d14:	9000      	str	r0, [sp, #0]
 8007d16:	9202      	str	r2, [sp, #8]
 8007d18:	4804      	ldr	r0, [pc, #16]	@ (8007d2c <DSI_IO_Read+0x24>)
 8007d1a:	f003 fb23 	bl	800b364 <HAL_DSI_Read>
  int32_t ret = BSP_ERROR_NONE;
 8007d1e:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8007d20:	bf14      	ite	ne
 8007d22:	f06f 0007 	mvnne.w	r0, #7
 8007d26:	2000      	moveq	r0, #0
 8007d28:	b004      	add	sp, #16
 8007d2a:	bd10      	pop	{r4, pc}
 8007d2c:	240159dc 	.word	0x240159dc

08007d30 <DSI_IO_Write>:
  if(Size <= 1U)
 8007d30:	2b01      	cmp	r3, #1
{
 8007d32:	b530      	push	{r4, r5, lr}
 8007d34:	460c      	mov	r4, r1
 8007d36:	b083      	sub	sp, #12
 8007d38:	4601      	mov	r1, r0
 8007d3a:	4615      	mov	r5, r2
  if(Size <= 1U)
 8007d3c:	d909      	bls.n	8007d52 <DSI_IO_Write+0x22>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8007d3e:	2239      	movs	r2, #57	@ 0x39
 8007d40:	480a      	ldr	r0, [pc, #40]	@ (8007d6c <DSI_IO_Write+0x3c>)
 8007d42:	e9cd 4500 	strd	r4, r5, [sp]
 8007d46:	f003 faa3 	bl	800b290 <HAL_DSI_LongWrite>
 8007d4a:	b958      	cbnz	r0, 8007d64 <DSI_IO_Write+0x34>
  int32_t ret = BSP_ERROR_NONE;
 8007d4c:	2000      	movs	r0, #0
}
 8007d4e:	b003      	add	sp, #12
 8007d50:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8007d52:	5cd5      	ldrb	r5, [r2, r3]
 8007d54:	4623      	mov	r3, r4
 8007d56:	2215      	movs	r2, #21
 8007d58:	4804      	ldr	r0, [pc, #16]	@ (8007d6c <DSI_IO_Write+0x3c>)
 8007d5a:	9500      	str	r5, [sp, #0]
 8007d5c:	f003 fa6c 	bl	800b238 <HAL_DSI_ShortWrite>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d0f3      	beq.n	8007d4c <DSI_IO_Write+0x1c>
      ret = BSP_ERROR_BUS_FAILURE;
 8007d64:	f06f 0007 	mvn.w	r0, #7
 8007d68:	e7f1      	b.n	8007d4e <DSI_IO_Write+0x1e>
 8007d6a:	bf00      	nop
 8007d6c:	240159dc 	.word	0x240159dc

08007d70 <BSP_LCD_DrawBitmap>:
{
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8007d74:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8007d78:	4e3e      	ldr	r6, [pc, #248]	@ (8007e74 <BSP_LCD_DrawBitmap+0x104>)
{
 8007d7a:	461f      	mov	r7, r3
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8007d7c:	f8d3 400a 	ldr.w	r4, [r3, #10]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8007d80:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 8007d84:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 8007d88:	4b3b      	ldr	r3, [pc, #236]	@ (8007e78 <BSP_LCD_DrawBitmap+0x108>)
 8007d8a:	f04f 0e34 	mov.w	lr, #52	@ 0x34
 8007d8e:	fb0c 1102 	mla	r1, ip, r2, r1
 8007d92:	68aa      	ldr	r2, [r5, #8]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8007d94:	f8b7 901c 	ldrh.w	r9, [r7, #28]
{
 8007d98:	b085      	sub	sp, #20
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8007d9a:	fb0e 3302 	mla	r3, lr, r2, r3
 8007d9e:	692a      	ldr	r2, [r5, #16]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8007da0:	f8d7 a016 	ldr.w	sl, [r7, #22]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8007da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da6:	fb02 3b01 	mla	fp, r2, r1, r3
  if ((bit_pixel/8U) == 4U)
 8007daa:	f1a9 0120 	sub.w	r1, r9, #32
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8007dae:	f8d7 3012 	ldr.w	r3, [r7, #18]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8007db2:	00c2      	lsls	r2, r0, #3
  if ((bit_pixel/8U) == 4U)
 8007db4:	2907      	cmp	r1, #7
 8007db6:	d959      	bls.n	8007e6c <BSP_LCD_DrawBitmap+0xfc>
  else if ((bit_pixel/8U) == 2U)
 8007db8:	f1a9 0110 	sub.w	r1, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8007dbc:	2908      	cmp	r1, #8
 8007dbe:	bf34      	ite	cc
 8007dc0:	f04f 0c02 	movcc.w	ip, #2
 8007dc4:	f04f 0c01 	movcs.w	ip, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8007dc8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8007dcc:	f10a 31ff 	add.w	r1, sl, #4294967295
 8007dd0:	fb03 f909 	mul.w	r9, r3, r9
 8007dd4:	fb09 4401 	mla	r4, r9, r1, r4
 8007dd8:	4427      	add	r7, r4
  for(index=0; index < height; index++)
 8007dda:	f1ba 0f00 	cmp.w	sl, #0
 8007dde:	d041      	beq.n	8007e64 <BSP_LCD_DrawBitmap+0xf4>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007de0:	1a12      	subs	r2, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8007de2:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8007de6:	f04f 0800 	mov.w	r8, #0
 8007dea:	4c24      	ldr	r4, [pc, #144]	@ (8007e7c <BSP_LCD_DrawBitmap+0x10c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007dec:	eb06 0682 	add.w	r6, r6, r2, lsl #2
  hlcd_dma2d.Instance = DMA2D;
 8007df0:	4665      	mov	r5, ip
 8007df2:	9303      	str	r3, [sp, #12]
 8007df4:	e006      	b.n	8007e04 <BSP_LCD_DrawBitmap+0x94>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8007df6:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8007df8:	45c2      	cmp	sl, r8
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8007dfa:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8007dfc:	444f      	add	r7, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8007dfe:	fb02 bb03 	mla	fp, r2, r3, fp
  for(index=0; index < height; index++)
 8007e02:	d02f      	beq.n	8007e64 <BSP_LCD_DrawBitmap+0xf4>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007e04:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8007e06:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  hlcd_dma2d.Init.OutputOffset = 0;
 8007e0a:	2200      	movs	r2, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8007e0c:	21ff      	movs	r1, #255	@ 0xff
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007e0e:	f1a3 0302 	sub.w	r3, r3, #2
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8007e12:	6060      	str	r0, [r4, #4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8007e14:	4819      	ldr	r0, [pc, #100]	@ (8007e7c <BSP_LCD_DrawBitmap+0x10c>)
  for(index=0; index < height; index++)
 8007e16:	f108 0801 	add.w	r8, r8, #1
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007e1a:	fab3 f383 	clz	r3, r3
  hlcd_dma2d.Init.OutputOffset = 0;
 8007e1e:	60e2      	str	r2, [r4, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	005b      	lsls	r3, r3, #1
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8007e24:	60a3      	str	r3, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 8007e26:	4b16      	ldr	r3, [pc, #88]	@ (8007e80 <BSP_LCD_DrawBitmap+0x110>)
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8007e28:	e9c4 2113 	strd	r2, r1, [r4, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8007e2c:	e9c4 2511 	strd	r2, r5, [r4, #68]	@ 0x44
  hlcd_dma2d.Instance = DMA2D;
 8007e30:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8007e32:	f002 fcc5 	bl	800a7c0 <HAL_DMA2D_Init>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d1dd      	bne.n	8007df6 <BSP_LCD_DrawBitmap+0x86>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	480f      	ldr	r0, [pc, #60]	@ (8007e7c <BSP_LCD_DrawBitmap+0x10c>)
 8007e3e:	f002 ff13 	bl	800ac68 <HAL_DMA2D_ConfigLayer>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d1d7      	bne.n	8007df6 <BSP_LCD_DrawBitmap+0x86>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8007e46:	2301      	movs	r3, #1
 8007e48:	465a      	mov	r2, fp
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	480b      	ldr	r0, [pc, #44]	@ (8007e7c <BSP_LCD_DrawBitmap+0x10c>)
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	f002 fd7d 	bl	800a950 <HAL_DMA2D_Start>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d1cd      	bne.n	8007df6 <BSP_LCD_DrawBitmap+0x86>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8007e5a:	2132      	movs	r1, #50	@ 0x32
 8007e5c:	4807      	ldr	r0, [pc, #28]	@ (8007e7c <BSP_LCD_DrawBitmap+0x10c>)
 8007e5e:	f002 fdd3 	bl	800aa08 <HAL_DMA2D_PollForTransfer>
 8007e62:	e7c8      	b.n	8007df6 <BSP_LCD_DrawBitmap+0x86>
}
 8007e64:	2000      	movs	r0, #0
 8007e66:	b005      	add	sp, #20
 8007e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8007e6c:	f04f 0c00 	mov.w	ip, #0
 8007e70:	e7aa      	b.n	8007dc8 <BSP_LCD_DrawBitmap+0x58>
 8007e72:	bf00      	nop
 8007e74:	240158b0 	.word	0x240158b0
 8007e78:	240158cc 	.word	0x240158cc
 8007e7c:	24015974 	.word	0x24015974
 8007e80:	52001000 	.word	0x52001000

08007e84 <BSP_LCD_DrawVLine>:
{
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	4616      	mov	r6, r2
 8007e8a:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007e8c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8007e90:	4b35      	ldr	r3, [pc, #212]	@ (8007f68 <BSP_LCD_DrawVLine+0xe4>)
{
 8007e92:	b085      	sub	sp, #20
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007e94:	f04f 0a34 	mov.w	sl, #52	@ 0x34
 8007e98:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8007e9c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
{
 8007ea0:	9103      	str	r1, [sp, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007ea2:	00c2      	lsls	r2, r0, #3
 8007ea4:	4931      	ldr	r1, [pc, #196]	@ (8007f6c <BSP_LCD_DrawVLine+0xe8>)
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8007ea6:	eb06 0e05 	add.w	lr, r6, r5
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007eaa:	f8dc 7008 	ldr.w	r7, [ip, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007eae:	1a12      	subs	r2, r2, r0
{
 8007eb0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007eb2:	fb0a 1107 	mla	r1, sl, r7, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007eb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007eba:	f8dc a010 	ldr.w	sl, [ip, #16]
 8007ebe:	f8d1 905c 	ldr.w	r9, [r1, #92]	@ 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8007ec2:	f8dc 1004 	ldr.w	r1, [ip, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007ec6:	68da      	ldr	r2, [r3, #12]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8007ec8:	458e      	cmp	lr, r1
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8007eca:	bf88      	it	hi
 8007ecc:	1b8d      	subhi	r5, r1, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007ece:	2a02      	cmp	r2, #2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8007ed0:	f108 31ff 	add.w	r1, r8, #4294967295
  switch(Lcd_Ctx[Instance].PixelFormat)
 8007ed4:	d011      	beq.n	8007efa <BSP_LCD_DrawVLine+0x76>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8007ed6:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8007ed8:	f8df b098 	ldr.w	fp, [pc, #152]	@ 8007f74 <BSP_LCD_DrawVLine+0xf0>
  hlcd_dma2d.Instance = DMA2D;
 8007edc:	4b24      	ldr	r3, [pc, #144]	@ (8007f70 <BSP_LCD_DrawVLine+0xec>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8007ede:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8007ee0:	e9cb 2102 	strd	r2, r1, [fp, #8]
  hlcd_dma2d.Instance = DMA2D;
 8007ee4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8007ee8:	e9cb 3200 	strd	r3, r2, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8007eec:	f002 fc68 	bl	800a7c0 <HAL_DMA2D_Init>
 8007ef0:	b310      	cbz	r0, 8007f38 <BSP_LCD_DrawVLine+0xb4>
}
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	b005      	add	sp, #20
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8007efa:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8007efe:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 8007f02:	f004 041f 	and.w	r4, r4, #31
 8007f06:	eb03 1cc3 	add.w	ip, r3, r3, lsl #7
 8007f0a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8007f0e:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 8007f12:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8007f16:	3321      	adds	r3, #33	@ 0x21
 8007f18:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8007f1c:	3017      	adds	r0, #23
 8007f1e:	099b      	lsrs	r3, r3, #6
 8007f20:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8007f24:	0980      	lsrs	r0, r0, #6
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	3417      	adds	r4, #23
 8007f2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f2e:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
 8007f32:	f043 447f 	orr.w	r4, r3, #4278190080	@ 0xff000000
    break;
 8007f36:	e7cf      	b.n	8007ed8 <BSP_LCD_DrawVLine+0x54>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8007f38:	2101      	movs	r1, #1
 8007f3a:	4658      	mov	r0, fp
 8007f3c:	f002 fe94 	bl	800ac68 <HAL_DMA2D_ConfigLayer>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1d6      	bne.n	8007ef2 <BSP_LCD_DrawVLine+0x6e>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007f44:	9b03      	ldr	r3, [sp, #12]
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007f46:	4621      	mov	r1, r4
 8007f48:	4658      	mov	r0, fp
 8007f4a:	9500      	str	r5, [sp, #0]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8007f4c:	fb06 3208 	mla	r2, r6, r8, r3
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007f50:	2301      	movs	r3, #1
 8007f52:	fb0a 9202 	mla	r2, sl, r2, r9
 8007f56:	f002 fcfb 	bl	800a950 <HAL_DMA2D_Start>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d1c9      	bne.n	8007ef2 <BSP_LCD_DrawVLine+0x6e>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8007f5e:	2119      	movs	r1, #25
 8007f60:	4658      	mov	r0, fp
 8007f62:	f002 fd51 	bl	800aa08 <HAL_DMA2D_PollForTransfer>
 8007f66:	e7c4      	b.n	8007ef2 <BSP_LCD_DrawVLine+0x6e>
 8007f68:	240158b0 	.word	0x240158b0
 8007f6c:	240158cc 	.word	0x240158cc
 8007f70:	52001000 	.word	0x52001000
 8007f74:	24015974 	.word	0x24015974

08007f78 <BSP_LCD_FillRGBRect>:
{
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	460c      	mov	r4, r1
 8007f80:	4696      	mov	lr, r2
 8007f82:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
  for(i = 0; i < Height; i++)
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	d03b      	beq.n	8008002 <BSP_LCD_FillRGBRect+0x8a>
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	d039      	beq.n	8008002 <BSP_LCD_FillRGBRect+0x8a>
 8007f8e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007f92:	eb02 0b0e 	add.w	fp, r2, lr
 8007f96:	4a23      	ldr	r2, [pc, #140]	@ (8008024 <BSP_LCD_FillRGBRect+0xac>)
 8007f98:	4688      	mov	r8, r1
 8007f9a:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 8007f9e:	4e22      	ldr	r6, [pc, #136]	@ (8008028 <BSP_LCD_FillRGBRect+0xb0>)
 8007fa0:	f10c 0010 	add.w	r0, ip, #16
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007fa4:	4494      	add	ip, r2
 8007fa6:	4402      	add	r2, r0
 8007fa8:	9201      	str	r2, [sp, #4]
    for(j = 0; j < Width; j++)
 8007faa:	2200      	movs	r2, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007fac:	2534      	movs	r5, #52	@ 0x34
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007fae:	f8dc 0008 	ldr.w	r0, [ip, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007fb2:	f8dc 7000 	ldr.w	r7, [ip]
 8007fb6:	fb05 6000 	mla	r0, r5, r0, r6
 8007fba:	6819      	ldr	r1, [r3, #0]
 8007fbc:	fb07 470e 	mla	r7, r7, lr, r4
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007fc0:	6c85      	ldr	r5, [r0, #72]	@ 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007fc2:	eb07 0a02 	add.w	sl, r7, r2
 8007fc6:	f8d0 905c 	ldr.w	r9, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007fca:	b1f5      	cbz	r5, 800800a <BSP_LCD_FillRGBRect+0x92>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007fcc:	b289      	uxth	r1, r1
    for(j = 0; j < Width; j++)
 8007fce:	3201      	adds	r2, #1
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007fd0:	f829 101a 	strh.w	r1, [r9, sl, lsl #1]
    for(j = 0; j < Width; j++)
 8007fd4:	4542      	cmp	r2, r8
      pData += Lcd_Ctx[Instance].BppFactor;
 8007fd6:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8007fda:	440b      	add	r3, r1
    for(j = 0; j < Width; j++)
 8007fdc:	d00d      	beq.n	8007ffa <BSP_LCD_FillRGBRect+0x82>
 8007fde:	9901      	ldr	r1, [sp, #4]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007fe0:	f8d0 a05c 	ldr.w	sl, [r0, #92]	@ 0x5c
 8007fe4:	f8d1 9000 	ldr.w	r9, [r1]
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007fe8:	6819      	ldr	r1, [r3, #0]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007fea:	18b8      	adds	r0, r7, r2
    for(j = 0; j < Width; j++)
 8007fec:	3201      	adds	r2, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 8007fee:	444b      	add	r3, r9
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007ff0:	b289      	uxth	r1, r1
    for(j = 0; j < Width; j++)
 8007ff2:	4590      	cmp	r8, r2
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8007ff4:	f82a 1010 	strh.w	r1, [sl, r0, lsl #1]
    for(j = 0; j < Width; j++)
 8007ff8:	d8f6      	bhi.n	8007fe8 <BSP_LCD_FillRGBRect+0x70>
  for(i = 0; i < Height; i++)
 8007ffa:	f10e 0e01 	add.w	lr, lr, #1
 8007ffe:	45de      	cmp	lr, fp
 8008000:	d1d3      	bne.n	8007faa <BSP_LCD_FillRGBRect+0x32>
}
 8008002:	2000      	movs	r0, #0
 8008004:	b003      	add	sp, #12
 8008006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(j = 0; j < Width; j++)
 800800a:	3201      	adds	r2, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800800c:	f849 102a 	str.w	r1, [r9, sl, lsl #2]
      pData += Lcd_Ctx[Instance].BppFactor;
 8008010:	f8dc 1010 	ldr.w	r1, [ip, #16]
    for(j = 0; j < Width; j++)
 8008014:	4590      	cmp	r8, r2
      pData += Lcd_Ctx[Instance].BppFactor;
 8008016:	440b      	add	r3, r1
    for(j = 0; j < Width; j++)
 8008018:	d1c8      	bne.n	8007fac <BSP_LCD_FillRGBRect+0x34>
  for(i = 0; i < Height; i++)
 800801a:	f10e 0e01 	add.w	lr, lr, #1
 800801e:	45de      	cmp	lr, fp
 8008020:	d1c3      	bne.n	8007faa <BSP_LCD_FillRGBRect+0x32>
 8008022:	e7ee      	b.n	8008002 <BSP_LCD_FillRGBRect+0x8a>
 8008024:	240158b0 	.word	0x240158b0
 8008028:	240158cc 	.word	0x240158cc

0800802c <BSP_LCD_FillRect>:
{
 800802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8008030:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 8008034:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8008036:	492f      	ldr	r1, [pc, #188]	@ (80080f4 <BSP_LCD_FillRect+0xc8>)
{
 8008038:	461e      	mov	r6, r3
 800803a:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800803c:	2434      	movs	r4, #52	@ 0x34
 800803e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8008042:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8008046:	4a2c      	ldr	r2, [pc, #176]	@ (80080f8 <BSP_LCD_FillRect+0xcc>)
{
 8008048:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800804a:	6899      	ldr	r1, [r3, #8]
{
 800804c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800804e:	fb04 2201 	mla	r2, r4, r1, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8008052:	eba9 0106 	sub.w	r1, r9, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8008056:	f8d2 a05c 	ldr.w	sl, [r2, #92]	@ 0x5c
 800805a:	e9d3 2b03 	ldrd	r2, fp, [r3, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800805e:	2a02      	cmp	r2, #2
 8008060:	d010      	beq.n	8008084 <BSP_LCD_FillRect+0x58>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8008062:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8008064:	4c25      	ldr	r4, [pc, #148]	@ (80080fc <BSP_LCD_FillRect+0xd0>)
  hlcd_dma2d.Instance = DMA2D;
 8008066:	4b26      	ldr	r3, [pc, #152]	@ (8008100 <BSP_LCD_FillRect+0xd4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008068:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800806a:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800806e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8008072:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008076:	f002 fba3 	bl	800a7c0 <HAL_DMA2D_Init>
 800807a:	b310      	cbz	r0, 80080c2 <BSP_LCD_FillRect+0x96>
}
 800807c:	2000      	movs	r0, #0
 800807e:	b003      	add	sp, #12
 8008080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8008084:	f3c5 1345 	ubfx	r3, r5, #5, #6
 8008088:	f3c5 20c4 	ubfx	r0, r5, #11, #5
 800808c:	f005 051f 	and.w	r5, r5, #31
 8008090:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 8008094:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8008098:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800809c:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80080a0:	3321      	adds	r3, #33	@ 0x21
 80080a2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80080a6:	3017      	adds	r0, #23
 80080a8:	099b      	lsrs	r3, r3, #6
 80080aa:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 80080ae:	0980      	lsrs	r0, r0, #6
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	3517      	adds	r5, #23
 80080b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080b8:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 80080bc:	f043 457f 	orr.w	r5, r3, #4278190080	@ 0xff000000
    break;
 80080c0:	e7d0      	b.n	8008064 <BSP_LCD_FillRect+0x38>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80080c2:	2101      	movs	r1, #1
 80080c4:	4620      	mov	r0, r4
 80080c6:	f002 fdcf 	bl	800ac68 <HAL_DMA2D_ConfigLayer>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d1d6      	bne.n	800807c <BSP_LCD_FillRect+0x50>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80080ce:	fb08 7209 	mla	r2, r8, r9, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80080d2:	4629      	mov	r1, r5
 80080d4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80080d6:	4633      	mov	r3, r6
 80080d8:	fb0b a202 	mla	r2, fp, r2, sl
 80080dc:	4620      	mov	r0, r4
 80080de:	9500      	str	r5, [sp, #0]
 80080e0:	f002 fc36 	bl	800a950 <HAL_DMA2D_Start>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d1c9      	bne.n	800807c <BSP_LCD_FillRect+0x50>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80080e8:	2119      	movs	r1, #25
 80080ea:	4620      	mov	r0, r4
 80080ec:	f002 fc8c 	bl	800aa08 <HAL_DMA2D_PollForTransfer>
 80080f0:	e7c4      	b.n	800807c <BSP_LCD_FillRect+0x50>
 80080f2:	bf00      	nop
 80080f4:	240158b0 	.word	0x240158b0
 80080f8:	240158cc 	.word	0x240158cc
 80080fc:	24015974 	.word	0x24015974
 8008100:	52001000 	.word	0x52001000

08008104 <BSP_LCD_DrawHLine>:
{
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	b085      	sub	sp, #20
 800810a:	461e      	mov	r6, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800810c:	4b38      	ldr	r3, [pc, #224]	@ (80081f0 <BSP_LCD_DrawHLine+0xec>)
{
 800810e:	460d      	mov	r5, r1
 8008110:	9203      	str	r2, [sp, #12]
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8008112:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8008116:	eb05 0c06 	add.w	ip, r5, r6
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800811a:	f04f 0934 	mov.w	r9, #52	@ 0x34
 800811e:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8008122:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8008126:	00c2      	lsls	r2, r0, #3
 8008128:	4932      	ldr	r1, [pc, #200]	@ (80081f4 <BSP_LCD_DrawHLine+0xf0>)
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800812a:	45e0      	cmp	r8, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800812c:	f8de 7008 	ldr.w	r7, [lr, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008130:	eba2 0200 	sub.w	r2, r2, r0
{
 8008134:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8008136:	fb09 1107 	mla	r1, r9, r7, r1
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800813a:	bf38      	it	cc
 800813c:	eba8 0605 	subcc.w	r6, r8, r5
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008140:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8008144:	f8de a010 	ldr.w	sl, [lr, #16]
 8008148:	f8d1 905c 	ldr.w	r9, [r1, #92]	@ 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	2a02      	cmp	r2, #2
 8008150:	d016      	beq.n	8008180 <BSP_LCD_DrawHLine+0x7c>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8008152:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8008154:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 80081fc <BSP_LCD_DrawHLine+0xf8>
 8008158:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800815c:	f8cb 3004 	str.w	r3, [fp, #4]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8008160:	2300      	movs	r3, #0
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008162:	4658      	mov	r0, fp
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8008164:	f8cb 2008 	str.w	r2, [fp, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8008168:	f8cb 300c 	str.w	r3, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 800816c:	4b22      	ldr	r3, [pc, #136]	@ (80081f8 <BSP_LCD_DrawHLine+0xf4>)
 800816e:	f8cb 3000 	str.w	r3, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008172:	f002 fb25 	bl	800a7c0 <HAL_DMA2D_Init>
 8008176:	b310      	cbz	r0, 80081be <BSP_LCD_DrawHLine+0xba>
}
 8008178:	2000      	movs	r0, #0
 800817a:	b005      	add	sp, #20
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8008180:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8008184:	f3c4 21c4 	ubfx	r1, r4, #11, #5
 8008188:	f004 041f 	and.w	r4, r4, #31
 800818c:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
 8008190:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8008194:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008198:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800819c:	3321      	adds	r3, #33	@ 0x21
 800819e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80081a2:	3117      	adds	r1, #23
 80081a4:	099b      	lsrs	r3, r3, #6
 80081a6:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 80081aa:	0989      	lsrs	r1, r1, #6
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	3417      	adds	r4, #23
 80081b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80081b4:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
 80081b8:	f043 447f 	orr.w	r4, r3, #4278190080	@ 0xff000000
    break;
 80081bc:	e7ca      	b.n	8008154 <BSP_LCD_DrawHLine+0x50>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80081be:	2101      	movs	r1, #1
 80081c0:	4658      	mov	r0, fp
 80081c2:	f002 fd51 	bl	800ac68 <HAL_DMA2D_ConfigLayer>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d1d6      	bne.n	8008178 <BSP_LCD_DrawHLine+0x74>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80081ca:	9b03      	ldr	r3, [sp, #12]
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80081cc:	4621      	mov	r1, r4
 80081ce:	2401      	movs	r4, #1
 80081d0:	4658      	mov	r0, fp
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80081d2:	fb03 5208 	mla	r2, r3, r8, r5
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80081d6:	4633      	mov	r3, r6
 80081d8:	9400      	str	r4, [sp, #0]
 80081da:	fb0a 9202 	mla	r2, sl, r2, r9
 80081de:	f002 fbb7 	bl	800a950 <HAL_DMA2D_Start>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d1c8      	bne.n	8008178 <BSP_LCD_DrawHLine+0x74>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80081e6:	2119      	movs	r1, #25
 80081e8:	4658      	mov	r0, fp
 80081ea:	f002 fc0d 	bl	800aa08 <HAL_DMA2D_PollForTransfer>
 80081ee:	e7c3      	b.n	8008178 <BSP_LCD_DrawHLine+0x74>
 80081f0:	240158b0 	.word	0x240158b0
 80081f4:	240158cc 	.word	0x240158cc
 80081f8:	52001000 	.word	0x52001000
 80081fc:	24015974 	.word	0x24015974

08008200 <MX_DSIHOST_DSI_Init>:
{
 8008200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008204:	4699      	mov	r9, r3
 8008206:	b09f      	sub	sp, #124	@ 0x7c
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8008208:	2300      	movs	r3, #0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800820a:	f04f 0804 	mov.w	r8, #4
 800820e:	2501      	movs	r5, #1
{
 8008210:	4616      	mov	r6, r2
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8008212:	6043      	str	r3, [r0, #4]
  PLLInit.PLLNDIV = 100;
 8008214:	2264      	movs	r2, #100	@ 0x64
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8008216:	9302      	str	r3, [sp, #8]
  hdsi->Instance = DSI;
 8008218:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
{
 800821c:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800821e:	4669      	mov	r1, sp
  hdsi->Instance = DSI;
 8008220:	6003      	str	r3, [r0, #0]
  PLLInit.PLLNDIV = 100;
 8008222:	2305      	movs	r3, #5
{
 8008224:	4604      	mov	r4, r0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8008226:	e9c0 8502 	strd	r8, r5, [r0, #8]
  PLLInit.PLLNDIV = 100;
 800822a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800822e:	f002 fd87 	bl	800ad40 <HAL_DSI_Init>
 8008232:	2800      	cmp	r0, #0
 8008234:	d151      	bne.n	80082da <MX_DSIHOST_DSI_Init+0xda>
    VidCfg.HorizontalLine = ((Width + NT35510_480X800_HSYNC + NT35510_480X800_HBP + NT35510_480X800_HFP) * 62500U)/27429U;
 8008236:	f24f 4224 	movw	r2, #62500	@ 0xf424
 800823a:	4b2a      	ldr	r3, [pc, #168]	@ (80082e4 <MX_DSIHOST_DSI_Init+0xe4>)
 800823c:	fb02 3307 	mla	r3, r2, r7, r3
 8008240:	4a29      	ldr	r2, [pc, #164]	@ (80082e8 <MX_DSIHOST_DSI_Init+0xe8>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8008246:	4a29      	ldr	r2, [pc, #164]	@ (80082ec <MX_DSIHOST_DSI_Init+0xec>)
 8008248:	7812      	ldrb	r2, [r2, #0]
    VidCfg.HorizontalLine = ((Width + NT35510_480X800_HSYNC + NT35510_480X800_HBP + NT35510_480X800_HFP) * 62500U)/27429U;
 800824a:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 800824c:	e9cd 0903 	strd	r0, r9, [sp, #12]
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8008250:	2a00      	cmp	r2, #0
 8008252:	d03a      	beq.n	80082ca <MX_DSIHOST_DSI_Init+0xca>
 8008254:	46ac      	mov	ip, r5
 8008256:	4642      	mov	r2, r8
 8008258:	210f      	movs	r1, #15
 800825a:	2510      	movs	r5, #16
    VidCfg.VerticalBackPorch = NT35510_480X800_VBP;
 800825c:	9111      	str	r1, [sp, #68]	@ 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800825e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_ENABLE;
 8008262:	9005      	str	r0, [sp, #20]
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8008264:	4620      	mov	r0, r4
    VidCfg.LPVACTLargestPacketSize = 64;
 8008266:	9216      	str	r2, [sp, #88]	@ 0x58
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8008268:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  VidCfg.PacketSize = Width;
 800826c:	9707      	str	r7, [sp, #28]
    VidCfg.VerticalSyncActive = NT35510_480X800_VSYNC;
 800826e:	e9cd 3c0f 	strd	r3, ip, [sp, #60]	@ 0x3c
  VidCfg.VerticalActive = Height;
 8008272:	e9cd 5612 	strd	r5, r6, [sp, #72]	@ 0x48
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8008276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800827a:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
    VidCfg.LPLargestPacketSize = 64;
 800827e:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8008282:	e9cd 5317 	strd	r5, r3, [sp, #92]	@ 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8008286:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800828a:	f44f 7200 	mov.w	r2, #512	@ 0x200
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800828e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8008292:	e9cd 4119 	strd	r4, r1, [sp, #100]	@ 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8008296:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
  VidCfg.NullPacketSize = 0xFFFU;
 800829a:	f640 74ff 	movw	r4, #4095	@ 0xfff
  VidCfg.NumberOfChunks = 0;
 800829e:	2300      	movs	r3, #0
    VidCfg.HorizontalSyncActive = (NT35510_480X800_HSYNC * 62500U)/27429U;
 80082a0:	2204      	movs	r2, #4
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80082a2:	a903      	add	r1, sp, #12
  VidCfg.NumberOfChunks = 0;
 80082a4:	9308      	str	r3, [sp, #32]
    VidCfg.HorizontalSyncActive = (NT35510_480X800_HSYNC * 62500U)/27429U;
 80082a6:	920d      	str	r2, [sp, #52]	@ 0x34
    VidCfg.HorizontalBackPorch = (NT35510_480X800_HBP * 62500U)/27429U;
 80082a8:	224d      	movs	r2, #77	@ 0x4d
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 80082aa:	931d      	str	r3, [sp, #116]	@ 0x74
    VidCfg.HorizontalBackPorch = (NT35510_480X800_HBP * 62500U)/27429U;
 80082ac:	920e      	str	r2, [sp, #56]	@ 0x38
  VidCfg.NullPacketSize = 0xFFFU;
 80082ae:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80082b2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80082b6:	2302      	movs	r3, #2
 80082b8:	9306      	str	r3, [sp, #24]
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80082ba:	f002 fe79 	bl	800afb0 <HAL_DSI_ConfigVideoMode>
 80082be:	3800      	subs	r0, #0
 80082c0:	bf18      	it	ne
 80082c2:	2001      	movne	r0, #1
}
 80082c4:	b01f      	add	sp, #124	@ 0x7c
 80082c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ca:	2196      	movs	r1, #150	@ 0x96
 80082cc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80082d0:	f04f 0c78 	mov.w	ip, #120	@ 0x78
 80082d4:	2240      	movs	r2, #64	@ 0x40
 80082d6:	460d      	mov	r5, r1
 80082d8:	e7c0      	b.n	800825c <MX_DSIHOST_DSI_Init+0x5c>
    return HAL_ERROR;
 80082da:	4628      	mov	r0, r5
}
 80082dc:	b01f      	add	sp, #124	@ 0x7c
 80082de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e2:	bf00      	nop
 80082e4:	0042c1d8 	.word	0x0042c1d8
 80082e8:	4c751ce3 	.word	0x4c751ce3
 80082ec:	240158ac 	.word	0x240158ac

080082f0 <MX_LTDC_Init>:
{
 80082f0:	b470      	push	{r4, r5, r6}
  hltdc->Instance = LTDC;
 80082f2:	4c15      	ldr	r4, [pc, #84]	@ (8008348 <MX_LTDC_Init+0x58>)
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80082f4:	2300      	movs	r3, #0
    hltdc->Init.AccumulatedActiveW = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP - 1;
 80082f6:	f101 0623 	add.w	r6, r1, #35	@ 0x23
    hltdc->Init.TotalWidth         = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP + NT35510_480X800_HFP - 1;
 80082fa:	3145      	adds	r1, #69	@ 0x45
  hltdc->Instance = LTDC;
 80082fc:	6004      	str	r4, [r0, #0]
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 80082fe:	4c13      	ldr	r4, [pc, #76]	@ (800834c <MX_LTDC_Init+0x5c>)
 8008300:	7824      	ldrb	r4, [r4, #0]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008302:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008306:	e9c0 3303 	strd	r3, r3, [r0, #12]
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 800830a:	b9bc      	cbnz	r4, 800833c <MX_LTDC_Init+0x4c>
    hltdc->Init.AccumulatedActiveH = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP - 1;
 800830c:	f202 140d 	addw	r4, r2, #269	@ 0x10d
    hltdc->Init.TotalHeigh         = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP + NT35510_480X800_VFP - 1;
 8008310:	2377      	movs	r3, #119	@ 0x77
 8008312:	f202 12a3 	addw	r2, r2, #419	@ 0x1a3
 8008316:	f240 150d 	movw	r5, #269	@ 0x10d
    hltdc->Init.VerticalSync       = NT35510_480X800_VSYNC - 1;
 800831a:	6183      	str	r3, [r0, #24]
  hltdc->Init.Backcolor.Blue  = 0x00;
 800831c:	2300      	movs	r3, #0
    hltdc->Init.TotalHeigh         = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP + NT35510_480X800_VFP - 1;
 800831e:	6302      	str	r2, [r0, #48]	@ 0x30
    hltdc->Init.HorizontalSync     = NT35510_480X800_HSYNC - 1;
 8008320:	2201      	movs	r2, #1
  hltdc->Init.Backcolor.Blue  = 0x00;
 8008322:	8683      	strh	r3, [r0, #52]	@ 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8008324:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
    hltdc->Init.AccumulatedHBP     = NT35510_480X800_HSYNC + NT35510_480X800_HBP - 1;
 8008328:	2323      	movs	r3, #35	@ 0x23
    hltdc->Init.AccumulatedActiveW = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP - 1;
 800832a:	6246      	str	r6, [r0, #36]	@ 0x24
    hltdc->Init.AccumulatedVBP     = NT35510_480X800_VSYNC + NT35510_480X800_VBP - 1;
 800832c:	6205      	str	r5, [r0, #32]
    hltdc->Init.AccumulatedActiveH = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP - 1;
 800832e:	6284      	str	r4, [r0, #40]	@ 0x28
    hltdc->Init.TotalWidth         = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP + NT35510_480X800_HFP - 1;
 8008330:	62c1      	str	r1, [r0, #44]	@ 0x2c
    hltdc->Init.HorizontalSync     = NT35510_480X800_HSYNC - 1;
 8008332:	6142      	str	r2, [r0, #20]
    hltdc->Init.AccumulatedHBP     = NT35510_480X800_HSYNC + NT35510_480X800_HBP - 1;
 8008334:	61c3      	str	r3, [r0, #28]
}
 8008336:	bc70      	pop	{r4, r5, r6}
  return HAL_LTDC_Init(hltdc);
 8008338:	f003 bf7a 	b.w	800c230 <HAL_LTDC_Init>
    hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800833c:	f102 040f 	add.w	r4, r2, #15
    hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8008340:	250f      	movs	r5, #15
 8008342:	321f      	adds	r2, #31
 8008344:	e7e9      	b.n	800831a <MX_LTDC_Init+0x2a>
 8008346:	bf00      	nop
 8008348:	50001000 	.word	0x50001000
 800834c:	240158ac 	.word	0x240158ac

08008350 <MX_LTDC_ConfigLayer>:
{
 8008350:	4613      	mov	r3, r2
 8008352:	460a      	mov	r2, r1
 8008354:	b510      	push	{r4, lr}
  pLayerCfg.WindowX1 = Config->X1;
 8008356:	e9d3 1400 	ldrd	r1, r4, [r3]
{
 800835a:	b08e      	sub	sp, #56	@ 0x38
  pLayerCfg.WindowX0 = Config->X0;
 800835c:	9101      	str	r1, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800835e:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowX1 = Config->X1;
 8008360:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8008362:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8008364:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
  pLayerCfg.WindowY0 = Config->Y0;
 8008368:	9103      	str	r1, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800836a:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 800836c:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800836e:	910c      	str	r1, [sp, #48]	@ 0x30
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8008370:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8008372:	e9d3 4304 	ldrd	r4, r3, [r3, #16]
 8008376:	930a      	str	r3, [sp, #40]	@ 0x28
  pLayerCfg.Alpha = 255;
 8008378:	2300      	movs	r3, #0
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800837a:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha = 255;
 800837c:	24ff      	movs	r4, #255	@ 0xff
  pLayerCfg.Backcolor.Blue = 0;
 800837e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Red = 0;
 8008382:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
  pLayerCfg.Alpha = 255;
 8008386:	e9cd 4306 	strd	r4, r3, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800838a:	2307      	movs	r3, #7
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800838c:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008390:	9309      	str	r3, [sp, #36]	@ 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008392:	9408      	str	r4, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8008394:	f004 f820 	bl	800c3d8 <HAL_LTDC_ConfigLayer>
}
 8008398:	b00e      	add	sp, #56	@ 0x38
 800839a:	bd10      	pop	{r4, pc}
 800839c:	0000      	movs	r0, r0
	...

080083a0 <MX_LTDC_ClockConfig>:
{
 80083a0:	b500      	push	{lr}
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80083a2:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 80083e0 <MX_LTDC_ClockConfig+0x40>
{
 80083a6:	b0b3      	sub	sp, #204	@ 0xcc
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80083a8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80083ac:	2300      	movs	r3, #0
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80083ae:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80083b0:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80083b4:	2202      	movs	r2, #2
 80083b6:	2302      	movs	r3, #2
 80083b8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80083bc:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 80083e8 <MX_LTDC_ClockConfig+0x48>
 80083c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80083c4:	2200      	movs	r2, #0
 80083c6:	2300      	movs	r3, #0
 80083c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80083cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80083d0:	f005 fc9c 	bl	800dd0c <HAL_RCCEx_PeriphCLKConfig>
}
 80083d4:	b033      	add	sp, #204	@ 0xcc
 80083d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	00000005 	.word	0x00000005
 80083e4:	00000084 	.word	0x00000084
 80083e8:	00000018 	.word	0x00000018
 80083ec:	00000800 	.word	0x00000800

080083f0 <BSP_LCD_InitEx>:
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 80083f0:	2901      	cmp	r1, #1
 80083f2:	f200 817d 	bhi.w	80086f0 <BSP_LCD_InitEx+0x300>
{
 80083f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	468a      	mov	sl, r1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 80083fc:	1e01      	subs	r1, r0, #0
{
 80083fe:	b095      	sub	sp, #84	@ 0x54
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8008400:	bf18      	it	ne
 8008402:	2101      	movne	r1, #1
 8008404:	2800      	cmp	r0, #0
 8008406:	f040 8170 	bne.w	80086ea <BSP_LCD_InitEx+0x2fa>
 800840a:	461e      	mov	r6, r3
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 800840c:	1e53      	subs	r3, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800840e:	2b01      	cmp	r3, #1
 8008410:	f200 816b 	bhi.w	80086ea <BSP_LCD_InitEx+0x2fa>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8008414:	2a02      	cmp	r2, #2
 8008416:	f000 8107 	beq.w	8008628 <BSP_LCD_InitEx+0x238>
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 800841a:	9100      	str	r1, [sp, #0]
      dsi_pixel_format = DSI_RGB888;
 800841c:	2305      	movs	r3, #5
      Lcd_Ctx[Instance].BppFactor = 4U;
 800841e:	2104      	movs	r1, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8008420:	4cb7      	ldr	r4, [pc, #732]	@ (8008700 <BSP_LCD_InitEx+0x310>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8008422:	2501      	movs	r5, #1
 8008424:	4fb7      	ldr	r7, [pc, #732]	@ (8008704 <BSP_LCD_InitEx+0x314>)
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8008426:	f04f 0808 	mov.w	r8, #8
 800842a:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800842c:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
    Lcd_Ctx[Instance].YSize  = Height;
 8008430:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008432:	f04f 0902 	mov.w	r9, #2
    Lcd_Ctx[Instance].XSize  = Width;
 8008436:	603e      	str	r6, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8008438:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800843a:	48b3      	ldr	r0, [pc, #716]	@ (8008708 <BSP_LCD_InitEx+0x318>)
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800843c:	e9c7 2103 	strd	r2, r1, [r7, #12]
  LCD_RESET_GPIO_CLK_ENABLE();
 8008440:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8008444:	a90e      	add	r1, sp, #56	@ 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 8008446:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800844a:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800844e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8008452:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 8008456:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800845a:	9208      	str	r2, [sp, #32]
 800845c:	9a08      	ldr	r2, [sp, #32]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800845e:	2203      	movs	r2, #3
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8008460:	e9cd 550f 	strd	r5, r5, [sp, #60]	@ 0x3c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008464:	9211      	str	r2, [sp, #68]	@ 0x44
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8008466:	f003 f829 	bl	800b4bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800846a:	4641      	mov	r1, r8
 800846c:	2200      	movs	r2, #0
 800846e:	48a6      	ldr	r0, [pc, #664]	@ (8008708 <BSP_LCD_InitEx+0x318>)
 8008470:	f003 fa30 	bl	800b8d4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8008474:	2014      	movs	r0, #20
 8008476:	f000 fc07 	bl	8008c88 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800847a:	4641      	mov	r1, r8
 800847c:	462a      	mov	r2, r5
 800847e:	48a2      	ldr	r0, [pc, #648]	@ (8008708 <BSP_LCD_InitEx+0x318>)
 8008480:	f003 fa28 	bl	800b8d4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8008484:	200a      	movs	r0, #10
 8008486:	f000 fbff 	bl	8008c88 <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800848a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800848e:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008492:	489e      	ldr	r0, [pc, #632]	@ (800870c <BSP_LCD_InitEx+0x31c>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008498:	a90e      	add	r1, sp, #56	@ 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800849a:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800849e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80084a2:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80084a6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80084aa:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80084ae:	950f      	str	r5, [sp, #60]	@ 0x3c
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80084b0:	9206      	str	r2, [sp, #24]
 80084b2:	9a06      	ldr	r2, [sp, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80084b4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80084b8:	f003 f800 	bl	800b4bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80084bc:	4659      	mov	r1, fp
 80084be:	462a      	mov	r2, r5
 80084c0:	4892      	ldr	r0, [pc, #584]	@ (800870c <BSP_LCD_InitEx+0x31c>)
 80084c2:	f003 fa07 	bl	800b8d4 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 80084c6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80084ca:	a90e      	add	r1, sp, #56	@ 0x38
 80084cc:	488f      	ldr	r0, [pc, #572]	@ (800870c <BSP_LCD_InitEx+0x31c>)
  LCD_TE_GPIO_CLK_ENABLE();
 80084ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    hlcd_dsi.Instance = DSI;
 80084d2:	f8df b268 	ldr.w	fp, [pc, #616]	@ 800873c <BSP_LCD_InitEx+0x34c>
  LCD_TE_GPIO_CLK_ENABLE();
 80084d6:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 80084da:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80084de:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  LCD_TE_GPIO_CLK_ENABLE();
 80084e2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
    hlcd_ltdc.Instance = LTDC;
 80084e6:	f8df 9258 	ldr.w	r9, [pc, #600]	@ 8008740 <BSP_LCD_InitEx+0x350>
  gpio_init_structure.Pin       = LCD_TE_PIN;
 80084ea:	ed9f 7b83 	vldr	d7, [pc, #524]	@ 80086f8 <BSP_LCD_InitEx+0x308>
  LCD_TE_GPIO_CLK_ENABLE();
 80084ee:	9207      	str	r2, [sp, #28]
 80084f0:	9a07      	ldr	r2, [sp, #28]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 80084f2:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80084f6:	f002 ffe1 	bl	800b4bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 80084fa:	462a      	mov	r2, r5
 80084fc:	2104      	movs	r1, #4
 80084fe:	4883      	ldr	r0, [pc, #524]	@ (800870c <BSP_LCD_InitEx+0x31c>)
 8008500:	f003 f9e8 	bl	800b8d4 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8008504:	4642      	mov	r2, r8
 8008506:	210f      	movs	r1, #15
 8008508:	2058      	movs	r0, #88	@ 0x58
 800850a:	f000 fbef 	bl	8008cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800850e:	2058      	movs	r0, #88	@ 0x58
 8008510:	f000 fc28 	bl	8008d64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8008514:	4642      	mov	r2, r8
 8008516:	210f      	movs	r1, #15
 8008518:	205a      	movs	r0, #90	@ 0x5a
 800851a:	f000 fbe7 	bl	8008cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800851e:	205a      	movs	r0, #90	@ 0x5a
 8008520:	f000 fc20 	bl	8008d64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8008524:	4642      	mov	r2, r8
 8008526:	210f      	movs	r1, #15
 8008528:	207b      	movs	r0, #123	@ 0x7b
 800852a:	f000 fbdf 	bl	8008cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800852e:	207b      	movs	r0, #123	@ 0x7b
 8008530:	f000 fc18 	bl	8008d64 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8008534:	4a76      	ldr	r2, [pc, #472]	@ (8008710 <BSP_LCD_InitEx+0x320>)
    hlcd_dma2d.Instance = DMA2D;
 8008536:	4977      	ldr	r1, [pc, #476]	@ (8008714 <BSP_LCD_InitEx+0x324>)
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8008538:	4658      	mov	r0, fp
    hlcd_ltdc.Instance = LTDC;
 800853a:	f8c9 2000 	str.w	r2, [r9]
    hlcd_dma2d.Instance = DMA2D;
 800853e:	4a76      	ldr	r2, [pc, #472]	@ (8008718 <BSP_LCD_InitEx+0x328>)
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8008540:	9b01      	ldr	r3, [sp, #4]
    hlcd_dma2d.Instance = DMA2D;
 8008542:	6011      	str	r1, [r2, #0]
    hlcd_dsi.Instance = DSI;
 8008544:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8008548:	4631      	mov	r1, r6
    hlcd_dsi.Instance = DSI;
 800854a:	f8cb 2000 	str.w	r2, [fp]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800854e:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 8008552:	f042 0208 	orr.w	r2, r2, #8
 8008556:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 800855a:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 800855e:	f002 0208 	and.w	r2, r2, #8
 8008562:	9205      	str	r2, [sp, #20]
 8008564:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_LTDC_FORCE_RESET();
 8008566:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800856a:	f042 0208 	orr.w	r2, r2, #8
 800856e:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8008572:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8008576:	f022 0208 	bic.w	r2, r2, #8
 800857a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800857e:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
 8008582:	f042 0210 	orr.w	r2, r2, #16
 8008586:	f8c4 20d4 	str.w	r2, [r4, #212]	@ 0xd4
 800858a:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
 800858e:	f002 0210 	and.w	r2, r2, #16
 8008592:	9204      	str	r2, [sp, #16]
 8008594:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8008596:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8008598:	f042 0210 	orr.w	r2, r2, #16
 800859c:	67e2      	str	r2, [r4, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800859e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80085a0:	f022 0210 	bic.w	r2, r2, #16
 80085a4:	67e2      	str	r2, [r4, #124]	@ 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 80085a6:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 80085aa:	f042 0210 	orr.w	r2, r2, #16
 80085ae:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 80085b2:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 80085b6:	f002 0210 	and.w	r2, r2, #16
 80085ba:	9203      	str	r2, [sp, #12]
 80085bc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_DSI_FORCE_RESET();
 80085be:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80085c2:	f042 0210 	orr.w	r2, r2, #16
 80085c6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 80085ca:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80085ce:	f022 0210 	bic.w	r2, r2, #16
 80085d2:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 80085d6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80085d8:	f7ff fe12 	bl	8008200 <MX_DSIHOST_DSI_Init>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d156      	bne.n	800868e <BSP_LCD_InitEx+0x29e>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 80085e0:	4648      	mov	r0, r9
 80085e2:	f7ff fedd 	bl	80083a0 <MX_LTDC_ClockConfig>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d151      	bne.n	800868e <BSP_LCD_InitEx+0x29e>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 80085ea:	4631      	mov	r1, r6
 80085ec:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80085ee:	4648      	mov	r0, r9
 80085f0:	f7ff fe7e 	bl	80082f0 <MX_LTDC_Init>
 80085f4:	4601      	mov	r1, r0
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d149      	bne.n	800868e <BSP_LCD_InitEx+0x29e>
      config.Y1          = Height;
 80085fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80085fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80085fe:	4648      	mov	r0, r9
      config.X1          = Width;
 8008600:	960f      	str	r6, [sp, #60]	@ 0x3c
      config.Y1          = Height;
 8008602:	9311      	str	r3, [sp, #68]	@ 0x44
      config.PixelFormat = ltdc_pixel_format;
 8008604:	9b00      	ldr	r3, [sp, #0]
      config.X0          = 0;
 8008606:	910e      	str	r1, [sp, #56]	@ 0x38
      config.PixelFormat = ltdc_pixel_format;
 8008608:	9312      	str	r3, [sp, #72]	@ 0x48
      config.Address     = LCD_LAYER_0_ADDRESS;
 800860a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
      config.Y0          = 0;
 800860e:	9110      	str	r1, [sp, #64]	@ 0x40
      config.Address     = LCD_LAYER_0_ADDRESS;
 8008610:	9313      	str	r3, [sp, #76]	@ 0x4c
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8008612:	f7ff fe9d 	bl	8008350 <MX_LTDC_ConfigLayer>
 8008616:	4604      	mov	r4, r0
 8008618:	b150      	cbz	r0, 8008630 <BSP_LCD_InitEx+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800861a:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800861e:	2301      	movs	r3, #1
 8008620:	61bb      	str	r3, [r7, #24]
}
 8008622:	b015      	add	sp, #84	@ 0x54
 8008624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dsi_pixel_format = DSI_RGB565;
 8008628:	460b      	mov	r3, r1
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 800862a:	9200      	str	r2, [sp, #0]
      Lcd_Ctx[Instance].BppFactor = 2U;
 800862c:	4611      	mov	r1, r2
 800862e:	e6f7      	b.n	8008420 <BSP_LCD_InitEx+0x30>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8008630:	4658      	mov	r0, fp
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 8008632:	4d3a      	ldr	r5, [pc, #232]	@ (800871c <BSP_LCD_InitEx+0x32c>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 8008634:	f002 fdd8 	bl	800b1e8 <HAL_DSI_Start>
  IOCtx.GetTick     = BSP_GetTick;
 8008638:	f8df 9108 	ldr.w	r9, [pc, #264]	@ 8008744 <BSP_LCD_InitEx+0x354>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800863c:	2104      	movs	r1, #4
 800863e:	4658      	mov	r0, fp
  IOCtx.WriteReg    = DSI_IO_Write;
 8008640:	4e37      	ldr	r6, [pc, #220]	@ (8008720 <BSP_LCD_InitEx+0x330>)
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8008642:	f002 fdbd 	bl	800b1c0 <HAL_DSI_ConfigFlowControl>
  IOCtx.ReadReg     = DSI_IO_Read;
 8008646:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8008748 <BSP_LCD_InitEx+0x358>
  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 800864a:	a90a      	add	r1, sp, #40	@ 0x28
 800864c:	4628      	mov	r0, r5
  uint32_t id = 0;
 800864e:	9409      	str	r4, [sp, #36]	@ 0x24
  IOCtx.Address     = 0;
 8008650:	f8ad 4028 	strh.w	r4, [sp, #40]	@ 0x28
  IOCtx.GetTick     = BSP_GetTick;
 8008654:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
  IOCtx.WriteReg    = DSI_IO_Write;
 8008658:	960b      	str	r6, [sp, #44]	@ 0x2c
  IOCtx.ReadReg     = DSI_IO_Read;
 800865a:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 800865e:	f7fb fffb 	bl	8004658 <NT35510_RegisterBusIO>
 8008662:	b9c8      	cbnz	r0, 8008698 <BSP_LCD_InitEx+0x2a8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &NT35510Obj;
 8008664:	4c2f      	ldr	r4, [pc, #188]	@ (8008724 <BSP_LCD_InitEx+0x334>)

    if(NT35510_ReadID(Lcd_CompObj, &id) != NT35510_OK)
 8008666:	4628      	mov	r0, r5
 8008668:	a909      	add	r1, sp, #36	@ 0x24
    Lcd_CompObj = &NT35510Obj;
 800866a:	6025      	str	r5, [r4, #0]
    if(NT35510_ReadID(Lcd_CompObj, &id) != NT35510_OK)
 800866c:	f7fb ffe0 	bl	8004630 <NT35510_ReadID>
 8008670:	b990      	cbnz	r0, 8008698 <BSP_LCD_InitEx+0x2a8>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if (id != NT35510_ID)
 8008672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008674:	2b80      	cmp	r3, #128	@ 0x80
 8008676:	d10f      	bne.n	8008698 <BSP_LCD_InitEx+0x2a8>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &NT35510_LCD_Driver;
 8008678:	4b2b      	ldr	r3, [pc, #172]	@ (8008728 <BSP_LCD_InitEx+0x338>)
 800867a:	4a2c      	ldr	r2, [pc, #176]	@ (800872c <BSP_LCD_InitEx+0x33c>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != NT35510_OK)
 800867c:	6820      	ldr	r0, [r4, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &NT35510_LCD_Driver;
 800867e:	6013      	str	r3, [r2, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != NT35510_OK)
 8008680:	4652      	mov	r2, sl
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	9900      	ldr	r1, [sp, #0]
 8008686:	4798      	blx	r3
 8008688:	b930      	cbnz	r0, 8008698 <BSP_LCD_InitEx+0x2a8>
          ret = BSP_ERROR_NONE;
 800868a:	2000      	movs	r0, #0
 800868c:	e7c7      	b.n	800861e <BSP_LCD_InitEx+0x22e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800868e:	f06f 0003 	mvn.w	r0, #3
}
 8008692:	b015      	add	sp, #84	@ 0x54
 8008694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
  int32_t ret;
  uint32_t id = 0;
 8008698:	2300      	movs	r3, #0
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800869a:	4c25      	ldr	r4, [pc, #148]	@ (8008730 <BSP_LCD_InitEx+0x340>)
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 800869c:	2201      	movs	r2, #1
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800869e:	a90a      	add	r1, sp, #40	@ 0x28
  uint32_t id = 0;
 80086a0:	9309      	str	r3, [sp, #36]	@ 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80086a2:	4620      	mov	r0, r4
  IOCtx.Address     = 0;
 80086a4:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 80086a8:	4b22      	ldr	r3, [pc, #136]	@ (8008734 <BSP_LCD_InitEx+0x344>)
  IOCtx.GetTick     = BSP_GetTick;
 80086aa:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
  IOCtx.WriteReg    = DSI_IO_Write;
 80086ae:	960b      	str	r6, [sp, #44]	@ 0x2c
  IOCtx.ReadReg     = DSI_IO_Read;
 80086b0:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 80086b4:	701a      	strb	r2, [r3, #0]
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80086b6:	f7fc fc9f 	bl	8004ff8 <OTM8009A_RegisterBusIO>
 80086ba:	b998      	cbnz	r0, 80086e4 <BSP_LCD_InitEx+0x2f4>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 80086bc:	4d19      	ldr	r5, [pc, #100]	@ (8008724 <BSP_LCD_InitEx+0x334>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80086be:	4620      	mov	r0, r4
 80086c0:	a909      	add	r1, sp, #36	@ 0x24
    Lcd_CompObj = &OTM8009AObj;
 80086c2:	602c      	str	r4, [r5, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80086c4:	f7fc fc84 	bl	8004fd0 <OTM8009A_ReadID>
 80086c8:	b960      	cbnz	r0, 80086e4 <BSP_LCD_InitEx+0x2f4>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if (id != OTM8009A_ID)
 80086ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086cc:	2b40      	cmp	r3, #64	@ 0x40
 80086ce:	d109      	bne.n	80086e4 <BSP_LCD_InitEx+0x2f4>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80086d0:	4b19      	ldr	r3, [pc, #100]	@ (8008738 <BSP_LCD_InitEx+0x348>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80086d2:	4652      	mov	r2, sl
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80086d4:	4c15      	ldr	r4, [pc, #84]	@ (800872c <BSP_LCD_InitEx+0x33c>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80086d6:	9900      	ldr	r1, [sp, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80086d8:	6023      	str	r3, [r4, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 80086da:	6828      	ldr	r0, [r5, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4798      	blx	r3
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d0d2      	beq.n	800868a <BSP_LCD_InitEx+0x29a>
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80086e4:	f06f 0006 	mvn.w	r0, #6
 80086e8:	e799      	b.n	800861e <BSP_LCD_InitEx+0x22e>
    ret = BSP_ERROR_WRONG_PARAM;
 80086ea:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80086ee:	e798      	b.n	8008622 <BSP_LCD_InitEx+0x232>
    ret = BSP_ERROR_WRONG_PARAM;
 80086f0:	f06f 0001 	mvn.w	r0, #1
}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	00000004 	.word	0x00000004
 80086fc:	00000000 	.word	0x00000000
 8008700:	58024400 	.word	0x58024400
 8008704:	240158b0 	.word	0x240158b0
 8008708:	58021800 	.word	0x58021800
 800870c:	58022400 	.word	0x58022400
 8008710:	50001000 	.word	0x50001000
 8008714:	52001000 	.word	0x52001000
 8008718:	24015974 	.word	0x24015974
 800871c:	2401588c 	.word	0x2401588c
 8008720:	08007d31 	.word	0x08007d31
 8008724:	240159f8 	.word	0x240159f8
 8008728:	240138f0 	.word	0x240138f0
 800872c:	240159fc 	.word	0x240159fc
 8008730:	2401586c 	.word	0x2401586c
 8008734:	240158ac 	.word	0x240158ac
 8008738:	2401393c 	.word	0x2401393c
 800873c:	240159dc 	.word	0x240159dc
 8008740:	240158cc 	.word	0x240158cc
 8008744:	0800763d 	.word	0x0800763d
 8008748:	08007d09 	.word	0x08007d09

0800874c <BSP_LCD_Init>:
{
 800874c:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800874e:	f44f 74f0 	mov.w	r4, #480	@ 0x1e0
{
 8008752:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8008754:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8008758:	2201      	movs	r2, #1
 800875a:	9400      	str	r4, [sp, #0]
 800875c:	f7ff fe48 	bl	80083f0 <BSP_LCD_InitEx>
}
 8008760:	b002      	add	sp, #8
 8008762:	bd10      	pop	{r4, pc}

08008764 <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 8008764:	b948      	cbnz	r0, 800877a <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 8008766:	4806      	ldr	r0, [pc, #24]	@ (8008780 <BSP_LCD_ConfigLayer+0x1c>)
{
 8008768:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800876a:	f7ff fdf1 	bl	8008350 <MX_LTDC_ConfigLayer>
  int32_t ret = BSP_ERROR_NONE;
 800876e:	2800      	cmp	r0, #0
 8008770:	bf14      	ite	ne
 8008772:	f06f 0003 	mvnne.w	r0, #3
 8008776:	2000      	moveq	r0, #0
}
 8008778:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800877a:	f06f 0001 	mvn.w	r0, #1
}
 800877e:	4770      	bx	lr
 8008780:	240158cc 	.word	0x240158cc

08008784 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8008784:	b410      	push	{r4}
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8008786:	4c0b      	ldr	r4, [pc, #44]	@ (80087b4 <MX_QSPI_Init+0x30>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8008788:	2200      	movs	r2, #0
  hQspi->Instance                = QUADSPI;
 800878a:	6004      	str	r4, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800878c:	684c      	ldr	r4, [r1, #4]
 800878e:	6044      	str	r4, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8008790:	2401      	movs	r4, #1
 8008792:	6084      	str	r4, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8008794:	688c      	ldr	r4, [r1, #8]
 8008796:	60c4      	str	r4, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8008798:	680c      	ldr	r4, [r1, #0]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800879a:	68c9      	ldr	r1, [r1, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800879c:	6104      	str	r4, [r0, #16]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800879e:	6201      	str	r1, [r0, #32]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 80087a0:	f44f 7140 	mov.w	r1, #768	@ 0x300

  return HAL_QSPI_Init(hQspi);
}
 80087a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80087a8:	6182      	str	r2, [r0, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80087aa:	61c2      	str	r2, [r0, #28]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 80087ac:	6141      	str	r1, [r0, #20]
  return HAL_QSPI_Init(hQspi);
 80087ae:	f004 b9ad 	b.w	800cb0c <HAL_QSPI_Init>
 80087b2:	bf00      	nop
 80087b4:	52005000 	.word	0x52005000

080087b8 <BSP_QSPI_Init>:
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f040 81d9 	bne.w	8008b70 <BSP_QSPI_Init+0x3b8>
{
 80087be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80087c2:	4c04      	ldr	r4, [pc, #16]	@ (80087d4 <BSP_QSPI_Init+0x1c>)
{
 80087c4:	b0a4      	sub	sp, #144	@ 0x90
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80087c6:	7826      	ldrb	r6, [r4, #0]
 80087c8:	b136      	cbz	r6, 80087d8 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 80087ca:	2000      	movs	r0, #0
}
 80087cc:	b024      	add	sp, #144	@ 0x90
 80087ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d2:	bf00      	nop
 80087d4:	24015a00 	.word	0x24015a00
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80087d8:	4bc8      	ldr	r3, [pc, #800]	@ (8008afc <BSP_QSPI_Init+0x344>)
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80087da:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80087de:	2709      	movs	r7, #9
 80087e0:	460d      	mov	r5, r1
  QSPI_CLK_ENABLE();
 80087e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80087e6:	a916      	add	r1, sp, #88	@ 0x58
 80087e8:	48c5      	ldr	r0, [pc, #788]	@ (8008b00 <BSP_QSPI_Init+0x348>)

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80087ea:	f04f 0840 	mov.w	r8, #64	@ 0x40
  QSPI_CLK_ENABLE();
 80087ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80087f2:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 80087f6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80087fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80087fe:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8008802:	9201      	str	r2, [sp, #4]
 8008804:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8008806:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008808:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800880c:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800880e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008810:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008814:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8008816:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800881a:	f042 0202 	orr.w	r2, r2, #2
 800881e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008822:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008826:	f002 0202 	and.w	r2, r2, #2
 800882a:	9202      	str	r2, [sp, #8]
 800882c:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800882e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008836:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800883a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800883e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008842:	9203      	str	r2, [sp, #12]
 8008844:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8008846:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800884a:	f042 0208 	orr.w	r2, r2, #8
 800884e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008852:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008856:	f002 0208 	and.w	r2, r2, #8
 800885a:	9204      	str	r2, [sp, #16]
 800885c:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800885e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008862:	f042 0220 	orr.w	r2, r2, #32
 8008866:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800886a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800886e:	f002 0220 	and.w	r2, r2, #32
 8008872:	9205      	str	r2, [sp, #20]
 8008874:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8008876:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800887a:	f042 0220 	orr.w	r2, r2, #32
 800887e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008882:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008886:	f002 0220 	and.w	r2, r2, #32
 800888a:	9206      	str	r2, [sp, #24]
 800888c:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800888e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008892:	f042 0220 	orr.w	r2, r2, #32
 8008896:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800889a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800889e:	f002 0220 	and.w	r2, r2, #32
 80088a2:	9207      	str	r2, [sp, #28]
 80088a4:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80088a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80088aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80088b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80088b6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80088ba:	9208      	str	r2, [sp, #32]
 80088bc:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80088be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80088c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80088c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80088ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80088ce:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80088d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80088d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80088d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80088da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80088de:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80088e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80088e6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80088ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80088ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80088ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80088f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088f6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80088fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80088fe:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008902:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008904:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8008906:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800890a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800890e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800891a:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800891c:	2302      	movs	r3, #2
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800891e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008920:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008924:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008926:	971a      	str	r7, [sp, #104]	@ 0x68
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008928:	e9cd 6318 	strd	r6, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800892c:	f002 fdc6 	bl	800b4bc <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008930:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8008932:	a916      	add	r1, sp, #88	@ 0x58
 8008934:	4873      	ldr	r0, [pc, #460]	@ (8008b04 <BSP_QSPI_Init+0x34c>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008936:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8008938:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800893c:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8008940:	f002 fdbc 	bl	800b4bc <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8008944:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8008948:	a916      	add	r1, sp, #88	@ 0x58
 800894a:	486f      	ldr	r0, [pc, #444]	@ (8008b08 <BSP_QSPI_Init+0x350>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800894c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800894e:	9618      	str	r6, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008950:	971a      	str	r7, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8008952:	f002 fdb3 	bl	800b4bc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8008956:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8008958:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800895c:	486b      	ldr	r0, [pc, #428]	@ (8008b0c <BSP_QSPI_Init+0x354>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800895e:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008962:	971a      	str	r7, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8008964:	f002 fdaa 	bl	800b4bc <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8008968:	a916      	add	r1, sp, #88	@ 0x58
 800896a:	4869      	ldr	r0, [pc, #420]	@ (8008b10 <BSP_QSPI_Init+0x358>)
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800896c:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8008970:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8008974:	f002 fda2 	bl	800b4bc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8008978:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800897a:	a916      	add	r1, sp, #88	@ 0x58
 800897c:	4863      	ldr	r0, [pc, #396]	@ (8008b0c <BSP_QSPI_Init+0x354>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800897e:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008980:	971a      	str	r7, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8008982:	f002 fd9b 	bl	800b4bc <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8008986:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8008988:	a916      	add	r1, sp, #88	@ 0x58
 800898a:	4861      	ldr	r0, [pc, #388]	@ (8008b10 <BSP_QSPI_Init+0x358>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800898c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800898e:	971a      	str	r7, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8008990:	f002 fd94 	bl	800b4bc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8008994:	a916      	add	r1, sp, #88	@ 0x58
 8008996:	485b      	ldr	r0, [pc, #364]	@ (8008b04 <BSP_QSPI_Init+0x34c>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8008998:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800899c:	f002 fd8e 	bl	800b4bc <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80089a0:	a916      	add	r1, sp, #88	@ 0x58
 80089a2:	485b      	ldr	r0, [pc, #364]	@ (8008b10 <BSP_QSPI_Init+0x358>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80089a4:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80089a8:	f002 fd88 	bl	800b4bc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80089ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80089b0:	a916      	add	r1, sp, #88	@ 0x58
 80089b2:	4854      	ldr	r0, [pc, #336]	@ (8008b04 <BSP_QSPI_Init+0x34c>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80089b4:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80089b6:	f002 fd81 	bl	800b4bc <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80089ba:	4632      	mov	r2, r6
 80089bc:	210f      	movs	r1, #15
 80089be:	205c      	movs	r0, #92	@ 0x5c
 80089c0:	f000 f994 	bl	8008cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80089c4:	205c      	movs	r0, #92	@ 0x5c
 80089c6:	f000 f9cd 	bl	8008d64 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80089ca:	a811      	add	r0, sp, #68	@ 0x44
 80089cc:	f7fb f99a 	bl	8003d04 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80089d0:	786b      	ldrb	r3, [r5, #1]
 80089d2:	4a50      	ldr	r2, [pc, #320]	@ (8008b14 <BSP_QSPI_Init+0x35c>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80089d4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80089d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80089dc:	920e      	str	r2, [sp, #56]	@ 0x38
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80089e0:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	f000 80bb 	beq.w	8008b60 <BSP_QSPI_Init+0x3a8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80089ea:	fab2 f282 	clz	r2, r2
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80089ee:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80089f0:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80089f4:	4e48      	ldr	r6, [pc, #288]	@ (8008b18 <BSP_QSPI_Init+0x360>)
 80089f6:	a90d      	add	r1, sp, #52	@ 0x34
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80089f8:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80089fa:	095b      	lsrs	r3, r3, #5
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80089fc:	4630      	mov	r0, r6
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80089fe:	011b      	lsls	r3, r3, #4
 8008a00:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8008a02:	f7ff febf 	bl	8008784 <MX_QSPI_Init>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f040 80b5 	bne.w	8008b76 <BSP_QSPI_Init+0x3be>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8008a0c:	2103      	movs	r1, #3
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7fb fb46 	bl	80040a0 <MT25TL01G_ResetEnable>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f040 80a0 	bne.w	8008b5a <BSP_QSPI_Init+0x3a2>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8008a1a:	2103      	movs	r1, #3
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7fb fb61 	bl	80040e4 <MT25TL01G_ResetMemory>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	f040 8099 	bne.w	8008b5a <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008a28:	7861      	ldrb	r1, [r4, #1]
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7fb f980 	bl	8003d30 <MT25TL01G_AutoPollingMemReady>
 8008a30:	4601      	mov	r1, r0
 8008a32:	2800      	cmp	r0, #0
 8008a34:	f040 8091 	bne.w	8008b5a <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7fb fb31 	bl	80040a0 <MT25TL01G_ResetEnable>
 8008a3e:	4601      	mov	r1, r0
 8008a40:	2800      	cmp	r0, #0
 8008a42:	f040 808a 	bne.w	8008b5a <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7fb fb4c 	bl	80040e4 <MT25TL01G_ResetMemory>
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f040 8083 	bne.w	8008b5a <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8008a54:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8008a56:	70a0      	strb	r0, [r4, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008a58:	4630      	mov	r0, r6
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8008a5a:	8023      	strh	r3, [r4, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008a5c:	f7fb f968 	bl	8003d30 <MT25TL01G_AutoPollingMemReady>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d17a      	bne.n	8008b5a <BSP_QSPI_Init+0x3a2>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008a64:	7861      	ldrb	r1, [r4, #1]
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7fb f9d6 	bl	8003e18 <MT25TL01G_Enter4BytesAddressMode>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d174      	bne.n	8008b5a <BSP_QSPI_Init+0x3a2>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008a70:	f44f 7340 	mov.w	r3, #768	@ 0x300
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
  s_command.NbData            = 2;
 8008a74:	f04f 7740 	mov.w	r7, #50331648	@ 0x3000000
  uint16_t reg=0;
 8008a78:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008a80:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8008a82:	2385      	movs	r3, #133	@ 0x85
  s_command.DummyCycles       = 0;
 8008a84:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a86:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8008a88:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.NbData            = 2;
 8008a8a:	2302      	movs	r3, #2
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008a8c:	9023      	str	r0, [sp, #140]	@ 0x8c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008a8e:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008a92:	e9cd 0021 	strd	r0, r0, [sp, #132]	@ 0x84
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a96:	4630      	mov	r0, r6
  s_command.NbData            = 2;
 8008a98:	e9cd 731f 	strd	r7, r3, [sp, #124]	@ 0x7c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a9c:	f004 f890 	bl	800cbc0 <HAL_QSPI_Command>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d15a      	bne.n	8008b5a <BSP_QSPI_Init+0x3a2>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f10d 0102 	add.w	r1, sp, #2
 8008aae:	f004 f977 	bl	800cda0 <HAL_QSPI_Receive>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d151      	bne.n	8008b5a <BSP_QSPI_Init+0x3a2>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008ab6:	7861      	ldrb	r1, [r4, #1]
 8008ab8:	4817      	ldr	r0, [pc, #92]	@ (8008b18 <BSP_QSPI_Init+0x360>)
 8008aba:	f7fb f969 	bl	8003d90 <MT25TL01G_WriteEnable>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d14b      	bne.n	8008b5a <BSP_QSPI_Init+0x3a2>
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8008ac2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008ac6:	f640 720f 	movw	r2, #3855	@ 0xf0f
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008aca:	a916      	add	r1, sp, #88	@ 0x58
 8008acc:	4812      	ldr	r0, [pc, #72]	@ (8008b18 <BSP_QSPI_Init+0x360>)
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8008ace:	401a      	ands	r2, r3
 8008ad0:	f248 0380 	movw	r3, #32896	@ 0x8080
 8008ad4:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8008ada:	f8ad 3002 	strh.w	r3, [sp, #2]
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8008ade:	2381      	movs	r3, #129	@ 0x81
 8008ae0:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ae2:	f004 f86d 	bl	800cbc0 <HAL_QSPI_Command>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d137      	bne.n	8008b5a <BSP_QSPI_Init+0x3a2>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aee:	f10d 0102 	add.w	r1, sp, #2
 8008af2:	4809      	ldr	r0, [pc, #36]	@ (8008b18 <BSP_QSPI_Init+0x360>)
 8008af4:	f004 f8d0 	bl	800cc98 <HAL_QSPI_Transmit>
 8008af8:	bb78      	cbnz	r0, 8008b5a <BSP_QSPI_Init+0x3a2>
 8008afa:	e00f      	b.n	8008b1c <BSP_QSPI_Init+0x364>
 8008afc:	58024400 	.word	0x58024400
 8008b00:	58020400 	.word	0x58020400
 8008b04:	58021800 	.word	0x58021800
 8008b08:	58020c00 	.word	0x58020c00
 8008b0c:	58021c00 	.word	0x58021c00
 8008b10:	58021400 	.word	0x58021400
 8008b14:	08049c2c 	.word	0x08049c2c
 8008b18:	24015a0c 	.word	0x24015a0c
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8008b1c:	7823      	ldrb	r3, [r4, #0]
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8008b1e:	782f      	ldrb	r7, [r5, #0]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8008b20:	2b02      	cmp	r3, #2
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8008b22:	786d      	ldrb	r5, [r5, #1]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8008b24:	d019      	beq.n	8008b5a <BSP_QSPI_Init+0x3a2>
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8008b26:	fab5 f385 	clz	r3, r5
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8008b2a:	4814      	ldr	r0, [pc, #80]	@ (8008b7c <BSP_QSPI_Init+0x3c4>)
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8008b2c:	095b      	lsrs	r3, r3, #5
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8008b32:	f003 ffeb 	bl	800cb0c <HAL_QSPI_Init>
 8008b36:	b980      	cbnz	r0, 8008b5a <BSP_QSPI_Init+0x3a2>
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8008b38:	7863      	ldrb	r3, [r4, #1]
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d006      	beq.n	8008b4c <BSP_QSPI_Init+0x394>
          if(Mode == MT25TL01G_QPI_MODE)
 8008b3e:	2f03      	cmp	r7, #3
 8008b40:	d010      	beq.n	8008b64 <BSP_QSPI_Init+0x3ac>
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8008b42:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8008b44:	7067      	strb	r7, [r4, #1]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8008b46:	70a5      	strb	r5, [r4, #2]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8008b48:	7023      	strb	r3, [r4, #0]
  return ret;
 8008b4a:	e63e      	b.n	80087ca <BSP_QSPI_Init+0x12>
          if(Mode != MT25TL01G_QPI_MODE)
 8008b4c:	2f03      	cmp	r7, #3
 8008b4e:	d0f8      	beq.n	8008b42 <BSP_QSPI_Init+0x38a>
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8008b50:	480a      	ldr	r0, [pc, #40]	@ (8008b7c <BSP_QSPI_Init+0x3c4>)
 8008b52:	f7fb f9cd 	bl	8003ef0 <MT25TL01G_ExitQPIMode>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d0f3      	beq.n	8008b42 <BSP_QSPI_Init+0x38a>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b5a:	f06f 0004 	mvn.w	r0, #4
 8008b5e:	e635      	b.n	80087cc <BSP_QSPI_Init+0x14>
 8008b60:	221f      	movs	r2, #31
 8008b62:	e745      	b.n	80089f0 <BSP_QSPI_Init+0x238>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8008b64:	4805      	ldr	r0, [pc, #20]	@ (8008b7c <BSP_QSPI_Init+0x3c4>)
 8008b66:	f7fb f9a7 	bl	8003eb8 <MT25TL01G_EnterQPIMode>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d0e9      	beq.n	8008b42 <BSP_QSPI_Init+0x38a>
 8008b6e:	e7f4      	b.n	8008b5a <BSP_QSPI_Init+0x3a2>
    ret = BSP_ERROR_WRONG_PARAM;
 8008b70:	f06f 0001 	mvn.w	r0, #1
}
 8008b74:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 8008b76:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008b7a:	e627      	b.n	80087cc <BSP_QSPI_Init+0x14>
 8008b7c:	24015a0c 	.word	0x24015a0c

08008b80 <BSP_QSPI_EnableMemoryMappedMode>:
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8008b80:	b998      	cbnz	r0, 8008baa <BSP_QSPI_EnableMemoryMappedMode+0x2a>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008b82:	480b      	ldr	r0, [pc, #44]	@ (8008bb0 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
{
 8008b84:	b510      	push	{r4, lr}
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008b86:	4c0b      	ldr	r4, [pc, #44]	@ (8008bb4 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8008b88:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008b8a:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8008b8c:	b133      	cbz	r3, 8008b9c <BSP_QSPI_EnableMemoryMappedMode+0x1c>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008b8e:	f7fb f9cb 	bl	8003f28 <MT25TL01G_EnableMemoryMappedModeDTR>
 8008b92:	b938      	cbnz	r0, 8008ba4 <BSP_QSPI_EnableMemoryMappedMode+0x24>
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8008b94:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8008b96:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8008b98:	7023      	strb	r3, [r4, #0]
}
 8008b9a:	bd10      	pop	{r4, pc}
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008b9c:	f7fb fa20 	bl	8003fe0 <MT25TL01G_EnableMemoryMappedModeSTR>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d0f7      	beq.n	8008b94 <BSP_QSPI_EnableMemoryMappedMode+0x14>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ba4:	f06f 0004 	mvn.w	r0, #4
}
 8008ba8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008baa:	f06f 0001 	mvn.w	r0, #1
}
 8008bae:	4770      	bx	lr
 8008bb0:	24015a0c 	.word	0x24015a0c
 8008bb4:	24015a00 	.word	0x24015a00

08008bb8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf8 <HAL_InitTick+0x40>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b90b      	cbnz	r3, 8008bc2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8008bbe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8008bc0:	4770      	bx	lr
{
 8008bc2:	b510      	push	{r4, lr}
 8008bc4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008bc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008bca:	4a0c      	ldr	r2, [pc, #48]	@ (8008bfc <HAL_InitTick+0x44>)
 8008bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bd0:	6810      	ldr	r0, [r2, #0]
 8008bd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8008bd6:	f000 f8d3 	bl	8008d80 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bda:	b908      	cbnz	r0, 8008be0 <HAL_InitTick+0x28>
 8008bdc:	2c0f      	cmp	r4, #15
 8008bde:	d901      	bls.n	8008be4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8008be0:	2001      	movs	r0, #1
}
 8008be2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008be4:	2200      	movs	r2, #0
 8008be6:	4621      	mov	r1, r4
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	f000 f87e 	bl	8008cec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bf0:	4b03      	ldr	r3, [pc, #12]	@ (8008c00 <HAL_InitTick+0x48>)
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	601c      	str	r4, [r3, #0]
}
 8008bf6:	bd10      	pop	{r4, pc}
 8008bf8:	24013a10 	.word	0x24013a10
 8008bfc:	240138ec 	.word	0x240138ec
 8008c00:	24013a14 	.word	0x24013a14

08008c04 <HAL_Init>:
{
 8008c04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c06:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c08:	4c12      	ldr	r4, [pc, #72]	@ (8008c54 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c0a:	f000 f85d 	bl	8008cc8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c0e:	f004 fd99 	bl	800d744 <HAL_RCC_GetSysClockFreq>
 8008c12:	4b11      	ldr	r3, [pc, #68]	@ (8008c58 <HAL_Init+0x54>)
 8008c14:	4911      	ldr	r1, [pc, #68]	@ (8008c5c <HAL_Init+0x58>)
 8008c16:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c18:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c1a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c1e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c22:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c24:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c26:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8008c2a:	490d      	ldr	r1, [pc, #52]	@ (8008c60 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c2c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c30:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c32:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008c36:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008c38:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c3a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008c3c:	f7ff ffbc 	bl	8008bb8 <HAL_InitTick>
 8008c40:	b110      	cbz	r0, 8008c48 <HAL_Init+0x44>
    return HAL_ERROR;
 8008c42:	2401      	movs	r4, #1
}
 8008c44:	4620      	mov	r0, r4
 8008c46:	bd10      	pop	{r4, pc}
 8008c48:	4604      	mov	r4, r0
  HAL_MspInit();
 8008c4a:	f7fa feb3 	bl	80039b4 <HAL_MspInit>
}
 8008c4e:	4620      	mov	r0, r4
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	bf00      	nop
 8008c54:	240138e8 	.word	0x240138e8
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	0804932c 	.word	0x0804932c
 8008c60:	240138ec 	.word	0x240138ec

08008c64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008c64:	4a03      	ldr	r2, [pc, #12]	@ (8008c74 <HAL_IncTick+0x10>)
 8008c66:	4b04      	ldr	r3, [pc, #16]	@ (8008c78 <HAL_IncTick+0x14>)
 8008c68:	6811      	ldr	r1, [r2, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	6013      	str	r3, [r2, #0]
}
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	24015a58 	.word	0x24015a58
 8008c78:	24013a10 	.word	0x24013a10

08008c7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008c7c:	4b01      	ldr	r3, [pc, #4]	@ (8008c84 <HAL_GetTick+0x8>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
}
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	24015a58 	.word	0x24015a58

08008c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008c8c:	f7ff fff6 	bl	8008c7c <HAL_GetTick>
 8008c90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c92:	1c63      	adds	r3, r4, #1
 8008c94:	d002      	beq.n	8008c9c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c96:	4b04      	ldr	r3, [pc, #16]	@ (8008ca8 <HAL_Delay+0x20>)
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c9c:	f7ff ffee 	bl	8008c7c <HAL_GetTick>
 8008ca0:	1b40      	subs	r0, r0, r5
 8008ca2:	42a0      	cmp	r0, r4
 8008ca4:	d3fa      	bcc.n	8008c9c <HAL_Delay+0x14>
  {
  }
}
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	24013a10 	.word	0x24013a10

08008cac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8008cac:	4b01      	ldr	r3, [pc, #4]	@ (8008cb4 <HAL_GetREVID+0x8>)
 8008cae:	6818      	ldr	r0, [r3, #0]
}
 8008cb0:	0c00      	lsrs	r0, r0, #16
 8008cb2:	4770      	bx	lr
 8008cb4:	5c001000 	.word	0x5c001000

08008cb8 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8008cb8:	4a02      	ldr	r2, [pc, #8]	@ (8008cc4 <HAL_EnableCompensationCell+0xc>)
 8008cba:	6a13      	ldr	r3, [r2, #32]
 8008cbc:	f043 0301 	orr.w	r3, r3, #1
 8008cc0:	6213      	str	r3, [r2, #32]
}
 8008cc2:	4770      	bx	lr
 8008cc4:	58000400 	.word	0x58000400

08008cc8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cc8:	4906      	ldr	r1, [pc, #24]	@ (8008ce4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cca:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cce:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8008cd0:	4b05      	ldr	r3, [pc, #20]	@ (8008ce8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cd2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cd4:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cd8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cdc:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8008cde:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008ce0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008ce2:	4770      	bx	lr
 8008ce4:	e000ed00 	.word	0xe000ed00
 8008ce8:	05fa0000 	.word	0x05fa0000

08008cec <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cec:	4b1a      	ldr	r3, [pc, #104]	@ (8008d58 <HAL_NVIC_SetPriority+0x6c>)
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cf4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cf6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cfa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cfe:	f1be 0f04 	cmp.w	lr, #4
 8008d02:	bf28      	it	cs
 8008d04:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d08:	f1bc 0f06 	cmp.w	ip, #6
 8008d0c:	d91a      	bls.n	8008d44 <HAL_NVIC_SetPriority+0x58>
 8008d0e:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d12:	f04f 33ff 	mov.w	r3, #4294967295
 8008d16:	fa03 f30c 	lsl.w	r3, r3, ip
 8008d1a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d1e:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008d22:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d24:	fa03 f30e 	lsl.w	r3, r3, lr
 8008d28:	ea21 0303 	bic.w	r3, r1, r3
 8008d2c:	fa03 f30c 	lsl.w	r3, r3, ip
 8008d30:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d34:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008d38:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8008d3a:	db06      	blt.n	8008d4a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d3c:	4a07      	ldr	r2, [pc, #28]	@ (8008d5c <HAL_NVIC_SetPriority+0x70>)
 8008d3e:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d44:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d46:	4694      	mov	ip, r2
 8008d48:	e7e9      	b.n	8008d1e <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d4a:	f000 000f 	and.w	r0, r0, #15
 8008d4e:	4a04      	ldr	r2, [pc, #16]	@ (8008d60 <HAL_NVIC_SetPriority+0x74>)
 8008d50:	5413      	strb	r3, [r2, r0]
 8008d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d56:	bf00      	nop
 8008d58:	e000ed00 	.word	0xe000ed00
 8008d5c:	e000e400 	.word	0xe000e400
 8008d60:	e000ed14 	.word	0xe000ed14

08008d64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008d64:	2800      	cmp	r0, #0
 8008d66:	db07      	blt.n	8008d78 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f000 011f 	and.w	r1, r0, #31
 8008d6e:	4a03      	ldr	r2, [pc, #12]	@ (8008d7c <HAL_NVIC_EnableIRQ+0x18>)
 8008d70:	0940      	lsrs	r0, r0, #5
 8008d72:	408b      	lsls	r3, r1
 8008d74:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	e000e100 	.word	0xe000e100

08008d80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d80:	1e43      	subs	r3, r0, #1
 8008d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d86:	d301      	bcc.n	8008d8c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d88:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008d8a:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d8c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d90:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d92:	4905      	ldr	r1, [pc, #20]	@ (8008da8 <HAL_SYSTICK_Config+0x28>)
 8008d94:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d98:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d9a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d9c:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008da0:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008da2:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	e000ed00 	.word	0xe000ed00

08008dac <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8008dac:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008db0:	4b04      	ldr	r3, [pc, #16]	@ (8008dc4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008db2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008db6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008dba:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8008dbc:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	e000ed00 	.word	0xe000ed00

08008dc8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008dc8:	4b06      	ldr	r3, [pc, #24]	@ (8008de4 <HAL_MPU_Enable+0x1c>)
 8008dca:	f040 0001 	orr.w	r0, r0, #1
 8008dce:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dd4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008dda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008dde:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008de2:	4770      	bx	lr
 8008de4:	e000ed00 	.word	0xe000ed00

08008de8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008de8:	4a17      	ldr	r2, [pc, #92]	@ (8008e48 <HAL_MPU_ConfigRegion+0x60>)
 8008dea:	7843      	ldrb	r3, [r0, #1]
 8008dec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 8008df0:	7801      	ldrb	r1, [r0, #0]
 8008df2:	b321      	cbz	r1, 8008e3e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8008df4:	6843      	ldr	r3, [r0, #4]
{
 8008df6:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8008df8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008dfc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008dfe:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008e02:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008e04:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e08:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008e0c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008e10:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008e12:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008e14:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008e18:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008e1c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008e20:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008e24:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8008e28:	7a01      	ldrb	r1, [r0, #8]
 8008e2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8008e2e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8008e32:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e36:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8008e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8008e3e:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 8008e42:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 8008e46:	4770      	bx	lr
 8008e48:	e000ed00 	.word	0xe000ed00

08008e4c <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d047      	beq.n	8008ee4 <HAL_DCMI_Init+0x94>
{
 8008e54:	b570      	push	{r4, r5, r6, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8008e56:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d03e      	beq.n	8008ede <HAL_DCMI_Init+0x8e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8008e60:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8008e62:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8008e64:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d134      	bne.n	8008ed6 <HAL_DCMI_Init+0x86>
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8008e6c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008e6e:	6861      	ldr	r1, [r4, #4]
 8008e70:	6966      	ldr	r6, [r4, #20]
 8008e72:	430b      	orrs	r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8008e74:	6822      	ldr	r2, [r4, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8008e76:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008e78:	ea43 0306 	orr.w	r3, r3, r6
 8008e7c:	68e6      	ldr	r6, [r4, #12]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8008e7e:	6815      	ldr	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008e80:	ea43 0306 	orr.w	r3, r3, r6
 8008e84:	6926      	ldr	r6, [r4, #16]
 8008e86:	ea43 0306 	orr.w	r3, r3, r6
 8008e8a:	68a6      	ldr	r6, [r4, #8]
 8008e8c:	ea43 0306 	orr.w	r3, r3, r6
 8008e90:	6a26      	ldr	r6, [r4, #32]
 8008e92:	ea43 0306 	orr.w	r3, r3, r6
 8008e96:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e98:	ea43 0306 	orr.w	r3, r3, r6
 8008e9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e9e:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8008ea2:	4e11      	ldr	r6, [pc, #68]	@ (8008ee8 <HAL_DCMI_Init+0x98>)
 8008ea4:	ea06 0605 	and.w	r6, r6, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008ea8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8008eaa:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008eac:	ea43 0305 	orr.w	r3, r3, r5
 8008eb0:	6815      	ldr	r5, [r2, #0]
 8008eb2:	ea43 0305 	orr.w	r3, r3, r5
 8008eb6:	ea43 0300 	orr.w	r3, r3, r0
 8008eba:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8008ebc:	d101      	bne.n	8008ec2 <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8008ebe:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8008ec0:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8008ec2:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8008ec4:	2000      	movs	r0, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8008ec6:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8008ec8:	f043 031e 	orr.w	r3, r3, #30
 8008ecc:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8008ece:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8008ed0:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
}
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	4610      	mov	r0, r2
 8008eda:	6262      	str	r2, [r4, #36]	@ 0x24
 8008edc:	e7c7      	b.n	8008e6e <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 8008ede:	f7ff ffb5 	bl	8008e4c <HAL_DCMI_MspInit>
 8008ee2:	e7bd      	b.n	8008e60 <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 8008ee4:	2001      	movs	r0, #1
}
 8008ee6:	4770      	bx	lr
 8008ee8:	ffe0f007 	.word	0xffe0f007

08008eec <HAL_DCMI_Suspend>:
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8008eec:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8008ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8008f6c <HAL_DCMI_Suspend+0x80>)
  __HAL_LOCK(hdcmi);
 8008ef2:	2901      	cmp	r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8008ef4:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(hdcmi);
 8008ef6:	d037      	beq.n	8008f68 <HAL_DCMI_Suspend+0x7c>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8008efc:	f892 1035 	ldrb.w	r1, [r2, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8008f00:	f882 0034 	strb.w	r0, [r2, #52]	@ 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8008f04:	2902      	cmp	r1, #2
 8008f06:	d004      	beq.n	8008f12 <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8008f08:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008f0a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 8008f0c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34

  /* Return function status */
  return status;
}
 8008f10:	4770      	bx	lr
{
 8008f12:	b500      	push	{lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8008f14:	4916      	ldr	r1, [pc, #88]	@ (8008f70 <HAL_DCMI_Suspend+0x84>)
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8008f16:	f04f 0e05 	mov.w	lr, #5
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8008f1a:	6810      	ldr	r0, [r2, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8008f1c:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 8008f20:	fba1 1303 	umull	r1, r3, r1, r3
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8008f24:	f882 e035 	strb.w	lr, [r2, #53]	@ 0x35
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8008f28:	6801      	ldr	r1, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8008f2a:	0a5b      	lsrs	r3, r3, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8008f2c:	f021 0101 	bic.w	r1, r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8008f30:	fb0c f303 	mul.w	r3, ip, r3
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8008f34:	6001      	str	r1, [r0, #0]
 8008f36:	e002      	b.n	8008f3e <HAL_DCMI_Suspend+0x52>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8008f38:	6801      	ldr	r1, [r0, #0]
 8008f3a:	07c9      	lsls	r1, r1, #31
 8008f3c:	d50e      	bpl.n	8008f5c <HAL_DCMI_Suspend+0x70>
      if (count == 0U)
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	d1fa      	bne.n	8008f38 <HAL_DCMI_Suspend+0x4c>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8008f42:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 8008f44:	2101      	movs	r1, #1
        status = HAL_TIMEOUT;
 8008f46:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8008f48:	f043 0320 	orr.w	r3, r3, #32
 8008f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_UNLOCK(hdcmi);
 8008f4e:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 8008f50:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 8008f54:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
}
 8008f58:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_UNLOCK(hdcmi);
 8008f5c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008f5e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 8008f60:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
}
 8008f64:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hdcmi);
 8008f68:	2002      	movs	r0, #2
 8008f6a:	4770      	bx	lr
 8008f6c:	240138ec 	.word	0x240138ec
 8008f70:	10624dd3 	.word	0x10624dd3

08008f74 <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8008f74:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
{
 8008f78:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 8008f7a:	2a01      	cmp	r2, #1
 8008f7c:	d013      	beq.n	8008fa6 <HAL_DCMI_Resume+0x32>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8008f7e:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8008f82:	2101      	movs	r1, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8008f84:	2a05      	cmp	r2, #5
  __HAL_LOCK(hdcmi);
 8008f86:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8008f8a:	d107      	bne.n	8008f9c <HAL_DCMI_Resume+0x28>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8008f8c:	6801      	ldr	r1, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8008f94:	680a      	ldr	r2, [r1, #0]
 8008f96:	f042 0201 	orr.w	r2, r2, #1
 8008f9a:	600a      	str	r2, [r1, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8008f9c:	2200      	movs	r2, #0

  /* Return function status */
  return HAL_OK;
 8008f9e:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdcmi);
 8008fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8008fa4:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 8008fa6:	2002      	movs	r0, #2
}
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop

08008fac <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fac:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8008fae:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8008fb0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8008fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d006      	beq.n	8008fc6 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8008fbe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc4:	64c3      	str	r3, [r0, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8008fc6:	f7fe fe17 	bl	8007bf8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8008fca:	bd08      	pop	{r3, pc}

08008fcc <HAL_DCMI_IRQHandler>:
{
 8008fcc:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8008fce:	6803      	ldr	r3, [r0, #0]
{
 8008fd0:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8008fd2:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8008fd4:	0769      	lsls	r1, r5, #29
 8008fd6:	d437      	bmi.n	8009048 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8008fd8:	07aa      	lsls	r2, r5, #30
 8008fda:	d425      	bmi.n	8009028 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8008fdc:	06eb      	lsls	r3, r5, #27
 8008fde:	d41c      	bmi.n	800901a <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8008fe0:	0728      	lsls	r0, r5, #28
 8008fe2:	d413      	bmi.n	800900c <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8008fe4:	07e9      	lsls	r1, r5, #31
 8008fe6:	d510      	bpl.n	800900a <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	0792      	lsls	r2, r2, #30
 8008fee:	d503      	bpl.n	8008ff8 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	f022 021e 	bic.w	r2, r2, #30
 8008ff6:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8008ff8:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8008ffa:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 8008ffc:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8008ffe:	f022 0201 	bic.w	r2, r2, #1
 8009002:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8009004:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8009006:	f7fe fdeb 	bl	8007be0 <HAL_DCMI_FrameEventCallback>
}
 800900a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8009010:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8009012:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8009014:	f7fe fdea 	bl	8007bec <HAL_DCMI_VsyncEventCallback>
 8009018:	e7e4      	b.n	8008fe4 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800901e:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8009020:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8009022:	f7fe fdd7 	bl	8007bd4 <HAL_DCMI_LineEventCallback>
 8009026:	e7db      	b.n	8008fe0 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800902c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800902e:	2204      	movs	r2, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8009030:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8009032:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009034:	f043 0301 	orr.w	r3, r3, #1
 8009038:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800903a:	4b0a      	ldr	r3, [pc, #40]	@ (8009064 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800903c:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009040:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8009042:	f000 ffbf 	bl	8009fc4 <HAL_DMA_Abort_IT>
 8009046:	e7c9      	b.n	8008fdc <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8009048:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800904a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800904c:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800904e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009050:	f043 0302 	orr.w	r3, r3, #2
 8009054:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009056:	4b03      	ldr	r3, [pc, #12]	@ (8009064 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8009058:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800905c:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800905e:	f000 ffb1 	bl	8009fc4 <HAL_DMA_Abort_IT>
 8009062:	e7b9      	b.n	8008fd8 <HAL_DCMI_IRQHandler+0xc>
 8009064:	08008fad 	.word	0x08008fad

08009068 <HAL_DCMI_ConfigCrop>:
{
 8009068:	4684      	mov	ip, r0
  __HAL_LOCK(hdcmi);
 800906a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800906e:	2801      	cmp	r0, #1
 8009070:	d015      	beq.n	800909e <HAL_DCMI_ConfigCrop+0x36>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8009072:	2002      	movs	r0, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8009074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  __HAL_UNLOCK(hdcmi);
 8009078:	2200      	movs	r2, #0
{
 800907a:	b510      	push	{r4, lr}
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800907c:	9c02      	ldr	r4, [sp, #8]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800907e:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8009082:	f88c 0035 	strb.w	r0, [ip, #53]	@ 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 8009086:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800908a:	f8dc 0000 	ldr.w	r0, [ip]
 800908e:	6243      	str	r3, [r0, #36]	@ 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8009090:	6201      	str	r1, [r0, #32]
  return HAL_OK;
 8009092:	4610      	mov	r0, r2
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8009094:	f88c e035 	strb.w	lr, [ip, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 8009098:	f88c 2034 	strb.w	r2, [ip, #52]	@ 0x34
}
 800909c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdcmi);
 800909e:	2002      	movs	r0, #2
}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop

080090a4 <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 80090a4:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
{
 80090a8:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 80090aa:	2a01      	cmp	r2, #1
 80090ac:	d010      	beq.n	80090d0 <HAL_DCMI_EnableCrop+0x2c>
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 80090ae:	6800      	ldr	r0, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80090b0:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdcmi);
 80090b2:	2100      	movs	r1, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 80090b4:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80090b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 80090bc:	6802      	ldr	r2, [r0, #0]
 80090be:	f042 0204 	orr.w	r2, r2, #4
 80090c2:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 80090c4:	4608      	mov	r0, r1
  hdcmi->State = HAL_DCMI_STATE_READY;
 80090c6:	f883 c035 	strb.w	ip, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 80090ca:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
  return HAL_OK;
 80090ce:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 80090d0:	2002      	movs	r0, #2
}
 80090d2:	4770      	bx	lr

080090d4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80090d4:	4936      	ldr	r1, [pc, #216]	@ (80091b0 <DMA_CalcBaseAndBitshift+0xdc>)
{
 80090d6:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80090d8:	6803      	ldr	r3, [r0, #0]
 80090da:	428b      	cmp	r3, r1
 80090dc:	d033      	beq.n	8009146 <DMA_CalcBaseAndBitshift+0x72>
 80090de:	3118      	adds	r1, #24
 80090e0:	1a59      	subs	r1, r3, r1
 80090e2:	fab1 f181 	clz	r1, r1
 80090e6:	0949      	lsrs	r1, r1, #5
 80090e8:	bb69      	cbnz	r1, 8009146 <DMA_CalcBaseAndBitshift+0x72>
 80090ea:	4832      	ldr	r0, [pc, #200]	@ (80091b4 <DMA_CalcBaseAndBitshift+0xe0>)
 80090ec:	4283      	cmp	r3, r0
 80090ee:	d03e      	beq.n	800916e <DMA_CalcBaseAndBitshift+0x9a>
 80090f0:	3018      	adds	r0, #24
 80090f2:	4283      	cmp	r3, r0
 80090f4:	d03e      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa0>
 80090f6:	3018      	adds	r0, #24
 80090f8:	4283      	cmp	r3, r0
 80090fa:	d034      	beq.n	8009166 <DMA_CalcBaseAndBitshift+0x92>
 80090fc:	3018      	adds	r0, #24
 80090fe:	4283      	cmp	r3, r0
 8009100:	d03b      	beq.n	800917a <DMA_CalcBaseAndBitshift+0xa6>
 8009102:	3018      	adds	r0, #24
 8009104:	4283      	cmp	r3, r0
 8009106:	d03e      	beq.n	8009186 <DMA_CalcBaseAndBitshift+0xb2>
 8009108:	3018      	adds	r0, #24
 800910a:	4283      	cmp	r3, r0
 800910c:	d02a      	beq.n	8009164 <DMA_CalcBaseAndBitshift+0x90>
 800910e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8009112:	4283      	cmp	r3, r0
 8009114:	d035      	beq.n	8009182 <DMA_CalcBaseAndBitshift+0xae>
 8009116:	4928      	ldr	r1, [pc, #160]	@ (80091b8 <DMA_CalcBaseAndBitshift+0xe4>)
 8009118:	428b      	cmp	r3, r1
 800911a:	d031      	beq.n	8009180 <DMA_CalcBaseAndBitshift+0xac>
 800911c:	3118      	adds	r1, #24
 800911e:	428b      	cmp	r3, r1
 8009120:	d034      	beq.n	800918c <DMA_CalcBaseAndBitshift+0xb8>
 8009122:	3118      	adds	r1, #24
 8009124:	428b      	cmp	r3, r1
 8009126:	d034      	beq.n	8009192 <DMA_CalcBaseAndBitshift+0xbe>
 8009128:	3118      	adds	r1, #24
 800912a:	428b      	cmp	r3, r1
 800912c:	d034      	beq.n	8009198 <DMA_CalcBaseAndBitshift+0xc4>
 800912e:	3118      	adds	r1, #24
 8009130:	428b      	cmp	r3, r1
 8009132:	d034      	beq.n	800919e <DMA_CalcBaseAndBitshift+0xca>
 8009134:	3118      	adds	r1, #24
 8009136:	428b      	cmp	r3, r1
 8009138:	d034      	beq.n	80091a4 <DMA_CalcBaseAndBitshift+0xd0>
 800913a:	3118      	adds	r1, #24
 800913c:	428b      	cmp	r3, r1
 800913e:	d034      	beq.n	80091aa <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009140:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8009144:	e011      	b.n	800916a <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009146:	b2db      	uxtb	r3, r3
 8009148:	491c      	ldr	r1, [pc, #112]	@ (80091bc <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800914a:	481d      	ldr	r0, [pc, #116]	@ (80091c0 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800914c:	3b10      	subs	r3, #16
 800914e:	fba1 1303 	umull	r1, r3, r1, r3
{
 8009152:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009154:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009156:	4c1b      	ldr	r4, [pc, #108]	@ (80091c4 <DMA_CalcBaseAndBitshift+0xf0>)
 8009158:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 800915a:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800915e:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8009162:	4770      	bx	lr
 8009164:	2116      	movs	r1, #22
 8009166:	4818      	ldr	r0, [pc, #96]	@ (80091c8 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009168:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800916a:	6590      	str	r0, [r2, #88]	@ 0x58
}
 800916c:	4770      	bx	lr
 800916e:	2110      	movs	r1, #16
 8009170:	4813      	ldr	r0, [pc, #76]	@ (80091c0 <DMA_CalcBaseAndBitshift+0xec>)
 8009172:	e7f9      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 8009174:	2116      	movs	r1, #22
 8009176:	4812      	ldr	r0, [pc, #72]	@ (80091c0 <DMA_CalcBaseAndBitshift+0xec>)
 8009178:	e7f6      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 800917a:	2106      	movs	r1, #6
 800917c:	4812      	ldr	r0, [pc, #72]	@ (80091c8 <DMA_CalcBaseAndBitshift+0xf4>)
 800917e:	e7f3      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 8009180:	2106      	movs	r1, #6
 8009182:	4812      	ldr	r0, [pc, #72]	@ (80091cc <DMA_CalcBaseAndBitshift+0xf8>)
 8009184:	e7f0      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 8009186:	2110      	movs	r1, #16
 8009188:	480f      	ldr	r0, [pc, #60]	@ (80091c8 <DMA_CalcBaseAndBitshift+0xf4>)
 800918a:	e7ed      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 800918c:	2110      	movs	r1, #16
 800918e:	480f      	ldr	r0, [pc, #60]	@ (80091cc <DMA_CalcBaseAndBitshift+0xf8>)
 8009190:	e7ea      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 8009192:	2116      	movs	r1, #22
 8009194:	480d      	ldr	r0, [pc, #52]	@ (80091cc <DMA_CalcBaseAndBitshift+0xf8>)
 8009196:	e7e7      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 8009198:	2100      	movs	r1, #0
 800919a:	480d      	ldr	r0, [pc, #52]	@ (80091d0 <DMA_CalcBaseAndBitshift+0xfc>)
 800919c:	e7e4      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 800919e:	2106      	movs	r1, #6
 80091a0:	480b      	ldr	r0, [pc, #44]	@ (80091d0 <DMA_CalcBaseAndBitshift+0xfc>)
 80091a2:	e7e1      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 80091a4:	2110      	movs	r1, #16
 80091a6:	480a      	ldr	r0, [pc, #40]	@ (80091d0 <DMA_CalcBaseAndBitshift+0xfc>)
 80091a8:	e7de      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 80091aa:	2116      	movs	r1, #22
 80091ac:	4808      	ldr	r0, [pc, #32]	@ (80091d0 <DMA_CalcBaseAndBitshift+0xfc>)
 80091ae:	e7db      	b.n	8009168 <DMA_CalcBaseAndBitshift+0x94>
 80091b0:	40020010 	.word	0x40020010
 80091b4:	40020040 	.word	0x40020040
 80091b8:	40020428 	.word	0x40020428
 80091bc:	aaaaaaab 	.word	0xaaaaaaab
 80091c0:	40020000 	.word	0x40020000
 80091c4:	08049c34 	.word	0x08049c34
 80091c8:	40020004 	.word	0x40020004
 80091cc:	40020400 	.word	0x40020400
 80091d0:	40020404 	.word	0x40020404

080091d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80091d4:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80091d6:	4b27      	ldr	r3, [pc, #156]	@ (8009274 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80091d8:	4927      	ldr	r1, [pc, #156]	@ (8009278 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80091da:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80091dc:	4d27      	ldr	r5, [pc, #156]	@ (800927c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80091de:	4c28      	ldr	r4, [pc, #160]	@ (8009280 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80091e0:	42aa      	cmp	r2, r5
 80091e2:	bf18      	it	ne
 80091e4:	429a      	cmpne	r2, r3
 80091e6:	bf0c      	ite	eq
 80091e8:	2301      	moveq	r3, #1
 80091ea:	2300      	movne	r3, #0
 80091ec:	428a      	cmp	r2, r1
 80091ee:	bf08      	it	eq
 80091f0:	f043 0301 	orreq.w	r3, r3, #1
 80091f4:	3128      	adds	r1, #40	@ 0x28
 80091f6:	42a2      	cmp	r2, r4
 80091f8:	bf08      	it	eq
 80091fa:	f043 0301 	orreq.w	r3, r3, #1
 80091fe:	3428      	adds	r4, #40	@ 0x28
 8009200:	428a      	cmp	r2, r1
 8009202:	bf08      	it	eq
 8009204:	f043 0301 	orreq.w	r3, r3, #1
 8009208:	3128      	adds	r1, #40	@ 0x28
 800920a:	42a2      	cmp	r2, r4
 800920c:	bf08      	it	eq
 800920e:	f043 0301 	orreq.w	r3, r3, #1
 8009212:	428a      	cmp	r2, r1
 8009214:	bf08      	it	eq
 8009216:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800921a:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800921c:	b913      	cbnz	r3, 8009224 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 800921e:	4b19      	ldr	r3, [pc, #100]	@ (8009284 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8009220:	429a      	cmp	r2, r3
 8009222:	d112      	bne.n	800924a <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009224:	f1a1 0308 	sub.w	r3, r1, #8
 8009228:	4917      	ldr	r1, [pc, #92]	@ (8009288 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800922a:	4a18      	ldr	r2, [pc, #96]	@ (800928c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800922c:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009230:	2101      	movs	r1, #1
 8009232:	4c17      	ldr	r4, [pc, #92]	@ (8009290 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009234:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009238:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800923c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800923e:	4099      	lsls	r1, r3
 8009240:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009242:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009246:	bc30      	pop	{r4, r5}
 8009248:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800924a:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800924e:	4911      	ldr	r1, [pc, #68]	@ (8009294 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009250:	4c11      	ldr	r4, [pc, #68]	@ (8009298 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009252:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009254:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009258:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800925a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800925e:	d800      	bhi.n	8009262 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8009260:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009262:	4a0e      	ldr	r2, [pc, #56]	@ (800929c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009264:	f003 041f 	and.w	r4, r3, #31
 8009268:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800926a:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800926c:	40a1      	lsls	r1, r4
 800926e:	4c0c      	ldr	r4, [pc, #48]	@ (80092a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009270:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009272:	e7e5      	b.n	8009240 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8009274:	58025408 	.word	0x58025408
 8009278:	58025430 	.word	0x58025430
 800927c:	5802541c 	.word	0x5802541c
 8009280:	58025444 	.word	0x58025444
 8009284:	58025494 	.word	0x58025494
 8009288:	cccccccd 	.word	0xcccccccd
 800928c:	16009600 	.word	0x16009600
 8009290:	58025880 	.word	0x58025880
 8009294:	bffdfbf0 	.word	0xbffdfbf0
 8009298:	aaaaaaab 	.word	0xaaaaaaab
 800929c:	10008200 	.word	0x10008200
 80092a0:	40020880 	.word	0x40020880

080092a4 <HAL_DMA_Init>:
{
 80092a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a8:	4605      	mov	r5, r0
 80092aa:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 80092ac:	f7ff fce6 	bl	8008c7c <HAL_GetTick>
  if(hdma == NULL)
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	f000 8203 	beq.w	80096bc <HAL_DMA_Init+0x418>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80092b6:	682c      	ldr	r4, [r5, #0]
 80092b8:	4606      	mov	r6, r0
 80092ba:	4b65      	ldr	r3, [pc, #404]	@ (8009450 <HAL_DMA_Init+0x1ac>)
 80092bc:	429c      	cmp	r4, r3
 80092be:	f000 80bc 	beq.w	800943a <HAL_DMA_Init+0x196>
 80092c2:	3318      	adds	r3, #24
 80092c4:	429c      	cmp	r4, r3
 80092c6:	f000 80b8 	beq.w	800943a <HAL_DMA_Init+0x196>
 80092ca:	3318      	adds	r3, #24
 80092cc:	429c      	cmp	r4, r3
 80092ce:	f000 80b4 	beq.w	800943a <HAL_DMA_Init+0x196>
 80092d2:	3318      	adds	r3, #24
 80092d4:	429c      	cmp	r4, r3
 80092d6:	f000 80b0 	beq.w	800943a <HAL_DMA_Init+0x196>
 80092da:	3318      	adds	r3, #24
 80092dc:	429c      	cmp	r4, r3
 80092de:	f000 80ac 	beq.w	800943a <HAL_DMA_Init+0x196>
 80092e2:	3318      	adds	r3, #24
 80092e4:	429c      	cmp	r4, r3
 80092e6:	f000 80a8 	beq.w	800943a <HAL_DMA_Init+0x196>
 80092ea:	3318      	adds	r3, #24
 80092ec:	429c      	cmp	r4, r3
 80092ee:	f000 80a4 	beq.w	800943a <HAL_DMA_Init+0x196>
 80092f2:	3318      	adds	r3, #24
 80092f4:	429c      	cmp	r4, r3
 80092f6:	f000 80a0 	beq.w	800943a <HAL_DMA_Init+0x196>
 80092fa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80092fe:	429c      	cmp	r4, r3
 8009300:	f000 809b 	beq.w	800943a <HAL_DMA_Init+0x196>
 8009304:	3318      	adds	r3, #24
 8009306:	429c      	cmp	r4, r3
 8009308:	f000 8097 	beq.w	800943a <HAL_DMA_Init+0x196>
 800930c:	3318      	adds	r3, #24
 800930e:	429c      	cmp	r4, r3
 8009310:	f000 8093 	beq.w	800943a <HAL_DMA_Init+0x196>
 8009314:	3318      	adds	r3, #24
 8009316:	429c      	cmp	r4, r3
 8009318:	f000 808f 	beq.w	800943a <HAL_DMA_Init+0x196>
 800931c:	3318      	adds	r3, #24
 800931e:	429c      	cmp	r4, r3
 8009320:	f000 808b 	beq.w	800943a <HAL_DMA_Init+0x196>
 8009324:	3318      	adds	r3, #24
 8009326:	429c      	cmp	r4, r3
 8009328:	f000 8087 	beq.w	800943a <HAL_DMA_Init+0x196>
 800932c:	3318      	adds	r3, #24
 800932e:	429c      	cmp	r4, r3
 8009330:	f000 8083 	beq.w	800943a <HAL_DMA_Init+0x196>
 8009334:	3318      	adds	r3, #24
 8009336:	429c      	cmp	r4, r3
 8009338:	d07f      	beq.n	800943a <HAL_DMA_Init+0x196>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800933a:	4946      	ldr	r1, [pc, #280]	@ (8009454 <HAL_DMA_Init+0x1b0>)
 800933c:	4a46      	ldr	r2, [pc, #280]	@ (8009458 <HAL_DMA_Init+0x1b4>)
 800933e:	4b47      	ldr	r3, [pc, #284]	@ (800945c <HAL_DMA_Init+0x1b8>)
 8009340:	eba4 0901 	sub.w	r9, r4, r1
 8009344:	1aa2      	subs	r2, r4, r2
 8009346:	4f46      	ldr	r7, [pc, #280]	@ (8009460 <HAL_DMA_Init+0x1bc>)
 8009348:	eba4 0803 	sub.w	r8, r4, r3
 800934c:	fab9 f989 	clz	r9, r9
 8009350:	3314      	adds	r3, #20
 8009352:	fab2 f282 	clz	r2, r2
 8009356:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800935a:	fab8 f888 	clz	r8, r8
 800935e:	eba4 0a03 	sub.w	sl, r4, r3
 8009362:	0952      	lsrs	r2, r2, #5
 8009364:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8009368:	1be7      	subs	r7, r4, r7
 800936a:	faba fa8a 	clz	sl, sl
 800936e:	ea49 0102 	orr.w	r1, r9, r2
 8009372:	4e3c      	ldr	r6, [pc, #240]	@ (8009464 <HAL_DMA_Init+0x1c0>)
 8009374:	fab7 f787 	clz	r7, r7
 8009378:	483b      	ldr	r0, [pc, #236]	@ (8009468 <HAL_DMA_Init+0x1c4>)
 800937a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800937e:	ea48 0101 	orr.w	r1, r8, r1
 8009382:	1ba6      	subs	r6, r4, r6
 8009384:	eba4 0b00 	sub.w	fp, r4, r0
 8009388:	097f      	lsrs	r7, r7, #5
 800938a:	ea4a 0101 	orr.w	r1, sl, r1
 800938e:	fab6 f686 	clz	r6, r6
 8009392:	3014      	adds	r0, #20
 8009394:	fabb fb8b 	clz	fp, fp
 8009398:	4339      	orrs	r1, r7
 800939a:	0976      	lsrs	r6, r6, #5
 800939c:	1a23      	subs	r3, r4, r0
 800939e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80093a2:	4331      	orrs	r1, r6
 80093a4:	fab3 f383 	clz	r3, r3
 80093a8:	ea5b 0101 	orrs.w	r1, fp, r1
 80093ac:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	d102      	bne.n	80093ba <HAL_DMA_Init+0x116>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 81d4 	beq.w	8009762 <HAL_DMA_Init+0x4be>
    hdma->State = HAL_DMA_STATE_BUSY;
 80093ba:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80093bc:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 8009474 <HAL_DMA_Init+0x1d0>
    hdma->State = HAL_DMA_STATE_BUSY;
 80093c0:	f885 1035 	strb.w	r1, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80093c4:	2100      	movs	r1, #0
 80093c6:	f885 1034 	strb.w	r1, [r5, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80093ca:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80093cc:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80093d0:	68a9      	ldr	r1, [r5, #8]
 80093d2:	2940      	cmp	r1, #64	@ 0x40
 80093d4:	f000 81c2 	beq.w	800975c <HAL_DMA_Init+0x4b8>
 80093d8:	f1a1 0180 	sub.w	r1, r1, #128	@ 0x80
 80093dc:	fab1 f181 	clz	r1, r1
 80093e0:	0949      	lsrs	r1, r1, #5
 80093e2:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80093e6:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80093e8:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80093ea:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80093ec:	4b1f      	ldr	r3, [pc, #124]	@ (800946c <HAL_DMA_Init+0x1c8>)
 80093ee:	9200      	str	r2, [sp, #0]
 80093f0:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80093f4:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80093f6:	4423      	add	r3, r4
 80093f8:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80093fc:	69a9      	ldr	r1, [r5, #24]
 80093fe:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009402:	69e9      	ldr	r1, [r5, #28]
 8009404:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009408:	6a29      	ldr	r1, [r5, #32]
 800940a:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 800940e:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009412:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009416:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009418:	4915      	ldr	r1, [pc, #84]	@ (8009470 <HAL_DMA_Init+0x1cc>)
 800941a:	fba1 0103 	umull	r0, r1, r1, r3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800941e:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009420:	0909      	lsrs	r1, r1, #4
 8009422:	0089      	lsls	r1, r1, #2
 8009424:	65e9      	str	r1, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009426:	f7ff fe55 	bl	80090d4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800942a:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800942c:	9a00      	ldr	r2, [sp, #0]
 800942e:	f001 041f 	and.w	r4, r1, #31
 8009432:	2101      	movs	r1, #1
 8009434:	40a1      	lsls	r1, r4
 8009436:	6041      	str	r1, [r0, #4]
 8009438:	e0e2      	b.n	8009600 <HAL_DMA_Init+0x35c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800943a:	2302      	movs	r3, #2
 800943c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8009440:	2300      	movs	r3, #0
 8009442:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	f023 0301 	bic.w	r3, r3, #1
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	e01a      	b.n	8009486 <HAL_DMA_Init+0x1e2>
 8009450:	40020010 	.word	0x40020010
 8009454:	58025408 	.word	0x58025408
 8009458:	5802541c 	.word	0x5802541c
 800945c:	58025430 	.word	0x58025430
 8009460:	58025458 	.word	0x58025458
 8009464:	5802546c 	.word	0x5802546c
 8009468:	58025480 	.word	0x58025480
 800946c:	a7fdabf8 	.word	0xa7fdabf8
 8009470:	cccccccd 	.word	0xcccccccd
 8009474:	fffe000f 	.word	0xfffe000f
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009478:	f7ff fc00 	bl	8008c7c <HAL_GetTick>
 800947c:	1b80      	subs	r0, r0, r6
 800947e:	2805      	cmp	r0, #5
 8009480:	f200 8117 	bhi.w	80096b2 <HAL_DMA_Init+0x40e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009484:	682c      	ldr	r4, [r5, #0]
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	07df      	lsls	r7, r3, #31
 800948a:	d4f5      	bmi.n	8009478 <HAL_DMA_Init+0x1d4>
    registerValue |=  hdma->Init.Direction           |
 800948c:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009490:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8009492:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009494:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009496:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009498:	430b      	orrs	r3, r1
 800949a:	6969      	ldr	r1, [r5, #20]
 800949c:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800949e:	69e9      	ldr	r1, [r5, #28]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80094a4:	49b2      	ldr	r1, [pc, #712]	@ (8009770 <HAL_DMA_Init+0x4cc>)
 80094a6:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80094a8:	6a28      	ldr	r0, [r5, #32]
 80094aa:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80094ac:	48b1      	ldr	r0, [pc, #708]	@ (8009774 <HAL_DMA_Init+0x4d0>)
    registerValue |=  hdma->Init.Direction           |
 80094ae:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80094b0:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80094b2:	2904      	cmp	r1, #4
 80094b4:	f000 8117 	beq.w	80096e6 <HAL_DMA_Init+0x442>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80094b8:	6806      	ldr	r6, [r0, #0]
 80094ba:	48af      	ldr	r0, [pc, #700]	@ (8009778 <HAL_DMA_Init+0x4d4>)
 80094bc:	4030      	ands	r0, r6
 80094be:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80094c2:	f080 80d5 	bcs.w	8009670 <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80094c6:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80094c8:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80094ca:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80094ce:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80094d0:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80094d2:	4628      	mov	r0, r5
 80094d4:	f7ff fdfe 	bl	80090d4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094d8:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80094da:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094dc:	49a7      	ldr	r1, [pc, #668]	@ (800977c <HAL_DMA_Init+0x4d8>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094de:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094e2:	4fa7      	ldr	r7, [pc, #668]	@ (8009780 <HAL_DMA_Init+0x4dc>)
 80094e4:	4ea7      	ldr	r6, [pc, #668]	@ (8009784 <HAL_DMA_Init+0x4e0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094e6:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094e8:	4aa7      	ldr	r2, [pc, #668]	@ (8009788 <HAL_DMA_Init+0x4e4>)
 80094ea:	1be7      	subs	r7, r4, r7
 80094ec:	1ba6      	subs	r6, r4, r6
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094ee:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094f0:	eba4 0902 	sub.w	r9, r4, r2
 80094f4:	4ba5      	ldr	r3, [pc, #660]	@ (800978c <HAL_DMA_Init+0x4e8>)
 80094f6:	3214      	adds	r2, #20
 80094f8:	fab9 f989 	clz	r9, r9
 80094fc:	48a4      	ldr	r0, [pc, #656]	@ (8009790 <HAL_DMA_Init+0x4ec>)
 80094fe:	eba4 0803 	sub.w	r8, r4, r3
 8009502:	4ba4      	ldr	r3, [pc, #656]	@ (8009794 <HAL_DMA_Init+0x4f0>)
 8009504:	1aa2      	subs	r2, r4, r2
 8009506:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800950a:	429c      	cmp	r4, r3
 800950c:	bf18      	it	ne
 800950e:	428c      	cmpne	r4, r1
 8009510:	f103 0318 	add.w	r3, r3, #24
 8009514:	fab2 f282 	clz	r2, r2
 8009518:	fab8 f888 	clz	r8, r8
 800951c:	bf0c      	ite	eq
 800951e:	2101      	moveq	r1, #1
 8009520:	2100      	movne	r1, #0
 8009522:	0952      	lsrs	r2, r2, #5
 8009524:	fab7 f787 	clz	r7, r7
 8009528:	429c      	cmp	r4, r3
 800952a:	bf08      	it	eq
 800952c:	f041 0101 	orreq.w	r1, r1, #1
 8009530:	3318      	adds	r3, #24
 8009532:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8009536:	eba4 0b00 	sub.w	fp, r4, r0
 800953a:	429c      	cmp	r4, r3
 800953c:	bf08      	it	eq
 800953e:	f041 0101 	orreq.w	r1, r1, #1
 8009542:	3318      	adds	r3, #24
 8009544:	097f      	lsrs	r7, r7, #5
 8009546:	fab6 f686 	clz	r6, r6
 800954a:	429c      	cmp	r4, r3
 800954c:	bf08      	it	eq
 800954e:	f041 0101 	orreq.w	r1, r1, #1
 8009552:	3318      	adds	r3, #24
 8009554:	3014      	adds	r0, #20
 8009556:	0976      	lsrs	r6, r6, #5
 8009558:	429c      	cmp	r4, r3
 800955a:	bf08      	it	eq
 800955c:	f041 0101 	orreq.w	r1, r1, #1
 8009560:	3318      	adds	r3, #24
 8009562:	fabb fb8b 	clz	fp, fp
 8009566:	429c      	cmp	r4, r3
 8009568:	bf08      	it	eq
 800956a:	f041 0101 	orreq.w	r1, r1, #1
 800956e:	3318      	adds	r3, #24
 8009570:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8009574:	429c      	cmp	r4, r3
 8009576:	bf08      	it	eq
 8009578:	f041 0101 	orreq.w	r1, r1, #1
 800957c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009580:	429c      	cmp	r4, r3
 8009582:	bf08      	it	eq
 8009584:	f041 0101 	orreq.w	r1, r1, #1
 8009588:	3318      	adds	r3, #24
 800958a:	429c      	cmp	r4, r3
 800958c:	bf08      	it	eq
 800958e:	f041 0101 	orreq.w	r1, r1, #1
 8009592:	3318      	adds	r3, #24
 8009594:	429c      	cmp	r4, r3
 8009596:	bf08      	it	eq
 8009598:	f041 0101 	orreq.w	r1, r1, #1
 800959c:	3318      	adds	r3, #24
 800959e:	429c      	cmp	r4, r3
 80095a0:	bf08      	it	eq
 80095a2:	f041 0101 	orreq.w	r1, r1, #1
 80095a6:	3318      	adds	r3, #24
 80095a8:	429c      	cmp	r4, r3
 80095aa:	bf08      	it	eq
 80095ac:	f041 0101 	orreq.w	r1, r1, #1
 80095b0:	3318      	adds	r3, #24
 80095b2:	429c      	cmp	r4, r3
 80095b4:	bf08      	it	eq
 80095b6:	f041 0101 	orreq.w	r1, r1, #1
 80095ba:	3318      	adds	r3, #24
 80095bc:	429c      	cmp	r4, r3
 80095be:	bf08      	it	eq
 80095c0:	f041 0101 	orreq.w	r1, r1, #1
 80095c4:	3318      	adds	r3, #24
 80095c6:	429c      	cmp	r4, r3
 80095c8:	bf08      	it	eq
 80095ca:	f041 0101 	orreq.w	r1, r1, #1
 80095ce:	4b72      	ldr	r3, [pc, #456]	@ (8009798 <HAL_DMA_Init+0x4f4>)
 80095d0:	ea49 0101 	orr.w	r1, r9, r1
 80095d4:	eba4 0a03 	sub.w	sl, r4, r3
 80095d8:	1a23      	subs	r3, r4, r0
 80095da:	4311      	orrs	r1, r2
 80095dc:	faba fa8a 	clz	sl, sl
 80095e0:	fab3 f383 	clz	r3, r3
 80095e4:	ea48 0101 	orr.w	r1, r8, r1
 80095e8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80095ec:	095b      	lsrs	r3, r3, #5
 80095ee:	ea4a 0101 	orr.w	r1, sl, r1
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	4339      	orrs	r1, r7
 80095f6:	4331      	orrs	r1, r6
 80095f8:	ea5b 0101 	orrs.w	r1, fp, r1
 80095fc:	d100      	bne.n	8009600 <HAL_DMA_Init+0x35c>
 80095fe:	b37b      	cbz	r3, 8009660 <HAL_DMA_Init+0x3bc>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009600:	4628      	mov	r0, r5
 8009602:	9200      	str	r2, [sp, #0]
 8009604:	f7ff fde6 	bl	80091d4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009608:	68a9      	ldr	r1, [r5, #8]
 800960a:	9a00      	ldr	r2, [sp, #0]
 800960c:	2980      	cmp	r1, #128	@ 0x80
 800960e:	d05e      	beq.n	80096ce <HAL_DMA_Init+0x42a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009610:	6868      	ldr	r0, [r5, #4]
 8009612:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8009614:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009616:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009618:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800961c:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800961e:	601c      	str	r4, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009620:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009624:	d85a      	bhi.n	80096dc <HAL_DMA_Init+0x438>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009626:	ea49 090a 	orr.w	r9, r9, sl
 800962a:	9b01      	ldr	r3, [sp, #4]
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800962c:	1e60      	subs	r0, r4, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800962e:	ea48 0809 	orr.w	r8, r8, r9
 8009632:	ea47 0708 	orr.w	r7, r7, r8
 8009636:	433e      	orrs	r6, r7
 8009638:	ea43 0a06 	orr.w	sl, r3, r6
 800963c:	ea5b 0a0a 	orrs.w	sl, fp, sl
 8009640:	d102      	bne.n	8009648 <HAL_DMA_Init+0x3a4>
 8009642:	2a00      	cmp	r2, #0
 8009644:	f000 8085 	beq.w	8009752 <HAL_DMA_Init+0x4ae>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009648:	4a54      	ldr	r2, [pc, #336]	@ (800979c <HAL_DMA_Init+0x4f8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800964a:	4955      	ldr	r1, [pc, #340]	@ (80097a0 <HAL_DMA_Init+0x4fc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800964c:	4422      	add	r2, r4
 800964e:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009650:	2301      	movs	r3, #1
 8009652:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009654:	2000      	movs	r0, #0
 8009656:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800965a:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800965c:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800965e:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009660:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8009662:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009664:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8009666:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 800966a:	b003      	add	sp, #12
 800966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009670:	6868      	ldr	r0, [r5, #4]
 8009672:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 8009676:	2e1f      	cmp	r6, #31
 8009678:	d924      	bls.n	80096c4 <HAL_DMA_Init+0x420>
 800967a:	384f      	subs	r0, #79	@ 0x4f
 800967c:	2803      	cmp	r0, #3
 800967e:	d801      	bhi.n	8009684 <HAL_DMA_Init+0x3e0>
        registerValue |= DMA_SxCR_TRBUFF;
 8009680:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009684:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009686:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009688:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800968a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800968e:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009692:	f47f af1d 	bne.w	80094d0 <HAL_DMA_Init+0x22c>
 8009696:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8009698:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800969a:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800969c:	2800      	cmp	r0, #0
 800969e:	f43f af17 	beq.w	80094d0 <HAL_DMA_Init+0x22c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80096a2:	bb8a      	cbnz	r2, 8009708 <HAL_DMA_Init+0x464>
    switch (hdma->Init.FIFOThreshold)
 80096a4:	2901      	cmp	r1, #1
 80096a6:	d04f      	beq.n	8009748 <HAL_DMA_Init+0x4a4>
 80096a8:	f031 0202 	bics.w	r2, r1, #2
 80096ac:	f47f af10 	bne.w	80094d0 <HAL_DMA_Init+0x22c>
 80096b0:	e032      	b.n	8009718 <HAL_DMA_Init+0x474>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80096b2:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80096b4:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80096b6:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80096b8:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 80096bc:	2001      	movs	r0, #1
}
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80096c4:	4837      	ldr	r0, [pc, #220]	@ (80097a4 <HAL_DMA_Init+0x500>)
 80096c6:	40f0      	lsrs	r0, r6
 80096c8:	07c0      	lsls	r0, r0, #31
 80096ca:	d5db      	bpl.n	8009684 <HAL_DMA_Init+0x3e0>
 80096cc:	e7d8      	b.n	8009680 <HAL_DMA_Init+0x3dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80096ce:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096d0:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 80096d2:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80096d6:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80096d8:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096da:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80096e2:	676b      	str	r3, [r5, #116]	@ 0x74
 80096e4:	e7bc      	b.n	8009660 <HAL_DMA_Init+0x3bc>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80096e6:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80096e8:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 80096ec:	4306      	orrs	r6, r0
 80096ee:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80096f0:	4e21      	ldr	r6, [pc, #132]	@ (8009778 <HAL_DMA_Init+0x4d4>)
 80096f2:	403e      	ands	r6, r7
 80096f4:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
 80096f8:	d2ba      	bcs.n	8009670 <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80096fa:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80096fc:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80096fe:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8009702:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009706:	e7c7      	b.n	8009698 <HAL_DMA_Init+0x3f4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009708:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800970c:	d00d      	beq.n	800972a <HAL_DMA_Init+0x486>
    switch (hdma->Init.FIFOThreshold)
 800970e:	2902      	cmp	r1, #2
 8009710:	d905      	bls.n	800971e <HAL_DMA_Init+0x47a>
 8009712:	2903      	cmp	r1, #3
 8009714:	f47f aedc 	bne.w	80094d0 <HAL_DMA_Init+0x22c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009718:	01c2      	lsls	r2, r0, #7
 800971a:	f57f aed9 	bpl.w	80094d0 <HAL_DMA_Init+0x22c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800971e:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8009720:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009722:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8009724:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 8009728:	e7c8      	b.n	80096bc <HAL_DMA_Init+0x418>
    switch (hdma->Init.FIFOThreshold)
 800972a:	2903      	cmp	r1, #3
 800972c:	f63f aed0 	bhi.w	80094d0 <HAL_DMA_Init+0x22c>
 8009730:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <HAL_DMA_Init+0x494>)
 8009732:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8009736:	bf00      	nop
 8009738:	0800971f 	.word	0x0800971f
 800973c:	08009719 	.word	0x08009719
 8009740:	0800971f 	.word	0x0800971f
 8009744:	08009749 	.word	0x08009749
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009748:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 800974c:	f47f aec0 	bne.w	80094d0 <HAL_DMA_Init+0x22c>
 8009750:	e7e5      	b.n	800971e <HAL_DMA_Init+0x47a>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009752:	4a15      	ldr	r2, [pc, #84]	@ (80097a8 <HAL_DMA_Init+0x504>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009754:	4915      	ldr	r1, [pc, #84]	@ (80097ac <HAL_DMA_Init+0x508>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009756:	4422      	add	r2, r4
 8009758:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800975a:	e779      	b.n	8009650 <HAL_DMA_Init+0x3ac>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800975c:	f04f 0e10 	mov.w	lr, #16
 8009760:	e641      	b.n	80093e6 <HAL_DMA_Init+0x142>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009762:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009764:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009766:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009768:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 800976c:	e7a6      	b.n	80096bc <HAL_DMA_Init+0x418>
 800976e:	bf00      	nop
 8009770:	fe10803f 	.word	0xfe10803f
 8009774:	5c001000 	.word	0x5c001000
 8009778:	ffff0000 	.word	0xffff0000
 800977c:	40020010 	.word	0x40020010
 8009780:	58025458 	.word	0x58025458
 8009784:	5802546c 	.word	0x5802546c
 8009788:	58025408 	.word	0x58025408
 800978c:	58025430 	.word	0x58025430
 8009790:	58025480 	.word	0x58025480
 8009794:	40020028 	.word	0x40020028
 8009798:	58025444 	.word	0x58025444
 800979c:	1600963f 	.word	0x1600963f
 80097a0:	58025940 	.word	0x58025940
 80097a4:	c3c0003f 	.word	0xc3c0003f
 80097a8:	1000823f 	.word	0x1000823f
 80097ac:	40020940 	.word	0x40020940

080097b0 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80097b0:	2800      	cmp	r0, #0
 80097b2:	f000 8232 	beq.w	8009c1a <HAL_DMA_Start_IT+0x46a>
{
 80097b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hdma);
 80097ba:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
{
 80097be:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 80097c0:	2c01      	cmp	r4, #1
 80097c2:	f000 8226 	beq.w	8009c12 <HAL_DMA_Start_IT+0x462>
 80097c6:	2401      	movs	r4, #1
 80097c8:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80097cc:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 80097d0:	2c01      	cmp	r4, #1
 80097d2:	d009      	beq.n	80097e8 <HAL_DMA_Start_IT+0x38>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80097d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 80097d8:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80097da:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80097dc:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 80097e0:	2001      	movs	r0, #1
}
 80097e2:	b003      	add	sp, #12
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80097e8:	2402      	movs	r4, #2
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80097ea:	4e7d      	ldr	r6, [pc, #500]	@ (80099e0 <HAL_DMA_Start_IT+0x230>)
 80097ec:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 80099e8 <HAL_DMA_Start_IT+0x238>
    hdma->State = HAL_DMA_STATE_BUSY;
 80097f0:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097f4:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 80097f6:	4d7b      	ldr	r5, [pc, #492]	@ (80099e4 <HAL_DMA_Start_IT+0x234>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097f8:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80097fa:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80097fc:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 80099ec <HAL_DMA_Start_IT+0x23c>
 8009800:	4544      	cmp	r4, r8
 8009802:	bf18      	it	ne
 8009804:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 8009806:	f8df c1f8 	ldr.w	ip, [pc, #504]	@ 8009a00 <HAL_DMA_Start_IT+0x250>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800980a:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 800980c:	bf0c      	ite	eq
 800980e:	f04f 0b01 	moveq.w	fp, #1
 8009812:	f04f 0b00 	movne.w	fp, #0
 8009816:	9601      	str	r6, [sp, #4]
 8009818:	454c      	cmp	r4, r9
 800981a:	bf14      	ite	ne
 800981c:	46de      	movne	lr, fp
 800981e:	f04b 0e01 	orreq.w	lr, fp, #1
    __HAL_DMA_DISABLE(hdma);
 8009822:	42ac      	cmp	r4, r5
 8009824:	bf18      	it	ne
 8009826:	4564      	cmpne	r4, ip
 8009828:	bf0c      	ite	eq
 800982a:	2501      	moveq	r5, #1
 800982c:	2500      	movne	r5, #0
 800982e:	f040 80e9 	bne.w	8009a04 <HAL_DMA_Start_IT+0x254>
 8009832:	f8d4 c000 	ldr.w	ip, [r4]
 8009836:	f02c 0c01 	bic.w	ip, ip, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800983a:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 800983e:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009842:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009846:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009848:	f1bc 0f00 	cmp.w	ip, #0
 800984c:	d002      	beq.n	8009854 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800984e:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8009852:	6077      	str	r7, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009854:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 8009856:	f04f 083f 	mov.w	r8, #63	@ 0x3f
 800985a:	9e01      	ldr	r6, [sp, #4]
 800985c:	f007 091f 	and.w	r9, r7, #31
 8009860:	fa08 f809 	lsl.w	r8, r8, r9
 8009864:	f8c6 8008 	str.w	r8, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009868:	6827      	ldr	r7, [r4, #0]
 800986a:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 800986e:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009870:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009872:	6883      	ldr	r3, [r0, #8]
 8009874:	2b40      	cmp	r3, #64	@ 0x40
 8009876:	f000 81d2 	beq.w	8009c1e <HAL_DMA_Start_IT+0x46e>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800987a:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800987c:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800987e:	2d00      	cmp	r5, #0
 8009880:	f040 81a2 	bne.w	8009bc8 <HAL_DMA_Start_IT+0x418>
 8009884:	4a58      	ldr	r2, [pc, #352]	@ (80099e8 <HAL_DMA_Start_IT+0x238>)
      if(hdma->XferHalfCpltCallback != NULL)
 8009886:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009888:	4294      	cmp	r4, r2
 800988a:	f000 8201 	beq.w	8009c90 <HAL_DMA_Start_IT+0x4e0>
 800988e:	4a57      	ldr	r2, [pc, #348]	@ (80099ec <HAL_DMA_Start_IT+0x23c>)
 8009890:	4294      	cmp	r4, r2
 8009892:	f000 8207 	beq.w	8009ca4 <HAL_DMA_Start_IT+0x4f4>
 8009896:	f1bb 0f00 	cmp.w	fp, #0
 800989a:	f040 81d7 	bne.w	8009c4c <HAL_DMA_Start_IT+0x49c>
 800989e:	4a54      	ldr	r2, [pc, #336]	@ (80099f0 <HAL_DMA_Start_IT+0x240>)
      if(hdma->XferHalfCpltCallback != NULL)
 80098a0:	4619      	mov	r1, r3
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80098a2:	4294      	cmp	r4, r2
 80098a4:	f000 821c 	beq.w	8009ce0 <HAL_DMA_Start_IT+0x530>
 80098a8:	4a52      	ldr	r2, [pc, #328]	@ (80099f4 <HAL_DMA_Start_IT+0x244>)
 80098aa:	4294      	cmp	r4, r2
 80098ac:	f000 824c 	beq.w	8009d48 <HAL_DMA_Start_IT+0x598>
 80098b0:	3218      	adds	r2, #24
 80098b2:	4294      	cmp	r4, r2
 80098b4:	f000 8269 	beq.w	8009d8a <HAL_DMA_Start_IT+0x5da>
 80098b8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80098bc:	4294      	cmp	r4, r2
 80098be:	f000 8271 	beq.w	8009da4 <HAL_DMA_Start_IT+0x5f4>
 80098c2:	4b4d      	ldr	r3, [pc, #308]	@ (80099f8 <HAL_DMA_Start_IT+0x248>)
 80098c4:	429c      	cmp	r4, r3
 80098c6:	f000 82ce 	beq.w	8009e66 <HAL_DMA_Start_IT+0x6b6>
 80098ca:	3318      	adds	r3, #24
 80098cc:	429c      	cmp	r4, r3
 80098ce:	f000 82d5 	beq.w	8009e7c <HAL_DMA_Start_IT+0x6cc>
 80098d2:	3318      	adds	r3, #24
 80098d4:	429c      	cmp	r4, r3
 80098d6:	f000 82e5 	beq.w	8009ea4 <HAL_DMA_Start_IT+0x6f4>
 80098da:	3318      	adds	r3, #24
 80098dc:	429c      	cmp	r4, r3
 80098de:	f000 82fe 	beq.w	8009ede <HAL_DMA_Start_IT+0x72e>
 80098e2:	3318      	adds	r3, #24
 80098e4:	429c      	cmp	r4, r3
 80098e6:	f000 830f 	beq.w	8009f08 <HAL_DMA_Start_IT+0x758>
 80098ea:	3318      	adds	r3, #24
 80098ec:	429c      	cmp	r4, r3
 80098ee:	f000 8321 	beq.w	8009f34 <HAL_DMA_Start_IT+0x784>
 80098f2:	3318      	adds	r3, #24
 80098f4:	429c      	cmp	r4, r3
 80098f6:	f000 8349 	beq.w	8009f8c <HAL_DMA_Start_IT+0x7dc>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	f023 030e 	bic.w	r3, r3, #14
 8009900:	f043 030a 	orr.w	r3, r3, #10
 8009904:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009906:	b119      	cbz	r1, 8009910 <HAL_DMA_Start_IT+0x160>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	f043 0304 	orr.w	r3, r3, #4
 800990e:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009910:	4b38      	ldr	r3, [pc, #224]	@ (80099f4 <HAL_DMA_Start_IT+0x244>)
 8009912:	4a37      	ldr	r2, [pc, #220]	@ (80099f0 <HAL_DMA_Start_IT+0x240>)
 8009914:	4294      	cmp	r4, r2
 8009916:	bf18      	it	ne
 8009918:	429c      	cmpne	r4, r3
 800991a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800991e:	bf0c      	ite	eq
 8009920:	2301      	moveq	r3, #1
 8009922:	2300      	movne	r3, #0
 8009924:	4294      	cmp	r4, r2
 8009926:	bf08      	it	eq
 8009928:	f043 0301 	orreq.w	r3, r3, #1
 800992c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8009930:	4294      	cmp	r4, r2
 8009932:	bf08      	it	eq
 8009934:	f043 0301 	orreq.w	r3, r3, #1
 8009938:	3218      	adds	r2, #24
 800993a:	4294      	cmp	r4, r2
 800993c:	bf08      	it	eq
 800993e:	f043 0301 	orreq.w	r3, r3, #1
 8009942:	3218      	adds	r2, #24
 8009944:	4294      	cmp	r4, r2
 8009946:	bf08      	it	eq
 8009948:	f043 0301 	orreq.w	r3, r3, #1
 800994c:	3218      	adds	r2, #24
 800994e:	4294      	cmp	r4, r2
 8009950:	bf08      	it	eq
 8009952:	f043 0301 	orreq.w	r3, r3, #1
 8009956:	3218      	adds	r2, #24
 8009958:	4294      	cmp	r4, r2
 800995a:	bf08      	it	eq
 800995c:	f043 0301 	orreq.w	r3, r3, #1
 8009960:	3218      	adds	r2, #24
 8009962:	4294      	cmp	r4, r2
 8009964:	bf08      	it	eq
 8009966:	f043 0301 	orreq.w	r3, r3, #1
 800996a:	3218      	adds	r2, #24
 800996c:	4294      	cmp	r4, r2
 800996e:	bf08      	it	eq
 8009970:	f043 0301 	orreq.w	r3, r3, #1
 8009974:	3218      	adds	r2, #24
 8009976:	4294      	cmp	r4, r2
 8009978:	bf08      	it	eq
 800997a:	f043 0301 	orreq.w	r3, r3, #1
 800997e:	4a1f      	ldr	r2, [pc, #124]	@ (80099fc <HAL_DMA_Start_IT+0x24c>)
 8009980:	4294      	cmp	r4, r2
 8009982:	bf08      	it	eq
 8009984:	f043 0301 	orreq.w	r3, r3, #1
 8009988:	3214      	adds	r2, #20
 800998a:	4294      	cmp	r4, r2
 800998c:	bf08      	it	eq
 800998e:	f043 0301 	orreq.w	r3, r3, #1
 8009992:	3214      	adds	r2, #20
 8009994:	4294      	cmp	r4, r2
 8009996:	bf08      	it	eq
 8009998:	f043 0301 	orreq.w	r3, r3, #1
 800999c:	3214      	adds	r2, #20
 800999e:	4294      	cmp	r4, r2
 80099a0:	bf08      	it	eq
 80099a2:	f043 0301 	orreq.w	r3, r3, #1
 80099a6:	3214      	adds	r2, #20
 80099a8:	4294      	cmp	r4, r2
 80099aa:	bf08      	it	eq
 80099ac:	f043 0301 	orreq.w	r3, r3, #1
 80099b0:	3214      	adds	r2, #20
 80099b2:	4294      	cmp	r4, r2
 80099b4:	bf08      	it	eq
 80099b6:	f043 0301 	orreq.w	r3, r3, #1
 80099ba:	3214      	adds	r2, #20
 80099bc:	4294      	cmp	r4, r2
 80099be:	bf08      	it	eq
 80099c0:	f043 0301 	orreq.w	r3, r3, #1
 80099c4:	3214      	adds	r2, #20
 80099c6:	4294      	cmp	r4, r2
 80099c8:	bf08      	it	eq
 80099ca:	f043 0301 	orreq.w	r3, r3, #1
 80099ce:	b91b      	cbnz	r3, 80099d8 <HAL_DMA_Start_IT+0x228>
 80099d0:	f1be 0f00 	cmp.w	lr, #0
 80099d4:	f000 8115 	beq.w	8009c02 <HAL_DMA_Start_IT+0x452>
 80099d8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 80099dc:	e100      	b.n	8009be0 <HAL_DMA_Start_IT+0x430>
 80099de:	bf00      	nop
 80099e0:	40020070 	.word	0x40020070
 80099e4:	40020028 	.word	0x40020028
 80099e8:	40020040 	.word	0x40020040
 80099ec:	40020058 	.word	0x40020058
 80099f0:	40020088 	.word	0x40020088
 80099f4:	400200a0 	.word	0x400200a0
 80099f8:	40020428 	.word	0x40020428
 80099fc:	58025408 	.word	0x58025408
 8009a00:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8009a04:	4544      	cmp	r4, r8
 8009a06:	f000 812f 	beq.w	8009c68 <HAL_DMA_Start_IT+0x4b8>
 8009a0a:	454c      	cmp	r4, r9
 8009a0c:	f000 8154 	beq.w	8009cb8 <HAL_DMA_Start_IT+0x508>
 8009a10:	f1bb 0f00 	cmp.w	fp, #0
 8009a14:	f040 8106 	bne.w	8009c24 <HAL_DMA_Start_IT+0x474>
 8009a18:	f8df c54c 	ldr.w	ip, [pc, #1356]	@ 8009f68 <HAL_DMA_Start_IT+0x7b8>
 8009a1c:	4564      	cmp	r4, ip
 8009a1e:	f000 816b 	beq.w	8009cf8 <HAL_DMA_Start_IT+0x548>
 8009a22:	f10c 0c18 	add.w	ip, ip, #24
 8009a26:	4564      	cmp	r4, ip
 8009a28:	f000 817a 	beq.w	8009d20 <HAL_DMA_Start_IT+0x570>
 8009a2c:	f10c 0c18 	add.w	ip, ip, #24
 8009a30:	4564      	cmp	r4, ip
 8009a32:	f000 8196 	beq.w	8009d62 <HAL_DMA_Start_IT+0x5b2>
 8009a36:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8009a3a:	4564      	cmp	r4, ip
 8009a3c:	f000 81bd 	beq.w	8009dba <HAL_DMA_Start_IT+0x60a>
 8009a40:	f10c 0c18 	add.w	ip, ip, #24
 8009a44:	4564      	cmp	r4, ip
 8009a46:	f000 8205 	beq.w	8009e54 <HAL_DMA_Start_IT+0x6a4>
 8009a4a:	f10c 0c18 	add.w	ip, ip, #24
 8009a4e:	4564      	cmp	r4, ip
 8009a50:	f000 821f 	beq.w	8009e92 <HAL_DMA_Start_IT+0x6e2>
 8009a54:	f10c 0c18 	add.w	ip, ip, #24
 8009a58:	4564      	cmp	r4, ip
 8009a5a:	f000 822e 	beq.w	8009eba <HAL_DMA_Start_IT+0x70a>
 8009a5e:	f10c 0c18 	add.w	ip, ip, #24
 8009a62:	4564      	cmp	r4, ip
 8009a64:	f000 8232 	beq.w	8009ecc <HAL_DMA_Start_IT+0x71c>
 8009a68:	f10c 0c18 	add.w	ip, ip, #24
 8009a6c:	4564      	cmp	r4, ip
 8009a6e:	f000 8258 	beq.w	8009f22 <HAL_DMA_Start_IT+0x772>
 8009a72:	f10c 0c18 	add.w	ip, ip, #24
 8009a76:	4564      	cmp	r4, ip
 8009a78:	f000 8269 	beq.w	8009f4e <HAL_DMA_Start_IT+0x79e>
 8009a7c:	f10c 0c18 	add.w	ip, ip, #24
 8009a80:	4564      	cmp	r4, ip
 8009a82:	f000 8290 	beq.w	8009fa6 <HAL_DMA_Start_IT+0x7f6>
 8009a86:	f8d4 c000 	ldr.w	ip, [r4]
 8009a8a:	f02c 0c01 	bic.w	ip, ip, #1
 8009a8e:	f8c4 c000 	str.w	ip, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a92:	f8df c4d8 	ldr.w	ip, [pc, #1240]	@ 8009f6c <HAL_DMA_Start_IT+0x7bc>
 8009a96:	4564      	cmp	r4, ip
 8009a98:	f040 81a6 	bne.w	8009de8 <HAL_DMA_Start_IT+0x638>
    if(hdma->DMAmuxRequestGen != 0U)
 8009a9c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009aa0:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8009aa4:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009aa6:	f1bc 0f00 	cmp.w	ip, #0
 8009aaa:	f43f aed3 	beq.w	8009854 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009aae:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8009ab2:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ab4:	f8df 84b0 	ldr.w	r8, [pc, #1200]	@ 8009f68 <HAL_DMA_Start_IT+0x7b8>
 8009ab8:	f8df 94b4 	ldr.w	r9, [pc, #1204]	@ 8009f70 <HAL_DMA_Start_IT+0x7c0>
 8009abc:	454c      	cmp	r4, r9
 8009abe:	bf18      	it	ne
 8009ac0:	4544      	cmpne	r4, r8
 8009ac2:	f109 0918 	add.w	r9, r9, #24
 8009ac6:	bf0c      	ite	eq
 8009ac8:	f04f 0801 	moveq.w	r8, #1
 8009acc:	f04f 0800 	movne.w	r8, #0
 8009ad0:	454c      	cmp	r4, r9
 8009ad2:	bf08      	it	eq
 8009ad4:	f048 0801 	orreq.w	r8, r8, #1
 8009ad8:	f509 7956 	add.w	r9, r9, #856	@ 0x358
 8009adc:	454c      	cmp	r4, r9
 8009ade:	bf08      	it	eq
 8009ae0:	f048 0801 	orreq.w	r8, r8, #1
 8009ae4:	f109 0918 	add.w	r9, r9, #24
 8009ae8:	454c      	cmp	r4, r9
 8009aea:	bf08      	it	eq
 8009aec:	f048 0801 	orreq.w	r8, r8, #1
 8009af0:	f109 0918 	add.w	r9, r9, #24
 8009af4:	454c      	cmp	r4, r9
 8009af6:	bf08      	it	eq
 8009af8:	f048 0801 	orreq.w	r8, r8, #1
 8009afc:	f109 0918 	add.w	r9, r9, #24
 8009b00:	454c      	cmp	r4, r9
 8009b02:	bf08      	it	eq
 8009b04:	f048 0801 	orreq.w	r8, r8, #1
 8009b08:	f109 0918 	add.w	r9, r9, #24
 8009b0c:	454c      	cmp	r4, r9
 8009b0e:	bf08      	it	eq
 8009b10:	f048 0801 	orreq.w	r8, r8, #1
 8009b14:	f109 0918 	add.w	r9, r9, #24
 8009b18:	454c      	cmp	r4, r9
 8009b1a:	bf08      	it	eq
 8009b1c:	f048 0801 	orreq.w	r8, r8, #1
 8009b20:	f109 0918 	add.w	r9, r9, #24
 8009b24:	454c      	cmp	r4, r9
 8009b26:	bf08      	it	eq
 8009b28:	f048 0801 	orreq.w	r8, r8, #1
 8009b2c:	f1b8 0f00 	cmp.w	r8, #0
 8009b30:	f47f ae90 	bne.w	8009854 <HAL_DMA_Start_IT+0xa4>
 8009b34:	f8df 843c 	ldr.w	r8, [pc, #1084]	@ 8009f74 <HAL_DMA_Start_IT+0x7c4>
 8009b38:	4544      	cmp	r4, r8
 8009b3a:	f43f ae8b 	beq.w	8009854 <HAL_DMA_Start_IT+0xa4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009b3e:	f8df 8438 	ldr.w	r8, [pc, #1080]	@ 8009f78 <HAL_DMA_Start_IT+0x7c8>
 8009b42:	f8df 9438 	ldr.w	r9, [pc, #1080]	@ 8009f7c <HAL_DMA_Start_IT+0x7cc>
 8009b46:	454c      	cmp	r4, r9
 8009b48:	bf18      	it	ne
 8009b4a:	4544      	cmpne	r4, r8
 8009b4c:	f109 0914 	add.w	r9, r9, #20
 8009b50:	bf0c      	ite	eq
 8009b52:	f04f 0801 	moveq.w	r8, #1
 8009b56:	f04f 0800 	movne.w	r8, #0
 8009b5a:	454c      	cmp	r4, r9
 8009b5c:	bf08      	it	eq
 8009b5e:	f048 0801 	orreq.w	r8, r8, #1
 8009b62:	f109 0914 	add.w	r9, r9, #20
 8009b66:	454c      	cmp	r4, r9
 8009b68:	bf08      	it	eq
 8009b6a:	f048 0801 	orreq.w	r8, r8, #1
 8009b6e:	f109 0914 	add.w	r9, r9, #20
 8009b72:	454c      	cmp	r4, r9
 8009b74:	bf08      	it	eq
 8009b76:	f048 0801 	orreq.w	r8, r8, #1
 8009b7a:	f109 0914 	add.w	r9, r9, #20
 8009b7e:	454c      	cmp	r4, r9
 8009b80:	bf08      	it	eq
 8009b82:	f048 0801 	orreq.w	r8, r8, #1
 8009b86:	f109 0914 	add.w	r9, r9, #20
 8009b8a:	454c      	cmp	r4, r9
 8009b8c:	bf08      	it	eq
 8009b8e:	f048 0801 	orreq.w	r8, r8, #1
 8009b92:	f1b8 0f00 	cmp.w	r8, #0
 8009b96:	d104      	bne.n	8009ba2 <HAL_DMA_Start_IT+0x3f2>
 8009b98:	f8df 83e4 	ldr.w	r8, [pc, #996]	@ 8009f80 <HAL_DMA_Start_IT+0x7d0>
 8009b9c:	4544      	cmp	r4, r8
 8009b9e:	f040 820d 	bne.w	8009fbc <HAL_DMA_Start_IT+0x80c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009ba2:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 8009ba4:	f04f 0801 	mov.w	r8, #1
 8009ba8:	f006 091f 	and.w	r9, r6, #31
 8009bac:	9e01      	ldr	r6, [sp, #4]
 8009bae:	fa08 f809 	lsl.w	r8, r8, r9
 8009bb2:	f8c6 8004 	str.w	r8, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009bb6:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009bb8:	6883      	ldr	r3, [r0, #8]
 8009bba:	2b40      	cmp	r3, #64	@ 0x40
 8009bbc:	f000 81fc 	beq.w	8009fb8 <HAL_DMA_Start_IT+0x808>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009bc0:	60a1      	str	r1, [r4, #8]
      if(hdma->XferHalfCpltCallback != NULL)
 8009bc2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009bc4:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009bc6:	e662      	b.n	800988e <HAL_DMA_Start_IT+0xde>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	f023 031e 	bic.w	r3, r3, #30
 8009bce:	f043 0316 	orr.w	r3, r3, #22
 8009bd2:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009bd4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009bd6:	b11b      	cbz	r3, 8009be0 <HAL_DMA_Start_IT+0x430>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	f043 0308 	orr.w	r3, r3, #8
 8009bde:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009be0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	03d2      	lsls	r2, r2, #15
 8009be6:	d503      	bpl.n	8009bf0 <HAL_DMA_Start_IT+0x440>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009bee:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8009bf0:	f1bc 0f00 	cmp.w	ip, #0
 8009bf4:	d005      	beq.n	8009c02 <HAL_DMA_Start_IT+0x452>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009bf6:	f8dc 3000 	ldr.w	r3, [ip]
 8009bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bfe:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8009c02:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c04:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009c06:	f043 0301 	orr.w	r3, r3, #1
 8009c0a:	6023      	str	r3, [r4, #0]
}
 8009c0c:	b003      	add	sp, #12
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hdma);
 8009c12:	2002      	movs	r0, #2
}
 8009c14:	b003      	add	sp, #12
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8009c1a:	2001      	movs	r0, #1
}
 8009c1c:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009c1e:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009c20:	60e1      	str	r1, [r4, #12]
 8009c22:	e62c      	b.n	800987e <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8009c24:	f8df a338 	ldr.w	sl, [pc, #824]	@ 8009f60 <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c28:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8009c2c:	f8da 8070 	ldr.w	r8, [sl, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 8009c30:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8009c34:	f028 0801 	bic.w	r8, r8, #1
 8009c38:	f8ca 8070 	str.w	r8, [sl, #112]	@ 0x70
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c3c:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8009c3e:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009c42:	f1bc 0f00 	cmp.w	ip, #0
 8009c46:	f47f ae02 	bne.w	800984e <HAL_DMA_Start_IT+0x9e>
 8009c4a:	e603      	b.n	8009854 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009c4c:	49c4      	ldr	r1, [pc, #784]	@ (8009f60 <HAL_DMA_Start_IT+0x7b0>)
 8009c4e:	6f0a      	ldr	r2, [r1, #112]	@ 0x70
 8009c50:	f022 021e 	bic.w	r2, r2, #30
 8009c54:	f042 0216 	orr.w	r2, r2, #22
 8009c58:	670a      	str	r2, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0c0      	beq.n	8009be0 <HAL_DMA_Start_IT+0x430>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	f043 0308 	orr.w	r3, r3, #8
 8009c64:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c66:	e653      	b.n	8009910 <HAL_DMA_Start_IT+0x160>
    __HAL_DMA_DISABLE(hdma);
 8009c68:	f8df a2f4 	ldr.w	sl, [pc, #756]	@ 8009f60 <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c6c:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8009c70:	f8da 8040 	ldr.w	r8, [sl, #64]	@ 0x40
    if(hdma->DMAmuxRequestGen != 0U)
 8009c74:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8009c78:	f028 0801 	bic.w	r8, r8, #1
 8009c7c:	f8ca 8040 	str.w	r8, [sl, #64]	@ 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c80:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8009c82:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009c86:	f1bc 0f00 	cmp.w	ip, #0
 8009c8a:	f47f ade0 	bne.w	800984e <HAL_DMA_Start_IT+0x9e>
 8009c8e:	e5e1      	b.n	8009854 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009c90:	49b3      	ldr	r1, [pc, #716]	@ (8009f60 <HAL_DMA_Start_IT+0x7b0>)
 8009c92:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009c94:	f022 021e 	bic.w	r2, r2, #30
 8009c98:	f042 0216 	orr.w	r2, r2, #22
 8009c9c:	640a      	str	r2, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1dd      	bne.n	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009ca2:	e79d      	b.n	8009be0 <HAL_DMA_Start_IT+0x430>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009ca4:	49ae      	ldr	r1, [pc, #696]	@ (8009f60 <HAL_DMA_Start_IT+0x7b0>)
 8009ca6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8009ca8:	f022 021e 	bic.w	r2, r2, #30
 8009cac:	f042 0216 	orr.w	r2, r2, #22
 8009cb0:	658a      	str	r2, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1d3      	bne.n	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009cb6:	e793      	b.n	8009be0 <HAL_DMA_Start_IT+0x430>
    __HAL_DMA_DISABLE(hdma);
 8009cb8:	f8df a2a4 	ldr.w	sl, [pc, #676]	@ 8009f60 <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cbc:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8009cc0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
    if(hdma->DMAmuxRequestGen != 0U)
 8009cc4:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8009cc8:	f028 0801 	bic.w	r8, r8, #1
 8009ccc:	f8ca 8058 	str.w	r8, [sl, #88]	@ 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cd0:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8009cd2:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009cd6:	f1bc 0f00 	cmp.w	ip, #0
 8009cda:	f47f adb8 	bne.w	800984e <HAL_DMA_Start_IT+0x9e>
 8009cde:	e5b9      	b.n	8009854 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009ce0:	499f      	ldr	r1, [pc, #636]	@ (8009f60 <HAL_DMA_Start_IT+0x7b0>)
 8009ce2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009ce6:	f022 021e 	bic.w	r2, r2, #30
 8009cea:	f042 0216 	orr.w	r2, r2, #22
 8009cee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1b3      	bne.n	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009cf6:	e773      	b.n	8009be0 <HAL_DMA_Start_IT+0x430>
    __HAL_DMA_DISABLE(hdma);
 8009cf8:	f8df a264 	ldr.w	sl, [pc, #612]	@ 8009f60 <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cfc:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8009d00:	f8da 8088 	ldr.w	r8, [sl, #136]	@ 0x88
    if(hdma->DMAmuxRequestGen != 0U)
 8009d04:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8009d08:	f028 0801 	bic.w	r8, r8, #1
 8009d0c:	f8ca 8088 	str.w	r8, [sl, #136]	@ 0x88
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d10:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8009d12:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009d16:	f1bc 0f00 	cmp.w	ip, #0
 8009d1a:	f47f aec8 	bne.w	8009aae <HAL_DMA_Start_IT+0x2fe>
 8009d1e:	e6c9      	b.n	8009ab4 <HAL_DMA_Start_IT+0x304>
    __HAL_DMA_DISABLE(hdma);
 8009d20:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 8009f60 <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d24:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8009d28:	f8da 80a0 	ldr.w	r8, [sl, #160]	@ 0xa0
    if(hdma->DMAmuxRequestGen != 0U)
 8009d2c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8009d30:	f028 0801 	bic.w	r8, r8, #1
 8009d34:	f8ca 80a0 	str.w	r8, [sl, #160]	@ 0xa0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d38:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8009d3a:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009d3e:	f1bc 0f00 	cmp.w	ip, #0
 8009d42:	f47f aeb4 	bne.w	8009aae <HAL_DMA_Start_IT+0x2fe>
 8009d46:	e6b5      	b.n	8009ab4 <HAL_DMA_Start_IT+0x304>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009d48:	4985      	ldr	r1, [pc, #532]	@ (8009f60 <HAL_DMA_Start_IT+0x7b0>)
 8009d4a:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 8009d4e:	f022 021e 	bic.w	r2, r2, #30
 8009d52:	f042 0216 	orr.w	r2, r2, #22
 8009d56:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f47f af7f 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009d60:	e73e      	b.n	8009be0 <HAL_DMA_Start_IT+0x430>
    __HAL_DMA_DISABLE(hdma);
 8009d62:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8009f60 <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d66:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8009d6a:	f8da 80b8 	ldr.w	r8, [sl, #184]	@ 0xb8
    if(hdma->DMAmuxRequestGen != 0U)
 8009d6e:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8009d72:	f028 0801 	bic.w	r8, r8, #1
 8009d76:	f8ca 80b8 	str.w	r8, [sl, #184]	@ 0xb8
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d7a:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8009d7c:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009d80:	f1bc 0f00 	cmp.w	ip, #0
 8009d84:	f47f ae93 	bne.w	8009aae <HAL_DMA_Start_IT+0x2fe>
 8009d88:	e694      	b.n	8009ab4 <HAL_DMA_Start_IT+0x304>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009d8a:	4975      	ldr	r1, [pc, #468]	@ (8009f60 <HAL_DMA_Start_IT+0x7b0>)
 8009d8c:	f8d1 20b8 	ldr.w	r2, [r1, #184]	@ 0xb8
 8009d90:	f022 021e 	bic.w	r2, r2, #30
 8009d94:	f042 0216 	orr.w	r2, r2, #22
 8009d98:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f47f af5e 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009da2:	e71d      	b.n	8009be0 <HAL_DMA_Start_IT+0x430>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009da4:	496f      	ldr	r1, [pc, #444]	@ (8009f64 <HAL_DMA_Start_IT+0x7b4>)
 8009da6:	690a      	ldr	r2, [r1, #16]
 8009da8:	f022 021e 	bic.w	r2, r2, #30
 8009dac:	f042 0216 	orr.w	r2, r2, #22
 8009db0:	610a      	str	r2, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f47f af53 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009db8:	e712      	b.n	8009be0 <HAL_DMA_Start_IT+0x430>
    __HAL_DMA_DISABLE(hdma);
 8009dba:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009f64 <HAL_DMA_Start_IT+0x7b4>
 8009dbe:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8009dc2:	f02c 0c01 	bic.w	ip, ip, #1
 8009dc6:	f8c8 c010 	str.w	ip, [r8, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009dca:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8009f84 <HAL_DMA_Start_IT+0x7d4>
 8009dce:	4564      	cmp	r4, ip
 8009dd0:	f43f ae64 	beq.w	8009a9c <HAL_DMA_Start_IT+0x2ec>
 8009dd4:	f10c 0c18 	add.w	ip, ip, #24
 8009dd8:	4564      	cmp	r4, ip
 8009dda:	f43f ae5f 	beq.w	8009a9c <HAL_DMA_Start_IT+0x2ec>
 8009dde:	f10c 0c18 	add.w	ip, ip, #24
 8009de2:	4564      	cmp	r4, ip
 8009de4:	f43f ae5a 	beq.w	8009a9c <HAL_DMA_Start_IT+0x2ec>
 8009de8:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 8009f88 <HAL_DMA_Start_IT+0x7d8>
 8009dec:	4564      	cmp	r4, ip
 8009dee:	f43f ae55 	beq.w	8009a9c <HAL_DMA_Start_IT+0x2ec>
 8009df2:	f10c 0c18 	add.w	ip, ip, #24
 8009df6:	4564      	cmp	r4, ip
 8009df8:	f43f ae50 	beq.w	8009a9c <HAL_DMA_Start_IT+0x2ec>
 8009dfc:	f10c 0c18 	add.w	ip, ip, #24
 8009e00:	4564      	cmp	r4, ip
 8009e02:	f43f ae4b 	beq.w	8009a9c <HAL_DMA_Start_IT+0x2ec>
 8009e06:	f10c 0c18 	add.w	ip, ip, #24
 8009e0a:	4564      	cmp	r4, ip
 8009e0c:	f43f ae46 	beq.w	8009a9c <HAL_DMA_Start_IT+0x2ec>
 8009e10:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8009f78 <HAL_DMA_Start_IT+0x7c8>
 8009e14:	4564      	cmp	r4, ip
 8009e16:	d06d      	beq.n	8009ef4 <HAL_DMA_Start_IT+0x744>
 8009e18:	f10c 0c14 	add.w	ip, ip, #20
 8009e1c:	4564      	cmp	r4, ip
 8009e1e:	d069      	beq.n	8009ef4 <HAL_DMA_Start_IT+0x744>
 8009e20:	f10c 0c14 	add.w	ip, ip, #20
 8009e24:	4564      	cmp	r4, ip
 8009e26:	d065      	beq.n	8009ef4 <HAL_DMA_Start_IT+0x744>
 8009e28:	f10c 0c14 	add.w	ip, ip, #20
 8009e2c:	4564      	cmp	r4, ip
 8009e2e:	d061      	beq.n	8009ef4 <HAL_DMA_Start_IT+0x744>
 8009e30:	f10c 0c14 	add.w	ip, ip, #20
 8009e34:	4564      	cmp	r4, ip
 8009e36:	d05d      	beq.n	8009ef4 <HAL_DMA_Start_IT+0x744>
 8009e38:	f10c 0c14 	add.w	ip, ip, #20
 8009e3c:	4564      	cmp	r4, ip
 8009e3e:	d059      	beq.n	8009ef4 <HAL_DMA_Start_IT+0x744>
 8009e40:	f10c 0c14 	add.w	ip, ip, #20
 8009e44:	4564      	cmp	r4, ip
 8009e46:	d055      	beq.n	8009ef4 <HAL_DMA_Start_IT+0x744>
 8009e48:	f10c 0c14 	add.w	ip, ip, #20
 8009e4c:	4564      	cmp	r4, ip
 8009e4e:	d051      	beq.n	8009ef4 <HAL_DMA_Start_IT+0x744>
      if(hdma->XferHalfCpltCallback != NULL)
 8009e50:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8009e52:	e536      	b.n	80098c2 <HAL_DMA_Start_IT+0x112>
    __HAL_DMA_DISABLE(hdma);
 8009e54:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8009f64 <HAL_DMA_Start_IT+0x7b4>
 8009e58:	f8d8 c028 	ldr.w	ip, [r8, #40]	@ 0x28
 8009e5c:	f02c 0c01 	bic.w	ip, ip, #1
 8009e60:	f8c8 c028 	str.w	ip, [r8, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e64:	e61a      	b.n	8009a9c <HAL_DMA_Start_IT+0x2ec>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009e66:	4a3f      	ldr	r2, [pc, #252]	@ (8009f64 <HAL_DMA_Start_IT+0x7b4>)
 8009e68:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009e6a:	f023 031e 	bic.w	r3, r3, #30
 8009e6e:	f043 0316 	orr.w	r3, r3, #22
 8009e72:	6293      	str	r3, [r2, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8009e74:	2900      	cmp	r1, #0
 8009e76:	f47f aef2 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009e7a:	e5ad      	b.n	80099d8 <HAL_DMA_Start_IT+0x228>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009e7c:	4a39      	ldr	r2, [pc, #228]	@ (8009f64 <HAL_DMA_Start_IT+0x7b4>)
 8009e7e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009e80:	f023 031e 	bic.w	r3, r3, #30
 8009e84:	f043 0316 	orr.w	r3, r3, #22
 8009e88:	6413      	str	r3, [r2, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8009e8a:	2900      	cmp	r1, #0
 8009e8c:	f47f aee7 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009e90:	e5a2      	b.n	80099d8 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 8009e92:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8009f64 <HAL_DMA_Start_IT+0x7b4>
 8009e96:	f8d8 c040 	ldr.w	ip, [r8, #64]	@ 0x40
 8009e9a:	f02c 0c01 	bic.w	ip, ip, #1
 8009e9e:	f8c8 c040 	str.w	ip, [r8, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009ea2:	e5fb      	b.n	8009a9c <HAL_DMA_Start_IT+0x2ec>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8009f64 <HAL_DMA_Start_IT+0x7b4>)
 8009ea6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009ea8:	f023 031e 	bic.w	r3, r3, #30
 8009eac:	f043 0316 	orr.w	r3, r3, #22
 8009eb0:	6593      	str	r3, [r2, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8009eb2:	2900      	cmp	r1, #0
 8009eb4:	f47f aed3 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009eb8:	e58e      	b.n	80099d8 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 8009eba:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8009f64 <HAL_DMA_Start_IT+0x7b4>
 8009ebe:	f8d8 c058 	ldr.w	ip, [r8, #88]	@ 0x58
 8009ec2:	f02c 0c01 	bic.w	ip, ip, #1
 8009ec6:	f8c8 c058 	str.w	ip, [r8, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009eca:	e5e2      	b.n	8009a92 <HAL_DMA_Start_IT+0x2e2>
    __HAL_DMA_DISABLE(hdma);
 8009ecc:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8009f64 <HAL_DMA_Start_IT+0x7b4>
 8009ed0:	f8d8 c070 	ldr.w	ip, [r8, #112]	@ 0x70
 8009ed4:	f02c 0c01 	bic.w	ip, ip, #1
 8009ed8:	f8c8 c070 	str.w	ip, [r8, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009edc:	e784      	b.n	8009de8 <HAL_DMA_Start_IT+0x638>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009ede:	4a21      	ldr	r2, [pc, #132]	@ (8009f64 <HAL_DMA_Start_IT+0x7b4>)
 8009ee0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8009ee2:	f023 031e 	bic.w	r3, r3, #30
 8009ee6:	f043 0316 	orr.w	r3, r3, #22
 8009eea:	6713      	str	r3, [r2, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8009eec:	2900      	cmp	r1, #0
 8009eee:	f47f aeb6 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009ef2:	e571      	b.n	80099d8 <HAL_DMA_Start_IT+0x228>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ef4:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
    if(hdma->DMAmuxRequestGen != 0U)
 8009ef8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009efc:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009efe:	f1bc 0f00 	cmp.w	ip, #0
 8009f02:	f47f add4 	bne.w	8009aae <HAL_DMA_Start_IT+0x2fe>
 8009f06:	e61a      	b.n	8009b3e <HAL_DMA_Start_IT+0x38e>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009f08:	4a16      	ldr	r2, [pc, #88]	@ (8009f64 <HAL_DMA_Start_IT+0x7b4>)
 8009f0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8009f0e:	f023 031e 	bic.w	r3, r3, #30
 8009f12:	f043 0316 	orr.w	r3, r3, #22
 8009f16:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8009f1a:	2900      	cmp	r1, #0
 8009f1c:	f47f ae9f 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009f20:	e55a      	b.n	80099d8 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 8009f22:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8009f64 <HAL_DMA_Start_IT+0x7b4>
 8009f26:	f8d8 c088 	ldr.w	ip, [r8, #136]	@ 0x88
 8009f2a:	f02c 0c01 	bic.w	ip, ip, #1
 8009f2e:	f8c8 c088 	str.w	ip, [r8, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f32:	e5ae      	b.n	8009a92 <HAL_DMA_Start_IT+0x2e2>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009f34:	4a0b      	ldr	r2, [pc, #44]	@ (8009f64 <HAL_DMA_Start_IT+0x7b4>)
 8009f36:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8009f3a:	f023 031e 	bic.w	r3, r3, #30
 8009f3e:	f043 0316 	orr.w	r3, r3, #22
 8009f42:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8009f46:	2900      	cmp	r1, #0
 8009f48:	f47f ae89 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009f4c:	e544      	b.n	80099d8 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 8009f4e:	f8df 8014 	ldr.w	r8, [pc, #20]	@ 8009f64 <HAL_DMA_Start_IT+0x7b4>
 8009f52:	f8d8 c0a0 	ldr.w	ip, [r8, #160]	@ 0xa0
 8009f56:	f02c 0c01 	bic.w	ip, ip, #1
 8009f5a:	f8c8 c0a0 	str.w	ip, [r8, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f5e:	e734      	b.n	8009dca <HAL_DMA_Start_IT+0x61a>
 8009f60:	40020000 	.word	0x40020000
 8009f64:	40020400 	.word	0x40020400
 8009f68:	40020088 	.word	0x40020088
 8009f6c:	40020458 	.word	0x40020458
 8009f70:	400200a0 	.word	0x400200a0
 8009f74:	400204b8 	.word	0x400204b8
 8009f78:	58025408 	.word	0x58025408
 8009f7c:	5802541c 	.word	0x5802541c
 8009f80:	58025494 	.word	0x58025494
 8009f84:	40020410 	.word	0x40020410
 8009f88:	40020470 	.word	0x40020470
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8009fc0 <HAL_DMA_Start_IT+0x810>)
 8009f8e:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 8009f92:	f023 031e 	bic.w	r3, r3, #30
 8009f96:	f043 0316 	orr.w	r3, r3, #22
 8009f9a:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	f47f ae5d 	bne.w	8009c5e <HAL_DMA_Start_IT+0x4ae>
 8009fa4:	e518      	b.n	80099d8 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 8009fa6:	f8df 8018 	ldr.w	r8, [pc, #24]	@ 8009fc0 <HAL_DMA_Start_IT+0x810>
 8009faa:	f8d8 c0b8 	ldr.w	ip, [r8, #184]	@ 0xb8
 8009fae:	f02c 0c01 	bic.w	ip, ip, #1
 8009fb2:	f8c8 c0b8 	str.w	ip, [r8, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009fb6:	e708      	b.n	8009dca <HAL_DMA_Start_IT+0x61a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009fb8:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009fba:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009fbc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009fbe:	e46e      	b.n	800989e <HAL_DMA_Start_IT+0xee>
 8009fc0:	40020400 	.word	0x40020400

08009fc4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f000 8096 	beq.w	800a0f6 <HAL_DMA_Abort_IT+0x132>
{
 8009fca:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009fcc:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	f040 8083 	bne.w	800a0dc <HAL_DMA_Abort_IT+0x118>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009fd6:	6803      	ldr	r3, [r0, #0]
 8009fd8:	4a48      	ldr	r2, [pc, #288]	@ (800a0fc <HAL_DMA_Abort_IT+0x138>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	f000 8082 	beq.w	800a0e4 <HAL_DMA_Abort_IT+0x120>
 8009fe0:	3218      	adds	r2, #24
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d07e      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 8009fe6:	3218      	adds	r2, #24
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d07b      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 8009fec:	3218      	adds	r2, #24
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d078      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 8009ff2:	3218      	adds	r2, #24
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d075      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 8009ff8:	3218      	adds	r2, #24
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d072      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 8009ffe:	3218      	adds	r2, #24
 800a000:	4293      	cmp	r3, r2
 800a002:	d06f      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a004:	3218      	adds	r2, #24
 800a006:	4293      	cmp	r3, r2
 800a008:	d06c      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a00a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800a00e:	4293      	cmp	r3, r2
 800a010:	d068      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a012:	3218      	adds	r2, #24
 800a014:	4293      	cmp	r3, r2
 800a016:	d065      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a018:	3218      	adds	r2, #24
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d062      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a01e:	3218      	adds	r2, #24
 800a020:	4293      	cmp	r3, r2
 800a022:	d05f      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a024:	3218      	adds	r2, #24
 800a026:	4293      	cmp	r3, r2
 800a028:	d05c      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a02a:	3218      	adds	r2, #24
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d059      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a030:	3218      	adds	r2, #24
 800a032:	4293      	cmp	r3, r2
 800a034:	d056      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
 800a036:	3218      	adds	r2, #24
 800a038:	4293      	cmp	r3, r2
 800a03a:	d053      	beq.n	800a0e4 <HAL_DMA_Abort_IT+0x120>
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a03c:	4a30      	ldr	r2, [pc, #192]	@ (800a100 <HAL_DMA_Abort_IT+0x13c>)
 800a03e:	4d31      	ldr	r5, [pc, #196]	@ (800a104 <HAL_DMA_Abort_IT+0x140>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a040:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a042:	42ab      	cmp	r3, r5
 800a044:	bf18      	it	ne
 800a046:	4293      	cmpne	r3, r2
 800a048:	4c2f      	ldr	r4, [pc, #188]	@ (800a108 <HAL_DMA_Abort_IT+0x144>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a04a:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a04e:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a052:	bf0c      	ite	eq
 800a054:	2201      	moveq	r2, #1
 800a056:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a058:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a05a:	42a3      	cmp	r3, r4
 800a05c:	bf08      	it	eq
 800a05e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800a062:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a064:	3428      	adds	r4, #40	@ 0x28
 800a066:	42ab      	cmp	r3, r5
 800a068:	bf08      	it	eq
 800a06a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800a06e:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a072:	42a3      	cmp	r3, r4
 800a074:	bf08      	it	eq
 800a076:	f042 0201 	orreq.w	r2, r2, #1
 800a07a:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 800a07c:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a07e:	42a3      	cmp	r3, r4
 800a080:	bf08      	it	eq
 800a082:	f042 0201 	orreq.w	r2, r2, #1
 800a086:	4921      	ldr	r1, [pc, #132]	@ (800a10c <HAL_DMA_Abort_IT+0x148>)
 800a088:	428b      	cmp	r3, r1
 800a08a:	bf08      	it	eq
 800a08c:	f042 0201 	orreq.w	r2, r2, #1
 800a090:	b912      	cbnz	r2, 800a098 <HAL_DMA_Abort_IT+0xd4>
 800a092:	4a1f      	ldr	r2, [pc, #124]	@ (800a110 <HAL_DMA_Abort_IT+0x14c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d117      	bne.n	800a0c8 <HAL_DMA_Abort_IT+0x104>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a098:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a09a:	6d84      	ldr	r4, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a09c:	e9d0 1517 	ldrd	r1, r5, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a0a0:	682a      	ldr	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a0a2:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a0a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a0aa:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a0ac:	602a      	str	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a0ae:	6063      	str	r3, [r4, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800a0b0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a0b2:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 800a0b6:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800a0b8:	b133      	cbz	r3, 800a0c8 <HAL_DMA_Abort_IT+0x104>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a0ba:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0bc:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a0c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0c4:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0c6:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800a0c8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800a0ca:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 800a0cc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800a0ce:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800a0d2:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 800a0d6:	b163      	cbz	r3, 800a0f2 <HAL_DMA_Abort_IT+0x12e>
        hdma->XferAbortCallback(hdma);
 800a0d8:	4798      	blx	r3
 800a0da:	e00a      	b.n	800a0f2 <HAL_DMA_Abort_IT+0x12e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a0dc:	2380      	movs	r3, #128	@ 0x80
 800a0de:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800a0e0:	2001      	movs	r0, #1
}
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	f022 0201 	bic.w	r2, r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a0f2:	2000      	movs	r0, #0
}
 800a0f4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a0f6:	2001      	movs	r0, #1
}
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	40020010 	.word	0x40020010
 800a100:	5802541c 	.word	0x5802541c
 800a104:	58025408 	.word	0x58025408
 800a108:	58025430 	.word	0x58025430
 800a10c:	58025480 	.word	0x58025480
 800a110:	58025494 	.word	0x58025494

0800a114 <HAL_DMA_IRQHandler>:
{
 800a114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800a118:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800a11a:	4b46      	ldr	r3, [pc, #280]	@ (800a234 <HAL_DMA_IRQHandler+0x120>)
{
 800a11c:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a11e:	6d84      	ldr	r4, [r0, #88]	@ 0x58
{
 800a120:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800a122:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 800a124:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a126:	6803      	ldr	r3, [r0, #0]
 800a128:	4a43      	ldr	r2, [pc, #268]	@ (800a238 <HAL_DMA_IRQHandler+0x124>)
 800a12a:	4844      	ldr	r0, [pc, #272]	@ (800a23c <HAL_DMA_IRQHandler+0x128>)
  tmpisr_dma  = regs_dma->ISR;
 800a12c:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a12e:	4293      	cmp	r3, r2
 800a130:	bf18      	it	ne
 800a132:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 800a134:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a136:	bf0c      	ite	eq
 800a138:	2001      	moveq	r0, #1
 800a13a:	2000      	movne	r0, #0
 800a13c:	f000 8086 	beq.w	800a24c <HAL_DMA_IRQHandler+0x138>
 800a140:	3218      	adds	r2, #24
 800a142:	4293      	cmp	r3, r2
 800a144:	f000 827c 	beq.w	800a640 <HAL_DMA_IRQHandler+0x52c>
 800a148:	3218      	adds	r2, #24
 800a14a:	4293      	cmp	r3, r2
 800a14c:	f000 8278 	beq.w	800a640 <HAL_DMA_IRQHandler+0x52c>
 800a150:	3218      	adds	r2, #24
 800a152:	4293      	cmp	r3, r2
 800a154:	f000 8285 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a158:	3218      	adds	r2, #24
 800a15a:	4293      	cmp	r3, r2
 800a15c:	f000 8281 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a160:	3218      	adds	r2, #24
 800a162:	4293      	cmp	r3, r2
 800a164:	f000 827d 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a168:	3218      	adds	r2, #24
 800a16a:	4293      	cmp	r3, r2
 800a16c:	f000 8279 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a170:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800a174:	4293      	cmp	r3, r2
 800a176:	f000 8274 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a17a:	3218      	adds	r2, #24
 800a17c:	4293      	cmp	r3, r2
 800a17e:	f000 8270 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a182:	3218      	adds	r2, #24
 800a184:	4293      	cmp	r3, r2
 800a186:	f000 826c 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a18a:	3218      	adds	r2, #24
 800a18c:	4293      	cmp	r3, r2
 800a18e:	f000 8268 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a192:	3218      	adds	r2, #24
 800a194:	4293      	cmp	r3, r2
 800a196:	f000 8264 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a19a:	3218      	adds	r2, #24
 800a19c:	4293      	cmp	r3, r2
 800a19e:	f000 8260 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a1a2:	3218      	adds	r2, #24
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	f000 825c 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
 800a1aa:	3218      	adds	r2, #24
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	f000 8258 	beq.w	800a662 <HAL_DMA_IRQHandler+0x54e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a1b2:	4a23      	ldr	r2, [pc, #140]	@ (800a240 <HAL_DMA_IRQHandler+0x12c>)
 800a1b4:	4823      	ldr	r0, [pc, #140]	@ (800a244 <HAL_DMA_IRQHandler+0x130>)
 800a1b6:	4283      	cmp	r3, r0
 800a1b8:	bf18      	it	ne
 800a1ba:	4293      	cmpne	r3, r2
 800a1bc:	f100 0014 	add.w	r0, r0, #20
 800a1c0:	bf0c      	ite	eq
 800a1c2:	2201      	moveq	r2, #1
 800a1c4:	2200      	movne	r2, #0
 800a1c6:	4283      	cmp	r3, r0
 800a1c8:	bf08      	it	eq
 800a1ca:	f042 0201 	orreq.w	r2, r2, #1
 800a1ce:	3014      	adds	r0, #20
 800a1d0:	4283      	cmp	r3, r0
 800a1d2:	bf08      	it	eq
 800a1d4:	f042 0201 	orreq.w	r2, r2, #1
 800a1d8:	3014      	adds	r0, #20
 800a1da:	4283      	cmp	r3, r0
 800a1dc:	bf08      	it	eq
 800a1de:	f042 0201 	orreq.w	r2, r2, #1
 800a1e2:	3014      	adds	r0, #20
 800a1e4:	4283      	cmp	r3, r0
 800a1e6:	bf08      	it	eq
 800a1e8:	f042 0201 	orreq.w	r2, r2, #1
 800a1ec:	3014      	adds	r0, #20
 800a1ee:	4283      	cmp	r3, r0
 800a1f0:	bf08      	it	eq
 800a1f2:	f042 0201 	orreq.w	r2, r2, #1
 800a1f6:	b912      	cbnz	r2, 800a1fe <HAL_DMA_IRQHandler+0xea>
 800a1f8:	4a13      	ldr	r2, [pc, #76]	@ (800a248 <HAL_DMA_IRQHandler+0x134>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d116      	bne.n	800a22c <HAL_DMA_IRQHandler+0x118>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a1fe:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 800a200:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a202:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a204:	f000 001f 	and.w	r0, r0, #31
 800a208:	4085      	lsls	r5, r0
 800a20a:	420d      	tst	r5, r1
 800a20c:	f000 8283 	beq.w	800a716 <HAL_DMA_IRQHandler+0x602>
 800a210:	0757      	lsls	r7, r2, #29
 800a212:	f140 8280 	bpl.w	800a716 <HAL_DMA_IRQHandler+0x602>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a216:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a218:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a21a:	f140 82af 	bpl.w	800a77c <HAL_DMA_IRQHandler+0x668>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a21e:	03d1      	lsls	r1, r2, #15
 800a220:	f100 82b2 	bmi.w	800a788 <HAL_DMA_IRQHandler+0x674>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a224:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800a226:	2b00      	cmp	r3, #0
 800a228:	f040 81f4 	bne.w	800a614 <HAL_DMA_IRQHandler+0x500>
}
 800a22c:	b002      	add	sp, #8
 800a22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a232:	bf00      	nop
 800a234:	240138ec 	.word	0x240138ec
 800a238:	40020028 	.word	0x40020028
 800a23c:	40020010 	.word	0x40020010
 800a240:	58025408 	.word	0x58025408
 800a244:	5802541c 	.word	0x5802541c
 800a248:	58025494 	.word	0x58025494
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a24c:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 800a250:	f04f 0c08 	mov.w	ip, #8
 800a254:	f00e 021f 	and.w	r2, lr, #31
 800a258:	fa0c f102 	lsl.w	r1, ip, r2
 800a25c:	420f      	tst	r7, r1
 800a25e:	f000 81de 	beq.w	800a61e <HAL_DMA_IRQHandler+0x50a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a262:	f8d3 c000 	ldr.w	ip, [r3]
 800a266:	f01c 0f04 	tst.w	ip, #4
 800a26a:	d00a      	beq.n	800a282 <HAL_DMA_IRQHandler+0x16e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a26c:	f8d3 c000 	ldr.w	ip, [r3]
 800a270:	f02c 0c04 	bic.w	ip, ip, #4
 800a274:	f8c3 c000 	str.w	ip, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a278:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a27a:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 800a27c:	f041 0101 	orr.w	r1, r1, #1
 800a280:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a282:	fa27 f102 	lsr.w	r1, r7, r2
 800a286:	07c9      	lsls	r1, r1, #31
 800a288:	d55b      	bpl.n	800a342 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d14f      	bne.n	800a32e <HAL_DMA_IRQHandler+0x21a>
 800a28e:	49a2      	ldr	r1, [pc, #648]	@ (800a518 <HAL_DMA_IRQHandler+0x404>)
 800a290:	f8df c298 	ldr.w	ip, [pc, #664]	@ 800a52c <HAL_DMA_IRQHandler+0x418>
 800a294:	4563      	cmp	r3, ip
 800a296:	bf18      	it	ne
 800a298:	428b      	cmpne	r3, r1
 800a29a:	f10c 0c18 	add.w	ip, ip, #24
 800a29e:	bf0c      	ite	eq
 800a2a0:	2101      	moveq	r1, #1
 800a2a2:	2100      	movne	r1, #0
 800a2a4:	4563      	cmp	r3, ip
 800a2a6:	bf08      	it	eq
 800a2a8:	f041 0101 	orreq.w	r1, r1, #1
 800a2ac:	f10c 0c18 	add.w	ip, ip, #24
 800a2b0:	4563      	cmp	r3, ip
 800a2b2:	bf08      	it	eq
 800a2b4:	f041 0101 	orreq.w	r1, r1, #1
 800a2b8:	f10c 0c18 	add.w	ip, ip, #24
 800a2bc:	4563      	cmp	r3, ip
 800a2be:	bf08      	it	eq
 800a2c0:	f041 0101 	orreq.w	r1, r1, #1
 800a2c4:	f10c 0c18 	add.w	ip, ip, #24
 800a2c8:	4563      	cmp	r3, ip
 800a2ca:	bf08      	it	eq
 800a2cc:	f041 0101 	orreq.w	r1, r1, #1
 800a2d0:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 800a2d4:	4563      	cmp	r3, ip
 800a2d6:	bf08      	it	eq
 800a2d8:	f041 0101 	orreq.w	r1, r1, #1
 800a2dc:	f10c 0c18 	add.w	ip, ip, #24
 800a2e0:	4563      	cmp	r3, ip
 800a2e2:	bf08      	it	eq
 800a2e4:	f041 0101 	orreq.w	r1, r1, #1
 800a2e8:	f10c 0c18 	add.w	ip, ip, #24
 800a2ec:	4563      	cmp	r3, ip
 800a2ee:	bf08      	it	eq
 800a2f0:	f041 0101 	orreq.w	r1, r1, #1
 800a2f4:	f10c 0c18 	add.w	ip, ip, #24
 800a2f8:	4563      	cmp	r3, ip
 800a2fa:	bf08      	it	eq
 800a2fc:	f041 0101 	orreq.w	r1, r1, #1
 800a300:	f10c 0c18 	add.w	ip, ip, #24
 800a304:	4563      	cmp	r3, ip
 800a306:	bf08      	it	eq
 800a308:	f041 0101 	orreq.w	r1, r1, #1
 800a30c:	f10c 0c18 	add.w	ip, ip, #24
 800a310:	4563      	cmp	r3, ip
 800a312:	bf08      	it	eq
 800a314:	f041 0101 	orreq.w	r1, r1, #1
 800a318:	f10c 0c18 	add.w	ip, ip, #24
 800a31c:	4563      	cmp	r3, ip
 800a31e:	bf08      	it	eq
 800a320:	f041 0101 	orreq.w	r1, r1, #1
 800a324:	b919      	cbnz	r1, 800a32e <HAL_DMA_IRQHandler+0x21a>
 800a326:	497d      	ldr	r1, [pc, #500]	@ (800a51c <HAL_DMA_IRQHandler+0x408>)
 800a328:	428b      	cmp	r3, r1
 800a32a:	f040 81e3 	bne.w	800a6f4 <HAL_DMA_IRQHandler+0x5e0>
 800a32e:	6959      	ldr	r1, [r3, #20]
 800a330:	0609      	lsls	r1, r1, #24
 800a332:	d506      	bpl.n	800a342 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a334:	2101      	movs	r1, #1
 800a336:	4091      	lsls	r1, r2
 800a338:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a33a:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 800a33c:	f041 0102 	orr.w	r1, r1, #2
 800a340:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a342:	2104      	movs	r1, #4
 800a344:	4091      	lsls	r1, r2
 800a346:	4239      	tst	r1, r7
 800a348:	d05f      	beq.n	800a40a <HAL_DMA_IRQHandler+0x2f6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a34a:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 800a518 <HAL_DMA_IRQHandler+0x404>
 800a34e:	4563      	cmp	r3, ip
 800a350:	d051      	beq.n	800a3f6 <HAL_DMA_IRQHandler+0x2e2>
 800a352:	2800      	cmp	r0, #0
 800a354:	d14f      	bne.n	800a3f6 <HAL_DMA_IRQHandler+0x2e2>
 800a356:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800a35a:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 800a52c <HAL_DMA_IRQHandler+0x418>
 800a35e:	4543      	cmp	r3, r8
 800a360:	bf18      	it	ne
 800a362:	4563      	cmpne	r3, ip
 800a364:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 800a368:	bf0c      	ite	eq
 800a36a:	f04f 0c01 	moveq.w	ip, #1
 800a36e:	f04f 0c00 	movne.w	ip, #0
 800a372:	4543      	cmp	r3, r8
 800a374:	bf08      	it	eq
 800a376:	f04c 0c01 	orreq.w	ip, ip, #1
 800a37a:	f108 0818 	add.w	r8, r8, #24
 800a37e:	4543      	cmp	r3, r8
 800a380:	bf08      	it	eq
 800a382:	f04c 0c01 	orreq.w	ip, ip, #1
 800a386:	f108 0818 	add.w	r8, r8, #24
 800a38a:	4543      	cmp	r3, r8
 800a38c:	bf08      	it	eq
 800a38e:	f04c 0c01 	orreq.w	ip, ip, #1
 800a392:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 800a396:	4543      	cmp	r3, r8
 800a398:	bf08      	it	eq
 800a39a:	f04c 0c01 	orreq.w	ip, ip, #1
 800a39e:	f108 0818 	add.w	r8, r8, #24
 800a3a2:	4543      	cmp	r3, r8
 800a3a4:	bf08      	it	eq
 800a3a6:	f04c 0c01 	orreq.w	ip, ip, #1
 800a3aa:	f108 0818 	add.w	r8, r8, #24
 800a3ae:	4543      	cmp	r3, r8
 800a3b0:	bf08      	it	eq
 800a3b2:	f04c 0c01 	orreq.w	ip, ip, #1
 800a3b6:	f108 0818 	add.w	r8, r8, #24
 800a3ba:	4543      	cmp	r3, r8
 800a3bc:	bf08      	it	eq
 800a3be:	f04c 0c01 	orreq.w	ip, ip, #1
 800a3c2:	f108 0818 	add.w	r8, r8, #24
 800a3c6:	4543      	cmp	r3, r8
 800a3c8:	bf08      	it	eq
 800a3ca:	f04c 0c01 	orreq.w	ip, ip, #1
 800a3ce:	f108 0818 	add.w	r8, r8, #24
 800a3d2:	4543      	cmp	r3, r8
 800a3d4:	bf08      	it	eq
 800a3d6:	f04c 0c01 	orreq.w	ip, ip, #1
 800a3da:	f108 0818 	add.w	r8, r8, #24
 800a3de:	4543      	cmp	r3, r8
 800a3e0:	bf08      	it	eq
 800a3e2:	f04c 0c01 	orreq.w	ip, ip, #1
 800a3e6:	f1bc 0f00 	cmp.w	ip, #0
 800a3ea:	d104      	bne.n	800a3f6 <HAL_DMA_IRQHandler+0x2e2>
 800a3ec:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 800a51c <HAL_DMA_IRQHandler+0x408>
 800a3f0:	4563      	cmp	r3, ip
 800a3f2:	f040 8185 	bne.w	800a700 <HAL_DMA_IRQHandler+0x5ec>
 800a3f6:	f8d3 c000 	ldr.w	ip, [r3]
 800a3fa:	f01c 0f02 	tst.w	ip, #2
 800a3fe:	d004      	beq.n	800a40a <HAL_DMA_IRQHandler+0x2f6>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a400:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a402:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 800a404:	f041 0104 	orr.w	r1, r1, #4
 800a408:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a40a:	2110      	movs	r1, #16
 800a40c:	fa01 f202 	lsl.w	r2, r1, r2
 800a410:	423a      	tst	r2, r7
 800a412:	d05b      	beq.n	800a4cc <HAL_DMA_IRQHandler+0x3b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a414:	4940      	ldr	r1, [pc, #256]	@ (800a518 <HAL_DMA_IRQHandler+0x404>)
 800a416:	428b      	cmp	r3, r1
 800a418:	d042      	beq.n	800a4a0 <HAL_DMA_IRQHandler+0x38c>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d140      	bne.n	800a4a0 <HAL_DMA_IRQHandler+0x38c>
 800a41e:	3118      	adds	r1, #24
 800a420:	483f      	ldr	r0, [pc, #252]	@ (800a520 <HAL_DMA_IRQHandler+0x40c>)
 800a422:	4283      	cmp	r3, r0
 800a424:	bf18      	it	ne
 800a426:	428b      	cmpne	r3, r1
 800a428:	f100 0018 	add.w	r0, r0, #24
 800a42c:	bf0c      	ite	eq
 800a42e:	2101      	moveq	r1, #1
 800a430:	2100      	movne	r1, #0
 800a432:	4283      	cmp	r3, r0
 800a434:	bf08      	it	eq
 800a436:	f041 0101 	orreq.w	r1, r1, #1
 800a43a:	3018      	adds	r0, #24
 800a43c:	4283      	cmp	r3, r0
 800a43e:	bf08      	it	eq
 800a440:	f041 0101 	orreq.w	r1, r1, #1
 800a444:	3018      	adds	r0, #24
 800a446:	4283      	cmp	r3, r0
 800a448:	bf08      	it	eq
 800a44a:	f041 0101 	orreq.w	r1, r1, #1
 800a44e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800a452:	4283      	cmp	r3, r0
 800a454:	bf08      	it	eq
 800a456:	f041 0101 	orreq.w	r1, r1, #1
 800a45a:	3018      	adds	r0, #24
 800a45c:	4283      	cmp	r3, r0
 800a45e:	bf08      	it	eq
 800a460:	f041 0101 	orreq.w	r1, r1, #1
 800a464:	3018      	adds	r0, #24
 800a466:	4283      	cmp	r3, r0
 800a468:	bf08      	it	eq
 800a46a:	f041 0101 	orreq.w	r1, r1, #1
 800a46e:	3018      	adds	r0, #24
 800a470:	4283      	cmp	r3, r0
 800a472:	bf08      	it	eq
 800a474:	f041 0101 	orreq.w	r1, r1, #1
 800a478:	3018      	adds	r0, #24
 800a47a:	4283      	cmp	r3, r0
 800a47c:	bf08      	it	eq
 800a47e:	f041 0101 	orreq.w	r1, r1, #1
 800a482:	3018      	adds	r0, #24
 800a484:	4283      	cmp	r3, r0
 800a486:	bf08      	it	eq
 800a488:	f041 0101 	orreq.w	r1, r1, #1
 800a48c:	3018      	adds	r0, #24
 800a48e:	4283      	cmp	r3, r0
 800a490:	bf08      	it	eq
 800a492:	f041 0101 	orreq.w	r1, r1, #1
 800a496:	b919      	cbnz	r1, 800a4a0 <HAL_DMA_IRQHandler+0x38c>
 800a498:	4920      	ldr	r1, [pc, #128]	@ (800a51c <HAL_DMA_IRQHandler+0x408>)
 800a49a:	428b      	cmp	r3, r1
 800a49c:	f040 8137 	bne.w	800a70e <HAL_DMA_IRQHandler+0x5fa>
 800a4a0:	6819      	ldr	r1, [r3, #0]
 800a4a2:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800a4a6:	b189      	cbz	r1, 800a4cc <HAL_DMA_IRQHandler+0x3b8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a4a8:	60a2      	str	r2, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	0350      	lsls	r0, r2, #13
 800a4ae:	f100 80e7 	bmi.w	800a680 <HAL_DMA_IRQHandler+0x56c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	05d2      	lsls	r2, r2, #23
 800a4b6:	d403      	bmi.n	800a4c0 <HAL_DMA_IRQHandler+0x3ac>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	f022 0208 	bic.w	r2, r2, #8
 800a4be:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800a4c0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 800a4c2:	b11b      	cbz	r3, 800a4cc <HAL_DMA_IRQHandler+0x3b8>
            hdma->XferHalfCpltCallback(hdma);
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4798      	blx	r3
 800a4c8:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a4cc:	f00e 011f 	and.w	r1, lr, #31
 800a4d0:	2020      	movs	r0, #32
 800a4d2:	4088      	lsls	r0, r1
 800a4d4:	4238      	tst	r0, r7
 800a4d6:	d073      	beq.n	800a5c0 <HAL_DMA_IRQHandler+0x4ac>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a4d8:	6832      	ldr	r2, [r6, #0]
 800a4da:	4b12      	ldr	r3, [pc, #72]	@ (800a524 <HAL_DMA_IRQHandler+0x410>)
 800a4dc:	4f12      	ldr	r7, [pc, #72]	@ (800a528 <HAL_DMA_IRQHandler+0x414>)
 800a4de:	42ba      	cmp	r2, r7
 800a4e0:	bf18      	it	ne
 800a4e2:	429a      	cmpne	r2, r3
 800a4e4:	f107 0718 	add.w	r7, r7, #24
 800a4e8:	bf0c      	ite	eq
 800a4ea:	2301      	moveq	r3, #1
 800a4ec:	2300      	movne	r3, #0
 800a4ee:	42ba      	cmp	r2, r7
 800a4f0:	bf08      	it	eq
 800a4f2:	f043 0301 	orreq.w	r3, r3, #1
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	42ba      	cmp	r2, r7
 800a4fa:	bf08      	it	eq
 800a4fc:	f043 0301 	orreq.w	r3, r3, #1
 800a500:	3718      	adds	r7, #24
 800a502:	42ba      	cmp	r2, r7
 800a504:	bf08      	it	eq
 800a506:	f043 0301 	orreq.w	r3, r3, #1
 800a50a:	3718      	adds	r7, #24
 800a50c:	42ba      	cmp	r2, r7
 800a50e:	bf08      	it	eq
 800a510:	f043 0301 	orreq.w	r3, r3, #1
 800a514:	3718      	adds	r7, #24
 800a516:	e00b      	b.n	800a530 <HAL_DMA_IRQHandler+0x41c>
 800a518:	40020040 	.word	0x40020040
 800a51c:	400204b8 	.word	0x400204b8
 800a520:	40020070 	.word	0x40020070
 800a524:	40020010 	.word	0x40020010
 800a528:	40020028 	.word	0x40020028
 800a52c:	40020058 	.word	0x40020058
 800a530:	42ba      	cmp	r2, r7
 800a532:	bf08      	it	eq
 800a534:	f043 0301 	orreq.w	r3, r3, #1
 800a538:	3718      	adds	r7, #24
 800a53a:	42ba      	cmp	r2, r7
 800a53c:	bf08      	it	eq
 800a53e:	f043 0301 	orreq.w	r3, r3, #1
 800a542:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800a546:	42ba      	cmp	r2, r7
 800a548:	bf08      	it	eq
 800a54a:	f043 0301 	orreq.w	r3, r3, #1
 800a54e:	3718      	adds	r7, #24
 800a550:	42ba      	cmp	r2, r7
 800a552:	bf08      	it	eq
 800a554:	f043 0301 	orreq.w	r3, r3, #1
 800a558:	3718      	adds	r7, #24
 800a55a:	42ba      	cmp	r2, r7
 800a55c:	bf08      	it	eq
 800a55e:	f043 0301 	orreq.w	r3, r3, #1
 800a562:	3718      	adds	r7, #24
 800a564:	42ba      	cmp	r2, r7
 800a566:	bf08      	it	eq
 800a568:	f043 0301 	orreq.w	r3, r3, #1
 800a56c:	3718      	adds	r7, #24
 800a56e:	42ba      	cmp	r2, r7
 800a570:	bf08      	it	eq
 800a572:	f043 0301 	orreq.w	r3, r3, #1
 800a576:	3718      	adds	r7, #24
 800a578:	42ba      	cmp	r2, r7
 800a57a:	bf08      	it	eq
 800a57c:	f043 0301 	orreq.w	r3, r3, #1
 800a580:	3718      	adds	r7, #24
 800a582:	42ba      	cmp	r2, r7
 800a584:	bf08      	it	eq
 800a586:	f043 0301 	orreq.w	r3, r3, #1
 800a58a:	b91b      	cbnz	r3, 800a594 <HAL_DMA_IRQHandler+0x480>
 800a58c:	4b89      	ldr	r3, [pc, #548]	@ (800a7b4 <HAL_DMA_IRQHandler+0x6a0>)
 800a58e:	429a      	cmp	r2, r3
 800a590:	f040 80d1 	bne.w	800a736 <HAL_DMA_IRQHandler+0x622>
 800a594:	6813      	ldr	r3, [r2, #0]
 800a596:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a59a:	b18b      	cbz	r3, 800a5c0 <HAL_DMA_IRQHandler+0x4ac>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a59c:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a59e:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 800a5a2:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a5a4:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a5a6:	d074      	beq.n	800a692 <HAL_DMA_IRQHandler+0x57e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a5a8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a5ac:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a5ae:	f000 808a 	beq.w	800a6c6 <HAL_DMA_IRQHandler+0x5b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a5b2:	031f      	lsls	r7, r3, #12
 800a5b4:	f140 8095 	bpl.w	800a6e2 <HAL_DMA_IRQHandler+0x5ce>
          if(hdma->XferCpltCallback != NULL)
 800a5b8:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800a5ba:	b10b      	cbz	r3, 800a5c0 <HAL_DMA_IRQHandler+0x4ac>
            hdma->XferCpltCallback(hdma);
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a5c0:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f43f ae32 	beq.w	800a22c <HAL_DMA_IRQHandler+0x118>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a5c8:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800a5ca:	07dc      	lsls	r4, r3, #31
 800a5cc:	d51e      	bpl.n	800a60c <HAL_DMA_IRQHandler+0x4f8>
        __HAL_DMA_DISABLE(hdma);
 800a5ce:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800a5d0:	2104      	movs	r1, #4
 800a5d2:	f886 1035 	strb.w	r1, [r6, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5d6:	4978      	ldr	r1, [pc, #480]	@ (800a7b8 <HAL_DMA_IRQHandler+0x6a4>)
        __HAL_DMA_DISABLE(hdma);
 800a5d8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5da:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 800a5de:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5e2:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 800a5e4:	6013      	str	r3, [r2, #0]
 800a5e6:	e002      	b.n	800a5ee <HAL_DMA_IRQHandler+0x4da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a5e8:	6813      	ldr	r3, [r2, #0]
 800a5ea:	07d8      	lsls	r0, r3, #31
 800a5ec:	d504      	bpl.n	800a5f8 <HAL_DMA_IRQHandler+0x4e4>
          if (++count > timeout)
 800a5ee:	9b01      	ldr	r3, [sp, #4]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	428b      	cmp	r3, r1
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	d9f7      	bls.n	800a5e8 <HAL_DMA_IRQHandler+0x4d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a5f8:	6813      	ldr	r3, [r2, #0]
 800a5fa:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800a5fc:	bf4c      	ite	mi
 800a5fe:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800a600:	2301      	movpl	r3, #1
 800a602:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800a606:	2300      	movs	r3, #0
 800a608:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 800a60c:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f43f ae0c 	beq.w	800a22c <HAL_DMA_IRQHandler+0x118>
          hdma->XferCpltCallback(hdma);
 800a614:	4630      	mov	r0, r6
}
 800a616:	b002      	add	sp, #8
 800a618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 800a61c:	4718      	bx	r3
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a61e:	fa27 f102 	lsr.w	r1, r7, r2
 800a622:	07c9      	lsls	r1, r1, #31
 800a624:	f53f ae83 	bmi.w	800a32e <HAL_DMA_IRQHandler+0x21a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a628:	2104      	movs	r1, #4
 800a62a:	4091      	lsls	r1, r2
 800a62c:	420f      	tst	r7, r1
 800a62e:	f47f aee2 	bne.w	800a3f6 <HAL_DMA_IRQHandler+0x2e2>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a632:	2110      	movs	r1, #16
 800a634:	fa01 f202 	lsl.w	r2, r1, r2
 800a638:	4217      	tst	r7, r2
 800a63a:	f47f af31 	bne.w	800a4a0 <HAL_DMA_IRQHandler+0x38c>
 800a63e:	e745      	b.n	800a4cc <HAL_DMA_IRQHandler+0x3b8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a640:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 800a644:	f04f 0c08 	mov.w	ip, #8
 800a648:	f00e 021f 	and.w	r2, lr, #31
 800a64c:	fa0c f102 	lsl.w	r1, ip, r2
 800a650:	420f      	tst	r7, r1
 800a652:	f47f ae06 	bne.w	800a262 <HAL_DMA_IRQHandler+0x14e>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a656:	fa27 f102 	lsr.w	r1, r7, r2
 800a65a:	07c9      	lsls	r1, r1, #31
 800a65c:	f53f ae67 	bmi.w	800a32e <HAL_DMA_IRQHandler+0x21a>
 800a660:	e66f      	b.n	800a342 <HAL_DMA_IRQHandler+0x22e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a662:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 800a666:	2108      	movs	r1, #8
 800a668:	f00e 021f 	and.w	r2, lr, #31
 800a66c:	4091      	lsls	r1, r2
 800a66e:	420f      	tst	r7, r1
 800a670:	f47f adf7 	bne.w	800a262 <HAL_DMA_IRQHandler+0x14e>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a674:	fa27 f102 	lsr.w	r1, r7, r2
 800a678:	07c9      	lsls	r1, r1, #31
 800a67a:	f53f ae58 	bmi.w	800a32e <HAL_DMA_IRQHandler+0x21a>
 800a67e:	e660      	b.n	800a342 <HAL_DMA_IRQHandler+0x22e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	0319      	lsls	r1, r3, #12
 800a684:	f57f af1c 	bpl.w	800a4c0 <HAL_DMA_IRQHandler+0x3ac>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a688:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f47f af1a 	bne.w	800a4c4 <HAL_DMA_IRQHandler+0x3b0>
 800a690:	e71c      	b.n	800a4cc <HAL_DMA_IRQHandler+0x3b8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a692:	f023 0316 	bic.w	r3, r3, #22
 800a696:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a698:	6953      	ldr	r3, [r2, #20]
 800a69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a69e:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a6a0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 800a6a2:	b31b      	cbz	r3, 800a6ec <HAL_DMA_IRQHandler+0x5d8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a6a4:	6813      	ldr	r3, [r2, #0]
 800a6a6:	f023 0308 	bic.w	r3, r3, #8
 800a6aa:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a6ac:	233f      	movs	r3, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800a6ae:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 800a6b0:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a6b2:	408b      	lsls	r3, r1
 800a6b4:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 800a6b6:	6d33      	ldr	r3, [r6, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 800a6b8:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800a6bc:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1a7      	bne.n	800a614 <HAL_DMA_IRQHandler+0x500>
 800a6c4:	e5b2      	b.n	800a22c <HAL_DMA_IRQHandler+0x118>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a6c6:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 800a6ca:	f47f af75 	bne.w	800a5b8 <HAL_DMA_IRQHandler+0x4a4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a6ce:	6811      	ldr	r1, [r2, #0]
 800a6d0:	f021 0110 	bic.w	r1, r1, #16
 800a6d4:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800a6d6:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800a6d8:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800a6dc:	f886 2035 	strb.w	r2, [r6, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 800a6e0:	e76a      	b.n	800a5b8 <HAL_DMA_IRQHandler+0x4a4>
            if(hdma->XferM1CpltCallback != NULL)
 800a6e2:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f47f af69 	bne.w	800a5bc <HAL_DMA_IRQHandler+0x4a8>
 800a6ea:	e769      	b.n	800a5c0 <HAL_DMA_IRQHandler+0x4ac>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a6ec:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1d8      	bne.n	800a6a4 <HAL_DMA_IRQHandler+0x590>
 800a6f2:	e7db      	b.n	800a6ac <HAL_DMA_IRQHandler+0x598>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a6f4:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a6f6:	2104      	movs	r1, #4
 800a6f8:	4091      	lsls	r1, r2
 800a6fa:	4239      	tst	r1, r7
 800a6fc:	f43f ae85 	beq.w	800a40a <HAL_DMA_IRQHandler+0x2f6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a700:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a702:	2110      	movs	r1, #16
 800a704:	fa01 f202 	lsl.w	r2, r1, r2
 800a708:	4217      	tst	r7, r2
 800a70a:	f43f aedf 	beq.w	800a4cc <HAL_DMA_IRQHandler+0x3b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a70e:	6819      	ldr	r1, [r3, #0]
 800a710:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800a714:	e6c7      	b.n	800a4a6 <HAL_DMA_IRQHandler+0x392>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a716:	2502      	movs	r5, #2
 800a718:	4085      	lsls	r5, r0
 800a71a:	420d      	tst	r5, r1
 800a71c:	d00f      	beq.n	800a73e <HAL_DMA_IRQHandler+0x62a>
 800a71e:	0797      	lsls	r7, r2, #30
 800a720:	d50d      	bpl.n	800a73e <HAL_DMA_IRQHandler+0x62a>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a722:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a724:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a726:	d534      	bpl.n	800a792 <HAL_DMA_IRQHandler+0x67e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a728:	03d7      	lsls	r7, r2, #15
 800a72a:	d43e      	bmi.n	800a7aa <HAL_DMA_IRQHandler+0x696>
          if(hdma->XferM1CpltCallback != NULL)
 800a72c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f47f af70 	bne.w	800a614 <HAL_DMA_IRQHandler+0x500>
 800a734:	e57a      	b.n	800a22c <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a736:	6813      	ldr	r3, [r2, #0]
 800a738:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a73c:	e72d      	b.n	800a59a <HAL_DMA_IRQHandler+0x486>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a73e:	2508      	movs	r5, #8
 800a740:	4085      	lsls	r5, r0
 800a742:	420d      	tst	r5, r1
 800a744:	f43f ad72 	beq.w	800a22c <HAL_DMA_IRQHandler+0x118>
 800a748:	0715      	lsls	r5, r2, #28
 800a74a:	f57f ad6f 	bpl.w	800a22c <HAL_DMA_IRQHandler+0x118>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a74e:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800a750:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a752:	f022 020e 	bic.w	r2, r2, #14
 800a756:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a758:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800a75a:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a75c:	fa03 f000 	lsl.w	r0, r3, r0
 800a760:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a762:	6573      	str	r3, [r6, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 800a764:	f886 1034 	strb.w	r1, [r6, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800a768:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 800a76c:	2a00      	cmp	r2, #0
 800a76e:	f43f ad5d 	beq.w	800a22c <HAL_DMA_IRQHandler+0x118>
        hdma->XferErrorCallback(hdma);
 800a772:	4630      	mov	r0, r6
}
 800a774:	b002      	add	sp, #8
 800a776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 800a77a:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a77c:	0692      	lsls	r2, r2, #26
 800a77e:	d403      	bmi.n	800a788 <HAL_DMA_IRQHandler+0x674>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	f022 0204 	bic.w	r2, r2, #4
 800a786:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800a788:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f47f af42 	bne.w	800a614 <HAL_DMA_IRQHandler+0x500>
 800a790:	e54c      	b.n	800a22c <HAL_DMA_IRQHandler+0x118>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a792:	f012 0220 	ands.w	r2, r2, #32
 800a796:	d108      	bne.n	800a7aa <HAL_DMA_IRQHandler+0x696>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a798:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a79a:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a79c:	f021 010a 	bic.w	r1, r1, #10
 800a7a0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a7a2:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800a7a6:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 800a7aa:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f47f af31 	bne.w	800a614 <HAL_DMA_IRQHandler+0x500>
 800a7b2:	e53b      	b.n	800a22c <HAL_DMA_IRQHandler+0x118>
 800a7b4:	400204b8 	.word	0x400204b8
 800a7b8:	1b4e81b5 	.word	0x1b4e81b5

0800a7bc <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop

0800a7c0 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d035      	beq.n	800a830 <HAL_DMA2D_Init+0x70>
{
 800a7c4:	b538      	push	{r3, r4, r5, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a7c6:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a7d0:	b34b      	cbz	r3, 800a826 <HAL_DMA2D_Init+0x66>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a7d2:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a7d4:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a7d6:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a7d8:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a7dc:	69e1      	ldr	r1, [r4, #28]
 800a7de:	681d      	ldr	r5, [r3, #0]
 800a7e0:	4814      	ldr	r0, [pc, #80]	@ (800a834 <HAL_DMA2D_Init+0x74>)
 800a7e2:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a7e4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a7e6:	4028      	ands	r0, r5
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a7e8:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a7ea:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a7ec:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a7ee:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a7f0:	4302      	orrs	r2, r0
 800a7f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a7f4:	4810      	ldr	r0, [pc, #64]	@ (800a838 <HAL_DMA2D_Init+0x78>)
 800a7f6:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a7f8:	4910      	ldr	r1, [pc, #64]	@ (800a83c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a7fa:	4302      	orrs	r2, r0
 800a7fc:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a7fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a800:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a802:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a806:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a808:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a80a:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a80c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a80e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a812:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a814:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800a818:	430a      	orrs	r2, r1
 800a81a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a81c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a81e:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a820:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 800a824:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800a826:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800a82a:	f7ff ffc7 	bl	800a7bc <HAL_DMA2D_MspInit>
 800a82e:	e7d0      	b.n	800a7d2 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 800a830:	2001      	movs	r0, #1
}
 800a832:	4770      	bx	lr
 800a834:	fff8ffbf 	.word	0xfff8ffbf
 800a838:	fffffef8 	.word	0xfffffef8
 800a83c:	ffff0000 	.word	0xffff0000

0800a840 <HAL_DMA2D_MspDeInit>:
  * @brief  DeInitializes the DMA2D MSP.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef *hdma2d)
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop

0800a844 <HAL_DMA2D_DeInit>:
  if (hdma2d == NULL)
 800a844:	2800      	cmp	r0, #0
 800a846:	d07e      	beq.n	800a946 <HAL_DMA2D_DeInit+0x102>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800a848:	4b40      	ldr	r3, [pc, #256]	@ (800a94c <HAL_DMA2D_DeInit+0x108>)
 800a84a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
{
 800a84e:	b570      	push	{r4, r5, r6, lr}
 800a850:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800a852:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800a854:	06d8      	lsls	r0, r3, #27
 800a856:	d508      	bpl.n	800a86a <HAL_DMA2D_DeInit+0x26>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	07d9      	lsls	r1, r3, #31
 800a85c:	d418      	bmi.n	800a890 <HAL_DMA2D_DeInit+0x4c>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800a85e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a860:	069a      	lsls	r2, r3, #26
 800a862:	d45d      	bmi.n	800a920 <HAL_DMA2D_DeInit+0xdc>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800a864:	69e3      	ldr	r3, [r4, #28]
 800a866:	069b      	lsls	r3, r3, #26
 800a868:	d431      	bmi.n	800a8ce <HAL_DMA2D_DeInit+0x8a>
  hdma2d->Instance->CR       =    0U;
 800a86a:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800a86c:	233f      	movs	r3, #63	@ 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800a86e:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800a870:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800a872:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800a874:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800a876:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800a878:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800a87a:	6266      	str	r6, [r4, #36]	@ 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800a87c:	6366      	str	r6, [r4, #52]	@ 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800a87e:	f7ff ffdf 	bl	800a840 <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a882:	666e      	str	r6, [r5, #100]	@ 0x64
  return HAL_OK;
 800a884:	4630      	mov	r0, r6
  __HAL_UNLOCK(hdma2d);
 800a886:	f885 6060 	strb.w	r6, [r5, #96]	@ 0x60
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800a88a:	f885 6061 	strb.w	r6, [r5, #97]	@ 0x61
}
 800a88e:	bd70      	pop	{r4, r5, r6, pc}

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT | DMA2D_CR_START, DMA2D_CR_ABORT);
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	f023 0305 	bic.w	r3, r3, #5
 800a896:	f043 0304 	orr.w	r3, r3, #4
 800a89a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a89c:	f7fe f9ee 	bl	8008c7c <HAL_GetTick>
 800a8a0:	4606      	mov	r6, r0

  /* Check if the DMA2D is effectively disabled */
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a8a2:	e005      	b.n	800a8b0 <HAL_DMA2D_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 800a8a4:	f7fe f9ea 	bl	8008c7c <HAL_GetTick>
 800a8a8:	1b80      	subs	r0, r0, r6
 800a8aa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a8ae:	d82b      	bhi.n	800a908 <HAL_DMA2D_DeInit+0xc4>
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a8b0:	682c      	ldr	r4, [r5, #0]
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	f013 0301 	ands.w	r3, r3, #1
 800a8b8:	d1f4      	bne.n	800a8a4 <HAL_DMA2D_DeInit+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800a8ba:	6822      	ldr	r2, [r4, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a8bc:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800a8be:	f422 520c 	bic.w	r2, r2, #8960	@ 0x2300
 800a8c2:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a8c4:	f885 1061 	strb.w	r1, [r5, #97]	@ 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800a8c8:	f885 3060 	strb.w	r3, [r5, #96]	@ 0x60

  return HAL_OK;
 800a8cc:	e7cd      	b.n	800a86a <HAL_DMA2D_DeInit+0x26>
{
  uint32_t tickstart;
  const __IO uint32_t *reg =  &(hdma2d->Instance->BGPFCCR);  /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	f043 0304 	orr.w	r3, r3, #4
 800a8d4:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800a8d6:	f7fe f9d1 	bl	8008c7c <HAL_GetTick>
 800a8da:	4606      	mov	r6, r0

  /* Check if the CLUT loading is aborted */
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 800a8dc:	e005      	b.n	800a8ea <HAL_DMA2D_DeInit+0xa6>
  {
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 800a8de:	f7fe f9cd 	bl	8008c7c <HAL_GetTick>
 800a8e2:	1b80      	subs	r0, r0, r6
 800a8e4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a8e8:	d80e      	bhi.n	800a908 <HAL_DMA2D_DeInit+0xc4>
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 800a8ea:	69e3      	ldr	r3, [r4, #28]
 800a8ec:	f013 0320 	ands.w	r3, r3, #32
 800a8f0:	d1f5      	bne.n	800a8de <HAL_DMA2D_DeInit+0x9a>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 800a8f2:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a8f4:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 800a8f6:	6822      	ldr	r2, [r4, #0]
 800a8f8:	f422 5264 	bic.w	r2, r2, #14592	@ 0x3900
 800a8fc:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a8fe:	f885 1061 	strb.w	r1, [r5, #97]	@ 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800a902:	f885 3060 	strb.w	r3, [r5, #96]	@ 0x60

  return HAL_OK;
 800a906:	e7b0      	b.n	800a86a <HAL_DMA2D_DeInit+0x26>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a90a:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800a90c:	2100      	movs	r1, #0
    return HAL_ERROR;
 800a90e:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a910:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800a914:	f885 1060 	strb.w	r1, [r5, #96]	@ 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a918:	666b      	str	r3, [r5, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a91a:	f885 2061 	strb.w	r2, [r5, #97]	@ 0x61
}
 800a91e:	bd70      	pop	{r4, r5, r6, pc}
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	f043 0304 	orr.w	r3, r3, #4
 800a926:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a928:	f7fe f9a8 	bl	8008c7c <HAL_GetTick>
 800a92c:	4606      	mov	r6, r0
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 800a92e:	e005      	b.n	800a93c <HAL_DMA2D_DeInit+0xf8>
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 800a930:	f7fe f9a4 	bl	8008c7c <HAL_GetTick>
 800a934:	1b80      	subs	r0, r0, r6
 800a936:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a93a:	d8e5      	bhi.n	800a908 <HAL_DMA2D_DeInit+0xc4>
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 800a93c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a93e:	f013 0320 	ands.w	r3, r3, #32
 800a942:	d1f5      	bne.n	800a930 <HAL_DMA2D_DeInit+0xec>
 800a944:	e7d5      	b.n	800a8f2 <HAL_DMA2D_DeInit+0xae>
    return HAL_ERROR;
 800a946:	2001      	movs	r0, #1
}
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	58024400 	.word	0x58024400

0800a950 <HAL_DMA2D_Start>:
{
 800a950:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800a952:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800a956:	2c01      	cmp	r4, #1
 800a958:	d03a      	beq.n	800a9d0 <HAL_DMA2D_Start+0x80>
 800a95a:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800a95c:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 800a95e:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a962:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800a964:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a968:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800a96c:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800a970:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800a972:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800a976:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 800a97a:	ea43 030c 	orr.w	r3, r3, ip
 800a97e:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800a980:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800a982:	d00a      	beq.n	800a99a <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800a984:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 800a988:	d025      	beq.n	800a9d6 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800a98a:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800a98c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800a98e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800a990:	f043 0301 	orr.w	r3, r3, #1
 800a994:	6023      	str	r3, [r4, #0]
}
 800a996:	bc70      	pop	{r4, r5, r6}
 800a998:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800a99a:	6883      	ldr	r3, [r0, #8]
 800a99c:	b1b3      	cbz	r3, 800a9cc <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d026      	beq.n	800a9f0 <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800a9a2:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800a9a4:	f401 027f 	and.w	r2, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800a9a8:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800a9ac:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800a9ae:	d022      	beq.n	800a9f6 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800a9b0:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800a9b2:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800a9b6:	d010      	beq.n	800a9da <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 800a9b8:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 800a9ba:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800a9bc:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800a9be:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800a9c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800a9c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800a9c8:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800a9cc:	63a1      	str	r1, [r4, #56]	@ 0x38
 800a9ce:	e7dd      	b.n	800a98c <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800a9d0:	2002      	movs	r0, #2
}
 800a9d2:	bc70      	pop	{r4, r5, r6}
 800a9d4:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800a9d6:	6161      	str	r1, [r4, #20]
 800a9d8:	e7d8      	b.n	800a98c <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800a9da:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11U);
 800a9dc:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800a9de:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800a9e0:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800a9e2:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800a9e6:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800a9ea:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800a9ee:	e7ed      	b.n	800a9cc <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 800a9f0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800a9f4:	e7ea      	b.n	800a9cc <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 800a9f6:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10U);
 800a9f8:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800a9fa:	02db      	lsls	r3, r3, #11
 800a9fc:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800aa00:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 800aa04:	e7e2      	b.n	800a9cc <HAL_DMA2D_Start+0x7c>
 800aa06:	bf00      	nop

0800aa08 <HAL_DMA2D_PollForTransfer>:
{
 800aa08:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800aa0a:	2300      	movs	r3, #0
{
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	4604      	mov	r4, r0
 800aa10:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800aa12:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800aa14:	6803      	ldr	r3, [r0, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	07d6      	lsls	r6, r2, #31
 800aa1a:	d40f      	bmi.n	800aa3c <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800aa1c:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800aa1e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800aa20:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800aa22:	0691      	lsls	r1, r2, #26
 800aa24:	d432      	bmi.n	800aa8c <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800aa26:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800aa28:	2201      	movs	r2, #1
  return HAL_OK;
 800aa2a:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800aa2c:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800aa2e:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 800aa32:	2300      	movs	r3, #0
 800aa34:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 800aa38:	b002      	add	sp, #8
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800aa3c:	f7fe f91e 	bl	8008c7c <HAL_GetTick>
 800aa40:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800aa42:	1c68      	adds	r0, r5, #1
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	d152      	bne.n	800aaee <HAL_DMA2D_PollForTransfer+0xe6>
 800aa48:	685a      	ldr	r2, [r3, #4]
 800aa4a:	0796      	lsls	r6, r2, #30
 800aa4c:	d4e6      	bmi.n	800aa1c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800aa52:	9a01      	ldr	r2, [sp, #4]
 800aa54:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800aa58:	d0f6      	beq.n	800aa48 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800aa5a:	9a01      	ldr	r2, [sp, #4]
 800aa5c:	0691      	lsls	r1, r2, #26
 800aa5e:	d503      	bpl.n	800aa68 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800aa60:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa62:	f042 0202 	orr.w	r2, r2, #2
 800aa66:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800aa68:	9a01      	ldr	r2, [sp, #4]
 800aa6a:	07d2      	lsls	r2, r2, #31
 800aa6c:	d503      	bpl.n	800aa76 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800aa6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa70:	f042 0201 	orr.w	r2, r2, #1
 800aa74:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800aa76:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800aa78:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800aa7a:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800aa7c:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800aa80:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 800aa82:	2300      	movs	r3, #0
 800aa84:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 800aa88:	b002      	add	sp, #8
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800aa8c:	f7fe f8f6 	bl	8008c7c <HAL_GetTick>
 800aa90:	1c6a      	adds	r2, r5, #1
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800aa92:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800aa94:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800aa96:	d13b      	bne.n	800ab10 <HAL_DMA2D_PollForTransfer+0x108>
 800aa98:	685a      	ldr	r2, [r3, #4]
 800aa9a:	06d1      	lsls	r1, r2, #27
 800aa9c:	d4c3      	bmi.n	800aa26 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800aaa2:	9a01      	ldr	r2, [sp, #4]
 800aaa4:	f012 0f29 	tst.w	r2, #41	@ 0x29
 800aaa8:	d0f6      	beq.n	800aa98 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800aaaa:	9a01      	ldr	r2, [sp, #4]
 800aaac:	0716      	lsls	r6, r2, #28
 800aaae:	d503      	bpl.n	800aab8 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800aab0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aab2:	f042 0204 	orr.w	r2, r2, #4
 800aab6:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800aab8:	9a01      	ldr	r2, [sp, #4]
 800aaba:	0695      	lsls	r5, r2, #26
 800aabc:	d503      	bpl.n	800aac6 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800aabe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aac0:	f042 0202 	orr.w	r2, r2, #2
 800aac4:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800aac6:	9a01      	ldr	r2, [sp, #4]
 800aac8:	07d0      	lsls	r0, r2, #31
 800aaca:	d503      	bpl.n	800aad4 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800aacc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aace:	f042 0201 	orr.w	r2, r2, #1
 800aad2:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800aad4:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800aad6:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800aad8:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800aada:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800aade:	e7cf      	b.n	800aa80 <HAL_DMA2D_PollForTransfer+0x78>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aae0:	f7fe f8cc 	bl	8008c7c <HAL_GetTick>
 800aae4:	1b80      	subs	r0, r0, r6
 800aae6:	42a8      	cmp	r0, r5
 800aae8:	d81c      	bhi.n	800ab24 <HAL_DMA2D_PollForTransfer+0x11c>
 800aaea:	b1dd      	cbz	r5, 800ab24 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	0790      	lsls	r0, r2, #30
 800aaf2:	d493      	bmi.n	800aa1c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800aaf8:	9a01      	ldr	r2, [sp, #4]
 800aafa:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800aafe:	d0ef      	beq.n	800aae0 <HAL_DMA2D_PollForTransfer+0xd8>
 800ab00:	e7ab      	b.n	800aa5a <HAL_DMA2D_PollForTransfer+0x52>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ab02:	f7fe f8bb 	bl	8008c7c <HAL_GetTick>
 800ab06:	1b80      	subs	r0, r0, r6
 800ab08:	42a8      	cmp	r0, r5
 800ab0a:	d80b      	bhi.n	800ab24 <HAL_DMA2D_PollForTransfer+0x11c>
 800ab0c:	b155      	cbz	r5, 800ab24 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	06d2      	lsls	r2, r2, #27
 800ab14:	d487      	bmi.n	800aa26 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800ab1a:	9a01      	ldr	r2, [sp, #4]
 800ab1c:	f012 0f29 	tst.w	r2, #41	@ 0x29
 800ab20:	d0ef      	beq.n	800ab02 <HAL_DMA2D_PollForTransfer+0xfa>
 800ab22:	e7c2      	b.n	800aaaa <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ab24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ab26:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 800ab28:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ab2a:	f043 0320 	orr.w	r3, r3, #32
 800ab2e:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ab30:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 800ab34:	e77d      	b.n	800aa32 <HAL_DMA2D_PollForTransfer+0x2a>
 800ab36:	bf00      	nop

0800ab38 <HAL_DMA2D_LineEventCallback>:
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop

0800ab3c <HAL_DMA2D_CLUTLoadingCpltCallback>:
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop

0800ab40 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ab40:	6803      	ldr	r3, [r0, #0]
{
 800ab42:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ab44:	685d      	ldr	r5, [r3, #4]
{
 800ab46:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800ab48:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ab4a:	07ea      	lsls	r2, r5, #31
 800ab4c:	d501      	bpl.n	800ab52 <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800ab4e:	05f1      	lsls	r1, r6, #23
 800ab50:	d456      	bmi.n	800ac00 <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ab52:	06aa      	lsls	r2, r5, #26
 800ab54:	d501      	bpl.n	800ab5a <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800ab56:	04b3      	lsls	r3, r6, #18
 800ab58:	d43b      	bmi.n	800abd2 <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800ab5a:	0728      	lsls	r0, r5, #28
 800ab5c:	d501      	bpl.n	800ab62 <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800ab5e:	0531      	lsls	r1, r6, #20
 800ab60:	d421      	bmi.n	800aba6 <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800ab62:	076a      	lsls	r2, r5, #29
 800ab64:	d501      	bpl.n	800ab6a <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800ab66:	0573      	lsls	r3, r6, #21
 800ab68:	d472      	bmi.n	800ac50 <HAL_DMA2D_IRQHandler+0x110>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800ab6a:	07a8      	lsls	r0, r5, #30
 800ab6c:	d501      	bpl.n	800ab72 <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800ab6e:	05b1      	lsls	r1, r6, #22
 800ab70:	d404      	bmi.n	800ab7c <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800ab72:	06ea      	lsls	r2, r5, #27
 800ab74:	d501      	bpl.n	800ab7a <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800ab76:	04f3      	lsls	r3, r6, #19
 800ab78:	d457      	bmi.n	800ac2a <HAL_DMA2D_IRQHandler+0xea>
}
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ab84:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800ab86:	2202      	movs	r2, #2
 800ab88:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ab8a:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ab8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab8e:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(hdma2d);
 800ab90:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ab92:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800ab96:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800ab9a:	6a23      	ldr	r3, [r4, #32]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0e8      	beq.n	800ab72 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 800aba0:	4620      	mov	r0, r4
 800aba2:	4798      	blx	r3
 800aba4:	e7e5      	b.n	800ab72 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abae:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800abb0:	2208      	movs	r2, #8
 800abb2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800abb4:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800abb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abb8:	4313      	orrs	r3, r2
 800abba:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800abbc:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800abc0:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
 800abc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_UNLOCK(hdma2d);
 800abc4:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0ca      	beq.n	800ab62 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 800abcc:	4620      	mov	r0, r4
 800abce:	4798      	blx	r3
 800abd0:	e7c7      	b.n	800ab62 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800abda:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800abdc:	2220      	movs	r2, #32
 800abde:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800abe0:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800abe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abe4:	f043 0302 	orr.w	r3, r3, #2
 800abe8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800abea:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800abee:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
 800abf0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_UNLOCK(hdma2d);
 800abf2:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0af      	beq.n	800ab5a <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 800abfa:	4620      	mov	r0, r4
 800abfc:	4798      	blx	r3
 800abfe:	e7ac      	b.n	800ab5a <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac06:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ac08:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800ac0a:	f042 0201 	orr.w	r2, r2, #1
 800ac0e:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800ac10:	2201      	movs	r2, #1
 800ac12:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ac14:	2304      	movs	r3, #4
 800ac16:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800ac20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d095      	beq.n	800ab52 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 800ac26:	4798      	blx	r3
 800ac28:	e793      	b.n	800ab52 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800ac2a:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800ac2c:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ac2e:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800ac30:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ac38:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800ac3a:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800ac3c:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ac3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(hdma2d);
 800ac40:	f884 5060 	strb.w	r5, [r4, #96]	@ 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ac44:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ac46:	f884 1061 	strb.w	r1, [r4, #97]	@ 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800ac4a:	f7ff ff77 	bl	800ab3c <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ac50:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800ac52:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800ac5c:	2204      	movs	r2, #4
 800ac5e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800ac60:	f7ff ff6a 	bl	800ab38 <HAL_DMA2D_LineEventCallback>
 800ac64:	e781      	b.n	800ab6a <HAL_DMA2D_IRQHandler+0x2a>
 800ac66:	bf00      	nop

0800ac68 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800ac68:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 800ac6c:	2a01      	cmp	r2, #1
 800ac6e:	d05f      	beq.n	800ad30 <HAL_DMA2D_ConfigLayer+0xc8>
 800ac70:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac72:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ac76:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac78:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800ac7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800ac80:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800ac82:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ac84:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 800ac88:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ac8c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac8e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800ac90:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ac92:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800ac94:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ac9a:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ac9e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800aca0:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800aca2:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800aca6:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800acaa:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800acac:	d923      	bls.n	800acf6 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800acae:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800acb2:	b971      	cbnz	r1, 800acd2 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800acb4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800acb6:	491f      	ldr	r1, [pc, #124]	@ (800ad34 <HAL_DMA2D_ConfigLayer+0xcc>)
 800acb8:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800acba:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800acbc:	4311      	orrs	r1, r2
 800acbe:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800acc0:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 800acc2:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800acc4:	2101      	movs	r1, #1
  return HAL_OK;
 800acc6:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800acc8:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 800accc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 800acd0:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800acd2:	2d0b      	cmp	r5, #11
 800acd4:	d12a      	bne.n	800ad2c <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800acd6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800acd8:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800acdc:	4816      	ldr	r0, [pc, #88]	@ (800ad38 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800acde:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ace2:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800ace4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ace8:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800acea:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800acee:	430a      	orrs	r2, r1
 800acf0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800acf2:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800acf4:	e7e5      	b.n	800acc2 <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800acf6:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 800acfa:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800acfc:	b959      	cbnz	r1, 800ad16 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800acfe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ad00:	490c      	ldr	r1, [pc, #48]	@ (800ad34 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ad02:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ad04:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800ad06:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ad08:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800ad0a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ad0e:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ad10:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800ad12:	62a0      	str	r0, [r4, #40]	@ 0x28
 800ad14:	e7d5      	b.n	800acc2 <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ad16:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800ad18:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ad1c:	4905      	ldr	r1, [pc, #20]	@ (800ad34 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800ad1e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ad20:	4029      	ands	r1, r5
 800ad22:	4311      	orrs	r1, r2
 800ad24:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800ad26:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800ad28:	6226      	str	r6, [r4, #32]
 800ad2a:	e7ca      	b.n	800acc2 <HAL_DMA2D_ConfigLayer+0x5a>
 800ad2c:	4801      	ldr	r0, [pc, #4]	@ (800ad34 <HAL_DMA2D_ConfigLayer+0xcc>)
 800ad2e:	e7d6      	b.n	800acde <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 800ad30:	2002      	movs	r0, #2
}
 800ad32:	4770      	bx	lr
 800ad34:	00ccfff0 	.word	0x00ccfff0
 800ad38:	00c0fff0 	.word	0x00c0fff0

0800ad3c <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop

0800ad40 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800ad40:	2800      	cmp	r0, #0
 800ad42:	f000 80b2 	beq.w	800aeaa <HAL_DSI_Init+0x16a>
{
 800ad46:	b570      	push	{r4, r5, r6, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800ad48:	7c43      	ldrb	r3, [r0, #17]
{
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	460d      	mov	r5, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 80a7 	beq.w	800aea4 <HAL_DSI_Init+0x164>
  __HAL_DSI_REG_ENABLE(hdsi);
 800ad56:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800ad58:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800ad5a:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800ad5c:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800ad5e:	9200      	str	r2, [sp, #0]
 800ad60:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800ad64:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800ad68:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800ad6c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800ad70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800ad78:	f7fd ff80 	bl	8008c7c <HAL_GetTick>
 800ad7c:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800ad7e:	e006      	b.n	800ad8e <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ad80:	f7fd ff7c 	bl	8008c7c <HAL_GetTick>
 800ad84:	1b80      	subs	r0, r0, r6
 800ad86:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800ad8a:	f200 8088 	bhi.w	800ae9e <HAL_DSI_Init+0x15e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800ad94:	04d1      	lsls	r1, r2, #19
 800ad96:	d5f3      	bpl.n	800ad80 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800ad98:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800ad9c:	4a44      	ldr	r2, [pc, #272]	@ (800aeb0 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800ad9e:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800ada0:	400a      	ands	r2, r1
 800ada2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800ada6:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800ada8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800adac:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800adae:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800adb2:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800adb4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  HAL_Delay(1);
 800adb8:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800adba:	430a      	orrs	r2, r1
  __HAL_DSI_PLL_ENABLE(hdsi);
 800adbc:	2100      	movs	r1, #0
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800adbe:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800adc2:	9101      	str	r1, [sp, #4]
 800adc4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800adc8:	4302      	orrs	r2, r0
 800adca:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800adce:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800add2:	4003      	ands	r3, r0
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800add8:	f7fd ff56 	bl	8008c88 <HAL_Delay>
  tickstart = HAL_GetTick();
 800addc:	f7fd ff4e 	bl	8008c7c <HAL_GetTick>
 800ade0:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800ade2:	e005      	b.n	800adf0 <HAL_DSI_Init+0xb0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ade4:	f7fd ff4a 	bl	8008c7c <HAL_GetTick>
 800ade8:	1b80      	subs	r0, r0, r6
 800adea:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800adee:	d856      	bhi.n	800ae9e <HAL_DSI_Init+0x15e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800adf6:	05d2      	lsls	r2, r2, #23
 800adf8:	d5f4      	bpl.n	800ade4 <HAL_DSI_Init+0xa4>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800adfa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800adfe:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800ae00:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ae04:	68a0      	ldr	r0, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800ae06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800ae0a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ae0e:	f022 0203 	bic.w	r2, r2, #3
 800ae12:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ae16:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ae1a:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ae1c:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ae1e:	f042 0201 	orr.w	r2, r2, #1
 800ae22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800ae26:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ae2a:	f022 0203 	bic.w	r2, r2, #3
 800ae2e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ae32:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ae36:	430a      	orrs	r2, r1
 800ae38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800ae3c:	689a      	ldr	r2, [r3, #8]
 800ae3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800ae42:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ae44:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ae46:	6899      	ldr	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ae48:	2a01      	cmp	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ae4a:	ea41 0100 	orr.w	r1, r1, r0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ae4e:	6828      	ldr	r0, [r5, #0]
 800ae50:	bf38      	it	cc
 800ae52:	2201      	movcc	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ae54:	6099      	str	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ae56:	68a9      	ldr	r1, [r5, #8]
 800ae58:	4d16      	ldr	r5, [pc, #88]	@ (800aeb4 <HAL_DSI_Init+0x174>)
 800ae5a:	f001 0103 	and.w	r1, r1, #3
 800ae5e:	fb05 f202 	mul.w	r2, r5, r2
 800ae62:	408a      	lsls	r2, r1
 800ae64:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800ae68:	fb01 f000 	mul.w	r0, r1, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ae6c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ae70:	fbb2 f2f0 	udiv	r2, r2, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ae74:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800ae78:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800ae7c:	2100      	movs	r1, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ae7e:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 800ae82:	4302      	orrs	r2, r0
  return HAL_OK;
 800ae84:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ae86:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->State = HAL_DSI_STATE_READY;
 800ae8a:	2201      	movs	r2, #1
  hdsi->Instance->IER[0U] = 0U;
 800ae8c:	f8c3 10c4 	str.w	r1, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800ae90:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800ae94:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800ae96:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800ae98:	7462      	strb	r2, [r4, #17]
}
 800ae9a:	b002      	add	sp, #8
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800ae9e:	2003      	movs	r0, #3
}
 800aea0:	b002      	add	sp, #8
 800aea2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 800aea4:	f7ff ff4a 	bl	800ad3c <HAL_DSI_MspInit>
 800aea8:	e755      	b.n	800ad56 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800aeaa:	2001      	movs	r0, #1
}
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	fffc8603 	.word	0xfffc8603
 800aeb4:	003d0900 	.word	0x003d0900

0800aeb8 <HAL_DSI_TearingEffectCallback>:
  * @brief  Tearing Effect DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop

0800aebc <HAL_DSI_EndOfRefreshCallback>:
  * @brief  End of Refresh DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop

0800aec0 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop

0800aec4 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800aec4:	6803      	ldr	r3, [r0, #0]
 800aec6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800aeca:	07d1      	lsls	r1, r2, #31
{
 800aecc:	b510      	push	{r4, lr}
 800aece:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800aed0:	d503      	bpl.n	800aeda <HAL_DSI_IRQHandler+0x16>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800aed2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800aed6:	07d2      	lsls	r2, r2, #31
 800aed8:	d462      	bmi.n	800afa0 <HAL_DSI_IRQHandler+0xdc>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800aeda:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800aede:	0791      	lsls	r1, r2, #30
 800aee0:	d503      	bpl.n	800aeea <HAL_DSI_IRQHandler+0x26>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800aee2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800aee6:	0792      	lsls	r2, r2, #30
 800aee8:	d44f      	bmi.n	800af8a <HAL_DSI_IRQHandler+0xc6>
  if (hdsi->ErrorMsk != 0U)
 800aeea:	69a3      	ldr	r3, [r4, #24]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d04b      	beq.n	800af88 <HAL_DSI_IRQHandler+0xc4>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800aef0:	6821      	ldr	r1, [r4, #0]
 800aef2:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800aef6:	f8d1 00c4 	ldr.w	r0, [r1, #196]	@ 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800aefa:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800aefe:	4002      	ands	r2, r0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800af00:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800af04:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800af06:	b291      	uxth	r1, r2
 800af08:	b119      	cbz	r1, 800af12 <HAL_DSI_IRQHandler+0x4e>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800af0a:	6961      	ldr	r1, [r4, #20]
 800af0c:	f041 0101 	orr.w	r1, r1, #1
 800af10:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800af12:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800af16:	d003      	beq.n	800af20 <HAL_DSI_IRQHandler+0x5c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800af18:	6962      	ldr	r2, [r4, #20]
 800af1a:	f042 0202 	orr.w	r2, r2, #2
 800af1e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800af20:	07d8      	lsls	r0, r3, #31
 800af22:	d503      	bpl.n	800af2c <HAL_DSI_IRQHandler+0x68>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800af24:	6962      	ldr	r2, [r4, #20]
 800af26:	f042 0204 	orr.w	r2, r2, #4
 800af2a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800af2c:	0799      	lsls	r1, r3, #30
 800af2e:	d503      	bpl.n	800af38 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800af30:	6962      	ldr	r2, [r4, #20]
 800af32:	f042 0208 	orr.w	r2, r2, #8
 800af36:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800af38:	f013 0f0c 	tst.w	r3, #12
 800af3c:	d003      	beq.n	800af46 <HAL_DSI_IRQHandler+0x82>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800af3e:	6962      	ldr	r2, [r4, #20]
 800af40:	f042 0210 	orr.w	r2, r2, #16
 800af44:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800af46:	06da      	lsls	r2, r3, #27
 800af48:	d503      	bpl.n	800af52 <HAL_DSI_IRQHandler+0x8e>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800af4a:	6962      	ldr	r2, [r4, #20]
 800af4c:	f042 0220 	orr.w	r2, r2, #32
 800af50:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800af52:	0698      	lsls	r0, r3, #26
 800af54:	d503      	bpl.n	800af5e <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800af56:	6962      	ldr	r2, [r4, #20]
 800af58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af5c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800af5e:	0659      	lsls	r1, r3, #25
 800af60:	d503      	bpl.n	800af6a <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800af62:	6962      	ldr	r2, [r4, #20]
 800af64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800af68:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800af6a:	061a      	lsls	r2, r3, #24
 800af6c:	d503      	bpl.n	800af76 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800af6e:	6962      	ldr	r2, [r4, #20]
 800af70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af74:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800af76:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800af7a:	d003      	beq.n	800af84 <HAL_DSI_IRQHandler+0xc0>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800af7c:	6963      	ldr	r3, [r4, #20]
 800af7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800af82:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800af84:	6963      	ldr	r3, [r4, #20]
 800af86:	b93b      	cbnz	r3, 800af98 <HAL_DSI_IRQHandler+0xd4>
}
 800af88:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800af8a:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800af8c:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800af8e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800af92:	f7ff ff93 	bl	800aebc <HAL_DSI_EndOfRefreshCallback>
 800af96:	e7a8      	b.n	800aeea <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 800af98:	4620      	mov	r0, r4
 800af9a:	f7ff ff91 	bl	800aec0 <HAL_DSI_ErrorCallback>
}
 800af9e:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800afa0:	2201      	movs	r2, #1
 800afa2:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800afa6:	f7ff ff87 	bl	800aeb8 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	e795      	b.n	800aeda <HAL_DSI_IRQHandler+0x16>
 800afae:	bf00      	nop

0800afb0 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800afb0:	7c03      	ldrb	r3, [r0, #16]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	f000 80f8 	beq.w	800b1a8 <HAL_DSI_ConfigVideoMode+0x1f8>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800afb8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800afba:	2201      	movs	r2, #1
 800afbc:	4684      	mov	ip, r0
{
 800afbe:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 800afc0:	7402      	strb	r2, [r0, #16]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800afc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 800afc4:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800afc6:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800afca:	68cc      	ldr	r4, [r1, #12]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800afcc:	694d      	ldr	r5, [r1, #20]
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800afce:	2803      	cmp	r0, #3
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800afd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800afd2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800afd6:	f022 0201 	bic.w	r2, r2, #1
 800afda:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800afde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afe0:	f022 0203 	bic.w	r2, r2, #3
 800afe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800afe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afe8:	ea42 0204 	orr.w	r2, r2, r4
 800afec:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800afee:	4a6f      	ldr	r2, [pc, #444]	@ (800b1ac <HAL_DSI_ConfigVideoMode+0x1fc>)
 800aff0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800aff2:	ea02 0204 	and.w	r2, r2, r4
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800aff6:	690c      	ldr	r4, [r1, #16]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800aff8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800affa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800affc:	ea42 0204 	orr.w	r2, r2, r4
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800b000:	4c6b      	ldr	r4, [pc, #428]	@ (800b1b0 <HAL_DSI_ConfigVideoMode+0x200>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800b002:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800b004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b006:	ea02 0204 	and.w	r2, r2, r4
 800b00a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800b00c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b00e:	ea42 0205 	orr.w	r2, r2, r5
 800b012:	641a      	str	r2, [r3, #64]	@ 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800b014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b016:	ea02 0204 	and.w	r2, r2, r4
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800b01a:	698c      	ldr	r4, [r1, #24]
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800b01c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800b01e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b020:	ea42 0204 	orr.w	r2, r2, r4
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800b024:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800b026:	645a      	str	r2, [r3, #68]	@ 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800b028:	68da      	ldr	r2, [r3, #12]
 800b02a:	f022 0203 	bic.w	r2, r2, #3
 800b02e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800b030:	68da      	ldr	r2, [r3, #12]
 800b032:	ea42 0204 	orr.w	r2, r2, r4
 800b036:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b038:	695a      	ldr	r2, [r3, #20]
 800b03a:	f022 0207 	bic.w	r2, r2, #7
 800b03e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800b040:	695c      	ldr	r4, [r3, #20]
 800b042:	e9d1 5208 	ldrd	r5, r2, [r1, #32]
 800b046:	ea42 0205 	orr.w	r2, r2, r5
 800b04a:	69cd      	ldr	r5, [r1, #28]
 800b04c:	ea42 0205 	orr.w	r2, r2, r5
 800b050:	ea42 0204 	orr.w	r2, r2, r4
 800b054:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	f022 020f 	bic.w	r2, r2, #15
 800b05c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800b05e:	691a      	ldr	r2, [r3, #16]
 800b060:	ea42 0200 	orr.w	r2, r2, r0
 800b064:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800b066:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b06a:	f022 020e 	bic.w	r2, r2, #14
 800b06e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800b072:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b076:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800b07a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800b07e:	d107      	bne.n	800b090 <HAL_DSI_ConfigVideoMode+0xe0>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800b080:	691a      	ldr	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800b082:	6888      	ldr	r0, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800b084:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b088:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800b08a:	691a      	ldr	r2, [r3, #16]
 800b08c:	4302      	orrs	r2, r0
 800b08e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800b090:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b092:	4848      	ldr	r0, [pc, #288]	@ (800b1b4 <HAL_DSI_ConfigVideoMode+0x204>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800b094:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800b096:	4002      	ands	r2, r0
 800b098:	649a      	str	r2, [r3, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800b09a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b09c:	4322      	orrs	r2, r4

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800b09e:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800b0a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800b0a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0a4:	4002      	ands	r2, r0
 800b0a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800b0a8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800b0aa:	4a43      	ldr	r2, [pc, #268]	@ (800b1b8 <HAL_DSI_ConfigVideoMode+0x208>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800b0ac:	4320      	orrs	r0, r4
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800b0ae:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800b0b0:	64d8      	str	r0, [r3, #76]	@ 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800b0b2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b0b4:	4002      	ands	r2, r0
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800b0b6:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800b0b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800b0ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0bc:	4302      	orrs	r2, r0
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800b0be:	483f      	ldr	r0, [pc, #252]	@ (800b1bc <HAL_DSI_ConfigVideoMode+0x20c>)
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800b0c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800b0c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b0c4:	4002      	ands	r2, r0
 800b0c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800b0c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b0ca:	4322      	orrs	r2, r4

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800b0cc:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800b0ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800b0d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b0d2:	4002      	ands	r2, r0
 800b0d4:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800b0d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b0d8:	4322      	orrs	r2, r4

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800b0da:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800b0dc:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800b0de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b0e0:	4002      	ands	r2, r0
 800b0e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800b0e4:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800b0e6:	4a31      	ldr	r2, [pc, #196]	@ (800b1ac <HAL_DSI_ConfigVideoMode+0x1fc>)
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800b0e8:	4320      	orrs	r0, r4
 800b0ea:	65d8      	str	r0, [r3, #92]	@ 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800b0ec:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800b0ee:	4002      	ands	r2, r0
 800b0f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800b0f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b0f4:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 800b0f6:	4302      	orrs	r2, r0

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800b0f8:	6c48      	ldr	r0, [r1, #68]	@ 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800b0fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800b0fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b102:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800b104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b106:	4302      	orrs	r2, r0

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800b108:	6c88      	ldr	r0, [r1, #72]	@ 0x48
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800b10a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800b10c:	699a      	ldr	r2, [r3, #24]
 800b10e:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 800b112:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800b114:	699a      	ldr	r2, [r3, #24]
 800b116:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800b11a:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800b11c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800b11e:	699a      	ldr	r2, [r3, #24]
 800b120:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b124:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800b126:	699a      	ldr	r2, [r3, #24]
 800b128:	4302      	orrs	r2, r0

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800b12a:	6d08      	ldr	r0, [r1, #80]	@ 0x50
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800b12c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800b12e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b130:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b134:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800b136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b138:	4302      	orrs	r2, r0

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800b13a:	6d48      	ldr	r0, [r1, #84]	@ 0x54
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800b13c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800b13e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b140:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b144:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800b146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b148:	4302      	orrs	r2, r0

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800b14a:	6d88      	ldr	r0, [r1, #88]	@ 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800b14c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800b14e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b154:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800b156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b158:	4302      	orrs	r2, r0
 800b15a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800b15c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800b15e:	6dc8      	ldr	r0, [r1, #92]	@ 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800b160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b164:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800b166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b168:	4302      	orrs	r2, r0

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800b16a:	6e08      	ldr	r0, [r1, #96]	@ 0x60
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800b16c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800b16e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b170:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b174:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800b176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b178:	4302      	orrs	r2, r0
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800b17a:	e9d1 4019 	ldrd	r4, r0, [r1, #100]	@ 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800b17e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b180:	2100      	movs	r1, #0
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800b182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b188:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800b18a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b18c:	4322      	orrs	r2, r4
 800b18e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800b190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b192:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b196:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800b198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b19a:	4302      	orrs	r2, r0

  return HAL_OK;
 800b19c:	4608      	mov	r0, r1
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800b19e:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_UNLOCK(hdsi);
 800b1a0:	f88c 1010 	strb.w	r1, [ip, #16]
}
 800b1a4:	bc30      	pop	{r4, r5}
 800b1a6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b1a8:	2002      	movs	r0, #2
}
 800b1aa:	4770      	bx	lr
 800b1ac:	ffffc000 	.word	0xffffc000
 800b1b0:	ffffe000 	.word	0xffffe000
 800b1b4:	fffff000 	.word	0xfffff000
 800b1b8:	ffff8000 	.word	0xffff8000
 800b1bc:	fffffc00 	.word	0xfffffc00

0800b1c0 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b1c0:	7c02      	ldrb	r2, [r0, #16]
{
 800b1c2:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b1c4:	2a01      	cmp	r2, #1
 800b1c6:	d00d      	beq.n	800b1e4 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b1c8:	6802      	ldr	r2, [r0, #0]
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b1ca:	f04f 0c00 	mov.w	ip, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b1ce:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800b1d0:	f020 001f 	bic.w	r0, r0, #31
 800b1d4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800b1d6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800b1d8:	4301      	orrs	r1, r0

  return HAL_OK;
 800b1da:	4660      	mov	r0, ip
  hdsi->Instance->PCR |= FlowControl;
 800b1dc:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800b1de:	f883 c010 	strb.w	ip, [r3, #16]
  return HAL_OK;
 800b1e2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b1e4:	2002      	movs	r0, #2
}
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b1e8:	7c03      	ldrb	r3, [r0, #16]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d021      	beq.n	800b232 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800b1ee:	6803      	ldr	r3, [r0, #0]
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800b1f4:	4608      	mov	r0, r1
{
 800b1f6:	b410      	push	{r4}
 800b1f8:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 800b1fa:	9100      	str	r1, [sp, #0]
 800b1fc:	685c      	ldr	r4, [r3, #4]
 800b1fe:	f044 0401 	orr.w	r4, r4, #1
 800b202:	605c      	str	r4, [r3, #4]
 800b204:	685c      	ldr	r4, [r3, #4]
 800b206:	f004 0401 	and.w	r4, r4, #1
 800b20a:	9400      	str	r4, [sp, #0]
 800b20c:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b20e:	9101      	str	r1, [sp, #4]
 800b210:	f8d3 4404 	ldr.w	r4, [r3, #1028]	@ 0x404
 800b214:	f044 0408 	orr.w	r4, r4, #8
 800b218:	f8c3 4404 	str.w	r4, [r3, #1028]	@ 0x404
 800b21c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800b220:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b222:	f003 0308 	and.w	r3, r3, #8
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	9b01      	ldr	r3, [sp, #4]
}
 800b22a:	b003      	add	sp, #12
 800b22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b230:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b232:	2002      	movs	r0, #2
}
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop

0800b238 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800b238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b23c:	4699      	mov	r9, r3
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b23e:	7c03      	ldrb	r3, [r0, #16]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d022      	beq.n	800b28a <HAL_DSI_ShortWrite+0x52>
 800b244:	2301      	movs	r3, #1
 800b246:	4605      	mov	r5, r0
 800b248:	4688      	mov	r8, r1
 800b24a:	4617      	mov	r7, r2
 800b24c:	7403      	strb	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b24e:	f7fd fd15 	bl	8008c7c <HAL_GetTick>
 800b252:	4606      	mov	r6, r0
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b254:	e006      	b.n	800b264 <HAL_DSI_ShortWrite+0x2c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b256:	f7fd fd11 	bl	8008c7c <HAL_GetTick>
 800b25a:	eba0 0c06 	sub.w	ip, r0, r6
 800b25e:	f5bc 7f7a 	cmp.w	ip, #1000	@ 0x3e8
 800b262:	d810      	bhi.n	800b286 <HAL_DSI_ShortWrite+0x4e>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b264:	682c      	ldr	r4, [r5, #0]
 800b266:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b268:	07db      	lsls	r3, r3, #31
 800b26a:	d5f4      	bpl.n	800b256 <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b26c:	ea47 2309 	orr.w	r3, r7, r9, lsl #8
 800b270:	9a08      	ldr	r2, [sp, #32]
  return HAL_OK;
 800b272:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b278:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
 800b27c:	66e3      	str	r3, [r4, #108]	@ 0x6c

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b27e:	2300      	movs	r3, #0
 800b280:	742b      	strb	r3, [r5, #16]

  return status;
}
 800b282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800b286:	2003      	movs	r0, #3
 800b288:	e7f9      	b.n	800b27e <HAL_DSI_ShortWrite+0x46>
  __HAL_LOCK(hdsi);
 800b28a:	2002      	movs	r0, #2
}
 800b28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b290 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	461f      	mov	r7, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b296:	7c03      	ldrb	r3, [r0, #16]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d05c      	beq.n	800b356 <HAL_DSI_LongWrite+0xc6>
 800b29c:	2301      	movs	r3, #1
 800b29e:	4605      	mov	r5, r0
 800b2a0:	4688      	mov	r8, r1
 800b2a2:	4691      	mov	r9, r2
 800b2a4:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2a6:	f7fd fce9 	bl	8008c7c <HAL_GetTick>
 800b2aa:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b2ac:	e006      	b.n	800b2bc <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b2ae:	f7fd fce5 	bl	8008c7c <HAL_GetTick>
 800b2b2:	eba0 0c06 	sub.w	ip, r0, r6
 800b2b6:	f5bc 7f7a 	cmp.w	ip, #1000	@ 0x3e8
 800b2ba:	d848      	bhi.n	800b34e <HAL_DSI_LongWrite+0xbe>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b2bc:	682a      	ldr	r2, [r5, #0]
 800b2be:	6f54      	ldr	r4, [r2, #116]	@ 0x74
 800b2c0:	f014 0401 	ands.w	r4, r4, #1
 800b2c4:	d0f3      	beq.n	800b2ae <HAL_DSI_LongWrite+0x1e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b2c6:	2f03      	cmp	r7, #3
 800b2c8:	463b      	mov	r3, r7
 800b2ca:	bf28      	it	cs
 800b2cc:	2303      	movcs	r3, #3

  for (count = 0U; count < nbBytes; count++)
 800b2ce:	2f00      	cmp	r7, #0
 800b2d0:	d044      	beq.n	800b35c <HAL_DSI_LongWrite+0xcc>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b2d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
  for (count = 0U; count < nbBytes; count++)
 800b2d4:	2f01      	cmp	r7, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b2d6:	9808      	ldr	r0, [sp, #32]
 800b2d8:	7809      	ldrb	r1, [r1, #0]
 800b2da:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  for (count = 0U; count < nbBytes; count++)
 800b2de:	d909      	bls.n	800b2f4 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b2e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
  for (count = 0U; count < nbBytes; count++)
 800b2e2:	2f02      	cmp	r7, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b2e4:	7840      	ldrb	r0, [r0, #1]
 800b2e6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  for (count = 0U; count < nbBytes; count++)
 800b2ea:	d903      	bls.n	800b2f4 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b2ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2ee:	7880      	ldrb	r0, [r0, #2]
 800b2f0:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;
 800b2f4:	6711      	str	r1, [r2, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800b2f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2f8:	4419      	add	r1, r3
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800b2fa:	1afb      	subs	r3, r7, r3
 800b2fc:	d017      	beq.n	800b32e <HAL_DSI_LongWrite+0x9e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	461c      	mov	r4, r3
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b302:	7808      	ldrb	r0, [r1, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b304:	bf28      	it	cs
 800b306:	2404      	movcs	r4, #4
    for (count = 0U; count < nbBytes; count++)
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d90c      	bls.n	800b326 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b30c:	784e      	ldrb	r6, [r1, #1]
    for (count = 0U; count < nbBytes; count++)
 800b30e:	2b02      	cmp	r3, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b310:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    for (count = 0U; count < nbBytes; count++)
 800b314:	d907      	bls.n	800b326 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b316:	788e      	ldrb	r6, [r1, #2]
    for (count = 0U; count < nbBytes; count++)
 800b318:	2b03      	cmp	r3, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b31a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    for (count = 0U; count < nbBytes; count++)
 800b31e:	d902      	bls.n	800b326 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b320:	78ce      	ldrb	r6, [r1, #3]
 800b322:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
  while (uicounter != 0U)
 800b326:	1b1b      	subs	r3, r3, r4
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800b328:	4421      	add	r1, r4
    hdsi->Instance->GPDR = fifoword;
 800b32a:	6710      	str	r0, [r2, #112]	@ 0x70
  while (uicounter != 0U)
 800b32c:	d1e7      	bne.n	800b2fe <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800b32e:	3701      	adds	r7, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b330:	ea49 1388 	orr.w	r3, r9, r8, lsl #6
 800b334:	0239      	lsls	r1, r7, #8
 800b336:	460f      	mov	r7, r1
 800b338:	b289      	uxth	r1, r1
 800b33a:	f407 077f 	and.w	r7, r7, #16711680	@ 0xff0000
 800b33e:	430b      	orrs	r3, r1
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b340:	2100      	movs	r1, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b342:	433b      	orrs	r3, r7

  return HAL_OK;
 800b344:	4608      	mov	r0, r1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b346:	66d3      	str	r3, [r2, #108]	@ 0x6c
  __HAL_UNLOCK(hdsi);
 800b348:	7429      	strb	r1, [r5, #16]
}
 800b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800b34e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b350:	742c      	strb	r4, [r5, #16]
}
 800b352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hdsi);
 800b356:	2002      	movs	r0, #2
}
 800b358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdsi->Instance->GPDR = fifoword;
 800b35c:	9b08      	ldr	r3, [sp, #32]
 800b35e:	6713      	str	r3, [r2, #112]	@ 0x70
  while (uicounter != 0U)
 800b360:	e7e5      	b.n	800b32e <HAL_DSI_LongWrite+0x9e>
 800b362:	bf00      	nop

0800b364 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800b364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b368:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b36a:	7c03      	ldrb	r3, [r0, #16]
{
 800b36c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __HAL_LOCK(hdsi);
 800b370:	2b01      	cmp	r3, #1
 800b372:	f000 8095 	beq.w	800b4a0 <HAL_DSI_Read+0x13c>
 800b376:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800b378:	2c02      	cmp	r4, #2
 800b37a:	4605      	mov	r5, r0
 800b37c:	460f      	mov	r7, r1
 800b37e:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 800b380:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800b382:	d811      	bhi.n	800b3a8 <HAL_DSI_Read+0x44>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b384:	f1b9 0f06 	cmp.w	r9, #6
 800b388:	d02d      	beq.n	800b3e6 <HAL_DSI_Read+0x82>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800b38a:	f1b9 0f04 	cmp.w	r9, #4
 800b38e:	d073      	beq.n	800b478 <HAL_DSI_Read+0x114>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800b390:	f1b9 0f14 	cmp.w	r9, #20
 800b394:	f000 8087 	beq.w	800b4a6 <HAL_DSI_Read+0x142>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800b398:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 800b39c:	d072      	beq.n	800b484 <HAL_DSI_Read+0x120>
      __HAL_UNLOCK(hdsi);
 800b39e:	2300      	movs	r3, #0
      return HAL_ERROR;
 800b3a0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800b3a2:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800b3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 800b3a8:	f7fd fc68 	bl	8008c7c <HAL_GetTick>
 800b3ac:	4680      	mov	r8, r0
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b3ae:	e006      	b.n	800b3be <HAL_DSI_Read+0x5a>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b3b0:	f7fd fc64 	bl	8008c7c <HAL_GetTick>
 800b3b4:	eba0 0008 	sub.w	r0, r0, r8
 800b3b8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b3bc:	d8ef      	bhi.n	800b39e <HAL_DSI_Read+0x3a>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b3be:	682b      	ldr	r3, [r5, #0]
 800b3c0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800b3c2:	07d2      	lsls	r2, r2, #31
 800b3c4:	d5f4      	bpl.n	800b3b0 <HAL_DSI_Read+0x4c>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b3c6:	0222      	lsls	r2, r4, #8
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b3c8:	f1b9 0f06 	cmp.w	r9, #6
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b3cc:	ea4f 2104 	mov.w	r1, r4, lsl #8
 800b3d0:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 800b3d4:	b289      	uxth	r1, r1
 800b3d6:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800b3da:	ea42 0201 	orr.w	r2, r2, r1
 800b3de:	f042 0237 	orr.w	r2, r2, #55	@ 0x37
 800b3e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b3e4:	d1d1      	bne.n	800b38a <HAL_DSI_Read+0x26>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800b3e8:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b3ea:	021b      	lsls	r3, r3, #8
 800b3ec:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 800b3f0:	f043 0306 	orr.w	r3, r3, #6
 800b3f4:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800b3f6:	f7fd fc41 	bl	8008c7c <HAL_GetTick>
  while (((int32_t)(datasize)) > 0)
 800b3fa:	2c00      	cmp	r4, #0
  tickstart = HAL_GetTick();
 800b3fc:	4607      	mov	r7, r0
  while (((int32_t)(datasize)) > 0)
 800b3fe:	dd36      	ble.n	800b46e <HAL_DSI_Read+0x10a>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800b400:	6829      	ldr	r1, [r5, #0]
 800b402:	e00f      	b.n	800b424 <HAL_DSI_Read+0xc0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b404:	f7fd fc3a 	bl	8008c7c <HAL_GetTick>
 800b408:	1bc0      	subs	r0, r0, r7
 800b40a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b40e:	d829      	bhi.n	800b464 <HAL_DSI_Read+0x100>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800b410:	6829      	ldr	r1, [r5, #0]
 800b412:	6f4b      	ldr	r3, [r1, #116]	@ 0x74
 800b414:	065a      	lsls	r2, r3, #25
 800b416:	d403      	bmi.n	800b420 <HAL_DSI_Read+0xbc>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800b418:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
 800b41c:	069b      	lsls	r3, r3, #26
 800b41e:	d4be      	bmi.n	800b39e <HAL_DSI_Read+0x3a>
  while (((int32_t)(datasize)) > 0)
 800b420:	2c00      	cmp	r4, #0
 800b422:	dd24      	ble.n	800b46e <HAL_DSI_Read+0x10a>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800b424:	6f4b      	ldr	r3, [r1, #116]	@ 0x74
 800b426:	06d8      	lsls	r0, r3, #27
 800b428:	d4ec      	bmi.n	800b404 <HAL_DSI_Read+0xa0>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b42a:	2c04      	cmp	r4, #4
      fifoword = hdsi->Instance->GPDR;
 800b42c:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b42e:	4622      	mov	r2, r4
 800b430:	bf28      	it	cs
 800b432:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 800b434:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b436:	ea4f 2113 	mov.w	r1, r3, lsr #8
 800b43a:	7033      	strb	r3, [r6, #0]
 800b43c:	ea4f 4013 	mov.w	r0, r3, lsr #16
 800b440:	ea4f 6313 	mov.w	r3, r3, lsr #24
      for (count = 0U; count < nbbytes; count++)
 800b444:	d906      	bls.n	800b454 <HAL_DSI_Read+0xf0>
 800b446:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b448:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 800b44a:	d903      	bls.n	800b454 <HAL_DSI_Read+0xf0>
 800b44c:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b44e:	70b0      	strb	r0, [r6, #2]
 800b450:	bf88      	it	hi
 800b452:	70f3      	strbhi	r3, [r6, #3]
        datasize--;
 800b454:	1aa4      	subs	r4, r4, r2
        pdata++;
 800b456:	4416      	add	r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b458:	f7fd fc10 	bl	8008c7c <HAL_GetTick>
 800b45c:	1bc0      	subs	r0, r0, r7
 800b45e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b462:	d9d5      	bls.n	800b410 <HAL_DSI_Read+0xac>
      __HAL_UNLOCK(hdsi);
 800b464:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b466:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b468:	742b      	strb	r3, [r5, #16]
}
 800b46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 800b46e:	2300      	movs	r3, #0
  return HAL_OK;
 800b470:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 800b472:	742b      	strb	r3, [r5, #16]
}
 800b474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b478:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800b47a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b47c:	f047 0704 	orr.w	r7, r7, #4
 800b480:	66df      	str	r7, [r3, #108]	@ 0x6c
}
 800b482:	e7b8      	b.n	800b3f6 <HAL_DSI_Read+0x92>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b484:	990a      	ldr	r1, [sp, #40]	@ 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b486:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b488:	682a      	ldr	r2, [r5, #0]
 800b48a:	7849      	ldrb	r1, [r1, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b48c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b490:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b492:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b498:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800b49c:	66d3      	str	r3, [r2, #108]	@ 0x6c
}
 800b49e:	e7aa      	b.n	800b3f6 <HAL_DSI_Read+0x92>
  __HAL_LOCK(hdsi);
 800b4a0:	2002      	movs	r0, #2
}
 800b4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b4a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b4a8:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b4aa:	682a      	ldr	r2, [r5, #0]
 800b4ac:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b4ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b4b2:	f043 0314 	orr.w	r3, r3, #20
 800b4b6:	66d3      	str	r3, [r2, #108]	@ 0x6c
}
 800b4b8:	e79d      	b.n	800b3f6 <HAL_DSI_Read+0x92>
 800b4ba:	bf00      	nop

0800b4bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b4c0:	680c      	ldr	r4, [r1, #0]
{
 800b4c2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	f000 80a5 	beq.w	800b614 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 800b4ca:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b4cc:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b4d0:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b4d4:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b4d6:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800b4da:	ea1c 0a04 	ands.w	sl, ip, r4
 800b4de:	f000 8094 	beq.w	800b60a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4e2:	9900      	ldr	r1, [sp, #0]
 800b4e4:	005f      	lsls	r7, r3, #1
 800b4e6:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b4e8:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4ea:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b4ee:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4f2:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b4f6:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4f8:	f1b8 0f01 	cmp.w	r8, #1
 800b4fc:	f240 808d 	bls.w	800b61a <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b500:	2a03      	cmp	r2, #3
 800b502:	f040 80cb 	bne.w	800b69c <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b506:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800b508:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b50a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b50e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b512:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800b516:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b518:	d077      	beq.n	800b60a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b51a:	4e7f      	ldr	r6, [pc, #508]	@ (800b718 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b51c:	f003 0703 	and.w	r7, r3, #3
 800b520:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b522:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b526:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b528:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b52c:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b530:	497a      	ldr	r1, [pc, #488]	@ (800b71c <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b532:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 800b536:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 800b53a:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b53e:	4288      	cmp	r0, r1
 800b540:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b544:	f002 0202 	and.w	r2, r2, #2
 800b548:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800b54c:	9203      	str	r2, [sp, #12]
 800b54e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800b550:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b552:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b556:	d031      	beq.n	800b5bc <HAL_GPIO_Init+0x100>
 800b558:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b55c:	4288      	cmp	r0, r1
 800b55e:	f000 80b0 	beq.w	800b6c2 <HAL_GPIO_Init+0x206>
 800b562:	496f      	ldr	r1, [pc, #444]	@ (800b720 <HAL_GPIO_Init+0x264>)
 800b564:	4288      	cmp	r0, r1
 800b566:	f000 80b2 	beq.w	800b6ce <HAL_GPIO_Init+0x212>
 800b56a:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 800b724 <HAL_GPIO_Init+0x268>
 800b56e:	4560      	cmp	r0, ip
 800b570:	f000 80a1 	beq.w	800b6b6 <HAL_GPIO_Init+0x1fa>
 800b574:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 800b728 <HAL_GPIO_Init+0x26c>
 800b578:	4560      	cmp	r0, ip
 800b57a:	f000 80b4 	beq.w	800b6e6 <HAL_GPIO_Init+0x22a>
 800b57e:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800b72c <HAL_GPIO_Init+0x270>
 800b582:	4560      	cmp	r0, ip
 800b584:	f000 80b5 	beq.w	800b6f2 <HAL_GPIO_Init+0x236>
 800b588:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 800b730 <HAL_GPIO_Init+0x274>
 800b58c:	4560      	cmp	r0, ip
 800b58e:	f000 80a4 	beq.w	800b6da <HAL_GPIO_Init+0x21e>
 800b592:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 800b734 <HAL_GPIO_Init+0x278>
 800b596:	4560      	cmp	r0, ip
 800b598:	f000 80b1 	beq.w	800b6fe <HAL_GPIO_Init+0x242>
 800b59c:	f8df c198 	ldr.w	ip, [pc, #408]	@ 800b738 <HAL_GPIO_Init+0x27c>
 800b5a0:	4560      	cmp	r0, ip
 800b5a2:	f000 80b2 	beq.w	800b70a <HAL_GPIO_Init+0x24e>
 800b5a6:	f8df c194 	ldr.w	ip, [pc, #404]	@ 800b73c <HAL_GPIO_Init+0x280>
 800b5aa:	4560      	cmp	r0, ip
 800b5ac:	bf0c      	ite	eq
 800b5ae:	f04f 0c09 	moveq.w	ip, #9
 800b5b2:	f04f 0c0a 	movne.w	ip, #10
 800b5b6:	fa0c f707 	lsl.w	r7, ip, r7
 800b5ba:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b5bc:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b5be:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800b5c0:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 800b5c4:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 800b5c8:	bf4c      	ite	mi
 800b5ca:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 800b5ce:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b5d0:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 800b5d2:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 800b5d6:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800b5da:	bf54      	ite	pl
 800b5dc:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800b5de:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b5e2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800b5e4:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800b5e8:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800b5ec:	bf54      	ite	pl
 800b5ee:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800b5f0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b5f4:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800b5f6:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800b5fa:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800b5fe:	bf54      	ite	pl
 800b600:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800b602:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b606:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 800b60a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b60c:	fa34 f203 	lsrs.w	r2, r4, r3
 800b610:	f47f af61 	bne.w	800b4d6 <HAL_GPIO_Init+0x1a>
  }
}
 800b614:	b005      	add	sp, #20
 800b616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b61a:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b61c:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 800b61e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b622:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b624:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b628:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b62c:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b62e:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b632:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 800b634:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b638:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800b63c:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b640:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b644:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b648:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 800b64c:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b650:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 800b654:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b658:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b65c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800b660:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b664:	f47f af4f 	bne.w	800b506 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b668:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b66c:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 800b66e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b672:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b676:	6909      	ldr	r1, [r1, #16]
 800b678:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800b67c:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 800b680:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b684:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b686:	210f      	movs	r1, #15
 800b688:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b68c:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b68e:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b692:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 800b696:	f8c8 c020 	str.w	ip, [r8, #32]
 800b69a:	e734      	b.n	800b506 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b69c:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 800b69e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b6a2:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b6a4:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b6a8:	fa01 fc07 	lsl.w	ip, r1, r7
 800b6ac:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800b6b0:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b6b4:	e727      	b.n	800b506 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b6b6:	f04f 0c03 	mov.w	ip, #3
 800b6ba:	fa0c f707 	lsl.w	r7, ip, r7
 800b6be:	433a      	orrs	r2, r7
 800b6c0:	e77c      	b.n	800b5bc <HAL_GPIO_Init+0x100>
 800b6c2:	f04f 0c01 	mov.w	ip, #1
 800b6c6:	fa0c f707 	lsl.w	r7, ip, r7
 800b6ca:	433a      	orrs	r2, r7
 800b6cc:	e776      	b.n	800b5bc <HAL_GPIO_Init+0x100>
 800b6ce:	f04f 0c02 	mov.w	ip, #2
 800b6d2:	fa0c f707 	lsl.w	r7, ip, r7
 800b6d6:	433a      	orrs	r2, r7
 800b6d8:	e770      	b.n	800b5bc <HAL_GPIO_Init+0x100>
 800b6da:	f04f 0c06 	mov.w	ip, #6
 800b6de:	fa0c f707 	lsl.w	r7, ip, r7
 800b6e2:	433a      	orrs	r2, r7
 800b6e4:	e76a      	b.n	800b5bc <HAL_GPIO_Init+0x100>
 800b6e6:	f04f 0c04 	mov.w	ip, #4
 800b6ea:	fa0c f707 	lsl.w	r7, ip, r7
 800b6ee:	433a      	orrs	r2, r7
 800b6f0:	e764      	b.n	800b5bc <HAL_GPIO_Init+0x100>
 800b6f2:	f04f 0c05 	mov.w	ip, #5
 800b6f6:	fa0c f707 	lsl.w	r7, ip, r7
 800b6fa:	433a      	orrs	r2, r7
 800b6fc:	e75e      	b.n	800b5bc <HAL_GPIO_Init+0x100>
 800b6fe:	f04f 0c07 	mov.w	ip, #7
 800b702:	fa0c f707 	lsl.w	r7, ip, r7
 800b706:	433a      	orrs	r2, r7
 800b708:	e758      	b.n	800b5bc <HAL_GPIO_Init+0x100>
 800b70a:	f04f 0c08 	mov.w	ip, #8
 800b70e:	fa0c f707 	lsl.w	r7, ip, r7
 800b712:	433a      	orrs	r2, r7
 800b714:	e752      	b.n	800b5bc <HAL_GPIO_Init+0x100>
 800b716:	bf00      	nop
 800b718:	58024400 	.word	0x58024400
 800b71c:	58020000 	.word	0x58020000
 800b720:	58020800 	.word	0x58020800
 800b724:	58020c00 	.word	0x58020c00
 800b728:	58021000 	.word	0x58021000
 800b72c:	58021400 	.word	0x58021400
 800b730:	58021800 	.word	0x58021800
 800b734:	58021c00 	.word	0x58021c00
 800b738:	58022000 	.word	0x58022000
 800b73c:	58022400 	.word	0x58022400

0800b740 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800b740:	2900      	cmp	r1, #0
 800b742:	f000 80ac 	beq.w	800b89e <HAL_GPIO_DeInit+0x15e>
  uint32_t position = 0x00U;
 800b746:	2300      	movs	r3, #0
{
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b74c:	2601      	movs	r6, #1
{
 800b74e:	b083      	sub	sp, #12
 800b750:	f8df a168 	ldr.w	sl, [pc, #360]	@ 800b8bc <HAL_GPIO_DeInit+0x17c>
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b754:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b758:	f04f 0903 	mov.w	r9, #3
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b75c:	fa06 f203 	lsl.w	r2, r6, r3
    if (iocurrent != 0x00U)
 800b760:	ea12 0c01 	ands.w	ip, r2, r1
 800b764:	d073      	beq.n	800b84e <HAL_GPIO_DeInit+0x10e>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b766:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b76a:	f003 0403 	and.w	r4, r3, #3
 800b76e:	4455      	add	r5, sl
 800b770:	00a4      	lsls	r4, r4, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b772:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b774:	fa08 fe04 	lsl.w	lr, r8, r4
 800b778:	ea0e 0707 	and.w	r7, lr, r7
 800b77c:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b77e:	4f4b      	ldr	r7, [pc, #300]	@ (800b8ac <HAL_GPIO_DeInit+0x16c>)
 800b780:	42b8      	cmp	r0, r7
 800b782:	d027      	beq.n	800b7d4 <HAL_GPIO_DeInit+0x94>
 800b784:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800b788:	42b8      	cmp	r0, r7
 800b78a:	d067      	beq.n	800b85c <HAL_GPIO_DeInit+0x11c>
 800b78c:	4f48      	ldr	r7, [pc, #288]	@ (800b8b0 <HAL_GPIO_DeInit+0x170>)
 800b78e:	42b8      	cmp	r0, r7
 800b790:	d067      	beq.n	800b862 <HAL_GPIO_DeInit+0x122>
 800b792:	4f48      	ldr	r7, [pc, #288]	@ (800b8b4 <HAL_GPIO_DeInit+0x174>)
 800b794:	42b8      	cmp	r0, r7
 800b796:	d06e      	beq.n	800b876 <HAL_GPIO_DeInit+0x136>
 800b798:	4f47      	ldr	r7, [pc, #284]	@ (800b8b8 <HAL_GPIO_DeInit+0x178>)
 800b79a:	42b8      	cmp	r0, r7
 800b79c:	d070      	beq.n	800b880 <HAL_GPIO_DeInit+0x140>
 800b79e:	f8df b120 	ldr.w	fp, [pc, #288]	@ 800b8c0 <HAL_GPIO_DeInit+0x180>
 800b7a2:	4558      	cmp	r0, fp
 800b7a4:	d062      	beq.n	800b86c <HAL_GPIO_DeInit+0x12c>
 800b7a6:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 800b8c4 <HAL_GPIO_DeInit+0x184>
 800b7aa:	4558      	cmp	r0, fp
 800b7ac:	d072      	beq.n	800b894 <HAL_GPIO_DeInit+0x154>
 800b7ae:	f8df b118 	ldr.w	fp, [pc, #280]	@ 800b8c8 <HAL_GPIO_DeInit+0x188>
 800b7b2:	4558      	cmp	r0, fp
 800b7b4:	d074      	beq.n	800b8a0 <HAL_GPIO_DeInit+0x160>
 800b7b6:	f8df b114 	ldr.w	fp, [pc, #276]	@ 800b8cc <HAL_GPIO_DeInit+0x18c>
 800b7ba:	4558      	cmp	r0, fp
 800b7bc:	d065      	beq.n	800b88a <HAL_GPIO_DeInit+0x14a>
 800b7be:	f8df b110 	ldr.w	fp, [pc, #272]	@ 800b8d0 <HAL_GPIO_DeInit+0x190>
 800b7c2:	4558      	cmp	r0, fp
 800b7c4:	bf14      	ite	ne
 800b7c6:	f04f 0b0a 	movne.w	fp, #10
 800b7ca:	f04f 0b09 	moveq.w	fp, #9
 800b7ce:	fa0b f404 	lsl.w	r4, fp, r4
 800b7d2:	e000      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b7d4:	2400      	movs	r4, #0
 800b7d6:	9f01      	ldr	r7, [sp, #4]
 800b7d8:	42a7      	cmp	r7, r4
 800b7da:	d119      	bne.n	800b810 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b7dc:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 800b7e0:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b7e4:	ea27 070c 	bic.w	r7, r7, ip
 800b7e8:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b7ec:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 800b7f0:	ea27 070c 	bic.w	r7, r7, ip
 800b7f4:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800b7f8:	6867      	ldr	r7, [r4, #4]
 800b7fa:	ea27 070c 	bic.w	r7, r7, ip
 800b7fe:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b800:	6827      	ldr	r7, [r4, #0]
 800b802:	ea27 070c 	bic.w	r7, r7, ip
 800b806:	6027      	str	r7, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b808:	68ac      	ldr	r4, [r5, #8]
 800b80a:	ea24 040e 	bic.w	r4, r4, lr
 800b80e:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b810:	005d      	lsls	r5, r3, #1
 800b812:	6804      	ldr	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b814:	08df      	lsrs	r7, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b816:	fa09 f505 	lsl.w	r5, r9, r5
 800b81a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800b81e:	432c      	orrs	r4, r5
 800b820:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b822:	f003 0407 	and.w	r4, r3, #7
 800b826:	f8d7 c020 	ldr.w	ip, [r7, #32]
 800b82a:	00a4      	lsls	r4, r4, #2
 800b82c:	fa08 f404 	lsl.w	r4, r8, r4
 800b830:	ea2c 0404 	bic.w	r4, ip, r4
 800b834:	623c      	str	r4, [r7, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b836:	68c4      	ldr	r4, [r0, #12]
 800b838:	ea24 0405 	bic.w	r4, r4, r5
 800b83c:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b83e:	6844      	ldr	r4, [r0, #4]
 800b840:	ea24 0202 	bic.w	r2, r4, r2
 800b844:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b846:	6882      	ldr	r2, [r0, #8]
 800b848:	ea22 0205 	bic.w	r2, r2, r5
 800b84c:	6082      	str	r2, [r0, #8]
    }

    position++;
 800b84e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800b850:	fa31 f203 	lsrs.w	r2, r1, r3
 800b854:	d182      	bne.n	800b75c <HAL_GPIO_DeInit+0x1c>
  }
}
 800b856:	b003      	add	sp, #12
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b85c:	fa06 f404 	lsl.w	r4, r6, r4
 800b860:	e7b9      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b862:	f04f 0b02 	mov.w	fp, #2
 800b866:	fa0b f404 	lsl.w	r4, fp, r4
 800b86a:	e7b4      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b86c:	f04f 0b05 	mov.w	fp, #5
 800b870:	fa0b f404 	lsl.w	r4, fp, r4
 800b874:	e7af      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b876:	f04f 0b03 	mov.w	fp, #3
 800b87a:	fa0b f404 	lsl.w	r4, fp, r4
 800b87e:	e7aa      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b880:	f04f 0b04 	mov.w	fp, #4
 800b884:	fa0b f404 	lsl.w	r4, fp, r4
 800b888:	e7a5      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b88a:	f04f 0b08 	mov.w	fp, #8
 800b88e:	fa0b f404 	lsl.w	r4, fp, r4
 800b892:	e7a0      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b894:	f04f 0b06 	mov.w	fp, #6
 800b898:	fa0b f404 	lsl.w	r4, fp, r4
 800b89c:	e79b      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b89e:	4770      	bx	lr
 800b8a0:	f04f 0b07 	mov.w	fp, #7
 800b8a4:	fa0b f404 	lsl.w	r4, fp, r4
 800b8a8:	e795      	b.n	800b7d6 <HAL_GPIO_DeInit+0x96>
 800b8aa:	bf00      	nop
 800b8ac:	58020000 	.word	0x58020000
 800b8b0:	58020800 	.word	0x58020800
 800b8b4:	58020c00 	.word	0x58020c00
 800b8b8:	58021000 	.word	0x58021000
 800b8bc:	58000400 	.word	0x58000400
 800b8c0:	58021400 	.word	0x58021400
 800b8c4:	58021800 	.word	0x58021800
 800b8c8:	58021c00 	.word	0x58021c00
 800b8cc:	58022000 	.word	0x58022000
 800b8d0:	58022400 	.word	0x58022400

0800b8d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b8d4:	b902      	cbnz	r2, 800b8d8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b8d6:	0409      	lsls	r1, r1, #16
 800b8d8:	6181      	str	r1, [r0, #24]
  }
}
 800b8da:	4770      	bx	lr

0800b8dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b8e0:	6803      	ldr	r3, [r0, #0]
{
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	4692      	mov	sl, r2
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8e8:	2710      	movs	r7, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b8ea:	699c      	ldr	r4, [r3, #24]
 800b8ec:	f014 0402 	ands.w	r4, r4, #2
 800b8f0:	f040 80a5 	bne.w	800ba3e <I2C_WaitOnTXISFlagUntilTimeout+0x162>
  uint32_t itflag   = hi2c->Instance->ISR;
 800b8f4:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b8f6:	f012 0c10 	ands.w	ip, r2, #16
 800b8fa:	d078      	beq.n	800b9ee <I2C_WaitOnTXISFlagUntilTimeout+0x112>
  uint32_t tickstart = Tickstart;
 800b8fc:	46d1      	mov	r9, sl
  HAL_StatusTypeDef status = HAL_OK;
 800b8fe:	4626      	mov	r6, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b900:	61df      	str	r7, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b902:	1c68      	adds	r0, r5, #1
 800b904:	d001      	beq.n	800b90a <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
 800b906:	e041      	b.n	800b98c <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
 800b908:	b92e      	cbnz	r6, 800b916 <I2C_WaitOnTXISFlagUntilTimeout+0x3a>
 800b90a:	699a      	ldr	r2, [r3, #24]
 800b90c:	0691      	lsls	r1, r2, #26
 800b90e:	d5fb      	bpl.n	800b908 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b910:	b90e      	cbnz	r6, 800b916 <I2C_WaitOnTXISFlagUntilTimeout+0x3a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b912:	2220      	movs	r2, #32
 800b914:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b916:	699a      	ldr	r2, [r3, #24]
    error_code |= HAL_I2C_ERROR_AF;
 800b918:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 800b91c:	2101      	movs	r1, #1

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b91e:	05d0      	lsls	r0, r2, #23
 800b920:	d569      	bpl.n	800b9f6 <I2C_WaitOnTXISFlagUntilTimeout+0x11a>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b922:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b926:	0557      	lsls	r7, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800b928:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b92c:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b92e:	d504      	bpl.n	800b93a <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b930:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b934:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b938:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b93a:	0595      	lsls	r5, r2, #22
 800b93c:	d504      	bpl.n	800b948 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b93e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b942:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b946:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b948:	699a      	ldr	r2, [r3, #24]
 800b94a:	0790      	lsls	r0, r2, #30
 800b94c:	d501      	bpl.n	800b952 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    hi2c->Instance->TXDR = 0x00U;
 800b94e:	2200      	movs	r2, #0
 800b950:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b952:	699a      	ldr	r2, [r3, #24]
 800b954:	07d1      	lsls	r1, r2, #31
 800b956:	d403      	bmi.n	800b960 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b958:	699a      	ldr	r2, [r3, #24]
 800b95a:	f042 0201 	orr.w	r2, r2, #1
 800b95e:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b960:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
 800b962:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 800b964:	4c37      	ldr	r4, [pc, #220]	@ (800ba44 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b966:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800b968:	4022      	ands	r2, r4
 800b96a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800b96c:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
 800b970:	ea43 030c 	orr.w	r3, r3, ip
 800b974:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b978:	f888 0041 	strb.w	r0, [r8, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b97c:	f888 1042 	strb.w	r1, [r8, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800b980:	2300      	movs	r3, #0
      return HAL_ERROR;
 800b982:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800b984:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
}
 800b988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	0692      	lsls	r2, r2, #26
 800b990:	d4be      	bmi.n	800b910 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 800b992:	2e00      	cmp	r6, #0
 800b994:	d1bf      	bne.n	800b916 <I2C_WaitOnTXISFlagUntilTimeout+0x3a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b996:	f7fd f971 	bl	8008c7c <HAL_GetTick>
 800b99a:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b99e:	f8d8 3000 	ldr.w	r3, [r8]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b9a2:	4285      	cmp	r5, r0
 800b9a4:	d301      	bcc.n	800b9aa <I2C_WaitOnTXISFlagUntilTimeout+0xce>
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	d1f0      	bne.n	800b98c <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b9aa:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800b9ac:	f898 2042 	ldrb.w	r2, [r8, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b9b0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800b9b2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b9b4:	0409      	lsls	r1, r1, #16
 800b9b6:	d50c      	bpl.n	800b9d2 <I2C_WaitOnTXISFlagUntilTimeout+0xf6>
              (tmp1 != I2C_CR2_STOP) && \
 800b9b8:	0441      	lsls	r1, r0, #17
 800b9ba:	d40a      	bmi.n	800b9d2 <I2C_WaitOnTXISFlagUntilTimeout+0xf6>
 800b9bc:	2a20      	cmp	r2, #32
 800b9be:	d008      	beq.n	800b9d2 <I2C_WaitOnTXISFlagUntilTimeout+0xf6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9c6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b9c8:	f7fd f958 	bl	8008c7c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9cc:	f8d8 3000 	ldr.w	r3, [r8]
            tickstart = HAL_GetTick();
 800b9d0:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9d2:	699a      	ldr	r2, [r3, #24]
 800b9d4:	0692      	lsls	r2, r2, #26
 800b9d6:	d494      	bmi.n	800b902 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b9d8:	f7fd f950 	bl	8008c7c <HAL_GetTick>
 800b9dc:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b9e0:	f8d8 3000 	ldr.w	r3, [r8]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b9e4:	2819      	cmp	r0, #25
 800b9e6:	d9f4      	bls.n	800b9d2 <I2C_WaitOnTXISFlagUntilTimeout+0xf6>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b9e8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800b9ea:	2601      	movs	r6, #1
 800b9ec:	e789      	b.n	800b902 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
  itflag = hi2c->Instance->ISR;
 800b9ee:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b9f0:	4661      	mov	r1, ip
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b9f2:	05d0      	lsls	r0, r2, #23
 800b9f4:	d495      	bmi.n	800b922 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b9f6:	0556      	lsls	r6, r2, #21
 800b9f8:	d49a      	bmi.n	800b930 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b9fa:	0594      	lsls	r4, r2, #22
 800b9fc:	d49f      	bmi.n	800b93e <I2C_WaitOnTXISFlagUntilTimeout+0x62>
  if (status != HAL_OK)
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	d1a2      	bne.n	800b948 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800ba02:	1c6a      	adds	r2, r5, #1
 800ba04:	f43f af71 	beq.w	800b8ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba08:	f7fd f938 	bl	8008c7c <HAL_GetTick>
 800ba0c:	eba0 030a 	sub.w	r3, r0, sl
 800ba10:	42ab      	cmp	r3, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ba12:	f8d8 3000 	ldr.w	r3, [r8]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba16:	d802      	bhi.n	800ba1e <I2C_WaitOnTXISFlagUntilTimeout+0x142>
 800ba18:	2d00      	cmp	r5, #0
 800ba1a:	f47f af65 	bne.w	800b8e8 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ba1e:	699a      	ldr	r2, [r3, #24]
 800ba20:	f012 0202 	ands.w	r2, r2, #2
 800ba24:	f47f af60 	bne.w	800b8e8 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba28:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ba2c:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba2e:	430b      	orrs	r3, r1
 800ba30:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ba34:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba38:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
          return HAL_ERROR;
 800ba3c:	e7a0      	b.n	800b980 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
  return HAL_OK;
 800ba3e:	2000      	movs	r0, #0
}
 800ba40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba44:	fe00e800 	.word	0xfe00e800

0800ba48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba48:	6803      	ldr	r3, [r0, #0]
{
 800ba4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba4e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba50:	699a      	ldr	r2, [r3, #24]
 800ba52:	0694      	lsls	r4, r2, #26
 800ba54:	f100 8092 	bmi.w	800bb7c <I2C_WaitOnSTOPFlagUntilTimeout+0x134>
 800ba58:	4605      	mov	r5, r0
 800ba5a:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba5c:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800ba60:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ba62:	f012 0c10 	ands.w	ip, r2, #16
 800ba66:	f000 808c 	beq.w	800bb82 <I2C_WaitOnSTOPFlagUntilTimeout+0x13a>
  uint32_t error_code = 0;
 800ba6a:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 800ba6c:	46b9      	mov	r9, r7
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba6e:	f8c3 801c 	str.w	r8, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800ba72:	46a2      	mov	sl, r4
 800ba74:	1c70      	adds	r0, r6, #1
 800ba76:	d003      	beq.n	800ba80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ba78:	e043      	b.n	800bb02 <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ba7a:	f1ba 0f00 	cmp.w	sl, #0
 800ba7e:	d107      	bne.n	800ba90 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 800ba80:	699a      	ldr	r2, [r3, #24]
 800ba82:	0691      	lsls	r1, r2, #26
 800ba84:	d5f9      	bpl.n	800ba7a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    if (status == HAL_OK)
 800ba86:	f1ba 0f00 	cmp.w	sl, #0
 800ba8a:	d101      	bne.n	800ba90 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800ba90:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 800ba94:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800ba96:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ba98:	05d0      	lsls	r0, r2, #23
 800ba9a:	d55a      	bpl.n	800bb52 <I2C_WaitOnSTOPFlagUntilTimeout+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800baa0:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800baa2:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800baa6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800baa8:	d504      	bpl.n	800bab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800baaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800baae:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bab2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bab4:	0596      	lsls	r6, r2, #22
 800bab6:	d504      	bpl.n	800bac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800babc:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bac0:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bac2:	699a      	ldr	r2, [r3, #24]
 800bac4:	0790      	lsls	r0, r2, #30
 800bac6:	d501      	bpl.n	800bacc <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
 800bac8:	2200      	movs	r2, #0
 800baca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bacc:	699a      	ldr	r2, [r3, #24]
 800bace:	07d1      	lsls	r1, r2, #31
 800bad0:	d403      	bmi.n	800bada <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bad2:	699a      	ldr	r2, [r3, #24]
 800bad4:	f042 0201 	orr.w	r2, r2, #1
 800bad8:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800bada:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800badc:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 800bade:	4c33      	ldr	r4, [pc, #204]	@ (800bbac <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bae0:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800bae2:	4022      	ands	r2, r4
 800bae4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800bae6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800bae8:	ea43 030c 	orr.w	r3, r3, ip
 800baec:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800baee:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800baf2:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800baf6:	2300      	movs	r3, #0
      return HAL_ERROR;
 800baf8:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800bafa:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 800bafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bb02:	699a      	ldr	r2, [r3, #24]
 800bb04:	0692      	lsls	r2, r2, #26
 800bb06:	d4be      	bmi.n	800ba86 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
 800bb08:	f1ba 0f00 	cmp.w	sl, #0
 800bb0c:	d1c0      	bne.n	800ba90 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb0e:	f7fd f8b5 	bl	8008c7c <HAL_GetTick>
 800bb12:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bb16:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb18:	4286      	cmp	r6, r0
 800bb1a:	d301      	bcc.n	800bb20 <I2C_WaitOnSTOPFlagUntilTimeout+0xd8>
 800bb1c:	2e00      	cmp	r6, #0
 800bb1e:	d1f0      	bne.n	800bb02 <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bb20:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800bb22:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bb26:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800bb28:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bb2a:	0409      	lsls	r1, r1, #16
 800bb2c:	d503      	bpl.n	800bb36 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
              (tmp1 != I2C_CR2_STOP) && \
 800bb2e:	0441      	lsls	r1, r0, #17
 800bb30:	d401      	bmi.n	800bb36 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 800bb32:	2a20      	cmp	r2, #32
 800bb34:	d130      	bne.n	800bb98 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb36:	699a      	ldr	r2, [r3, #24]
 800bb38:	0692      	lsls	r2, r2, #26
 800bb3a:	d49b      	bmi.n	800ba74 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bb3c:	f7fd f89e 	bl	8008c7c <HAL_GetTick>
 800bb40:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bb44:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bb46:	2819      	cmp	r0, #25
 800bb48:	d9f5      	bls.n	800bb36 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bb4a:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800bb4c:	f04f 0a01 	mov.w	sl, #1
 800bb50:	e790      	b.n	800ba74 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bb52:	0550      	lsls	r0, r2, #21
 800bb54:	d4a9      	bmi.n	800baaa <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bb56:	0594      	lsls	r4, r2, #22
 800bb58:	d4ae      	bmi.n	800bab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
 800bb5a:	2900      	cmp	r1, #0
 800bb5c:	d1b1      	bne.n	800bac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb5e:	f7fd f88d 	bl	8008c7c <HAL_GetTick>
 800bb62:	1bc0      	subs	r0, r0, r7
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bb64:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb66:	42b0      	cmp	r0, r6
 800bb68:	d800      	bhi.n	800bb6c <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800bb6a:	b91e      	cbnz	r6, 800bb74 <I2C_WaitOnSTOPFlagUntilTimeout+0x12c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bb6c:	699a      	ldr	r2, [r3, #24]
 800bb6e:	f012 0220 	ands.w	r2, r2, #32
 800bb72:	d008      	beq.n	800bb86 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb74:	699a      	ldr	r2, [r3, #24]
 800bb76:	0692      	lsls	r2, r2, #26
 800bb78:	f57f af72 	bpl.w	800ba60 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 800bb7c:	2000      	movs	r0, #0
}
 800bb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800bb82:	4661      	mov	r1, ip
 800bb84:	e787      	b.n	800ba96 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb86:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb88:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb8a:	430b      	orrs	r3, r1
 800bb8c:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb8e:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb92:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 800bb96:	e7ae      	b.n	800baf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xae>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb9e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800bba0:	f7fd f86c 	bl	8008c7c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bba4:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800bba6:	4681      	mov	r9, r0
 800bba8:	e7c5      	b.n	800bb36 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 800bbaa:	bf00      	nop
 800bbac:	fe00e800 	.word	0xfe00e800

0800bbb0 <HAL_I2C_MspInit>:
}
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop

0800bbb4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d04e      	beq.n	800bc56 <HAL_I2C_Init+0xa2>
{
 800bbb8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bbba:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d041      	beq.n	800bc4c <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 800bbc8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bbca:	2124      	movs	r1, #36	@ 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bbcc:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bbce:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800bbd2:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bbd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bbd8:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800bbda:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bbde:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800bbe0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bbe2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bbe4:	689a      	ldr	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bbe6:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bbe8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bbec:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bbee:	d029      	beq.n	800bc44 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bbf0:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bbf4:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bbf6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bbf8:	d102      	bne.n	800bc00 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bbfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bbfe:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc00:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800bc02:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc06:	4915      	ldr	r1, [pc, #84]	@ (800bc5c <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc08:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc0a:	4301      	orrs	r1, r0
 800bc0c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bc0e:	68d9      	ldr	r1, [r3, #12]
 800bc10:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 800bc14:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bc16:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc1a:	4302      	orrs	r2, r0
 800bc1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc20:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc24:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc26:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc28:	4301      	orrs	r1, r0
  return HAL_OK;
 800bc2a:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc2c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800bc2e:	6819      	ldr	r1, [r3, #0]
 800bc30:	f041 0101 	orr.w	r1, r1, #1
 800bc34:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc36:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bc38:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc3c:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc3e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 800bc42:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bc44:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800bc48:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bc4a:	e7d9      	b.n	800bc00 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800bc4c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800bc50:	f7ff ffae 	bl	800bbb0 <HAL_I2C_MspInit>
 800bc54:	e7b8      	b.n	800bbc8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800bc56:	2001      	movs	r0, #1
}
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	02008000 	.word	0x02008000

0800bc60 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop

0800bc64 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800bc64:	b1b0      	cbz	r0, 800bc94 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800bc66:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc68:	2324      	movs	r3, #36	@ 0x24
{
 800bc6a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc6c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800bc70:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800bc72:	6813      	ldr	r3, [r2, #0]
 800bc74:	f023 0301 	bic.w	r3, r3, #1
 800bc78:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800bc7a:	f7ff fff1 	bl	800bc60 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 800bc82:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800bc84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
 800bc88:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc8c:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc8e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 800bc92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bc94:	2001      	movs	r0, #1
}
 800bc96:	4770      	bx	lr

0800bc98 <HAL_I2C_Mem_Write>:
{
 800bc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc9c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc9e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800bca2:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bca6:	2b20      	cmp	r3, #32
{
 800bca8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcaa:	d130      	bne.n	800bd0e <HAL_I2C_Mem_Write+0x76>
    if ((pData == NULL) || (Size == 0U))
 800bcac:	9b08      	ldr	r3, [sp, #32]
 800bcae:	4604      	mov	r4, r0
 800bcb0:	b33b      	cbz	r3, 800bd02 <HAL_I2C_Mem_Write+0x6a>
 800bcb2:	f1ba 0f00 	cmp.w	sl, #0
 800bcb6:	d024      	beq.n	800bd02 <HAL_I2C_Mem_Write+0x6a>
    __HAL_LOCK(hi2c);
 800bcb8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d026      	beq.n	800bd0e <HAL_I2C_Mem_Write+0x76>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	460e      	mov	r6, r1
 800bcc4:	4691      	mov	r9, r2
 800bcc6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800bcca:	f7fc ffd7 	bl	8008c7c <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcce:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800bcd0:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcd2:	699a      	ldr	r2, [r3, #24]
 800bcd4:	0411      	lsls	r1, r2, #16
 800bcd6:	d51d      	bpl.n	800bd14 <HAL_I2C_Mem_Write+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcd8:	f7fc ffd0 	bl	8008c7c <HAL_GetTick>
 800bcdc:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bcde:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bce0:	2819      	cmp	r0, #25
 800bce2:	d9f6      	bls.n	800bcd2 <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bce4:	699a      	ldr	r2, [r3, #24]
 800bce6:	0412      	lsls	r2, r2, #16
 800bce8:	d5f3      	bpl.n	800bcd2 <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bcec:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcee:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcf0:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800bcf2:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcf6:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bcf8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcfc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800bd00:	e002      	b.n	800bd08 <HAL_I2C_Mem_Write+0x70>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bd02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd06:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800bd08:	2001      	movs	r0, #1
}
 800bd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800bd0e:	2002      	movs	r0, #2
}
 800bd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
 800bd14:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bd16:	2121      	movs	r1, #33	@ 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd18:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd1c:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bd1e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd22:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
 800bd24:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd26:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd28:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
 800bd2c:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd2e:	6462      	str	r2, [r4, #68]	@ 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd30:	496b      	ldr	r1, [pc, #428]	@ (800bee0 <HAL_I2C_Mem_Write+0x248>)
    hi2c->XferCount = Size;
 800bd32:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bd3a:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bd42:	4968      	ldr	r1, [pc, #416]	@ (800bee4 <HAL_I2C_Mem_Write+0x24c>)
 800bd44:	4332      	orrs	r2, r6
 800bd46:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd48:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd4a:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f7ff fdc5 	bl	800b8dc <I2C_WaitOnTXISFlagUntilTimeout>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d17e      	bne.n	800be54 <HAL_I2C_Mem_Write+0x1bc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd56:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd5a:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd5c:	f040 809a 	bne.w	800be94 <HAL_I2C_Mem_Write+0x1fc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd60:	fa5f f389 	uxtb.w	r3, r9
 800bd64:	6293      	str	r3, [r2, #40]	@ 0x28
 800bd66:	1c78      	adds	r0, r7, #1
 800bd68:	d15d      	bne.n	800be26 <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd6a:	6993      	ldr	r3, [r2, #24]
 800bd6c:	0619      	lsls	r1, r3, #24
 800bd6e:	d5fc      	bpl.n	800bd6a <HAL_I2C_Mem_Write+0xd2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd70:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	2bff      	cmp	r3, #255	@ 0xff
 800bd76:	d97f      	bls.n	800be78 <HAL_I2C_Mem_Write+0x1e0>
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd78:	6853      	ldr	r3, [r2, #4]
 800bd7a:	495b      	ldr	r1, [pc, #364]	@ (800bee8 <HAL_I2C_Mem_Write+0x250>)
 800bd7c:	400b      	ands	r3, r1
 800bd7e:	495b      	ldr	r1, [pc, #364]	@ (800beec <HAL_I2C_Mem_Write+0x254>)
 800bd80:	4333      	orrs	r3, r6
 800bd82:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd84:	23ff      	movs	r3, #255	@ 0xff
 800bd86:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd88:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bd8a:	e004      	b.n	800bd96 <HAL_I2C_Mem_Write+0xfe>
    } while (hi2c->XferCount > 0U);
 800bd8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f000 808e 	beq.w	800beb2 <HAL_I2C_Mem_Write+0x21a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd96:	462a      	mov	r2, r5
 800bd98:	4639      	mov	r1, r7
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f7ff fd9e 	bl	800b8dc <I2C_WaitOnTXISFlagUntilTimeout>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1b1      	bne.n	800bd08 <HAL_I2C_Mem_Write+0x70>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bda4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bda6:	6821      	ldr	r1, [r4, #0]
 800bda8:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800bdac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bdae:	628a      	str	r2, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 800bdb0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bdb2:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800bdb4:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800bdb6:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800bdb8:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800bdba:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800bdbc:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bdbe:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bdc0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800bdc2:	b292      	uxth	r2, r2
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	d0e1      	beq.n	800bd8c <HAL_I2C_Mem_Write+0xf4>
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1df      	bne.n	800bd8c <HAL_I2C_Mem_Write+0xf4>
 800bdcc:	1c78      	adds	r0, r7, #1
 800bdce:	d110      	bne.n	800bdf2 <HAL_I2C_Mem_Write+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdd0:	698b      	ldr	r3, [r1, #24]
 800bdd2:	061a      	lsls	r2, r3, #24
 800bdd4:	d5fc      	bpl.n	800bdd0 <HAL_I2C_Mem_Write+0x138>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdd6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	2bff      	cmp	r3, #255	@ 0xff
 800bddc:	d93e      	bls.n	800be5c <HAL_I2C_Mem_Write+0x1c4>
  MODIFY_REG(hi2c->Instance->CR2, \
 800bdde:	684b      	ldr	r3, [r1, #4]
 800bde0:	4a41      	ldr	r2, [pc, #260]	@ (800bee8 <HAL_I2C_Mem_Write+0x250>)
 800bde2:	4013      	ands	r3, r2
 800bde4:	4a41      	ldr	r2, [pc, #260]	@ (800beec <HAL_I2C_Mem_Write+0x254>)
 800bde6:	4333      	orrs	r3, r6
 800bde8:	431a      	orrs	r2, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdea:	23ff      	movs	r3, #255	@ 0xff
 800bdec:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800bdee:	604a      	str	r2, [r1, #4]
}
 800bdf0:	e7cc      	b.n	800bd8c <HAL_I2C_Mem_Write+0xf4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdf2:	698b      	ldr	r3, [r1, #24]
 800bdf4:	061b      	lsls	r3, r3, #24
 800bdf6:	d4ee      	bmi.n	800bdd6 <HAL_I2C_Mem_Write+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdf8:	f7fc ff40 	bl	8008c7c <HAL_GetTick>
 800bdfc:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bdfe:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be00:	4287      	cmp	r7, r0
 800be02:	d301      	bcc.n	800be08 <HAL_I2C_Mem_Write+0x170>
 800be04:	2f00      	cmp	r7, #0
 800be06:	d1f4      	bne.n	800bdf2 <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800be08:	698b      	ldr	r3, [r1, #24]
 800be0a:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800be0e:	d1f0      	bne.n	800bdf2 <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be10:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800be12:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800be14:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be18:	430a      	orrs	r2, r1
 800be1a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800be1c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800be20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800be24:	e770      	b.n	800bd08 <HAL_I2C_Mem_Write+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be26:	6993      	ldr	r3, [r2, #24]
 800be28:	061b      	lsls	r3, r3, #24
 800be2a:	d4a1      	bmi.n	800bd70 <HAL_I2C_Mem_Write+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be2c:	f7fc ff26 	bl	8008c7c <HAL_GetTick>
 800be30:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800be32:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be34:	4287      	cmp	r7, r0
 800be36:	d301      	bcc.n	800be3c <HAL_I2C_Mem_Write+0x1a4>
 800be38:	2f00      	cmp	r7, #0
 800be3a:	d1f4      	bne.n	800be26 <HAL_I2C_Mem_Write+0x18e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800be3c:	6993      	ldr	r3, [r2, #24]
 800be3e:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800be42:	d1f0      	bne.n	800be26 <HAL_I2C_Mem_Write+0x18e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be44:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800be46:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be48:	430a      	orrs	r2, r1
 800be4a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800be4c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800be50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800be54:	2300      	movs	r3, #0
 800be56:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800be5a:	e755      	b.n	800bd08 <HAL_I2C_Mem_Write+0x70>
          hi2c->XferSize = hi2c->XferCount;
 800be5c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800be5e:	4822      	ldr	r0, [pc, #136]	@ (800bee8 <HAL_I2C_Mem_Write+0x250>)
          hi2c->XferSize = hi2c->XferCount;
 800be60:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be62:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
 800be64:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800be66:	684b      	ldr	r3, [r1, #4]
 800be68:	4003      	ands	r3, r0
 800be6a:	4333      	orrs	r3, r6
 800be6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800be74:	604b      	str	r3, [r1, #4]
}
 800be76:	e789      	b.n	800bd8c <HAL_I2C_Mem_Write+0xf4>
      hi2c->XferSize = hi2c->XferCount;
 800be78:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800be7a:	481b      	ldr	r0, [pc, #108]	@ (800bee8 <HAL_I2C_Mem_Write+0x250>)
      hi2c->XferSize = hi2c->XferCount;
 800be7c:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be7e:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 800be80:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800be82:	6853      	ldr	r3, [r2, #4]
 800be84:	4003      	ands	r3, r0
 800be86:	4333      	orrs	r3, r6
 800be88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800be8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800be90:	6053      	str	r3, [r2, #4]
}
 800be92:	e780      	b.n	800bd96 <HAL_I2C_Mem_Write+0xfe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be94:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be98:	4639      	mov	r1, r7
 800be9a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be9c:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be9e:	462a      	mov	r2, r5
 800bea0:	f7ff fd1c 	bl	800b8dc <I2C_WaitOnTXISFlagUntilTimeout>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d1d5      	bne.n	800be54 <HAL_I2C_Mem_Write+0x1bc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bea8:	fa5f f389 	uxtb.w	r3, r9
 800beac:	6822      	ldr	r2, [r4, #0]
 800beae:	6293      	str	r3, [r2, #40]	@ 0x28
 800beb0:	e759      	b.n	800bd66 <HAL_I2C_Mem_Write+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800beb2:	462a      	mov	r2, r5
 800beb4:	4639      	mov	r1, r7
 800beb6:	4620      	mov	r0, r4
 800beb8:	f7ff fdc6 	bl	800ba48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	f47f af23 	bne.w	800bd08 <HAL_I2C_Mem_Write+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800bec6:	4d0a      	ldr	r5, [pc, #40]	@ (800bef0 <HAL_I2C_Mem_Write+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bec8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	402a      	ands	r2, r5
 800bece:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bed0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bed4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bed8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800bedc:	e715      	b.n	800bd0a <HAL_I2C_Mem_Write+0x72>
 800bede:	bf00      	nop
 800bee0:	fc009800 	.word	0xfc009800
 800bee4:	01002000 	.word	0x01002000
 800bee8:	fc009c00 	.word	0xfc009c00
 800beec:	01ff0000 	.word	0x01ff0000
 800bef0:	fe00e800 	.word	0xfe00e800

0800bef4 <HAL_I2C_Mem_Read>:
{
 800bef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800befa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800befe:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf02:	2b20      	cmp	r3, #32
{
 800bf04:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf06:	d130      	bne.n	800bf6a <HAL_I2C_Mem_Read+0x76>
    if ((pData == NULL) || (Size == 0U))
 800bf08:	9b08      	ldr	r3, [sp, #32]
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	b33b      	cbz	r3, 800bf5e <HAL_I2C_Mem_Read+0x6a>
 800bf0e:	f1ba 0f00 	cmp.w	sl, #0
 800bf12:	d024      	beq.n	800bf5e <HAL_I2C_Mem_Read+0x6a>
    __HAL_LOCK(hi2c);
 800bf14:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d026      	beq.n	800bf6a <HAL_I2C_Mem_Read+0x76>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	460f      	mov	r7, r1
 800bf20:	4691      	mov	r9, r2
 800bf22:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800bf26:	f7fc fea9 	bl	8008c7c <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf2a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800bf2c:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf2e:	699a      	ldr	r2, [r3, #24]
 800bf30:	0411      	lsls	r1, r2, #16
 800bf32:	d51d      	bpl.n	800bf70 <HAL_I2C_Mem_Read+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf34:	f7fc fea2 	bl	8008c7c <HAL_GetTick>
 800bf38:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bf3a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf3c:	2819      	cmp	r0, #25
 800bf3e:	d9f6      	bls.n	800bf2e <HAL_I2C_Mem_Read+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bf40:	699a      	ldr	r2, [r3, #24]
 800bf42:	0412      	lsls	r2, r2, #16
 800bf44:	d5f3      	bpl.n	800bf2e <HAL_I2C_Mem_Read+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf46:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf48:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf4a:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf4c:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800bf4e:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf52:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf54:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf58:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800bf5c:	e002      	b.n	800bf64 <HAL_I2C_Mem_Read+0x70>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bf5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf62:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800bf64:	2001      	movs	r0, #1
}
 800bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800bf6a:	2002      	movs	r0, #2
}
 800bf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
 800bf70:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf72:	2122      	movs	r1, #34	@ 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bf74:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf78:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf7a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf7e:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
 800bf80:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf82:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf84:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
 800bf88:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf8a:	6462      	str	r2, [r4, #68]	@ 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf8c:	4973      	ldr	r1, [pc, #460]	@ (800c15c <HAL_I2C_Mem_Read+0x268>)
    hi2c->XferCount = Size;
 800bf8e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bf96:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf9e:	4631      	mov	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800bfa0:	433a      	orrs	r2, r7
 800bfa2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bfa6:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfa8:	462a      	mov	r2, r5
 800bfaa:	f7ff fc97 	bl	800b8dc <I2C_WaitOnTXISFlagUntilTimeout>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	d16a      	bne.n	800c088 <HAL_I2C_Mem_Read+0x194>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bfb2:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bfb6:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bfb8:	f040 80aa 	bne.w	800c110 <HAL_I2C_Mem_Read+0x21c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bfbc:	fa5f f389 	uxtb.w	r3, r9
 800bfc0:	628b      	str	r3, [r1, #40]	@ 0x28
 800bfc2:	1c70      	adds	r0, r6, #1
 800bfc4:	d149      	bne.n	800c05a <HAL_I2C_Mem_Read+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfc6:	698b      	ldr	r3, [r1, #24]
 800bfc8:	065a      	lsls	r2, r3, #25
 800bfca:	d5fc      	bpl.n	800bfc6 <HAL_I2C_Mem_Read+0xd2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bfcc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	2bff      	cmp	r3, #255	@ 0xff
 800bfd2:	f240 808f 	bls.w	800c0f4 <HAL_I2C_Mem_Read+0x200>
  MODIFY_REG(hi2c->Instance->CR2, \
 800bfd6:	684b      	ldr	r3, [r1, #4]
 800bfd8:	4a60      	ldr	r2, [pc, #384]	@ (800c15c <HAL_I2C_Mem_Read+0x268>)
 800bfda:	4013      	ands	r3, r2
 800bfdc:	4a60      	ldr	r2, [pc, #384]	@ (800c160 <HAL_I2C_Mem_Read+0x26c>)
 800bfde:	433b      	orrs	r3, r7
 800bfe0:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfe2:	23ff      	movs	r3, #255	@ 0xff
 800bfe4:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800bfe6:	604a      	str	r2, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfe8:	1c70      	adds	r0, r6, #1
 800bfea:	d11c      	bne.n	800c026 <HAL_I2C_Mem_Read+0x132>
 800bfec:	698b      	ldr	r3, [r1, #24]
 800bfee:	075a      	lsls	r2, r3, #29
 800bff0:	d5fc      	bpl.n	800bfec <HAL_I2C_Mem_Read+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bff2:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800bff4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bff6:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800bff8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bffa:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bffc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800bffe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800c000:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c002:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800c004:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800c006:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c008:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c00a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800c00c:	6261      	str	r1, [r4, #36]	@ 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c00e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c010:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c012:	b90b      	cbnz	r3, 800c018 <HAL_I2C_Mem_Read+0x124>
 800c014:	2a00      	cmp	r2, #0
 800c016:	d13b      	bne.n	800c090 <HAL_I2C_Mem_Read+0x19c>
    } while (hi2c->XferCount > 0U);
 800c018:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 8086 	beq.w	800c12e <HAL_I2C_Mem_Read+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c022:	6821      	ldr	r1, [r4, #0]
 800c024:	e7e0      	b.n	800bfe8 <HAL_I2C_Mem_Read+0xf4>
 800c026:	698b      	ldr	r3, [r1, #24]
 800c028:	075b      	lsls	r3, r3, #29
 800c02a:	d4e2      	bmi.n	800bff2 <HAL_I2C_Mem_Read+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c02c:	f7fc fe26 	bl	8008c7c <HAL_GetTick>
 800c030:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c032:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c034:	4286      	cmp	r6, r0
 800c036:	d301      	bcc.n	800c03c <HAL_I2C_Mem_Read+0x148>
 800c038:	2e00      	cmp	r6, #0
 800c03a:	d1f4      	bne.n	800c026 <HAL_I2C_Mem_Read+0x132>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c03c:	698b      	ldr	r3, [r1, #24]
 800c03e:	f013 0304 	ands.w	r3, r3, #4
 800c042:	d1f0      	bne.n	800c026 <HAL_I2C_Mem_Read+0x132>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c044:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c046:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800c048:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c04c:	430a      	orrs	r2, r1
 800c04e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c050:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c054:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800c058:	e784      	b.n	800bf64 <HAL_I2C_Mem_Read+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c05a:	698b      	ldr	r3, [r1, #24]
 800c05c:	065b      	lsls	r3, r3, #25
 800c05e:	d4b5      	bmi.n	800bfcc <HAL_I2C_Mem_Read+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c060:	f7fc fe0c 	bl	8008c7c <HAL_GetTick>
 800c064:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c066:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c068:	429e      	cmp	r6, r3
 800c06a:	d301      	bcc.n	800c070 <HAL_I2C_Mem_Read+0x17c>
 800c06c:	2e00      	cmp	r6, #0
 800c06e:	d1f4      	bne.n	800c05a <HAL_I2C_Mem_Read+0x166>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c070:	698b      	ldr	r3, [r1, #24]
 800c072:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800c076:	d1f0      	bne.n	800c05a <HAL_I2C_Mem_Read+0x166>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c078:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c07a:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c07c:	430a      	orrs	r2, r1
 800c07e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c080:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800c088:	2300      	movs	r3, #0
 800c08a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800c08e:	e769      	b.n	800bf64 <HAL_I2C_Mem_Read+0x70>
 800c090:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c092:	6822      	ldr	r2, [r4, #0]
 800c094:	d110      	bne.n	800c0b8 <HAL_I2C_Mem_Read+0x1c4>
 800c096:	6993      	ldr	r3, [r2, #24]
 800c098:	0619      	lsls	r1, r3, #24
 800c09a:	d5fc      	bpl.n	800c096 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c09c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	2bff      	cmp	r3, #255	@ 0xff
 800c0a2:	d919      	bls.n	800c0d8 <HAL_I2C_Mem_Read+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, \
 800c0a4:	6853      	ldr	r3, [r2, #4]
 800c0a6:	492f      	ldr	r1, [pc, #188]	@ (800c164 <HAL_I2C_Mem_Read+0x270>)
 800c0a8:	400b      	ands	r3, r1
 800c0aa:	492f      	ldr	r1, [pc, #188]	@ (800c168 <HAL_I2C_Mem_Read+0x274>)
 800c0ac:	433b      	orrs	r3, r7
 800c0ae:	4319      	orrs	r1, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0b0:	23ff      	movs	r3, #255	@ 0xff
 800c0b2:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800c0b4:	6051      	str	r1, [r2, #4]
}
 800c0b6:	e7af      	b.n	800c018 <HAL_I2C_Mem_Read+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0b8:	6993      	ldr	r3, [r2, #24]
 800c0ba:	061b      	lsls	r3, r3, #24
 800c0bc:	d4ee      	bmi.n	800c09c <HAL_I2C_Mem_Read+0x1a8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0be:	f7fc fddd 	bl	8008c7c <HAL_GetTick>
 800c0c2:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c0c4:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0c6:	429e      	cmp	r6, r3
 800c0c8:	d301      	bcc.n	800c0ce <HAL_I2C_Mem_Read+0x1da>
 800c0ca:	2e00      	cmp	r6, #0
 800c0cc:	d1f4      	bne.n	800c0b8 <HAL_I2C_Mem_Read+0x1c4>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c0ce:	6993      	ldr	r3, [r2, #24]
 800c0d0:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800c0d4:	d1f0      	bne.n	800c0b8 <HAL_I2C_Mem_Read+0x1c4>
 800c0d6:	e7b5      	b.n	800c044 <HAL_I2C_Mem_Read+0x150>
          hi2c->XferSize = hi2c->XferCount;
 800c0d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800c0da:	4822      	ldr	r0, [pc, #136]	@ (800c164 <HAL_I2C_Mem_Read+0x270>)
          hi2c->XferSize = hi2c->XferCount;
 800c0dc:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c0de:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800c0e0:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800c0e2:	6853      	ldr	r3, [r2, #4]
 800c0e4:	4003      	ands	r3, r0
 800c0e6:	433b      	orrs	r3, r7
 800c0e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c0f0:	6053      	str	r3, [r2, #4]
}
 800c0f2:	e791      	b.n	800c018 <HAL_I2C_Mem_Read+0x124>
      hi2c->XferSize = hi2c->XferCount;
 800c0f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800c0f6:	4819      	ldr	r0, [pc, #100]	@ (800c15c <HAL_I2C_Mem_Read+0x268>)
      hi2c->XferSize = hi2c->XferCount;
 800c0f8:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c0fa:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
 800c0fc:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800c0fe:	684b      	ldr	r3, [r1, #4]
 800c100:	4003      	ands	r3, r0
 800c102:	433b      	orrs	r3, r7
 800c104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c108:	4a18      	ldr	r2, [pc, #96]	@ (800c16c <HAL_I2C_Mem_Read+0x278>)
 800c10a:	431a      	orrs	r2, r3
 800c10c:	604a      	str	r2, [r1, #4]
}
 800c10e:	e76b      	b.n	800bfe8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c110:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c114:	462a      	mov	r2, r5
 800c116:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c118:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c11a:	4631      	mov	r1, r6
 800c11c:	f7ff fbde 	bl	800b8dc <I2C_WaitOnTXISFlagUntilTimeout>
 800c120:	2800      	cmp	r0, #0
 800c122:	d1b1      	bne.n	800c088 <HAL_I2C_Mem_Read+0x194>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c124:	fa5f f389 	uxtb.w	r3, r9
 800c128:	6821      	ldr	r1, [r4, #0]
 800c12a:	628b      	str	r3, [r1, #40]	@ 0x28
 800c12c:	e749      	b.n	800bfc2 <HAL_I2C_Mem_Read+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c12e:	462a      	mov	r2, r5
 800c130:	4631      	mov	r1, r6
 800c132:	4620      	mov	r0, r4
 800c134:	f7ff fc88 	bl	800ba48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f47f af13 	bne.w	800bf64 <HAL_I2C_Mem_Read+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c13e:	6823      	ldr	r3, [r4, #0]
 800c140:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c142:	4d0b      	ldr	r5, [pc, #44]	@ (800c170 <HAL_I2C_Mem_Read+0x27c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c144:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	402a      	ands	r2, r5
 800c14a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c14c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c150:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c154:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800c158:	e705      	b.n	800bf66 <HAL_I2C_Mem_Read+0x72>
 800c15a:	bf00      	nop
 800c15c:	fc009800 	.word	0xfc009800
 800c160:	01ff2400 	.word	0x01ff2400
 800c164:	fc009c00 	.word	0xfc009c00
 800c168:	01ff0000 	.word	0x01ff0000
 800c16c:	02002400 	.word	0x02002400
 800c170:	fe00e800 	.word	0xfe00e800

0800c174 <HAL_I2C_GetState>:
  return hi2c->State;
 800c174:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop

0800c17c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800c17c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800c17e:	4770      	bx	lr

0800c180 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c180:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800c184:	2a20      	cmp	r2, #32
 800c186:	d123      	bne.n	800c1d0 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800c188:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c18c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800c190:	4603      	mov	r3, r0
 800c192:	2a01      	cmp	r2, #1
 800c194:	d01c      	beq.n	800c1d0 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c196:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c198:	2024      	movs	r0, #36	@ 0x24
{
 800c19a:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c19c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1a0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 800c1a4:	6810      	ldr	r0, [r2, #0]
 800c1a6:	f020 0001 	bic.w	r0, r0, #1
 800c1aa:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c1ac:	6810      	ldr	r0, [r2, #0]
 800c1ae:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800c1b2:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800c1b4:	6810      	ldr	r0, [r2, #0]
 800c1b6:	4301      	orrs	r1, r0

    return HAL_OK;
 800c1b8:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 800c1ba:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800c1bc:	6811      	ldr	r1, [r2, #0]
 800c1be:	f041 0101 	orr.w	r1, r1, #1
 800c1c2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c1c4:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c1c8:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c1cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800c1d0:	2002      	movs	r0, #2
}
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1d4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800c1d8:	2a20      	cmp	r2, #32
 800c1da:	d122      	bne.n	800c222 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 800c1dc:	4603      	mov	r3, r0
{
 800c1de:	b500      	push	{lr}
 800c1e0:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1e4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800c1e8:	2a01      	cmp	r2, #1
 800c1ea:	d01c      	beq.n	800c226 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c1ec:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c1ee:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1f0:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c1f4:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c1f8:	6810      	ldr	r0, [r2, #0]
 800c1fa:	f020 0001 	bic.w	r0, r0, #1
 800c1fe:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800c200:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800c202:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 800c206:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 800c20a:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 800c20c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800c20e:	6811      	ldr	r1, [r2, #0]
 800c210:	f041 0101 	orr.w	r1, r1, #1
 800c214:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c216:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c21a:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c21e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800c222:	2002      	movs	r0, #2
}
 800c224:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800c226:	2002      	movs	r0, #2
}
 800c228:	f85d fb04 	ldr.w	pc, [sp], #4

0800c22c <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop

0800c230 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800c230:	2800      	cmp	r0, #0
 800c232:	d067      	beq.n	800c304 <HAL_LTDC_Init+0xd4>
{
 800c234:	b538      	push	{r3, r4, r5, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c236:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800c23a:	4604      	mov	r4, r0
 800c23c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c240:	2b00      	cmp	r3, #0
 800c242:	d05a      	beq.n	800c2fa <HAL_LTDC_Init+0xca>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c244:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c246:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c248:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c24c:	f884 10a1 	strb.w	r1, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c250:	4302      	orrs	r2, r0
 800c252:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c254:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c256:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c258:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c25a:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c25e:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c260:	4929      	ldr	r1, [pc, #164]	@ (800c308 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c262:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c264:	6998      	ldr	r0, [r3, #24]
 800c266:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c268:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c26a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c26c:	689a      	ldr	r2, [r3, #8]
 800c26e:	400a      	ands	r2, r1
 800c270:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c272:	689a      	ldr	r2, [r3, #8]
 800c274:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c278:	69a0      	ldr	r0, [r4, #24]
 800c27a:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c27c:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c27e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c280:	68da      	ldr	r2, [r3, #12]
 800c282:	400a      	ands	r2, r1
 800c284:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c28c:	6a20      	ldr	r0, [r4, #32]
 800c28e:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c290:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c292:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c294:	691a      	ldr	r2, [r3, #16]
 800c296:	400a      	ands	r2, r1
 800c298:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c29a:	691a      	ldr	r2, [r3, #16]
 800c29c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c2a0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c2a2:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c2a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c2a6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c2a8:	695a      	ldr	r2, [r3, #20]
 800c2aa:	400a      	ands	r2, r1
 800c2ac:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c2ae:	695a      	ldr	r2, [r3, #20]
 800c2b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c2b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c2bc:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c2c0:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c2c4:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c2c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c2ca:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800c2cc:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800c2d0:	432a      	orrs	r2, r5
 800c2d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c2d6:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c2d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c2dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c2de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2e0:	f042 0206 	orr.w	r2, r2, #6
 800c2e4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800c2e6:	699a      	ldr	r2, [r3, #24]
 800c2e8:	f042 0201 	orr.w	r2, r2, #1
 800c2ec:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800c2ee:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c2f0:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800c2f4:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800c2f8:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800c2fa:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800c2fe:	f7ff ff95 	bl	800c22c <HAL_LTDC_MspInit>
 800c302:	e79f      	b.n	800c244 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800c304:	2001      	movs	r0, #1
}
 800c306:	4770      	bx	lr
 800c308:	f000f800 	.word	0xf000f800

0800c30c <HAL_LTDC_ErrorCallback>:
  * @brief  Error LTDC callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop

0800c310 <HAL_LTDC_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop

0800c314 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c314:	6803      	ldr	r3, [r0, #0]
{
 800c316:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c318:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
{
 800c31a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c31c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c31e:	076a      	lsls	r2, r5, #29
 800c320:	d501      	bpl.n	800c326 <HAL_LTDC_IRQHandler+0x12>
 800c322:	0771      	lsls	r1, r6, #29
 800c324:	d41d      	bmi.n	800c362 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c326:	07aa      	lsls	r2, r5, #30
 800c328:	d501      	bpl.n	800c32e <HAL_LTDC_IRQHandler+0x1a>
 800c32a:	07b3      	lsls	r3, r6, #30
 800c32c:	d42d      	bmi.n	800c38a <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c32e:	07e8      	lsls	r0, r5, #31
 800c330:	d501      	bpl.n	800c336 <HAL_LTDC_IRQHandler+0x22>
 800c332:	07f1      	lsls	r1, r6, #31
 800c334:	d440      	bmi.n	800c3b8 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c336:	072a      	lsls	r2, r5, #28
 800c338:	d501      	bpl.n	800c33e <HAL_LTDC_IRQHandler+0x2a>
 800c33a:	0733      	lsls	r3, r6, #28
 800c33c:	d400      	bmi.n	800c340 <HAL_LTDC_IRQHandler+0x2c>
}
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c340:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c342:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800c344:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800c346:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c34a:	f022 0208 	bic.w	r2, r2, #8
 800c34e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c350:	63d8      	str	r0, [r3, #60]	@ 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c352:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 800c354:	f884 50a1 	strb.w	r5, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800c358:	f884 10a0 	strb.w	r1, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c35c:	f7f6 ffbc 	bl	80032d8 <HAL_LTDC_ReloadEventCallback>
}
 800c360:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c364:	f022 0204 	bic.w	r2, r2, #4
 800c368:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c36a:	2204      	movs	r2, #4
 800c36c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c36e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800c372:	f043 0301 	orr.w	r3, r3, #1
 800c376:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800c37a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c37c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800c380:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c384:	f7ff ffc2 	bl	800c30c <HAL_LTDC_ErrorCallback>
 800c388:	e7cd      	b.n	800c326 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c38a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800c38c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c38e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c390:	f022 0202 	bic.w	r2, r2, #2
 800c394:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c396:	2202      	movs	r2, #2
 800c398:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c39a:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c39c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800c3a0:	f043 0302 	orr.w	r3, r3, #2
 800c3a4:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800c3a8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c3aa:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800c3ae:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c3b2:	f7ff ffab 	bl	800c30c <HAL_LTDC_ErrorCallback>
 800c3b6:	e7ba      	b.n	800c32e <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c3b8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800c3ba:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c3bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3be:	f022 0201 	bic.w	r2, r2, #1
 800c3c2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800c3c8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800c3ca:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800c3ce:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800c3d2:	f7ff ff9d 	bl	800c310 <HAL_LTDC_LineEventCallback>
 800c3d6:	e7ae      	b.n	800c336 <HAL_LTDC_IRQHandler+0x22>

0800c3d8 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c3d8:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	f000 80c6 	beq.w	800c56e <HAL_LTDC_ConfigLayer+0x196>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c3e2:	2302      	movs	r3, #2
{
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c3e8:	f04f 0e34 	mov.w	lr, #52	@ 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c3ec:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c3f0:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
{
 800c3f4:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c3f6:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c3fa:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c3fc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c400:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c402:	f102 0684 	add.w	r6, r2, #132	@ 0x84
 800c406:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c408:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 800c40c:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c40e:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c412:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c416:	f8df a164 	ldr.w	sl, [pc, #356]	@ 800c57c <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c41a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800c41e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800c422:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c426:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c42a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c42c:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c42e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c434:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c438:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c43a:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c43c:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c440:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c442:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c444:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c448:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c44c:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c44e:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c450:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c454:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c458:	440b      	add	r3, r1
 800c45a:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c45e:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c462:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c466:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c46a:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c46e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c472:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c474:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c478:	68ab      	ldr	r3, [r5, #8]
 800c47a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800c47e:	3301      	adds	r3, #1
 800c480:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800c484:	4403      	add	r3, r0
 800c486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c48a:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c48c:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c490:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c494:	f023 0307 	bic.w	r3, r3, #7
 800c498:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c49c:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c4a0:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800c4a4:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c4a6:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c4aa:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c4ae:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c4b2:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800c4b6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 800c4ba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800c4be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4c2:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c4c6:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800c4ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c4ce:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c4d2:	696b      	ldr	r3, [r5, #20]
 800c4d4:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c4d8:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c4dc:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c4de:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c4e2:	6a28      	ldr	r0, [r5, #32]
 800c4e4:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c4e6:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c4ea:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c4ee:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c4f8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c4fa:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c4fe:	b3a1      	cbz	r1, 800c56a <HAL_LTDC_ConfigLayer+0x192>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c500:	2901      	cmp	r1, #1
 800c502:	d036      	beq.n	800c572 <HAL_LTDC_ConfigLayer+0x19a>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c504:	1e8b      	subs	r3, r1, #2
 800c506:	2907      	cmp	r1, #7
 800c508:	bf18      	it	ne
 800c50a:	2b02      	cmpne	r3, #2
 800c50c:	bf94      	ite	ls
 800c50e:	2301      	movls	r3, #1
 800c510:	2300      	movhi	r3, #0
 800c512:	3301      	adds	r3, #1
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c514:	1abf      	subs	r7, r7, r2
 800c516:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800c518:	fb03 f707 	mul.w	r7, r3, r7
 800c51c:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c520:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c522:	3707      	adds	r7, #7
 800c524:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c528:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 800c52c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800c530:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c534:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c538:	4b0f      	ldr	r3, [pc, #60]	@ (800c578 <HAL_LTDC_ConfigLayer+0x1a0>)
 800c53a:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
 800c53e:	400b      	ands	r3, r1
 800c540:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c544:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c548:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c54a:	f859 3006 	ldr.w	r3, [r9, r6]
 800c54e:	4313      	orrs	r3, r2
 800c550:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 800c554:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c556:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
  return HAL_OK;
 800c55a:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c55c:	f888 20a1 	strb.w	r2, [r8, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800c560:	f888 30a0 	strb.w	r3, [r8, #160]	@ 0xa0
}
 800c564:	b003      	add	sp, #12
 800c566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4U;
 800c56a:	2304      	movs	r3, #4
 800c56c:	e7d2      	b.n	800c514 <HAL_LTDC_ConfigLayer+0x13c>
  __HAL_LOCK(hltdc);
 800c56e:	2002      	movs	r0, #2
}
 800c570:	4770      	bx	lr
    tmp = 3U;
 800c572:	2303      	movs	r3, #3
 800c574:	e7ce      	b.n	800c514 <HAL_LTDC_ConfigLayer+0x13c>
 800c576:	bf00      	nop
 800c578:	fffff800 	.word	0xfffff800
 800c57c:	fffff8f8 	.word	0xfffff8f8

0800c580 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 800c580:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 800c584:	2a01      	cmp	r2, #1
 800c586:	d015      	beq.n	800c5b4 <HAL_LTDC_Reload+0x34>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800c588:	6802      	ldr	r2, [r0, #0]
 800c58a:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c58c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
 800c58e:	f04f 0c00 	mov.w	ip, #0
{
 800c592:	b500      	push	{lr}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c594:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 800c598:	f04f 0e01 	mov.w	lr, #1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800c59c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800c59e:	f040 0008 	orr.w	r0, r0, #8
 800c5a2:	6350      	str	r0, [r2, #52]	@ 0x34
  return HAL_OK;
 800c5a4:	4660      	mov	r0, ip
  hltdc->Instance->SRCR = ReloadType;
 800c5a6:	6251      	str	r1, [r2, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800c5a8:	f883 e0a1 	strb.w	lr, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800c5ac:	f883 c0a0 	strb.w	ip, [r3, #160]	@ 0xa0
}
 800c5b0:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hltdc);
 800c5b4:	2002      	movs	r0, #2
}
 800c5b6:	4770      	bx	lr

0800c5b8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c5bc:	f7fc fb5e 	bl	8008c7c <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c5c0:	2c00      	cmp	r4, #0
 800c5c2:	d058      	beq.n	800c676 <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800c5c4:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c5c6:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c5cc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800c5d0:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800c5d4:	68da      	ldr	r2, [r3, #12]
 800c5d6:	f022 0201 	bic.w	r2, r2, #1
 800c5da:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c5dc:	e005      	b.n	800c5ea <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800c5de:	f7fc fb4d 	bl	8008c7c <HAL_GetTick>
 800c5e2:	1b43      	subs	r3, r0, r5
 800c5e4:	2b05      	cmp	r3, #5
 800c5e6:	d841      	bhi.n	800c66c <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	68da      	ldr	r2, [r3, #12]
 800c5ec:	07d2      	lsls	r2, r2, #31
 800c5ee:	d4f6      	bmi.n	800c5de <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c5f0:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 800c5f4:	69e0      	ldr	r0, [r4, #28]
 800c5f6:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c5f8:	68e1      	ldr	r1, [r4, #12]
 800c5fa:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c5fc:	4302      	orrs	r2, r0
 800c5fe:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c600:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c602:	4302      	orrs	r2, r0
 800c604:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c606:	4302      	orrs	r2, r0
 800c608:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800c60a:	4302      	orrs	r2, r0
 800c60c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c60e:	4302      	orrs	r2, r0
 800c610:	68a0      	ldr	r0, [r4, #8]
 800c612:	4302      	orrs	r2, r0
 800c614:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c616:	3801      	subs	r0, #1
 800c618:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c61c:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c61e:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c620:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c624:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c626:	d103      	bne.n	800c630 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800c628:	691a      	ldr	r2, [r3, #16]
 800c62a:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800c62e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800c630:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c632:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c634:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 800c636:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c638:	db1f      	blt.n	800c67a <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800c63a:	b292      	uxth	r2, r2
 800c63c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c63e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c640:	2a00      	cmp	r2, #0
 800c642:	db24      	blt.n	800c68e <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c644:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c646:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c64a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800c64e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c650:	d029      	beq.n	800c6a6 <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800c652:	b2c0      	uxtb	r0, r0
 800c654:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800c656:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800c658:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800c65a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 800c65c:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c65e:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800c660:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800c662:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 800c666:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800c66c:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c66e:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800c670:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c672:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800c676:	2001      	movs	r0, #1
}
 800c678:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c67a:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800c67c:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c67e:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c682:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c684:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c686:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c688:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	dada      	bge.n	800c644 <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c68e:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800c690:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c692:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c696:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800c69a:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c69c:	6a19      	ldr	r1, [r3, #32]
 800c69e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800c6a2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c6a4:	d1d5      	bne.n	800c652 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	629a      	str	r2, [r3, #40]	@ 0x28
 800c6aa:	e7d4      	b.n	800c656 <HAL_MDMA_Init+0x9e>

0800c6ac <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d06b      	beq.n	800c788 <HAL_MDMA_Start_IT+0xdc>
{
 800c6b0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hmdma);
 800c6b2:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
 800c6b6:	2c01      	cmp	r4, #1
 800c6b8:	d009      	beq.n	800c6ce <HAL_MDMA_Start_IT+0x22>
 800c6ba:	2401      	movs	r4, #1
 800c6bc:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800c6c0:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 800c6c4:	2c01      	cmp	r4, #1
 800c6c6:	d005      	beq.n	800c6d4 <HAL_MDMA_Start_IT+0x28>
    __HAL_UNLOCK(hmdma);
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800c6ce:	2002      	movs	r0, #2
}
 800c6d0:	bc70      	pop	{r4, r5, r6}
 800c6d2:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800c6d4:	2402      	movs	r4, #2
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800c6d6:	9e03      	ldr	r6, [sp, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800c6d8:	4d2c      	ldr	r5, [pc, #176]	@ (800c78c <HAL_MDMA_Start_IT+0xe0>)
 800c6da:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800c6de:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c6e2:	2400      	movs	r4, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800c6e4:	f106 3cff 	add.w	ip, r6, #4294967295
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800c6e8:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c6ec:	6684      	str	r4, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800c6ee:	6804      	ldr	r4, [r0, #0]
 800c6f0:	68e6      	ldr	r6, [r4, #12]
 800c6f2:	f026 0601 	bic.w	r6, r6, #1
 800c6f6:	60e6      	str	r6, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800c6f8:	6966      	ldr	r6, [r4, #20]
 800c6fa:	ea05 0506 	and.w	r5, r5, r6
 800c6fe:	ea45 0503 	orr.w	r5, r5, r3
 800c702:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800c704:	6963      	ldr	r3, [r4, #20]
 800c706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c70a:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800c70e:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800c710:	f04f 031f 	mov.w	r3, #31
 800c714:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800c716:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800c718:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800c71a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c71c:	bf0c      	ite	eq
 800c71e:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800c722:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800c726:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 800c72a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800c72c:	62a3      	str	r3, [r4, #40]	@ 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800c72e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c730:	bf0c      	ite	eq
 800c732:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800c736:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800c73a:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800c73c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800c73e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800c740:	68e3      	ldr	r3, [r4, #12]
 800c742:	f043 0306 	orr.w	r3, r3, #6
 800c746:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800c748:	b11a      	cbz	r2, 800c752 <HAL_MDMA_Start_IT+0xa6>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800c74a:	68e3      	ldr	r3, [r4, #12]
 800c74c:	f043 0310 	orr.w	r3, r3, #16
 800c750:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800c752:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800c754:	b11b      	cbz	r3, 800c75e <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800c756:	68e3      	ldr	r3, [r4, #12]
 800c758:	f043 0308 	orr.w	r3, r3, #8
 800c75c:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800c75e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800c760:	b11b      	cbz	r3, 800c76a <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800c762:	68e3      	ldr	r3, [r4, #12]
 800c764:	f043 0320 	orr.w	r3, r3, #32
 800c768:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800c76a:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c76c:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 800c76e:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c772:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 800c776:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c778:	d103      	bne.n	800c782 <HAL_MDMA_Start_IT+0xd6>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800c77a:	68e3      	ldr	r3, [r4, #12]
 800c77c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c780:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 800c782:	2000      	movs	r0, #0
}
 800c784:	bc70      	pop	{r4, r5, r6}
 800c786:	4770      	bx	lr
    return HAL_ERROR;
 800c788:	2001      	movs	r0, #1
}
 800c78a:	4770      	bx	lr
 800c78c:	fffe0000 	.word	0xfffe0000

0800c790 <HAL_MDMA_IRQHandler>:
{
 800c790:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 800c792:	2300      	movs	r3, #0
{
 800c794:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800c796:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 800c79a:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800c79c:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800c79e:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800c7a0:	4b57      	ldr	r3, [pc, #348]	@ (800c900 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800c7a2:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800c7a4:	4a57      	ldr	r2, [pc, #348]	@ (800c904 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800c7a6:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	441a      	add	r2, r3
 800c7ac:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800c7b0:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800c7b4:	4202      	tst	r2, r0
 800c7b6:	f000 80a0 	beq.w	800c8fa <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	07d1      	lsls	r1, r2, #31
 800c7be:	d529      	bpl.n	800c814 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800c7c0:	68da      	ldr	r2, [r3, #12]
 800c7c2:	0792      	lsls	r2, r2, #30
 800c7c4:	d526      	bpl.n	800c814 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800c7c6:	68da      	ldr	r2, [r3, #12]
 800c7c8:	f022 0202 	bic.w	r2, r2, #2
 800c7cc:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800c7ce:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800c7d0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800c7d2:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800c7d4:	bf54      	ite	pl
 800c7d6:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800c7da:	f041 0102 	orrmi.w	r1, r1, #2
 800c7de:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800c7e0:	0591      	lsls	r1, r2, #22
 800c7e2:	d503      	bpl.n	800c7ec <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800c7e4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800c7e6:	f041 0104 	orr.w	r1, r1, #4
 800c7ea:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800c7ec:	05d0      	lsls	r0, r2, #23
 800c7ee:	d503      	bpl.n	800c7f8 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800c7f0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800c7f2:	f041 0108 	orr.w	r1, r1, #8
 800c7f6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800c7f8:	0551      	lsls	r1, r2, #21
 800c7fa:	d503      	bpl.n	800c804 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800c7fc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800c7fe:	f041 0110 	orr.w	r1, r1, #16
 800c802:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800c804:	0510      	lsls	r0, r2, #20
 800c806:	d503      	bpl.n	800c810 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800c808:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800c80a:	f042 0220 	orr.w	r2, r2, #32
 800c80e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800c810:	2201      	movs	r2, #1
 800c812:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	06d1      	lsls	r1, r2, #27
 800c818:	d509      	bpl.n	800c82e <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800c81a:	68da      	ldr	r2, [r3, #12]
 800c81c:	0692      	lsls	r2, r2, #26
 800c81e:	d506      	bpl.n	800c82e <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800c820:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 800c822:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800c824:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800c826:	b112      	cbz	r2, 800c82e <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 800c828:	4620      	mov	r0, r4
 800c82a:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	0710      	lsls	r0, r2, #28
 800c832:	d509      	bpl.n	800c848 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800c834:	68da      	ldr	r2, [r3, #12]
 800c836:	06d1      	lsls	r1, r2, #27
 800c838:	d506      	bpl.n	800c848 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800c83a:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 800c83c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800c83e:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800c840:	b112      	cbz	r2, 800c848 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 800c842:	4620      	mov	r0, r4
 800c844:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	0752      	lsls	r2, r2, #29
 800c84c:	d509      	bpl.n	800c862 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800c84e:	68da      	ldr	r2, [r3, #12]
 800c850:	0710      	lsls	r0, r2, #28
 800c852:	d506      	bpl.n	800c862 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800c854:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800c856:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800c858:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800c85a:	b112      	cbz	r2, 800c862 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800c85c:	4620      	mov	r0, r4
 800c85e:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	0791      	lsls	r1, r2, #30
 800c866:	d516      	bpl.n	800c896 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800c868:	68da      	ldr	r2, [r3, #12]
 800c86a:	0752      	lsls	r2, r2, #29
 800c86c:	d513      	bpl.n	800c896 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800c86e:	68da      	ldr	r2, [r3, #12]
 800c870:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800c874:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800c876:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800c87a:	2a04      	cmp	r2, #4
 800c87c:	d034      	beq.n	800c8e8 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800c87e:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 800c880:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800c882:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800c884:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 800c886:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 800c888:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800c88c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800c890:	b10b      	cbz	r3, 800c896 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 800c892:	4620      	mov	r0, r4
 800c894:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800c896:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d02e      	beq.n	800c8fa <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 800c89c:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800c89e:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 800c8a0:	4b19      	ldr	r3, [pc, #100]	@ (800c908 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800c8a2:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 800c8a6:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 800c8aa:	68cb      	ldr	r3, [r1, #12]
 800c8ac:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800c8b0:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 800c8b2:	60cb      	str	r3, [r1, #12]
 800c8b4:	e002      	b.n	800c8bc <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800c8b6:	68cb      	ldr	r3, [r1, #12]
 800c8b8:	07d8      	lsls	r0, r3, #31
 800c8ba:	d504      	bpl.n	800c8c6 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 800c8bc:	9b01      	ldr	r3, [sp, #4]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	9301      	str	r3, [sp, #4]
 800c8c4:	d9f7      	bls.n	800c8b6 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c8cc:	68cb      	ldr	r3, [r1, #12]
 800c8ce:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c8d0:	bf4c      	ite	mi
 800c8d2:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800c8d4:	2301      	movpl	r3, #1
 800c8d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800c8da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c8dc:	b16b      	cbz	r3, 800c8fa <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 800c8de:	4620      	mov	r0, r4
}
 800c8e0:	b003      	add	sp, #12
 800c8e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800c8e6:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 800c8e8:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 800c8ea:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 800c8ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 800c8ee:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800c8f2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1f1      	bne.n	800c8de <HAL_MDMA_IRQHandler+0x14e>
}
 800c8fa:	b003      	add	sp, #12
 800c8fc:	bd30      	pop	{r4, r5, pc}
 800c8fe:	bf00      	nop
 800c900:	240138ec 	.word	0x240138ec
 800c904:	adffffc0 	.word	0xadffffc0
 800c908:	1b4e81b5 	.word	0x1b4e81b5

0800c90c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c90c:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c90e:	4c1b      	ldr	r4, [pc, #108]	@ (800c97c <HAL_PWREx_ConfigSupply+0x70>)
{
 800c910:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c912:	68e3      	ldr	r3, [r4, #12]
 800c914:	f003 0307 	and.w	r3, r3, #7
 800c918:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c91a:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c91c:	d005      	beq.n	800c92a <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c91e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c922:	1a18      	subs	r0, r3, r0
 800c924:	bf18      	it	ne
 800c926:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800c928:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c92a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c92e:	4303      	orrs	r3, r0
 800c930:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800c932:	f7fc f9a3 	bl	8008c7c <HAL_GetTick>
 800c936:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c938:	e005      	b.n	800c946 <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c93a:	f7fc f99f 	bl	8008c7c <HAL_GetTick>
 800c93e:	1b83      	subs	r3, r0, r6
 800c940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c944:	d818      	bhi.n	800c978 <HAL_PWREx_ConfigSupply+0x6c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c946:	6863      	ldr	r3, [r4, #4]
 800c948:	049a      	lsls	r2, r3, #18
 800c94a:	d5f6      	bpl.n	800c93a <HAL_PWREx_ConfigSupply+0x2e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c94c:	f1a5 031d 	sub.w	r3, r5, #29
 800c950:	2b01      	cmp	r3, #1
 800c952:	d904      	bls.n	800c95e <HAL_PWREx_ConfigSupply+0x52>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800c954:	3d2d      	subs	r5, #45	@ 0x2d
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c956:	2d01      	cmp	r5, #1
 800c958:	d901      	bls.n	800c95e <HAL_PWREx_ConfigSupply+0x52>
      return HAL_OK;
 800c95a:	2000      	movs	r0, #0
}
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800c95e:	f7fc f98d 	bl	8008c7c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c962:	4d06      	ldr	r5, [pc, #24]	@ (800c97c <HAL_PWREx_ConfigSupply+0x70>)
    tickstart = HAL_GetTick ();
 800c964:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c966:	68eb      	ldr	r3, [r5, #12]
 800c968:	03db      	lsls	r3, r3, #15
 800c96a:	d4f6      	bmi.n	800c95a <HAL_PWREx_ConfigSupply+0x4e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c96c:	f7fc f986 	bl	8008c7c <HAL_GetTick>
 800c970:	1b00      	subs	r0, r0, r4
 800c972:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800c976:	d9f6      	bls.n	800c966 <HAL_PWREx_ConfigSupply+0x5a>
      return HAL_ERROR;
 800c978:	2001      	movs	r0, #1
}
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	58024800 	.word	0x58024800

0800c980 <QSPI_Config>:
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c980:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 800c982:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c986:	b113      	cbz	r3, 800c98e <QSPI_Config+0xe>
 800c988:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800c98c:	d153      	bne.n	800ca36 <QSPI_Config+0xb6>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c98e:	698c      	ldr	r4, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c990:	e9d1 9707 	ldrd	r9, r7, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c994:	b364      	cbz	r4, 800c9f0 <QSPI_Config+0x70>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c996:	4323      	orrs	r3, r4
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c998:	6804      	ldr	r4, [r0, #0]
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c99a:	6948      	ldr	r0, [r1, #20]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800c9a0:	ea4f 4c80 	mov.w	ip, r0, lsl #18
 800c9a4:	6808      	ldr	r0, [r1, #0]
 800c9a6:	e9d1 860b 	ldrd	r8, r6, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c9aa:	2f00      	cmp	r7, #0
 800c9ac:	d066      	beq.n	800ca7c <QSPI_Config+0xfc>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c9ae:	ea43 0e07 	orr.w	lr, r3, r7
 800c9b2:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9b4:	690f      	ldr	r7, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c9b6:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c9b8:	f1b9 0f00 	cmp.w	r9, #0
 800c9bc:	d075      	beq.n	800caaa <QSPI_Config+0x12a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9be:	ea40 0309 	orr.w	r3, r0, r9
 800c9c2:	68c8      	ldr	r0, [r1, #12]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c9c4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9c8:	ea43 0308 	orr.w	r3, r3, r8
 800c9cc:	ea43 0306 	orr.w	r3, r3, r6
 800c9d0:	ea43 0305 	orr.w	r3, r3, r5
 800c9d4:	ea43 0307 	orr.w	r3, r3, r7
 800c9d8:	ea43 0300 	orr.w	r3, r3, r0
 800c9dc:	ea43 030c 	orr.w	r3, r3, ip
 800c9e0:	ea43 030e 	orr.w	r3, r3, lr
 800c9e4:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c9e6:	d06a      	beq.n	800cabe <QSPI_Config+0x13e>
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c9e8:	684b      	ldr	r3, [r1, #4]
 800c9ea:	61a3      	str	r3, [r4, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c9ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c9f0:	b337      	cbz	r7, 800ca40 <QSPI_Config+0xc0>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c9f2:	433b      	orrs	r3, r7
 800c9f4:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9f6:	694d      	ldr	r5, [r1, #20]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c9f8:	6888      	ldr	r0, [r1, #8]
 800c9fa:	4313      	orrs	r3, r2
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9fc:	04ad      	lsls	r5, r5, #18
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9fe:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ca00:	61e0      	str	r0, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca02:	6908      	ldr	r0, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca04:	e9d1 c70b 	ldrd	ip, r7, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ca08:	f1b9 0f00 	cmp.w	r9, #0
 800ca0c:	d063      	beq.n	800cad6 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca0e:	ea40 0009 	orr.w	r0, r0, r9
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ca12:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca16:	ea40 000c 	orr.w	r0, r0, ip
 800ca1a:	ea40 0007 	orr.w	r0, r0, r7
 800ca1e:	ea40 0006 	orr.w	r0, r0, r6
 800ca22:	68ce      	ldr	r6, [r1, #12]
 800ca24:	ea40 0006 	orr.w	r0, r0, r6
 800ca28:	ea40 0005 	orr.w	r0, r0, r5
 800ca2c:	ea43 0300 	orr.w	r3, r3, r0
 800ca30:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ca32:	d1d9      	bne.n	800c9e8 <QSPI_Config+0x68>
 800ca34:	e043      	b.n	800cabe <QSPI_Config+0x13e>
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ca36:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800ca38:	6805      	ldr	r5, [r0, #0]
 800ca3a:	3c01      	subs	r4, #1
 800ca3c:	612c      	str	r4, [r5, #16]
 800ca3e:	e7a6      	b.n	800c98e <QSPI_Config+0xe>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ca40:	f1b9 0f00 	cmp.w	r9, #0
 800ca44:	d050      	beq.n	800cae8 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca46:	ea43 0309 	orr.w	r3, r3, r9
 800ca4a:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800ca4c:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ca4e:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca52:	ea43 0302 	orr.w	r3, r3, r2
 800ca56:	ea43 0304 	orr.w	r3, r3, r4
 800ca5a:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800ca5c:	ea43 0304 	orr.w	r3, r3, r4
 800ca60:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800ca62:	ea43 0304 	orr.w	r3, r3, r4
 800ca66:	68cc      	ldr	r4, [r1, #12]
 800ca68:	ea43 0304 	orr.w	r3, r3, r4
 800ca6c:	694c      	ldr	r4, [r1, #20]
 800ca6e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800ca72:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ca74:	d023      	beq.n	800cabe <QSPI_Config+0x13e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ca76:	684b      	ldr	r3, [r1, #4]
 800ca78:	6183      	str	r3, [r0, #24]
 800ca7a:	e020      	b.n	800cabe <QSPI_Config+0x13e>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ca7c:	f1b9 0f00 	cmp.w	r9, #0
 800ca80:	d01f      	beq.n	800cac2 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca82:	ea40 0009 	orr.w	r0, r0, r9
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ca86:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca8a:	ea40 0008 	orr.w	r0, r0, r8
 800ca8e:	ea40 0006 	orr.w	r0, r0, r6
 800ca92:	ea40 0005 	orr.w	r0, r0, r5
 800ca96:	68cd      	ldr	r5, [r1, #12]
 800ca98:	ea40 0005 	orr.w	r0, r0, r5
 800ca9c:	ea40 000c 	orr.w	r0, r0, ip
 800caa0:	ea43 0300 	orr.w	r3, r3, r0
 800caa4:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800caa6:	d19f      	bne.n	800c9e8 <QSPI_Config+0x68>
 800caa8:	e009      	b.n	800cabe <QSPI_Config+0x13e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800caaa:	ea40 0308 	orr.w	r3, r0, r8
 800caae:	4333      	orrs	r3, r6
 800cab0:	432b      	orrs	r3, r5
 800cab2:	433b      	orrs	r3, r7
 800cab4:	ea43 030c 	orr.w	r3, r3, ip
 800cab8:	ea43 030e 	orr.w	r3, r3, lr
 800cabc:	6163      	str	r3, [r4, #20]
}
 800cabe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cac2:	ea40 0208 	orr.w	r2, r0, r8
 800cac6:	4332      	orrs	r2, r6
 800cac8:	432a      	orrs	r2, r5
 800caca:	ea42 020c 	orr.w	r2, r2, ip
 800cace:	4313      	orrs	r3, r2
 800cad0:	6163      	str	r3, [r4, #20]
}
 800cad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cad6:	ea40 020c 	orr.w	r2, r0, ip
 800cada:	433a      	orrs	r2, r7
 800cadc:	4332      	orrs	r2, r6
 800cade:	432a      	orrs	r2, r5
 800cae0:	4313      	orrs	r3, r2
 800cae2:	6163      	str	r3, [r4, #20]
}
 800cae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d0e8      	beq.n	800cabe <QSPI_Config+0x13e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800caec:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800caee:	6800      	ldr	r0, [r0, #0]
 800caf0:	4323      	orrs	r3, r4
 800caf2:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800caf4:	4313      	orrs	r3, r2
 800caf6:	694a      	ldr	r2, [r1, #20]
 800caf8:	4323      	orrs	r3, r4
 800cafa:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800cafc:	4323      	orrs	r3, r4
 800cafe:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800cb02:	6143      	str	r3, [r0, #20]
}
 800cb04:	e7db      	b.n	800cabe <QSPI_Config+0x13e>
 800cb06:	bf00      	nop

0800cb08 <HAL_QSPI_MspInit>:
}
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop

0800cb0c <HAL_QSPI_Init>:
{
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800cb10:	f7fc f8b4 	bl	8008c7c <HAL_GetTick>
  if(hqspi == NULL)
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	d04d      	beq.n	800cbb4 <HAL_QSPI_Init+0xa8>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800cb18:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d039      	beq.n	800cb96 <HAL_QSPI_Init+0x8a>
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cb22:	6cac      	ldr	r4, [r5, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800cb24:	682a      	ldr	r2, [r5, #0]
 800cb26:	68a9      	ldr	r1, [r5, #8]
 800cb28:	6813      	ldr	r3, [r2, #0]
 800cb2a:	3901      	subs	r1, #1
 800cb2c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800cb30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cb34:	6013      	str	r3, [r2, #0]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cb36:	e001      	b.n	800cb3c <HAL_QSPI_Init+0x30>
    if (Timeout != HAL_MAX_DELAY)
 800cb38:	1c63      	adds	r3, r4, #1
 800cb3a:	d124      	bne.n	800cb86 <HAL_QSPI_Init+0x7a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cb3c:	6893      	ldr	r3, [r2, #8]
 800cb3e:	f013 0320 	ands.w	r3, r3, #32
 800cb42:	d1f9      	bne.n	800cb38 <HAL_QSPI_Init+0x2c>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800cb44:	69e8      	ldr	r0, [r5, #28]
 800cb46:	68e9      	ldr	r1, [r5, #12]
 800cb48:	6814      	ldr	r4, [r2, #0]
 800cb4a:	4301      	orrs	r1, r0
 800cb4c:	6a28      	ldr	r0, [r5, #32]
 800cb4e:	4301      	orrs	r1, r0
 800cb50:	6868      	ldr	r0, [r5, #4]
 800cb52:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800cb56:	4818      	ldr	r0, [pc, #96]	@ (800cbb8 <HAL_QSPI_Init+0xac>)
 800cb58:	4020      	ands	r0, r4
 800cb5a:	4301      	orrs	r1, r0
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cb5c:	6968      	ldr	r0, [r5, #20]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800cb5e:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cb60:	69a9      	ldr	r1, [r5, #24]
 800cb62:	6854      	ldr	r4, [r2, #4]
 800cb64:	4301      	orrs	r1, r0
 800cb66:	6928      	ldr	r0, [r5, #16]
 800cb68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb6c:	4813      	ldr	r0, [pc, #76]	@ (800cbbc <HAL_QSPI_Init+0xb0>)
 800cb6e:	4020      	ands	r0, r4
    hqspi->State = HAL_QSPI_STATE_READY;
 800cb70:	2401      	movs	r4, #1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cb72:	4301      	orrs	r1, r0
    hqspi->State = HAL_QSPI_STATE_READY;
 800cb74:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cb76:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800cb78:	6811      	ldr	r1, [r2, #0]
 800cb7a:	4321      	orrs	r1, r4
 800cb7c:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cb7e:	646b      	str	r3, [r5, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800cb80:	f885 4041 	strb.w	r4, [r5, #65]	@ 0x41
}
 800cb84:	bd70      	pop	{r4, r5, r6, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb86:	f7fc f879 	bl	8008c7c <HAL_GetTick>
 800cb8a:	1b80      	subs	r0, r0, r6
 800cb8c:	4284      	cmp	r4, r0
 800cb8e:	d30a      	bcc.n	800cba6 <HAL_QSPI_Init+0x9a>
 800cb90:	b14c      	cbz	r4, 800cba6 <HAL_QSPI_Init+0x9a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cb92:	682a      	ldr	r2, [r5, #0]
 800cb94:	e7d2      	b.n	800cb3c <HAL_QSPI_Init+0x30>
    HAL_QSPI_MspInit(hqspi);
 800cb96:	4628      	mov	r0, r5
 800cb98:	f7ff ffb6 	bl	800cb08 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800cb9c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 800cba0:	461c      	mov	r4, r3
  hqspi->Timeout = Timeout;
 800cba2:	64ab      	str	r3, [r5, #72]	@ 0x48
}
 800cba4:	e7be      	b.n	800cb24 <HAL_QSPI_Init+0x18>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cba6:	2304      	movs	r3, #4
 800cba8:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cbac:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800cbae:	f043 0301 	orr.w	r3, r3, #1
 800cbb2:	646b      	str	r3, [r5, #68]	@ 0x44
    return HAL_ERROR;
 800cbb4:	2001      	movs	r0, #1
}
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	00ffff2f 	.word	0x00ffff2f
 800cbbc:	ffe0f8fe 	.word	0xffe0f8fe

0800cbc0 <HAL_QSPI_Command>:
{
 800cbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800cbca:	f7fc f857 	bl	8008c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cbce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d032      	beq.n	800cc3c <HAL_QSPI_Command+0x7c>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cbdc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	fa5f f883 	uxtb.w	r8, r3
 800cbe6:	d007      	beq.n	800cbf8 <HAL_QSPI_Command+0x38>
    status = HAL_BUSY;
 800cbe8:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
 800cbf0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800cbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	1c71      	adds	r1, r6, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cbfc:	6825      	ldr	r5, [r4, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cbfe:	6463      	str	r3, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800cc00:	f04f 0302 	mov.w	r3, #2
 800cc04:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cc08:	d11d      	bne.n	800cc46 <HAL_QSPI_Command+0x86>
 800cc0a:	68aa      	ldr	r2, [r5, #8]
 800cc0c:	f012 0220 	ands.w	r2, r2, #32
 800cc10:	d1fb      	bne.n	800cc0a <HAL_QSPI_Command+0x4a>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cc12:	4639      	mov	r1, r7
 800cc14:	4620      	mov	r0, r4
 800cc16:	f7ff feb3 	bl	800c980 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1c:	b12b      	cbz	r3, 800cc2a <HAL_QSPI_Command+0x6a>
        hqspi->State = HAL_QSPI_STATE_READY;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cc24:	f04f 0800 	mov.w	r8, #0
 800cc28:	e7e0      	b.n	800cbec <HAL_QSPI_Command+0x2c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cc2a:	68ab      	ldr	r3, [r5, #8]
 800cc2c:	079a      	lsls	r2, r3, #30
 800cc2e:	d5fc      	bpl.n	800cc2a <HAL_QSPI_Command+0x6a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cc30:	2202      	movs	r2, #2
          hqspi->State = HAL_QSPI_STATE_READY;
 800cc32:	2301      	movs	r3, #1
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cc34:	60ea      	str	r2, [r5, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 800cc36:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800cc3a:	e7f3      	b.n	800cc24 <HAL_QSPI_Command+0x64>
  __HAL_LOCK(hqspi);
 800cc3c:	f04f 0802 	mov.w	r8, #2
}
 800cc40:	4640      	mov	r0, r8
 800cc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc46:	4681      	mov	r9, r0
 800cc48:	e007      	b.n	800cc5a <HAL_QSPI_Command+0x9a>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc4a:	f7fc f817 	bl	8008c7c <HAL_GetTick>
 800cc4e:	eba0 0009 	sub.w	r0, r0, r9
 800cc52:	4286      	cmp	r6, r0
 800cc54:	d318      	bcc.n	800cc88 <HAL_QSPI_Command+0xc8>
 800cc56:	b1be      	cbz	r6, 800cc88 <HAL_QSPI_Command+0xc8>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cc58:	6825      	ldr	r5, [r4, #0]
 800cc5a:	68aa      	ldr	r2, [r5, #8]
 800cc5c:	f012 0220 	ands.w	r2, r2, #32
 800cc60:	d1f3      	bne.n	800cc4a <HAL_QSPI_Command+0x8a>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cc62:	4639      	mov	r1, r7
 800cc64:	4620      	mov	r0, r4
 800cc66:	f7ff fe8b 	bl	800c980 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6c:	b143      	cbz	r3, 800cc80 <HAL_QSPI_Command+0xc0>
 800cc6e:	e7d6      	b.n	800cc1e <HAL_QSPI_Command+0x5e>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc70:	f7fc f804 	bl	8008c7c <HAL_GetTick>
 800cc74:	eba0 0309 	sub.w	r3, r0, r9
 800cc78:	429e      	cmp	r6, r3
 800cc7a:	d305      	bcc.n	800cc88 <HAL_QSPI_Command+0xc8>
 800cc7c:	b126      	cbz	r6, 800cc88 <HAL_QSPI_Command+0xc8>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cc7e:	6825      	ldr	r5, [r4, #0]
 800cc80:	68ab      	ldr	r3, [r5, #8]
 800cc82:	079b      	lsls	r3, r3, #30
 800cc84:	d5f4      	bpl.n	800cc70 <HAL_QSPI_Command+0xb0>
 800cc86:	e7d3      	b.n	800cc30 <HAL_QSPI_Command+0x70>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cc88:	2304      	movs	r3, #4
 800cc8a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cc8e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cc90:	f043 0301 	orr.w	r3, r3, #1
 800cc94:	6463      	str	r3, [r4, #68]	@ 0x44
        if (status == HAL_OK)
 800cc96:	e7a9      	b.n	800cbec <HAL_QSPI_Command+0x2c>

0800cc98 <HAL_QSPI_Transmit>:
{
 800cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	4689      	mov	r9, r1
 800cca0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800cca2:	f7fb ffeb 	bl	8008c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cca6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ccaa:	f8d4 8000 	ldr.w	r8, [r4]
  __HAL_LOCK(hqspi);
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d065      	beq.n	800cd7e <HAL_QSPI_Transmit+0xe6>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ccb8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	b2df      	uxtb	r7, r3
 800ccc0:	d006      	beq.n	800ccd0 <HAL_QSPI_Transmit+0x38>
    status = HAL_BUSY;
 800ccc2:	2702      	movs	r7, #2
  __HAL_UNLOCK(hqspi);
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4638      	mov	r0, r7
  __HAL_UNLOCK(hqspi);
 800ccc8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800cccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800ccd4:	f1b9 0f00 	cmp.w	r9, #0
 800ccd8:	d05d      	beq.n	800cd96 <HAL_QSPI_Transmit+0xfe>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ccda:	2312      	movs	r3, #18
 800ccdc:	4606      	mov	r6, r0
 800ccde:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800cce2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cce6:	3301      	adds	r3, #1
 800cce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ccea:	f8d8 3010 	ldr.w	r3, [r8, #16]
      hqspi->pTxBuffPtr = pData;
 800ccee:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ccf6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ccfa:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800ccfe:	f8c8 3014 	str.w	r3, [r8, #20]
      while(hqspi->TxXferCount > 0U)
 800cd02:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cd04:	b303      	cbz	r3, 800cd48 <HAL_QSPI_Transmit+0xb0>
 800cd06:	4641      	mov	r1, r8
 800cd08:	1c6a      	adds	r2, r5, #1
 800cd0a:	d117      	bne.n	800cd3c <HAL_QSPI_Transmit+0xa4>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cd0c:	688b      	ldr	r3, [r1, #8]
 800cd0e:	075b      	lsls	r3, r3, #29
 800cd10:	d5fc      	bpl.n	800cd0c <HAL_QSPI_Transmit+0x74>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cd12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	f888 3020 	strb.w	r3, [r8, #32]
        hqspi->TxXferCount--;
 800cd1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hqspi->pTxBuffPtr++;
 800cd1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800cd1e:	3a01      	subs	r2, #1
        hqspi->pTxBuffPtr++;
 800cd20:	3301      	adds	r3, #1
        hqspi->TxXferCount--;
 800cd22:	62e2      	str	r2, [r4, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 800cd24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hqspi->pTxBuffPtr++;
 800cd26:	6263      	str	r3, [r4, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800cd28:	b162      	cbz	r2, 800cd44 <HAL_QSPI_Transmit+0xac>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cd2a:	6821      	ldr	r1, [r4, #0]
 800cd2c:	e7ec      	b.n	800cd08 <HAL_QSPI_Transmit+0x70>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd2e:	f7fb ffa5 	bl	8008c7c <HAL_GetTick>
 800cd32:	1b80      	subs	r0, r0, r6
 800cd34:	4285      	cmp	r5, r0
 800cd36:	d326      	bcc.n	800cd86 <HAL_QSPI_Transmit+0xee>
 800cd38:	b32d      	cbz	r5, 800cd86 <HAL_QSPI_Transmit+0xee>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cd3a:	6821      	ldr	r1, [r4, #0]
 800cd3c:	688b      	ldr	r3, [r1, #8]
 800cd3e:	0758      	lsls	r0, r3, #29
 800cd40:	d5f5      	bpl.n	800cd2e <HAL_QSPI_Transmit+0x96>
 800cd42:	e7e6      	b.n	800cd12 <HAL_QSPI_Transmit+0x7a>
 800cd44:	f8d4 8000 	ldr.w	r8, [r4]
 800cd48:	1c69      	adds	r1, r5, #1
 800cd4a:	d113      	bne.n	800cd74 <HAL_QSPI_Transmit+0xdc>
 800cd4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd50:	079a      	lsls	r2, r3, #30
 800cd52:	d5fb      	bpl.n	800cd4c <HAL_QSPI_Transmit+0xb4>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cd54:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cd56:	2700      	movs	r7, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cd58:	f8c8 300c 	str.w	r3, [r8, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800cd62:	e7af      	b.n	800ccc4 <HAL_QSPI_Transmit+0x2c>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd64:	f7fb ff8a 	bl	8008c7c <HAL_GetTick>
 800cd68:	1b83      	subs	r3, r0, r6
 800cd6a:	429d      	cmp	r5, r3
 800cd6c:	d30b      	bcc.n	800cd86 <HAL_QSPI_Transmit+0xee>
 800cd6e:	b155      	cbz	r5, 800cd86 <HAL_QSPI_Transmit+0xee>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cd70:	f8d4 8000 	ldr.w	r8, [r4]
 800cd74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd78:	079b      	lsls	r3, r3, #30
 800cd7a:	d5f3      	bpl.n	800cd64 <HAL_QSPI_Transmit+0xcc>
 800cd7c:	e7ea      	b.n	800cd54 <HAL_QSPI_Transmit+0xbc>
  __HAL_LOCK(hqspi);
 800cd7e:	2702      	movs	r7, #2
}
 800cd80:	4638      	mov	r0, r7
 800cd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cd86:	2304      	movs	r3, #4
 800cd88:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cd8c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cd8e:	f043 0301 	orr.w	r3, r3, #1
 800cd92:	6463      	str	r3, [r4, #68]	@ 0x44
        if (status == HAL_OK)
 800cd94:	e7e2      	b.n	800cd5c <HAL_QSPI_Transmit+0xc4>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800cd96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cd98:	f043 0308 	orr.w	r3, r3, #8
 800cd9c:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800cd9e:	e791      	b.n	800ccc4 <HAL_QSPI_Transmit+0x2c>

0800cda0 <HAL_QSPI_Receive>:
{
 800cda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda4:	4604      	mov	r4, r0
 800cda6:	4615      	mov	r5, r2
 800cda8:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800cdaa:	f7fb ff67 	bl	8008c7c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800cdae:	f8d4 8000 	ldr.w	r8, [r4]
 800cdb2:	f8d8 2018 	ldr.w	r2, [r8, #24]
  __HAL_LOCK(hqspi);
 800cdb6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d06b      	beq.n	800ce96 <HAL_QSPI_Receive+0xf6>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cdc4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	b2df      	uxtb	r7, r3
 800cdcc:	d006      	beq.n	800cddc <HAL_QSPI_Receive+0x3c>
    status = HAL_BUSY;
 800cdce:	2702      	movs	r7, #2
  __HAL_UNLOCK(hqspi);
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4638      	mov	r0, r7
  __HAL_UNLOCK(hqspi);
 800cdd4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800cdd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cddc:	2300      	movs	r3, #0
 800cdde:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800cde0:	f1b9 0f00 	cmp.w	r9, #0
 800cde4:	d063      	beq.n	800ceae <HAL_QSPI_Receive+0x10e>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800cde6:	2322      	movs	r3, #34	@ 0x22
 800cde8:	4606      	mov	r6, r0
 800cdea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800cdee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cdf6:	f8d8 3010 	ldr.w	r3, [r8, #16]
      hqspi->pRxBuffPtr = pData;
 800cdfa:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cdfe:	3301      	adds	r3, #1
 800ce00:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ce02:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ce06:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800ce0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce0e:	f8c8 3014 	str.w	r3, [r8, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800ce12:	f8c8 2018 	str.w	r2, [r8, #24]
      while(hqspi->RxXferCount > 0U)
 800ce16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ce18:	b313      	cbz	r3, 800ce60 <HAL_QSPI_Receive+0xc0>
 800ce1a:	4641      	mov	r1, r8
 800ce1c:	1c68      	adds	r0, r5, #1
 800ce1e:	d118      	bne.n	800ce52 <HAL_QSPI_Receive+0xb2>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ce20:	688b      	ldr	r3, [r1, #8]
 800ce22:	f013 0f06 	tst.w	r3, #6
 800ce26:	d0fb      	beq.n	800ce20 <HAL_QSPI_Receive+0x80>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ce28:	f898 2020 	ldrb.w	r2, [r8, #32]
 800ce2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce2e:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 800ce30:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hqspi->pRxBuffPtr++;
 800ce32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800ce34:	3a01      	subs	r2, #1
        hqspi->pRxBuffPtr++;
 800ce36:	3301      	adds	r3, #1
        hqspi->RxXferCount--;
 800ce38:	63a2      	str	r2, [r4, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 800ce3a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hqspi->pRxBuffPtr++;
 800ce3c:	6323      	str	r3, [r4, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800ce3e:	b16a      	cbz	r2, 800ce5c <HAL_QSPI_Receive+0xbc>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ce40:	6821      	ldr	r1, [r4, #0]
 800ce42:	e7eb      	b.n	800ce1c <HAL_QSPI_Receive+0x7c>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce44:	f7fb ff1a 	bl	8008c7c <HAL_GetTick>
 800ce48:	1b80      	subs	r0, r0, r6
 800ce4a:	4285      	cmp	r5, r0
 800ce4c:	d327      	bcc.n	800ce9e <HAL_QSPI_Receive+0xfe>
 800ce4e:	b335      	cbz	r5, 800ce9e <HAL_QSPI_Receive+0xfe>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ce50:	6821      	ldr	r1, [r4, #0]
 800ce52:	688b      	ldr	r3, [r1, #8]
 800ce54:	f013 0f06 	tst.w	r3, #6
 800ce58:	d0f4      	beq.n	800ce44 <HAL_QSPI_Receive+0xa4>
 800ce5a:	e7e5      	b.n	800ce28 <HAL_QSPI_Receive+0x88>
 800ce5c:	f8d4 8000 	ldr.w	r8, [r4]
 800ce60:	1c69      	adds	r1, r5, #1
 800ce62:	d113      	bne.n	800ce8c <HAL_QSPI_Receive+0xec>
 800ce64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce68:	079a      	lsls	r2, r3, #30
 800ce6a:	d5fb      	bpl.n	800ce64 <HAL_QSPI_Receive+0xc4>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ce6c:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ce6e:	2700      	movs	r7, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ce70:	f8c8 300c 	str.w	r3, [r8, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800ce74:	2301      	movs	r3, #1
 800ce76:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ce7a:	e7a9      	b.n	800cdd0 <HAL_QSPI_Receive+0x30>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce7c:	f7fb fefe 	bl	8008c7c <HAL_GetTick>
 800ce80:	1b83      	subs	r3, r0, r6
 800ce82:	429d      	cmp	r5, r3
 800ce84:	d30b      	bcc.n	800ce9e <HAL_QSPI_Receive+0xfe>
 800ce86:	b155      	cbz	r5, 800ce9e <HAL_QSPI_Receive+0xfe>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ce88:	f8d4 8000 	ldr.w	r8, [r4]
 800ce8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce90:	079b      	lsls	r3, r3, #30
 800ce92:	d5f3      	bpl.n	800ce7c <HAL_QSPI_Receive+0xdc>
 800ce94:	e7ea      	b.n	800ce6c <HAL_QSPI_Receive+0xcc>
  __HAL_LOCK(hqspi);
 800ce96:	2702      	movs	r7, #2
}
 800ce98:	4638      	mov	r0, r7
 800ce9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ce9e:	2304      	movs	r3, #4
 800cea0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cea4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cea6:	f043 0301 	orr.w	r3, r3, #1
 800ceaa:	6463      	str	r3, [r4, #68]	@ 0x44
        if  (status == HAL_OK)
 800ceac:	e7e2      	b.n	800ce74 <HAL_QSPI_Receive+0xd4>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ceae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ceb0:	f043 0308 	orr.w	r3, r3, #8
 800ceb4:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800ceb6:	e78b      	b.n	800cdd0 <HAL_QSPI_Receive+0x30>

0800ceb8 <HAL_QSPI_AutoPolling>:
{
 800ceb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebc:	4604      	mov	r4, r0
 800cebe:	4698      	mov	r8, r3
 800cec0:	4689      	mov	r9, r1
 800cec2:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800cec4:	f7fb feda 	bl	8008c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cec8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d066      	beq.n	800cf9e <HAL_QSPI_AutoPolling+0xe6>
 800ced0:	2301      	movs	r3, #1
 800ced2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ced6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	fa5f fb83 	uxtb.w	fp, r3
 800cee0:	d007      	beq.n	800cef2 <HAL_QSPI_AutoPolling+0x3a>
    status = HAL_BUSY;
 800cee2:	f04f 0b02 	mov.w	fp, #2
  __HAL_UNLOCK(hqspi);
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4658      	mov	r0, fp
  __HAL_UNLOCK(hqspi);
 800ceea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ceee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cef2:	2300      	movs	r3, #0
 800cef4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cef8:	4682      	mov	sl, r0
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cefa:	6826      	ldr	r6, [r4, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cefc:	6463      	str	r3, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800cefe:	f04f 0342 	mov.w	r3, #66	@ 0x42
 800cf02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cf06:	d131      	bne.n	800cf6c <HAL_QSPI_AutoPolling+0xb4>
 800cf08:	68b5      	ldr	r5, [r6, #8]
 800cf0a:	06a8      	lsls	r0, r5, #26
 800cf0c:	d4fc      	bmi.n	800cf08 <HAL_QSPI_AutoPolling+0x50>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cf0e:	683b      	ldr	r3, [r7, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cf10:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cf12:	693a      	ldr	r2, [r7, #16]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cf14:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cf16:	62b3      	str	r3, [r6, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6273      	str	r3, [r6, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	62f3      	str	r3, [r6, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cf20:	6833      	ldr	r3, [r6, #0]
 800cf22:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800cf26:	4313      	orrs	r3, r2
      cmd->NbData = cfg->StatusBytesSize;
 800cf28:	68fa      	ldr	r2, [r7, #12]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cf2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cf2e:	6033      	str	r3, [r6, #0]
      cmd->NbData = cfg->StatusBytesSize;
 800cf30:	f8c9 2028 	str.w	r2, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cf34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800cf38:	f7ff fd22 	bl	800c980 <QSPI_Config>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cf3c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cf40:	d11c      	bne.n	800cf7c <HAL_QSPI_AutoPolling+0xc4>
 800cf42:	68b3      	ldr	r3, [r6, #8]
 800cf44:	071a      	lsls	r2, r3, #28
 800cf46:	d5fc      	bpl.n	800cf42 <HAL_QSPI_AutoPolling+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800cf48:	2208      	movs	r2, #8
        hqspi->State = HAL_QSPI_STATE_READY;
 800cf4a:	2301      	movs	r3, #1
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800cf4c:	f04f 0b00 	mov.w	fp, #0
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800cf50:	60f2      	str	r2, [r6, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800cf52:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800cf56:	e7c6      	b.n	800cee6 <HAL_QSPI_AutoPolling+0x2e>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf58:	f7fb fe90 	bl	8008c7c <HAL_GetTick>
 800cf5c:	eba0 000a 	sub.w	r0, r0, sl
 800cf60:	4580      	cmp	r8, r0
 800cf62:	d314      	bcc.n	800cf8e <HAL_QSPI_AutoPolling+0xd6>
 800cf64:	f1b8 0f00 	cmp.w	r8, #0
 800cf68:	d011      	beq.n	800cf8e <HAL_QSPI_AutoPolling+0xd6>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cf6a:	6826      	ldr	r6, [r4, #0]
 800cf6c:	68b3      	ldr	r3, [r6, #8]
 800cf6e:	0699      	lsls	r1, r3, #26
 800cf70:	d4f2      	bmi.n	800cf58 <HAL_QSPI_AutoPolling+0xa0>
 800cf72:	e7cc      	b.n	800cf0e <HAL_QSPI_AutoPolling+0x56>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf74:	f1b8 0f00 	cmp.w	r8, #0
 800cf78:	d009      	beq.n	800cf8e <HAL_QSPI_AutoPolling+0xd6>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cf7a:	6826      	ldr	r6, [r4, #0]
 800cf7c:	68b3      	ldr	r3, [r6, #8]
 800cf7e:	071b      	lsls	r3, r3, #28
 800cf80:	d4e2      	bmi.n	800cf48 <HAL_QSPI_AutoPolling+0x90>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf82:	f7fb fe7b 	bl	8008c7c <HAL_GetTick>
 800cf86:	eba0 000a 	sub.w	r0, r0, sl
 800cf8a:	4580      	cmp	r8, r0
 800cf8c:	d2f2      	bcs.n	800cf74 <HAL_QSPI_AutoPolling+0xbc>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cf8e:	2304      	movs	r3, #4
 800cf90:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cf94:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cf96:	f043 0301 	orr.w	r3, r3, #1
 800cf9a:	6463      	str	r3, [r4, #68]	@ 0x44
      if (status == HAL_OK)
 800cf9c:	e7a3      	b.n	800cee6 <HAL_QSPI_AutoPolling+0x2e>
  __HAL_LOCK(hqspi);
 800cf9e:	f04f 0b02 	mov.w	fp, #2
}
 800cfa2:	4658      	mov	r0, fp
 800cfa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfa8 <HAL_QSPI_MemoryMapped>:
{
 800cfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfac:	4604      	mov	r4, r0
 800cfae:	460f      	mov	r7, r1
 800cfb0:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800cfb2:	f7fb fe63 	bl	8008c7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cfb6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d031      	beq.n	800d022 <HAL_QSPI_MemoryMapped+0x7a>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cfc4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	fa5f f983 	uxtb.w	r9, r3
 800cfce:	d007      	beq.n	800cfe0 <HAL_QSPI_MemoryMapped+0x38>
    status = HAL_BUSY;
 800cfd0:	f04f 0902 	mov.w	r9, #2
  __HAL_UNLOCK(hqspi);
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4648      	mov	r0, r9
  __HAL_UNLOCK(hqspi);
 800cfd8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800cfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cfe0:	2300      	movs	r3, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cfe2:	f8d4 a048 	ldr.w	sl, [r4, #72]	@ 0x48
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cfe6:	6825      	ldr	r5, [r4, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cfe8:	6463      	str	r3, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800cfea:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cfee:	f04f 0382 	mov.w	r3, #130	@ 0x82
 800cff2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cff6:	d122      	bne.n	800d03e <HAL_QSPI_MemoryMapped+0x96>
 800cff8:	68ab      	ldr	r3, [r5, #8]
 800cffa:	069a      	lsls	r2, r3, #26
 800cffc:	d4fc      	bmi.n	800cff8 <HAL_QSPI_MemoryMapped+0x50>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800cffe:	682b      	ldr	r3, [r5, #0]
 800d000:	6872      	ldr	r2, [r6, #4]
 800d002:	f023 0308 	bic.w	r3, r3, #8
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d006:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d008:	ea43 0302 	orr.w	r3, r3, r2
 800d00c:	602b      	str	r3, [r5, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d00e:	d00d      	beq.n	800d02c <HAL_QSPI_MemoryMapped+0x84>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d010:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800d014:	4639      	mov	r1, r7
 800d016:	4620      	mov	r0, r4
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d018:	f04f 0900 	mov.w	r9, #0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d01c:	f7ff fcb0 	bl	800c980 <QSPI_Config>
 800d020:	e7d8      	b.n	800cfd4 <HAL_QSPI_MemoryMapped+0x2c>
  __HAL_LOCK(hqspi);
 800d022:	f04f 0902 	mov.w	r9, #2
}
 800d026:	4648      	mov	r0, r9
 800d028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d02c:	6832      	ldr	r2, [r6, #0]
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d02e:	2310      	movs	r3, #16
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d030:	632a      	str	r2, [r5, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d032:	60eb      	str	r3, [r5, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d03a:	602b      	str	r3, [r5, #0]
 800d03c:	e7e8      	b.n	800d010 <HAL_QSPI_MemoryMapped+0x68>
 800d03e:	4680      	mov	r8, r0
 800d040:	e009      	b.n	800d056 <HAL_QSPI_MemoryMapped+0xae>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d042:	f7fb fe1b 	bl	8008c7c <HAL_GetTick>
 800d046:	eba0 0008 	sub.w	r0, r0, r8
 800d04a:	4582      	cmp	sl, r0
 800d04c:	d307      	bcc.n	800d05e <HAL_QSPI_MemoryMapped+0xb6>
 800d04e:	f1ba 0f00 	cmp.w	sl, #0
 800d052:	d004      	beq.n	800d05e <HAL_QSPI_MemoryMapped+0xb6>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d054:	6825      	ldr	r5, [r4, #0]
 800d056:	68ab      	ldr	r3, [r5, #8]
 800d058:	069b      	lsls	r3, r3, #26
 800d05a:	d4f2      	bmi.n	800d042 <HAL_QSPI_MemoryMapped+0x9a>
 800d05c:	e7cf      	b.n	800cffe <HAL_QSPI_MemoryMapped+0x56>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d05e:	2304      	movs	r3, #4
 800d060:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d064:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d066:	f043 0301 	orr.w	r3, r3, #1
 800d06a:	6463      	str	r3, [r4, #68]	@ 0x44
    if (status == HAL_OK)
 800d06c:	e7b2      	b.n	800cfd4 <HAL_QSPI_MemoryMapped+0x2c>
 800d06e:	bf00      	nop

0800d070 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d070:	4b33      	ldr	r3, [pc, #204]	@ (800d140 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800d072:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d074:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d076:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d078:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800d07a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d07e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d080:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800d084:	d036      	beq.n	800d0f4 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d086:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d08a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d08e:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d092:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d096:	fb05 f202 	mul.w	r2, r5, r2
 800d09a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d09c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d0a0:	ee06 2a90 	vmov	s13, r2
 800d0a4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800d0a8:	d002      	beq.n	800d0b0 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800d0aa:	2902      	cmp	r1, #2
 800d0ac:	d042      	beq.n	800d134 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800d0ae:	b319      	cbz	r1, 800d0f8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0b0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800d144 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800d0b4:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800d0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0be:	ee07 3a90 	vmov	s15, r3
 800d0c2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800d0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ce:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d0d2:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d0d6:	4b1a      	ldr	r3, [pc, #104]	@ (800d140 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 800d0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0da:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d0de:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d0e0:	ee07 3a10 	vmov	s14, r3
 800d0e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800d0e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d0ec:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800d0f0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800d0f4:	bc30      	pop	{r4, r5}
 800d0f6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	0692      	lsls	r2, r2, #26
 800d0fc:	d51d      	bpl.n	800d13a <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0fe:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d100:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d104:	4a10      	ldr	r2, [pc, #64]	@ (800d148 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d108:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d110:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	ee06 2a10 	vmov	s12, r2
 800d11a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d11e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d122:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800d126:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800d12a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800d12e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d132:	e7d0      	b.n	800d0d6 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d134:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800d14c <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 800d138:	e7bc      	b.n	800d0b4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d13a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800d150 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800d13e:	e7b9      	b.n	800d0b4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800d140:	58024400 	.word	0x58024400
 800d144:	4a742400 	.word	0x4a742400
 800d148:	03d09000 	.word	0x03d09000
 800d14c:	4bbebc20 	.word	0x4bbebc20
 800d150:	4c742400 	.word	0x4c742400

0800d154 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800d154:	2800      	cmp	r0, #0
 800d156:	f000 82ef 	beq.w	800d738 <HAL_RCC_OscConfig+0x5e4>
{
 800d15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d15c:	6803      	ldr	r3, [r0, #0]
 800d15e:	4604      	mov	r4, r0
 800d160:	07d8      	lsls	r0, r3, #31
 800d162:	d530      	bpl.n	800d1c6 <HAL_RCC_OscConfig+0x72>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d164:	4998      	ldr	r1, [pc, #608]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d166:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d168:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d16a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d16e:	2a10      	cmp	r2, #16
 800d170:	f000 80f0 	beq.w	800d354 <HAL_RCC_OscConfig+0x200>
 800d174:	2a18      	cmp	r2, #24
 800d176:	f000 80e8 	beq.w	800d34a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d17a:	6863      	ldr	r3, [r4, #4]
 800d17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d180:	f000 8113 	beq.w	800d3aa <HAL_RCC_OscConfig+0x256>
 800d184:	2b00      	cmp	r3, #0
 800d186:	f000 816a 	beq.w	800d45e <HAL_RCC_OscConfig+0x30a>
 800d18a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d18e:	4b8e      	ldr	r3, [pc, #568]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	f000 8290 	beq.w	800d6b6 <HAL_RCC_OscConfig+0x562>
 800d196:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d19a:	601a      	str	r2, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d1a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d1a4:	f7fb fd6a 	bl	8008c7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d1a8:	4e87      	ldr	r6, [pc, #540]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d1aa:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800d1ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d1b0:	e005      	b.n	800d1be <HAL_RCC_OscConfig+0x6a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d1b2:	f7fb fd63 	bl	8008c7c <HAL_GetTick>
 800d1b6:	1b40      	subs	r0, r0, r5
 800d1b8:	42b8      	cmp	r0, r7
 800d1ba:	f200 814e 	bhi.w	800d45a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d1be:	6833      	ldr	r3, [r6, #0]
 800d1c0:	039a      	lsls	r2, r3, #14
 800d1c2:	d5f6      	bpl.n	800d1b2 <HAL_RCC_OscConfig+0x5e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	079d      	lsls	r5, r3, #30
 800d1c8:	d470      	bmi.n	800d2ac <HAL_RCC_OscConfig+0x158>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d1ca:	06d9      	lsls	r1, r3, #27
 800d1cc:	d533      	bpl.n	800d236 <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1ce:	4a7e      	ldr	r2, [pc, #504]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d1d0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1d2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d1d8:	2b08      	cmp	r3, #8
 800d1da:	f000 80cb 	beq.w	800d374 <HAL_RCC_OscConfig+0x220>
 800d1de:	2b18      	cmp	r3, #24
 800d1e0:	f000 80c3 	beq.w	800d36a <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d1e4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800d1e6:	4d78      	ldr	r5, [pc, #480]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 8172 	beq.w	800d4d2 <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_CSI_ENABLE();
 800d1ee:	682b      	ldr	r3, [r5, #0]
 800d1f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d1f6:	f7fb fd41 	bl	8008c7c <HAL_GetTick>
 800d1fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d1fc:	e005      	b.n	800d20a <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d1fe:	f7fb fd3d 	bl	8008c7c <HAL_GetTick>
 800d202:	1b80      	subs	r0, r0, r6
 800d204:	2802      	cmp	r0, #2
 800d206:	f200 8128 	bhi.w	800d45a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d20a:	682b      	ldr	r3, [r5, #0]
 800d20c:	05db      	lsls	r3, r3, #23
 800d20e:	d5f6      	bpl.n	800d1fe <HAL_RCC_OscConfig+0xaa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d210:	f7fb fd4c 	bl	8008cac <HAL_GetREVID>
 800d214:	f241 0303 	movw	r3, #4099	@ 0x1003
 800d218:	4298      	cmp	r0, r3
 800d21a:	f200 826d 	bhi.w	800d6f8 <HAL_RCC_OscConfig+0x5a4>
 800d21e:	6a22      	ldr	r2, [r4, #32]
 800d220:	686b      	ldr	r3, [r5, #4]
 800d222:	2a20      	cmp	r2, #32
 800d224:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d228:	bf0c      	ite	eq
 800d22a:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800d22e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800d232:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d234:	6823      	ldr	r3, [r4, #0]
 800d236:	071d      	lsls	r5, r3, #28
 800d238:	d516      	bpl.n	800d268 <HAL_RCC_OscConfig+0x114>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d23a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800d23c:	4d62      	ldr	r5, [pc, #392]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f000 8125 	beq.w	800d48e <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_LSI_ENABLE();
 800d244:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d246:	f043 0301 	orr.w	r3, r3, #1
 800d24a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800d24c:	f7fb fd16 	bl	8008c7c <HAL_GetTick>
 800d250:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d252:	e005      	b.n	800d260 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d254:	f7fb fd12 	bl	8008c7c <HAL_GetTick>
 800d258:	1b80      	subs	r0, r0, r6
 800d25a:	2802      	cmp	r0, #2
 800d25c:	f200 80fd 	bhi.w	800d45a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d260:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d262:	0798      	lsls	r0, r3, #30
 800d264:	d5f6      	bpl.n	800d254 <HAL_RCC_OscConfig+0x100>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	069a      	lsls	r2, r3, #26
 800d26a:	d516      	bpl.n	800d29a <HAL_RCC_OscConfig+0x146>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d26c:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800d26e:	4d56      	ldr	r5, [pc, #344]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d270:	2b00      	cmp	r3, #0
 800d272:	f000 811d 	beq.w	800d4b0 <HAL_RCC_OscConfig+0x35c>
      __HAL_RCC_HSI48_ENABLE();
 800d276:	682b      	ldr	r3, [r5, #0]
 800d278:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d27c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d27e:	f7fb fcfd 	bl	8008c7c <HAL_GetTick>
 800d282:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d284:	e005      	b.n	800d292 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d286:	f7fb fcf9 	bl	8008c7c <HAL_GetTick>
 800d28a:	1b80      	subs	r0, r0, r6
 800d28c:	2802      	cmp	r0, #2
 800d28e:	f200 80e4 	bhi.w	800d45a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d292:	682b      	ldr	r3, [r5, #0]
 800d294:	049f      	lsls	r7, r3, #18
 800d296:	d5f6      	bpl.n	800d286 <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d298:	6823      	ldr	r3, [r4, #0]
 800d29a:	0759      	lsls	r1, r3, #29
 800d29c:	f100 808b 	bmi.w	800d3b6 <HAL_RCC_OscConfig+0x262>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d2a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f040 80bf 	bne.w	800d426 <HAL_RCC_OscConfig+0x2d2>
  return HAL_OK;
 800d2a8:	2000      	movs	r0, #0
}
 800d2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2ac:	4a46      	ldr	r2, [pc, #280]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d2ae:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d2b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d2b2:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800d2b6:	d12d      	bne.n	800d314 <HAL_RCC_OscConfig+0x1c0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2b8:	4b43      	ldr	r3, [pc, #268]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d2ba:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	0759      	lsls	r1, r3, #29
 800d2c0:	d501      	bpl.n	800d2c6 <HAL_RCC_OscConfig+0x172>
 800d2c2:	2a00      	cmp	r2, #0
 800d2c4:	d04f      	beq.n	800d366 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d2c6:	4d40      	ldr	r5, [pc, #256]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	f023 0319 	bic.w	r3, r3, #25
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d2d2:	f7fb fcd3 	bl	8008c7c <HAL_GetTick>
 800d2d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d2d8:	e005      	b.n	800d2e6 <HAL_RCC_OscConfig+0x192>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d2da:	f7fb fccf 	bl	8008c7c <HAL_GetTick>
 800d2de:	1b80      	subs	r0, r0, r6
 800d2e0:	2802      	cmp	r0, #2
 800d2e2:	f200 80ba 	bhi.w	800d45a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d2e6:	682b      	ldr	r3, [r5, #0]
 800d2e8:	075b      	lsls	r3, r3, #29
 800d2ea:	d5f6      	bpl.n	800d2da <HAL_RCC_OscConfig+0x186>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2ec:	f7fb fcde 	bl	8008cac <HAL_GetREVID>
 800d2f0:	f241 0303 	movw	r3, #4099	@ 0x1003
 800d2f4:	4298      	cmp	r0, r3
 800d2f6:	f200 8113 	bhi.w	800d520 <HAL_RCC_OscConfig+0x3cc>
 800d2fa:	6922      	ldr	r2, [r4, #16]
 800d2fc:	686b      	ldr	r3, [r5, #4]
 800d2fe:	2a40      	cmp	r2, #64	@ 0x40
 800d300:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d304:	bf0c      	ite	eq
 800d306:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800d30a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800d30e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	e75a      	b.n	800d1ca <HAL_RCC_OscConfig+0x76>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d314:	2b18      	cmp	r3, #24
 800d316:	f000 80ff 	beq.w	800d518 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d31a:	4d2b      	ldr	r5, [pc, #172]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d31c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d31e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d320:	2a00      	cmp	r2, #0
 800d322:	f000 80e8 	beq.w	800d4f6 <HAL_RCC_OscConfig+0x3a2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d326:	f023 0319 	bic.w	r3, r3, #25
 800d32a:	4313      	orrs	r3, r2
 800d32c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d32e:	f7fb fca5 	bl	8008c7c <HAL_GetTick>
 800d332:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d334:	e005      	b.n	800d342 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d336:	f7fb fca1 	bl	8008c7c <HAL_GetTick>
 800d33a:	1b80      	subs	r0, r0, r6
 800d33c:	2802      	cmp	r0, #2
 800d33e:	f200 808c 	bhi.w	800d45a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d342:	682b      	ldr	r3, [r5, #0]
 800d344:	075f      	lsls	r7, r3, #29
 800d346:	d5f6      	bpl.n	800d336 <HAL_RCC_OscConfig+0x1e2>
 800d348:	e7d0      	b.n	800d2ec <HAL_RCC_OscConfig+0x198>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d34a:	f001 0103 	and.w	r1, r1, #3
 800d34e:	2902      	cmp	r1, #2
 800d350:	f47f af13 	bne.w	800d17a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d354:	4a1c      	ldr	r2, [pc, #112]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d356:	6812      	ldr	r2, [r2, #0]
 800d358:	0391      	lsls	r1, r2, #14
 800d35a:	f57f af34 	bpl.w	800d1c6 <HAL_RCC_OscConfig+0x72>
 800d35e:	6862      	ldr	r2, [r4, #4]
 800d360:	2a00      	cmp	r2, #0
 800d362:	f47f af30 	bne.w	800d1c6 <HAL_RCC_OscConfig+0x72>
    return HAL_ERROR;
 800d366:	2001      	movs	r0, #1
}
 800d368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d36a:	f002 0203 	and.w	r2, r2, #3
 800d36e:	2a01      	cmp	r2, #1
 800d370:	f47f af38 	bne.w	800d1e4 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d374:	4b14      	ldr	r3, [pc, #80]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	05da      	lsls	r2, r3, #23
 800d37a:	d502      	bpl.n	800d382 <HAL_RCC_OscConfig+0x22e>
 800d37c:	69e3      	ldr	r3, [r4, #28]
 800d37e:	2b80      	cmp	r3, #128	@ 0x80
 800d380:	d1f1      	bne.n	800d366 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d382:	f7fb fc93 	bl	8008cac <HAL_GetREVID>
 800d386:	f241 0303 	movw	r3, #4099	@ 0x1003
 800d38a:	4298      	cmp	r0, r3
 800d38c:	f200 80d1 	bhi.w	800d532 <HAL_RCC_OscConfig+0x3de>
 800d390:	6a22      	ldr	r2, [r4, #32]
 800d392:	2a20      	cmp	r2, #32
 800d394:	f000 81bf 	beq.w	800d716 <HAL_RCC_OscConfig+0x5c2>
 800d398:	490b      	ldr	r1, [pc, #44]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d39a:	684b      	ldr	r3, [r1, #4]
 800d39c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d3a0:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800d3a4:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	e745      	b.n	800d236 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d3aa:	4a07      	ldr	r2, [pc, #28]	@ (800d3c8 <HAL_RCC_OscConfig+0x274>)
 800d3ac:	6813      	ldr	r3, [r2, #0]
 800d3ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3b2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d3b4:	e6f6      	b.n	800d1a4 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800d3b6:	4d05      	ldr	r5, [pc, #20]	@ (800d3cc <HAL_RCC_OscConfig+0x278>)
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d3be:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800d3c0:	f7fb fc5c 	bl	8008c7c <HAL_GetTick>
 800d3c4:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3c6:	e008      	b.n	800d3da <HAL_RCC_OscConfig+0x286>
 800d3c8:	58024400 	.word	0x58024400
 800d3cc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3d0:	f7fb fc54 	bl	8008c7c <HAL_GetTick>
 800d3d4:	1b80      	subs	r0, r0, r6
 800d3d6:	2864      	cmp	r0, #100	@ 0x64
 800d3d8:	d83f      	bhi.n	800d45a <HAL_RCC_OscConfig+0x306>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3da:	682b      	ldr	r3, [r5, #0]
 800d3dc:	05da      	lsls	r2, r3, #23
 800d3de:	d5f7      	bpl.n	800d3d0 <HAL_RCC_OscConfig+0x27c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3e0:	68a3      	ldr	r3, [r4, #8]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	f000 8191 	beq.w	800d70a <HAL_RCC_OscConfig+0x5b6>
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f000 816c 	beq.w	800d6c6 <HAL_RCC_OscConfig+0x572>
 800d3ee:	2b05      	cmp	r3, #5
 800d3f0:	4b87      	ldr	r3, [pc, #540]	@ (800d610 <HAL_RCC_OscConfig+0x4bc>)
 800d3f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d3f4:	f000 8198 	beq.w	800d728 <HAL_RCC_OscConfig+0x5d4>
 800d3f8:	f022 0201 	bic.w	r2, r2, #1
 800d3fc:	671a      	str	r2, [r3, #112]	@ 0x70
 800d3fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d400:	f022 0204 	bic.w	r2, r2, #4
 800d404:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800d406:	f7fb fc39 	bl	8008c7c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d40a:	4e81      	ldr	r6, [pc, #516]	@ (800d610 <HAL_RCC_OscConfig+0x4bc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d40c:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800d410:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d412:	e004      	b.n	800d41e <HAL_RCC_OscConfig+0x2ca>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d414:	f7fb fc32 	bl	8008c7c <HAL_GetTick>
 800d418:	1b40      	subs	r0, r0, r5
 800d41a:	42b8      	cmp	r0, r7
 800d41c:	d81d      	bhi.n	800d45a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d41e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800d420:	079b      	lsls	r3, r3, #30
 800d422:	d5f7      	bpl.n	800d414 <HAL_RCC_OscConfig+0x2c0>
 800d424:	e73c      	b.n	800d2a0 <HAL_RCC_OscConfig+0x14c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d426:	4d7a      	ldr	r5, [pc, #488]	@ (800d610 <HAL_RCC_OscConfig+0x4bc>)
 800d428:	692a      	ldr	r2, [r5, #16]
 800d42a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800d42e:	2a18      	cmp	r2, #24
 800d430:	f000 80f4 	beq.w	800d61c <HAL_RCC_OscConfig+0x4c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d434:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800d436:	682b      	ldr	r3, [r5, #0]
 800d438:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d43c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d43e:	f000 8082 	beq.w	800d546 <HAL_RCC_OscConfig+0x3f2>
        tickstart = HAL_GetTick();
 800d442:	f7fb fc1b 	bl	8008c7c <HAL_GetTick>
 800d446:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	019b      	lsls	r3, r3, #6
 800d44c:	f57f af2c 	bpl.w	800d2a8 <HAL_RCC_OscConfig+0x154>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d450:	f7fb fc14 	bl	8008c7c <HAL_GetTick>
 800d454:	1b00      	subs	r0, r0, r4
 800d456:	2802      	cmp	r0, #2
 800d458:	d9f6      	bls.n	800d448 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 800d45a:	2003      	movs	r0, #3
}
 800d45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d45e:	4d6c      	ldr	r5, [pc, #432]	@ (800d610 <HAL_RCC_OscConfig+0x4bc>)
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d460:	f241 3788 	movw	r7, #5000	@ 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d472:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d474:	f7fb fc02 	bl	8008c7c <HAL_GetTick>
 800d478:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d47a:	e004      	b.n	800d486 <HAL_RCC_OscConfig+0x332>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d47c:	f7fb fbfe 	bl	8008c7c <HAL_GetTick>
 800d480:	1b80      	subs	r0, r0, r6
 800d482:	42b8      	cmp	r0, r7
 800d484:	d8e9      	bhi.n	800d45a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d486:	682b      	ldr	r3, [r5, #0]
 800d488:	039b      	lsls	r3, r3, #14
 800d48a:	d4f7      	bmi.n	800d47c <HAL_RCC_OscConfig+0x328>
 800d48c:	e69a      	b.n	800d1c4 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_LSI_DISABLE();
 800d48e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d490:	f023 0301 	bic.w	r3, r3, #1
 800d494:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800d496:	f7fb fbf1 	bl	8008c7c <HAL_GetTick>
 800d49a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d49c:	e004      	b.n	800d4a8 <HAL_RCC_OscConfig+0x354>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d49e:	f7fb fbed 	bl	8008c7c <HAL_GetTick>
 800d4a2:	1b80      	subs	r0, r0, r6
 800d4a4:	2802      	cmp	r0, #2
 800d4a6:	d8d8      	bhi.n	800d45a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d4a8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d4aa:	0799      	lsls	r1, r3, #30
 800d4ac:	d4f7      	bmi.n	800d49e <HAL_RCC_OscConfig+0x34a>
 800d4ae:	e6da      	b.n	800d266 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 800d4b0:	682b      	ldr	r3, [r5, #0]
 800d4b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d4b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d4b8:	f7fb fbe0 	bl	8008c7c <HAL_GetTick>
 800d4bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d4be:	e004      	b.n	800d4ca <HAL_RCC_OscConfig+0x376>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d4c0:	f7fb fbdc 	bl	8008c7c <HAL_GetTick>
 800d4c4:	1b80      	subs	r0, r0, r6
 800d4c6:	2802      	cmp	r0, #2
 800d4c8:	d8c7      	bhi.n	800d45a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d4ca:	682b      	ldr	r3, [r5, #0]
 800d4cc:	0498      	lsls	r0, r3, #18
 800d4ce:	d4f7      	bmi.n	800d4c0 <HAL_RCC_OscConfig+0x36c>
 800d4d0:	e6e2      	b.n	800d298 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 800d4d2:	682b      	ldr	r3, [r5, #0]
 800d4d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d4da:	f7fb fbcf 	bl	8008c7c <HAL_GetTick>
 800d4de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d4e0:	e004      	b.n	800d4ec <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d4e2:	f7fb fbcb 	bl	8008c7c <HAL_GetTick>
 800d4e6:	1b80      	subs	r0, r0, r6
 800d4e8:	2802      	cmp	r0, #2
 800d4ea:	d8b6      	bhi.n	800d45a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	05df      	lsls	r7, r3, #23
 800d4f0:	d4f7      	bmi.n	800d4e2 <HAL_RCC_OscConfig+0x38e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	e69f      	b.n	800d236 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 800d4f6:	f023 0301 	bic.w	r3, r3, #1
 800d4fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d4fc:	f7fb fbbe 	bl	8008c7c <HAL_GetTick>
 800d500:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d502:	e004      	b.n	800d50e <HAL_RCC_OscConfig+0x3ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d504:	f7fb fbba 	bl	8008c7c <HAL_GetTick>
 800d508:	1b80      	subs	r0, r0, r6
 800d50a:	2802      	cmp	r0, #2
 800d50c:	d8a5      	bhi.n	800d45a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	0758      	lsls	r0, r3, #29
 800d512:	d4f7      	bmi.n	800d504 <HAL_RCC_OscConfig+0x3b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d514:	6823      	ldr	r3, [r4, #0]
 800d516:	e658      	b.n	800d1ca <HAL_RCC_OscConfig+0x76>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d518:	0790      	lsls	r0, r2, #30
 800d51a:	f47f aefe 	bne.w	800d31a <HAL_RCC_OscConfig+0x1c6>
 800d51e:	e6cb      	b.n	800d2b8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d520:	686b      	ldr	r3, [r5, #4]
 800d522:	6922      	ldr	r2, [r4, #16]
 800d524:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d528:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d52c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	e64b      	b.n	800d1ca <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d532:	4a37      	ldr	r2, [pc, #220]	@ (800d610 <HAL_RCC_OscConfig+0x4bc>)
 800d534:	6a21      	ldr	r1, [r4, #32]
 800d536:	68d3      	ldr	r3, [r2, #12]
 800d538:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800d53c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d540:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	e677      	b.n	800d236 <HAL_RCC_OscConfig+0xe2>
        tickstart = HAL_GetTick();
 800d546:	f7fb fb99 	bl	8008c7c <HAL_GetTick>
 800d54a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d54c:	e004      	b.n	800d558 <HAL_RCC_OscConfig+0x404>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d54e:	f7fb fb95 	bl	8008c7c <HAL_GetTick>
 800d552:	1b80      	subs	r0, r0, r6
 800d554:	2802      	cmp	r0, #2
 800d556:	d880      	bhi.n	800d45a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	0199      	lsls	r1, r3, #6
 800d55c:	d4f7      	bmi.n	800d54e <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d55e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800d560:	4b2c      	ldr	r3, [pc, #176]	@ (800d614 <HAL_RCC_OscConfig+0x4c0>)
 800d562:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d564:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d566:	492c      	ldr	r1, [pc, #176]	@ (800d618 <HAL_RCC_OscConfig+0x4c4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d568:	4e29      	ldr	r6, [pc, #164]	@ (800d610 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d56a:	4313      	orrs	r3, r2
 800d56c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d56e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d572:	62ab      	str	r3, [r5, #40]	@ 0x28
 800d574:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800d578:	3b01      	subs	r3, #1
 800d57a:	3a01      	subs	r2, #1
 800d57c:	025b      	lsls	r3, r3, #9
 800d57e:	0412      	lsls	r2, r2, #16
 800d580:	b29b      	uxth	r3, r3
 800d582:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d586:	4313      	orrs	r3, r2
 800d588:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d58a:	3a01      	subs	r2, #1
 800d58c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d590:	4313      	orrs	r3, r2
 800d592:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800d594:	3a01      	subs	r2, #1
 800d596:	0612      	lsls	r2, r2, #24
 800d598:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d59c:	4313      	orrs	r3, r2
 800d59e:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800d5a0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800d5a2:	f023 0301 	bic.w	r3, r3, #1
 800d5a6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d5a8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800d5aa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d5ac:	4011      	ands	r1, r2
 800d5ae:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800d5b2:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d5b4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800d5b6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d5b8:	f023 030c 	bic.w	r3, r3, #12
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d5c0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800d5c2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800d5c4:	f023 0302 	bic.w	r3, r3, #2
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d5cc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800d5ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5d2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5d4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800d5d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d5da:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d5dc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800d5de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d5e2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800d5e4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800d5e6:	f043 0301 	orr.w	r3, r3, #1
 800d5ea:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d5f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d5f4:	f7fb fb42 	bl	8008c7c <HAL_GetTick>
 800d5f8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d5fa:	6833      	ldr	r3, [r6, #0]
 800d5fc:	019a      	lsls	r2, r3, #6
 800d5fe:	f53f ae53 	bmi.w	800d2a8 <HAL_RCC_OscConfig+0x154>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d602:	f7fb fb3b 	bl	8008c7c <HAL_GetTick>
 800d606:	1b00      	subs	r0, r0, r4
 800d608:	2802      	cmp	r0, #2
 800d60a:	d9f6      	bls.n	800d5fa <HAL_RCC_OscConfig+0x4a6>
 800d60c:	e725      	b.n	800d45a <HAL_RCC_OscConfig+0x306>
 800d60e:	bf00      	nop
 800d610:	58024400 	.word	0x58024400
 800d614:	fffffc0c 	.word	0xfffffc0c
 800d618:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d61c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d61e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d620:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d622:	f43f aea0 	beq.w	800d366 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d626:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d62a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d62c:	428b      	cmp	r3, r1
 800d62e:	f47f ae9a 	bne.w	800d366 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d632:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d636:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d638:	429a      	cmp	r2, r3
 800d63a:	f47f ae94 	bne.w	800d366 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d63e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d640:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800d644:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d646:	429a      	cmp	r2, r3
 800d648:	f47f ae8d 	bne.w	800d366 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d64c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d64e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800d652:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d654:	429a      	cmp	r2, r3
 800d656:	f47f ae86 	bne.w	800d366 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d65a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d65c:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800d660:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d662:	429a      	cmp	r2, r3
 800d664:	f47f ae7f 	bne.w	800d366 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d668:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d66a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800d66e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d670:	4298      	cmp	r0, r3
 800d672:	f47f ae78 	bne.w	800d366 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d676:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d678:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d67a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d67e:	429a      	cmp	r2, r3
 800d680:	f43f ae12 	beq.w	800d2a8 <HAL_RCC_OscConfig+0x154>
          __HAL_RCC_PLLFRACN_DISABLE();
 800d684:	4a2d      	ldr	r2, [pc, #180]	@ (800d73c <HAL_RCC_OscConfig+0x5e8>)
 800d686:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d688:	f023 0301 	bic.w	r3, r3, #1
 800d68c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800d68e:	f7fb faf5 	bl	8008c7c <HAL_GetTick>
 800d692:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d694:	f7fb faf2 	bl	8008c7c <HAL_GetTick>
 800d698:	42a8      	cmp	r0, r5
 800d69a:	d0fb      	beq.n	800d694 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d69c:	4a27      	ldr	r2, [pc, #156]	@ (800d73c <HAL_RCC_OscConfig+0x5e8>)
 800d69e:	4b28      	ldr	r3, [pc, #160]	@ (800d740 <HAL_RCC_OscConfig+0x5ec>)
 800d6a0:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800d6a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d6a4:	4003      	ands	r3, r0
 800d6a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d6aa:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800d6ac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d6ae:	f043 0301 	orr.w	r3, r3, #1
 800d6b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d6b4:	e5f8      	b.n	800d2a8 <HAL_RCC_OscConfig+0x154>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6b6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d6c2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d6c4:	e56e      	b.n	800d1a4 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6c6:	4d1d      	ldr	r5, [pc, #116]	@ (800d73c <HAL_RCC_OscConfig+0x5e8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6c8:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d6ce:	f023 0301 	bic.w	r3, r3, #1
 800d6d2:	672b      	str	r3, [r5, #112]	@ 0x70
 800d6d4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d6d6:	f023 0304 	bic.w	r3, r3, #4
 800d6da:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800d6dc:	f7fb face 	bl	8008c7c <HAL_GetTick>
 800d6e0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d6e2:	e005      	b.n	800d6f0 <HAL_RCC_OscConfig+0x59c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6e4:	f7fb faca 	bl	8008c7c <HAL_GetTick>
 800d6e8:	1b80      	subs	r0, r0, r6
 800d6ea:	42b8      	cmp	r0, r7
 800d6ec:	f63f aeb5 	bhi.w	800d45a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d6f0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d6f2:	0798      	lsls	r0, r3, #30
 800d6f4:	d4f6      	bmi.n	800d6e4 <HAL_RCC_OscConfig+0x590>
 800d6f6:	e5d3      	b.n	800d2a0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d6f8:	68eb      	ldr	r3, [r5, #12]
 800d6fa:	6a22      	ldr	r2, [r4, #32]
 800d6fc:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800d700:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d704:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	e595      	b.n	800d236 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d70a:	4a0c      	ldr	r2, [pc, #48]	@ (800d73c <HAL_RCC_OscConfig+0x5e8>)
 800d70c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800d70e:	f043 0301 	orr.w	r3, r3, #1
 800d712:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d714:	e677      	b.n	800d406 <HAL_RCC_OscConfig+0x2b2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d716:	4a09      	ldr	r2, [pc, #36]	@ (800d73c <HAL_RCC_OscConfig+0x5e8>)
 800d718:	6853      	ldr	r3, [r2, #4]
 800d71a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d71e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d722:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d724:	6823      	ldr	r3, [r4, #0]
 800d726:	e586      	b.n	800d236 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d728:	f042 0204 	orr.w	r2, r2, #4
 800d72c:	671a      	str	r2, [r3, #112]	@ 0x70
 800d72e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d730:	f042 0201 	orr.w	r2, r2, #1
 800d734:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d736:	e666      	b.n	800d406 <HAL_RCC_OscConfig+0x2b2>
    return HAL_ERROR;
 800d738:	2001      	movs	r0, #1
}
 800d73a:	4770      	bx	lr
 800d73c:	58024400 	.word	0x58024400
 800d740:	ffff0007 	.word	0xffff0007

0800d744 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d744:	4a3f      	ldr	r2, [pc, #252]	@ (800d844 <HAL_RCC_GetSysClockFreq+0x100>)
 800d746:	6913      	ldr	r3, [r2, #16]
 800d748:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d74c:	2b10      	cmp	r3, #16
 800d74e:	d004      	beq.n	800d75a <HAL_RCC_GetSysClockFreq+0x16>
 800d750:	2b18      	cmp	r3, #24
 800d752:	d00d      	beq.n	800d770 <HAL_RCC_GetSysClockFreq+0x2c>
 800d754:	b11b      	cbz	r3, 800d75e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800d756:	483c      	ldr	r0, [pc, #240]	@ (800d848 <HAL_RCC_GetSysClockFreq+0x104>)
 800d758:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d75a:	483c      	ldr	r0, [pc, #240]	@ (800d84c <HAL_RCC_GetSysClockFreq+0x108>)
 800d75c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d75e:	6813      	ldr	r3, [r2, #0]
 800d760:	0699      	lsls	r1, r3, #26
 800d762:	d548      	bpl.n	800d7f6 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d764:	6813      	ldr	r3, [r2, #0]
 800d766:	483a      	ldr	r0, [pc, #232]	@ (800d850 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d768:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d76c:	40d8      	lsrs	r0, r3
 800d76e:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d770:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 800d772:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d774:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d776:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 800d778:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d77c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d77e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800d782:	d036      	beq.n	800d7f2 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d784:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d788:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d78c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d790:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d794:	fb05 f303 	mul.w	r3, r5, r3
 800d798:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d79a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d79e:	ee06 3a90 	vmov	s13, r3
 800d7a2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800d7a6:	d002      	beq.n	800d7ae <HAL_RCC_GetSysClockFreq+0x6a>
 800d7a8:	2902      	cmp	r1, #2
 800d7aa:	d026      	beq.n	800d7fa <HAL_RCC_GetSysClockFreq+0xb6>
 800d7ac:	b341      	cbz	r1, 800d800 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7ae:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800d854 <HAL_RCC_GetSysClockFreq+0x110>
 800d7b2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800d7b6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800d7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7bc:	ee07 3a10 	vmov	s14, r3
 800d7c0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800d7c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d7c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d7cc:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d7d0:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d7d4:	4b1b      	ldr	r3, [pc, #108]	@ (800d844 <HAL_RCC_GetSysClockFreq+0x100>)
 800d7d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d7dc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d7de:	ee07 3a90 	vmov	s15, r3
 800d7e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d7e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d7ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ee:	ee17 0a90 	vmov	r0, s15
}
 800d7f2:	bc30      	pop	{r4, r5}
 800d7f4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d7f6:	4816      	ldr	r0, [pc, #88]	@ (800d850 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 800d7f8:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7fa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800d858 <HAL_RCC_GetSysClockFreq+0x114>
 800d7fe:	e7d8      	b.n	800d7b2 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d800:	6813      	ldr	r3, [r2, #0]
 800d802:	069b      	lsls	r3, r3, #26
 800d804:	d51a      	bpl.n	800d83c <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d806:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d808:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800d80c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d80e:	4910      	ldr	r1, [pc, #64]	@ (800d850 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d810:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d814:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d818:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d81a:	ee07 3a10 	vmov	s14, r3
 800d81e:	ee06 1a10 	vmov	s12, r1
 800d822:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d826:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d82a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800d82e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800d832:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800d836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d83a:	e7cb      	b.n	800d7d4 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d83c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800d85c <HAL_RCC_GetSysClockFreq+0x118>
 800d840:	e7b7      	b.n	800d7b2 <HAL_RCC_GetSysClockFreq+0x6e>
 800d842:	bf00      	nop
 800d844:	58024400 	.word	0x58024400
 800d848:	003d0900 	.word	0x003d0900
 800d84c:	017d7840 	.word	0x017d7840
 800d850:	03d09000 	.word	0x03d09000
 800d854:	4a742400 	.word	0x4a742400
 800d858:	4bbebc20 	.word	0x4bbebc20
 800d85c:	4c742400 	.word	0x4c742400

0800d860 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800d860:	2800      	cmp	r0, #0
 800d862:	f000 810e 	beq.w	800da82 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d866:	4a8d      	ldr	r2, [pc, #564]	@ (800da9c <HAL_RCC_ClockConfig+0x23c>)
 800d868:	6813      	ldr	r3, [r2, #0]
 800d86a:	f003 030f 	and.w	r3, r3, #15
 800d86e:	428b      	cmp	r3, r1
{
 800d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d874:	4604      	mov	r4, r0
 800d876:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d878:	d20c      	bcs.n	800d894 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d87a:	6813      	ldr	r3, [r2, #0]
 800d87c:	f023 030f 	bic.w	r3, r3, #15
 800d880:	430b      	orrs	r3, r1
 800d882:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d884:	6813      	ldr	r3, [r2, #0]
 800d886:	f003 030f 	and.w	r3, r3, #15
 800d88a:	428b      	cmp	r3, r1
 800d88c:	d002      	beq.n	800d894 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800d88e:	2001      	movs	r0, #1
}
 800d890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	0758      	lsls	r0, r3, #29
 800d898:	d50b      	bpl.n	800d8b2 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d89a:	4981      	ldr	r1, [pc, #516]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d89c:	6920      	ldr	r0, [r4, #16]
 800d89e:	698a      	ldr	r2, [r1, #24]
 800d8a0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800d8a4:	4290      	cmp	r0, r2
 800d8a6:	d904      	bls.n	800d8b2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d8a8:	698a      	ldr	r2, [r1, #24]
 800d8aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d8ae:	4302      	orrs	r2, r0
 800d8b0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8b2:	0719      	lsls	r1, r3, #28
 800d8b4:	d50b      	bpl.n	800d8ce <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d8b6:	497a      	ldr	r1, [pc, #488]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d8b8:	6960      	ldr	r0, [r4, #20]
 800d8ba:	69ca      	ldr	r2, [r1, #28]
 800d8bc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800d8c0:	4290      	cmp	r0, r2
 800d8c2:	d904      	bls.n	800d8ce <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d8c4:	69ca      	ldr	r2, [r1, #28]
 800d8c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d8ca:	4302      	orrs	r2, r0
 800d8cc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8ce:	06da      	lsls	r2, r3, #27
 800d8d0:	d50b      	bpl.n	800d8ea <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d8d2:	4973      	ldr	r1, [pc, #460]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d8d4:	69a0      	ldr	r0, [r4, #24]
 800d8d6:	69ca      	ldr	r2, [r1, #28]
 800d8d8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800d8dc:	4290      	cmp	r0, r2
 800d8de:	d904      	bls.n	800d8ea <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d8e0:	69ca      	ldr	r2, [r1, #28]
 800d8e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800d8e6:	4302      	orrs	r2, r0
 800d8e8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d8ea:	069f      	lsls	r7, r3, #26
 800d8ec:	d50b      	bpl.n	800d906 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d8ee:	496c      	ldr	r1, [pc, #432]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d8f0:	69e0      	ldr	r0, [r4, #28]
 800d8f2:	6a0a      	ldr	r2, [r1, #32]
 800d8f4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800d8f8:	4290      	cmp	r0, r2
 800d8fa:	d904      	bls.n	800d906 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d8fc:	6a0a      	ldr	r2, [r1, #32]
 800d8fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d902:	4302      	orrs	r2, r0
 800d904:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d906:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d908:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d90c:	f140 80ab 	bpl.w	800da66 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d910:	4e63      	ldr	r6, [pc, #396]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d912:	68e0      	ldr	r0, [r4, #12]
 800d914:	69b1      	ldr	r1, [r6, #24]
 800d916:	f001 010f 	and.w	r1, r1, #15
 800d91a:	4288      	cmp	r0, r1
 800d91c:	d904      	bls.n	800d928 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d91e:	69b1      	ldr	r1, [r6, #24]
 800d920:	f021 010f 	bic.w	r1, r1, #15
 800d924:	4301      	orrs	r1, r0
 800d926:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d928:	2a00      	cmp	r2, #0
 800d92a:	d030      	beq.n	800d98e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d92c:	4a5c      	ldr	r2, [pc, #368]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d92e:	68a1      	ldr	r1, [r4, #8]
 800d930:	6993      	ldr	r3, [r2, #24]
 800d932:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d936:	430b      	orrs	r3, r1
 800d938:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d93a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d93c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d93e:	2902      	cmp	r1, #2
 800d940:	f000 80a1 	beq.w	800da86 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d944:	2903      	cmp	r1, #3
 800d946:	f000 8098 	beq.w	800da7a <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d94a:	2901      	cmp	r1, #1
 800d94c:	f000 80a1 	beq.w	800da92 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d950:	075f      	lsls	r7, r3, #29
 800d952:	d59c      	bpl.n	800d88e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d954:	4e52      	ldr	r6, [pc, #328]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d956:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d95a:	6933      	ldr	r3, [r6, #16]
 800d95c:	f023 0307 	bic.w	r3, r3, #7
 800d960:	430b      	orrs	r3, r1
 800d962:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800d964:	f7fb f98a 	bl	8008c7c <HAL_GetTick>
 800d968:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d96a:	e005      	b.n	800d978 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d96c:	f7fb f986 	bl	8008c7c <HAL_GetTick>
 800d970:	1bc0      	subs	r0, r0, r7
 800d972:	4540      	cmp	r0, r8
 800d974:	f200 808b 	bhi.w	800da8e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d978:	6933      	ldr	r3, [r6, #16]
 800d97a:	6862      	ldr	r2, [r4, #4]
 800d97c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d980:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800d984:	d1f2      	bne.n	800d96c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	079e      	lsls	r6, r3, #30
 800d98a:	d506      	bpl.n	800d99a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d98c:	68e0      	ldr	r0, [r4, #12]
 800d98e:	4944      	ldr	r1, [pc, #272]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d990:	698a      	ldr	r2, [r1, #24]
 800d992:	f002 020f 	and.w	r2, r2, #15
 800d996:	4282      	cmp	r2, r0
 800d998:	d869      	bhi.n	800da6e <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d99a:	4940      	ldr	r1, [pc, #256]	@ (800da9c <HAL_RCC_ClockConfig+0x23c>)
 800d99c:	680a      	ldr	r2, [r1, #0]
 800d99e:	f002 020f 	and.w	r2, r2, #15
 800d9a2:	42aa      	cmp	r2, r5
 800d9a4:	d90a      	bls.n	800d9bc <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9a6:	680a      	ldr	r2, [r1, #0]
 800d9a8:	f022 020f 	bic.w	r2, r2, #15
 800d9ac:	432a      	orrs	r2, r5
 800d9ae:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9b0:	680a      	ldr	r2, [r1, #0]
 800d9b2:	f002 020f 	and.w	r2, r2, #15
 800d9b6:	42aa      	cmp	r2, r5
 800d9b8:	f47f af69 	bne.w	800d88e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d9bc:	0758      	lsls	r0, r3, #29
 800d9be:	d50b      	bpl.n	800d9d8 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d9c0:	4937      	ldr	r1, [pc, #220]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d9c2:	6920      	ldr	r0, [r4, #16]
 800d9c4:	698a      	ldr	r2, [r1, #24]
 800d9c6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800d9ca:	4290      	cmp	r0, r2
 800d9cc:	d204      	bcs.n	800d9d8 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d9ce:	698a      	ldr	r2, [r1, #24]
 800d9d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d9d4:	4302      	orrs	r2, r0
 800d9d6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9d8:	0719      	lsls	r1, r3, #28
 800d9da:	d50b      	bpl.n	800d9f4 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d9dc:	4930      	ldr	r1, [pc, #192]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d9de:	6960      	ldr	r0, [r4, #20]
 800d9e0:	69ca      	ldr	r2, [r1, #28]
 800d9e2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800d9e6:	4290      	cmp	r0, r2
 800d9e8:	d204      	bcs.n	800d9f4 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d9ea:	69ca      	ldr	r2, [r1, #28]
 800d9ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d9f0:	4302      	orrs	r2, r0
 800d9f2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9f4:	06da      	lsls	r2, r3, #27
 800d9f6:	d50b      	bpl.n	800da10 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d9f8:	4929      	ldr	r1, [pc, #164]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800d9fa:	69a0      	ldr	r0, [r4, #24]
 800d9fc:	69ca      	ldr	r2, [r1, #28]
 800d9fe:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800da02:	4290      	cmp	r0, r2
 800da04:	d204      	bcs.n	800da10 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da06:	69ca      	ldr	r2, [r1, #28]
 800da08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800da0c:	4302      	orrs	r2, r0
 800da0e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da10:	069b      	lsls	r3, r3, #26
 800da12:	d50b      	bpl.n	800da2c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800da14:	4a22      	ldr	r2, [pc, #136]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800da16:	69e1      	ldr	r1, [r4, #28]
 800da18:	6a13      	ldr	r3, [r2, #32]
 800da1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da1e:	4299      	cmp	r1, r3
 800da20:	d204      	bcs.n	800da2c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800da22:	6a13      	ldr	r3, [r2, #32]
 800da24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da28:	430b      	orrs	r3, r1
 800da2a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da2c:	f7ff fe8a 	bl	800d744 <HAL_RCC_GetSysClockFreq>
 800da30:	4a1b      	ldr	r2, [pc, #108]	@ (800daa0 <HAL_RCC_ClockConfig+0x240>)
 800da32:	4603      	mov	r3, r0
 800da34:	481b      	ldr	r0, [pc, #108]	@ (800daa4 <HAL_RCC_ClockConfig+0x244>)
 800da36:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da38:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da3a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800da3e:	4d1a      	ldr	r5, [pc, #104]	@ (800daa8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da40:	f002 020f 	and.w	r2, r2, #15
 800da44:	4c19      	ldr	r4, [pc, #100]	@ (800daac <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da46:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da48:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da4a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800da4e:	4818      	ldr	r0, [pc, #96]	@ (800dab0 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da50:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da54:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800da56:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800da58:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da5a:	40d3      	lsrs	r3, r2
 800da5c:	6023      	str	r3, [r4, #0]
}
 800da5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800da62:	f7fb b8a9 	b.w	8008bb8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800da66:	2a00      	cmp	r2, #0
 800da68:	f47f af60 	bne.w	800d92c <HAL_RCC_ClockConfig+0xcc>
 800da6c:	e795      	b.n	800d99a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800da6e:	698a      	ldr	r2, [r1, #24]
 800da70:	f022 020f 	bic.w	r2, r2, #15
 800da74:	4302      	orrs	r2, r0
 800da76:	618a      	str	r2, [r1, #24]
 800da78:	e78f      	b.n	800d99a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800da7a:	019a      	lsls	r2, r3, #6
 800da7c:	f53f af6a 	bmi.w	800d954 <HAL_RCC_ClockConfig+0xf4>
 800da80:	e705      	b.n	800d88e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800da82:	2001      	movs	r0, #1
}
 800da84:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da86:	0398      	lsls	r0, r3, #14
 800da88:	f53f af64 	bmi.w	800d954 <HAL_RCC_ClockConfig+0xf4>
 800da8c:	e6ff      	b.n	800d88e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800da8e:	2003      	movs	r0, #3
 800da90:	e6fe      	b.n	800d890 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800da92:	05db      	lsls	r3, r3, #23
 800da94:	f53f af5e 	bmi.w	800d954 <HAL_RCC_ClockConfig+0xf4>
 800da98:	e6f9      	b.n	800d88e <HAL_RCC_ClockConfig+0x2e>
 800da9a:	bf00      	nop
 800da9c:	52002000 	.word	0x52002000
 800daa0:	58024400 	.word	0x58024400
 800daa4:	0804932c 	.word	0x0804932c
 800daa8:	240138ec 	.word	0x240138ec
 800daac:	240138e8 	.word	0x240138e8
 800dab0:	24013a14 	.word	0x24013a14

0800dab4 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dab4:	4a1c      	ldr	r2, [pc, #112]	@ (800db28 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dab6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dab8:	6913      	ldr	r3, [r2, #16]
 800daba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dabe:	2b10      	cmp	r3, #16
 800dac0:	d020      	beq.n	800db04 <HAL_RCC_GetPCLK2Freq+0x50>
 800dac2:	2b18      	cmp	r3, #24
 800dac4:	d029      	beq.n	800db1a <HAL_RCC_GetPCLK2Freq+0x66>
 800dac6:	b1fb      	cbz	r3, 800db08 <HAL_RCC_GetPCLK2Freq+0x54>
      sysclockfreq = CSI_VALUE;
 800dac8:	4b18      	ldr	r3, [pc, #96]	@ (800db2c <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800daca:	4a17      	ldr	r2, [pc, #92]	@ (800db28 <HAL_RCC_GetPCLK2Freq+0x74>)
 800dacc:	4918      	ldr	r1, [pc, #96]	@ (800db30 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800dace:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 800dad0:	4d18      	ldr	r5, [pc, #96]	@ (800db34 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800dad2:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dad6:	4c18      	ldr	r4, [pc, #96]	@ (800db38 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800dad8:	5c08      	ldrb	r0, [r1, r0]
 800dada:	f000 001f 	and.w	r0, r0, #31
 800dade:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dae0:	6990      	ldr	r0, [r2, #24]
 800dae2:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800dae6:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dae8:	5c08      	ldrb	r0, [r1, r0]
 800daea:	f000 001f 	and.w	r0, r0, #31
 800daee:	40c3      	lsrs	r3, r0
 800daf0:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800daf2:	69d2      	ldr	r2, [r2, #28]
 800daf4:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800daf8:	5c88      	ldrb	r0, [r1, r2]
 800dafa:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800dafe:	fa23 f000 	lsr.w	r0, r3, r0
 800db02:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800db04:	4b0d      	ldr	r3, [pc, #52]	@ (800db3c <HAL_RCC_GetPCLK2Freq+0x88>)
 800db06:	e7e0      	b.n	800daca <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db08:	6813      	ldr	r3, [r2, #0]
 800db0a:	069b      	lsls	r3, r3, #26
 800db0c:	d509      	bpl.n	800db22 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db0e:	6812      	ldr	r2, [r2, #0]
 800db10:	4b0b      	ldr	r3, [pc, #44]	@ (800db40 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800db12:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800db16:	40d3      	lsrs	r3, r2
 800db18:	e7d7      	b.n	800daca <HAL_RCC_GetPCLK2Freq+0x16>
 800db1a:	f7ff faa9 	bl	800d070 <HAL_RCC_GetSysClockFreq.part.0>
 800db1e:	4603      	mov	r3, r0
 800db20:	e7d3      	b.n	800daca <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800db22:	4b07      	ldr	r3, [pc, #28]	@ (800db40 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800db24:	e7d1      	b.n	800daca <HAL_RCC_GetPCLK2Freq+0x16>
 800db26:	bf00      	nop
 800db28:	58024400 	.word	0x58024400
 800db2c:	003d0900 	.word	0x003d0900
 800db30:	0804932c 	.word	0x0804932c
 800db34:	240138ec 	.word	0x240138ec
 800db38:	240138e8 	.word	0x240138e8
 800db3c:	017d7840 	.word	0x017d7840
 800db40:	03d09000 	.word	0x03d09000

0800db44 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db46:	4c36      	ldr	r4, [pc, #216]	@ (800dc20 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800db48:	4606      	mov	r6, r0
 800db4a:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db52:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db54:	f7fb f892 	bl	8008c7c <HAL_GetTick>
 800db58:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db5a:	e004      	b.n	800db66 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db5c:	f7fb f88e 	bl	8008c7c <HAL_GetTick>
 800db60:	1b40      	subs	r0, r0, r5
 800db62:	2802      	cmp	r0, #2
 800db64:	d856      	bhi.n	800dc14 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db66:	6823      	ldr	r3, [r4, #0]
 800db68:	011a      	lsls	r2, r3, #4
 800db6a:	d4f7      	bmi.n	800db5c <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db6c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800db6e:	6832      	ldr	r2, [r6, #0]
 800db70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800db74:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800db78:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db7a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800db7e:	3b01      	subs	r3, #1
 800db80:	3a01      	subs	r2, #1
 800db82:	025b      	lsls	r3, r3, #9
 800db84:	0412      	lsls	r2, r2, #16
 800db86:	b29b      	uxth	r3, r3
 800db88:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800db8c:	4313      	orrs	r3, r2
 800db8e:	6872      	ldr	r2, [r6, #4]
 800db90:	3a01      	subs	r2, #1
 800db92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db96:	4313      	orrs	r3, r2
 800db98:	6932      	ldr	r2, [r6, #16]
 800db9a:	3a01      	subs	r2, #1
 800db9c:	0612      	lsls	r2, r2, #24
 800db9e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dba2:	4313      	orrs	r3, r2
 800dba4:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dba6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dba8:	6972      	ldr	r2, [r6, #20]
 800dbaa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dbb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dbb4:	69b3      	ldr	r3, [r6, #24]
 800dbb6:	f022 0220 	bic.w	r2, r2, #32
 800dbba:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dbbc:	4b19      	ldr	r3, [pc, #100]	@ (800dc24 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dbbe:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dbc0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dbc2:	f022 0210 	bic.w	r2, r2, #16
 800dbc6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dbc8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800dbca:	69f2      	ldr	r2, [r6, #28]
 800dbcc:	400b      	ands	r3, r1
 800dbce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800dbd2:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dbd4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dbd6:	f043 0310 	orr.w	r3, r3, #16
 800dbda:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dbdc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800dbde:	b1df      	cbz	r7, 800dc18 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbe0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dbe2:	bf0c      	ite	eq
 800dbe4:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dbe8:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800dbec:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dbee:	4c0c      	ldr	r4, [pc, #48]	@ (800dc20 <RCCEx_PLL2_Config.part.0+0xdc>)
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dbf6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbf8:	f7fb f840 	bl	8008c7c <HAL_GetTick>
 800dbfc:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dbfe:	e004      	b.n	800dc0a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc00:	f7fb f83c 	bl	8008c7c <HAL_GetTick>
 800dc04:	1b40      	subs	r0, r0, r5
 800dc06:	2802      	cmp	r0, #2
 800dc08:	d804      	bhi.n	800dc14 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	011b      	lsls	r3, r3, #4
 800dc0e:	d5f7      	bpl.n	800dc00 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 800dc10:	2000      	movs	r0, #0
}
 800dc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800dc14:	2003      	movs	r0, #3
}
 800dc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dc18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dc1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc1e:	e7e6      	b.n	800dbee <RCCEx_PLL2_Config.part.0+0xaa>
 800dc20:	58024400 	.word	0x58024400
 800dc24:	ffff0007 	.word	0xffff0007

0800dc28 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dc2a:	4c36      	ldr	r4, [pc, #216]	@ (800dd04 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc36:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc38:	f7fb f820 	bl	8008c7c <HAL_GetTick>
 800dc3c:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc3e:	e004      	b.n	800dc4a <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc40:	f7fb f81c 	bl	8008c7c <HAL_GetTick>
 800dc44:	1b40      	subs	r0, r0, r5
 800dc46:	2802      	cmp	r0, #2
 800dc48:	d856      	bhi.n	800dcf8 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	009a      	lsls	r2, r3, #2
 800dc4e:	d4f7      	bmi.n	800dc40 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dc50:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800dc52:	6832      	ldr	r2, [r6, #0]
 800dc54:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800dc58:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800dc5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc5e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	3a01      	subs	r2, #1
 800dc66:	025b      	lsls	r3, r3, #9
 800dc68:	0412      	lsls	r2, r2, #16
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dc70:	4313      	orrs	r3, r2
 800dc72:	6872      	ldr	r2, [r6, #4]
 800dc74:	3a01      	subs	r2, #1
 800dc76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	6932      	ldr	r2, [r6, #16]
 800dc7e:	3a01      	subs	r2, #1
 800dc80:	0612      	lsls	r2, r2, #24
 800dc82:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dc86:	4313      	orrs	r3, r2
 800dc88:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dc8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc8c:	6972      	ldr	r2, [r6, #20]
 800dc8e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800dc92:	4313      	orrs	r3, r2
 800dc94:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dc96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dc98:	69b3      	ldr	r3, [r6, #24]
 800dc9a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800dc9e:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dca0:	4b19      	ldr	r3, [pc, #100]	@ (800dd08 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dca2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dca4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dca6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dcaa:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dcac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dcae:	69f2      	ldr	r2, [r6, #28]
 800dcb0:	400b      	ands	r3, r1
 800dcb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800dcb6:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dcb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dcba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcbe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dcc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800dcc2:	b1df      	cbz	r7, 800dcfc <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dcc4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dcc6:	bf0c      	ite	eq
 800dcc8:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dccc:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800dcd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dcd2:	4c0c      	ldr	r4, [pc, #48]	@ (800dd04 <RCCEx_PLL3_Config.part.0+0xdc>)
 800dcd4:	6823      	ldr	r3, [r4, #0]
 800dcd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dcda:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcdc:	f7fa ffce 	bl	8008c7c <HAL_GetTick>
 800dce0:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dce2:	e004      	b.n	800dcee <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dce4:	f7fa ffca 	bl	8008c7c <HAL_GetTick>
 800dce8:	1b40      	subs	r0, r0, r5
 800dcea:	2802      	cmp	r0, #2
 800dcec:	d804      	bhi.n	800dcf8 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	d5f7      	bpl.n	800dce4 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 800dcf4:	2000      	movs	r0, #0
}
 800dcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800dcf8:	2003      	movs	r0, #3
}
 800dcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dcfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dd00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd02:	e7e6      	b.n	800dcd2 <RCCEx_PLL3_Config.part.0+0xaa>
 800dd04:	58024400 	.word	0x58024400
 800dd08:	ffff0007 	.word	0xffff0007

0800dd0c <HAL_RCCEx_PeriphCLKConfig>:
{
 800dd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dd10:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800dd14:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dd16:	011f      	lsls	r7, r3, #4
 800dd18:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 800dd1c:	d525      	bpl.n	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800dd1e:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 800dd20:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800dd24:	f000 8666 	beq.w	800e9f4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800dd28:	d814      	bhi.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800dd2a:	2900      	cmp	r1, #0
 800dd2c:	f000 872b 	beq.w	800eb86 <HAL_RCCEx_PeriphCLKConfig+0xe7a>
 800dd30:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800dd34:	f040 8492 	bne.w	800e65c <HAL_RCCEx_PeriphCLKConfig+0x950>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd38:	4912      	ldr	r1, [pc, #72]	@ (800dd84 <HAL_RCCEx_PeriphCLKConfig+0x78>)
 800dd3a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800dd3c:	f001 0103 	and.w	r1, r1, #3
 800dd40:	2903      	cmp	r1, #3
 800dd42:	f000 848b 	beq.w	800e65c <HAL_RCCEx_PeriphCLKConfig+0x950>
 800dd46:	2102      	movs	r1, #2
 800dd48:	3008      	adds	r0, #8
 800dd4a:	f7ff fefb 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800dd4e:	4606      	mov	r6, r0
        break;
 800dd50:	f000 be5c 	b.w	800ea0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800dd54:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800dd58:	f040 8480 	bne.w	800e65c <HAL_RCCEx_PeriphCLKConfig+0x950>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dd5c:	4d09      	ldr	r5, [pc, #36]	@ (800dd84 <HAL_RCCEx_PeriphCLKConfig+0x78>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dd5e:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dd60:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800dd62:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800dd66:	4301      	orrs	r1, r0
 800dd68:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dd6a:	05dd      	lsls	r5, r3, #23
 800dd6c:	d50d      	bpl.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 800dd6e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800dd70:	2904      	cmp	r1, #4
 800dd72:	d809      	bhi.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800dd74:	e8df f011 	tbh	[pc, r1, lsl #1]
 800dd78:	065204cb 	.word	0x065204cb
 800dd7c:	04d0066a 	.word	0x04d0066a
 800dd80:	04d0      	.short	0x04d0
 800dd82:	bf00      	nop
 800dd84:	58024400 	.word	0x58024400
 800dd88:	2601      	movs	r6, #1
 800dd8a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800dd8c:	0598      	lsls	r0, r3, #22
 800dd8e:	d524      	bpl.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch (PeriphClkInit->Sai23ClockSelection)
 800dd90:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800dd92:	2980      	cmp	r1, #128	@ 0x80
 800dd94:	f000 867e 	beq.w	800ea94 <HAL_RCCEx_PeriphCLKConfig+0xd88>
 800dd98:	f200 8146 	bhi.w	800e028 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800dd9c:	2900      	cmp	r1, #0
 800dd9e:	f000 84c8 	beq.w	800e732 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800dda2:	2940      	cmp	r1, #64	@ 0x40
 800dda4:	f040 8147 	bne.w	800e036 <HAL_RCCEx_PeriphCLKConfig+0x32a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dda8:	49b2      	ldr	r1, [pc, #712]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800ddaa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800ddac:	f001 0103 	and.w	r1, r1, #3
 800ddb0:	2903      	cmp	r1, #3
 800ddb2:	f000 8140 	beq.w	800e036 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	f104 0008 	add.w	r0, r4, #8
 800ddbc:	f7ff fec2 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800ddc0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ddc2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800ddc6:	2d00      	cmp	r5, #0
 800ddc8:	f040 8545 	bne.w	800e856 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ddcc:	4fa9      	ldr	r7, [pc, #676]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800ddce:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800ddd0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ddd2:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 800ddd6:	4301      	orrs	r1, r0
 800ddd8:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ddda:	0559      	lsls	r1, r3, #21
 800dddc:	d528      	bpl.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ddde:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800dde2:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800dde6:	f000 8669 	beq.w	800eabc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800ddea:	f200 8127 	bhi.w	800e03c <HAL_RCCEx_PeriphCLKConfig+0x330>
 800ddee:	2900      	cmp	r1, #0
 800ddf0:	f000 84ae 	beq.w	800e750 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800ddf4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800ddf8:	f040 8128 	bne.w	800e04c <HAL_RCCEx_PeriphCLKConfig+0x340>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ddfc:	499d      	ldr	r1, [pc, #628]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800ddfe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800de00:	f001 0103 	and.w	r1, r1, #3
 800de04:	2903      	cmp	r1, #3
 800de06:	f000 8121 	beq.w	800e04c <HAL_RCCEx_PeriphCLKConfig+0x340>
 800de0a:	2100      	movs	r1, #0
 800de0c:	f104 0008 	add.w	r0, r4, #8
 800de10:	f7ff fe98 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800de14:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800de16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800de1a:	2d00      	cmp	r5, #0
 800de1c:	f040 851e 	bne.w	800e85c <HAL_RCCEx_PeriphCLKConfig+0xb50>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800de20:	4f94      	ldr	r7, [pc, #592]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800de22:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800de26:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800de28:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 800de2c:	4301      	orrs	r1, r0
 800de2e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800de30:	051f      	lsls	r7, r3, #20
 800de32:	d528      	bpl.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch (PeriphClkInit->Sai4BClockSelection)
 800de34:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800de38:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800de3c:	f000 8616 	beq.w	800ea6c <HAL_RCCEx_PeriphCLKConfig+0xd60>
 800de40:	f200 8107 	bhi.w	800e052 <HAL_RCCEx_PeriphCLKConfig+0x346>
 800de44:	2900      	cmp	r1, #0
 800de46:	f000 844e 	beq.w	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800de4a:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800de4e:	f040 8108 	bne.w	800e062 <HAL_RCCEx_PeriphCLKConfig+0x356>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de52:	4988      	ldr	r1, [pc, #544]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800de54:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800de56:	f001 0103 	and.w	r1, r1, #3
 800de5a:	2903      	cmp	r1, #3
 800de5c:	f000 8101 	beq.w	800e062 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800de60:	2100      	movs	r1, #0
 800de62:	f104 0008 	add.w	r0, r4, #8
 800de66:	f7ff fe6d 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800de6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800de6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800de70:	2d00      	cmp	r5, #0
 800de72:	f040 84f6 	bne.w	800e862 <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800de76:	4f7f      	ldr	r7, [pc, #508]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800de78:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800de7c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800de7e:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800de82:	4301      	orrs	r1, r0
 800de84:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800de86:	0198      	lsls	r0, r3, #6
 800de88:	d518      	bpl.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch (PeriphClkInit->QspiClockSelection)
 800de8a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800de8c:	2920      	cmp	r1, #32
 800de8e:	f000 853f 	beq.w	800e910 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800de92:	f200 80e9 	bhi.w	800e068 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800de96:	b139      	cbz	r1, 800dea8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800de98:	2910      	cmp	r1, #16
 800de9a:	f040 80e8 	bne.w	800e06e <HAL_RCCEx_PeriphCLKConfig+0x362>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de9e:	4875      	ldr	r0, [pc, #468]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800dea0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800dea2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800dea6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800dea8:	2d00      	cmp	r5, #0
 800deaa:	f040 84c9 	bne.w	800e840 <HAL_RCCEx_PeriphCLKConfig+0xb34>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800deae:	4f71      	ldr	r7, [pc, #452]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800deb0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800deb2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800deb4:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 800deb8:	4301      	orrs	r1, r0
 800deba:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800debc:	04d9      	lsls	r1, r3, #19
 800debe:	d526      	bpl.n	800df0e <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi123ClockSelection)
 800dec0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800dec2:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800dec6:	f000 860d 	beq.w	800eae4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800deca:	f200 80d5 	bhi.w	800e078 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800dece:	2900      	cmp	r1, #0
 800ded0:	f000 8413 	beq.w	800e6fa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800ded4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800ded8:	f040 80d6 	bne.w	800e088 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dedc:	4965      	ldr	r1, [pc, #404]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800dede:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800dee0:	f001 0103 	and.w	r1, r1, #3
 800dee4:	2903      	cmp	r1, #3
 800dee6:	f000 80cf 	beq.w	800e088 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800deea:	2100      	movs	r1, #0
 800deec:	f104 0008 	add.w	r0, r4, #8
 800def0:	f7ff fe28 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800def4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800def6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800defa:	2d00      	cmp	r5, #0
 800defc:	f040 84b4 	bne.w	800e868 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800df00:	4f5c      	ldr	r7, [pc, #368]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800df02:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800df04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df06:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800df0a:	4301      	orrs	r1, r0
 800df0c:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800df0e:	049f      	lsls	r7, r3, #18
 800df10:	d524      	bpl.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x250>
    switch (PeriphClkInit->Spi45ClockSelection)
 800df12:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800df14:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800df18:	f000 8520 	beq.w	800e95c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800df1c:	f200 80b7 	bhi.w	800e08e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800df20:	b191      	cbz	r1, 800df48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800df22:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800df26:	f040 80bc 	bne.w	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800df2a:	4952      	ldr	r1, [pc, #328]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800df2c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800df2e:	f001 0103 	and.w	r1, r1, #3
 800df32:	2903      	cmp	r1, #3
 800df34:	f000 80b5 	beq.w	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
 800df38:	2101      	movs	r1, #1
 800df3a:	f104 0008 	add.w	r0, r4, #8
 800df3e:	f7ff fe01 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800df42:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800df44:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800df48:	2d00      	cmp	r5, #0
 800df4a:	f040 84b2 	bne.w	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800df4e:	4f49      	ldr	r7, [pc, #292]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800df50:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800df52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df54:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800df58:	4301      	orrs	r1, r0
 800df5a:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800df5c:	0458      	lsls	r0, r3, #17
 800df5e:	d526      	bpl.n	800dfae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    switch (PeriphClkInit->Spi6ClockSelection)
 800df60:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 800df64:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800df68:	f000 8530 	beq.w	800e9cc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800df6c:	f200 809c 	bhi.w	800e0a8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800df70:	b191      	cbz	r1, 800df98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800df72:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800df76:	f040 80a1 	bne.w	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800df7a:	493e      	ldr	r1, [pc, #248]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800df7c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800df7e:	f001 0103 	and.w	r1, r1, #3
 800df82:	2903      	cmp	r1, #3
 800df84:	f000 809a 	beq.w	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800df88:	2101      	movs	r1, #1
 800df8a:	f104 0008 	add.w	r0, r4, #8
 800df8e:	f7ff fdd9 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800df92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800df94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800df98:	2d00      	cmp	r5, #0
 800df9a:	f040 8483 	bne.w	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800df9e:	4f35      	ldr	r7, [pc, #212]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800dfa0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800dfa4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dfa6:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800dfaa:	4301      	orrs	r1, r0
 800dfac:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800dfae:	0159      	lsls	r1, r3, #5
 800dfb0:	d51e      	bpl.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    switch (PeriphClkInit->DsiClockSelection)
 800dfb2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800dfb4:	b191      	cbz	r1, 800dfdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800dfb6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800dfba:	f040 82ef 	bne.w	800e59c <HAL_RCCEx_PeriphCLKConfig+0x890>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dfbe:	492d      	ldr	r1, [pc, #180]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800dfc0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800dfc2:	f001 0103 	and.w	r1, r1, #3
 800dfc6:	2903      	cmp	r1, #3
 800dfc8:	f000 82e8 	beq.w	800e59c <HAL_RCCEx_PeriphCLKConfig+0x890>
 800dfcc:	2101      	movs	r1, #1
 800dfce:	f104 0008 	add.w	r0, r4, #8
 800dfd2:	f7ff fdb7 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800dfd6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dfd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800dfdc:	2d00      	cmp	r5, #0
 800dfde:	f040 846f 	bne.w	800e8c0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800dfe2:	4f24      	ldr	r7, [pc, #144]	@ (800e074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800dfe4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800dfe6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800dfe8:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800dfec:	4301      	orrs	r1, r0
 800dfee:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dff0:	041f      	lsls	r7, r3, #16
 800dff2:	d50d      	bpl.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0x304>
    switch (PeriphClkInit->FdcanClockSelection)
 800dff4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800dff6:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800dffa:	f000 82d5 	beq.w	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800dffe:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800e002:	f000 83f6 	beq.w	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 800e006:	2900      	cmp	r1, #0
 800e008:	f000 82d3 	beq.w	800e5b2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800e00c:	2601      	movs	r6, #1
 800e00e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e010:	01d8      	lsls	r0, r3, #7
 800e012:	d55f      	bpl.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->FmcClockSelection)
 800e014:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e016:	2903      	cmp	r1, #3
 800e018:	f200 85d8 	bhi.w	800ebcc <HAL_RCCEx_PeriphCLKConfig+0xec0>
 800e01c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e020:	00510056 	.word	0x00510056
 800e024:	00560453 	.word	0x00560453
    switch (PeriphClkInit->Sai23ClockSelection)
 800e028:	29c0      	cmp	r1, #192	@ 0xc0
 800e02a:	f43f aecc 	beq.w	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
 800e02e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800e032:	f43f aec8 	beq.w	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
 800e036:	2601      	movs	r6, #1
 800e038:	4635      	mov	r5, r6
 800e03a:	e6ce      	b.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch (PeriphClkInit->Sai4AClockSelection)
 800e03c:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 800e040:	f43f aeeb 	beq.w	800de1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800e044:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800e048:	f43f aee7 	beq.w	800de1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800e04c:	2601      	movs	r6, #1
 800e04e:	4635      	mov	r5, r6
 800e050:	e6ee      	b.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4BClockSelection)
 800e052:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 800e056:	f43f af0b 	beq.w	800de70 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800e05a:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800e05e:	f43f af07 	beq.w	800de70 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800e062:	2601      	movs	r6, #1
 800e064:	4635      	mov	r5, r6
 800e066:	e70e      	b.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch (PeriphClkInit->QspiClockSelection)
 800e068:	2930      	cmp	r1, #48	@ 0x30
 800e06a:	f43f af1d 	beq.w	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800e06e:	2601      	movs	r6, #1
 800e070:	4635      	mov	r5, r6
 800e072:	e723      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800e074:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800e078:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 800e07c:	f43f af3d 	beq.w	800defa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e080:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800e084:	f43f af39 	beq.w	800defa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e088:	2601      	movs	r6, #1
 800e08a:	4635      	mov	r5, r6
 800e08c:	e73f      	b.n	800df0e <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi45ClockSelection)
 800e08e:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 800e092:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 800e096:	f43f af57 	beq.w	800df48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800e09a:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 800e09e:	f43f af53 	beq.w	800df48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800e0a2:	2601      	movs	r6, #1
 800e0a4:	4635      	mov	r5, r6
 800e0a6:	e759      	b.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x250>
    switch (PeriphClkInit->Spi6ClockSelection)
 800e0a8:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800e0ac:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e0b0:	f43f af72 	beq.w	800df98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800e0b4:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800e0b8:	f43f af6e 	beq.w	800df98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800e0bc:	2601      	movs	r6, #1
 800e0be:	4635      	mov	r5, r6
 800e0c0:	e775      	b.n	800dfae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0c2:	4837      	ldr	r0, [pc, #220]	@ (800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800e0c4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e0c6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e0ca:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e0cc:	2d00      	cmp	r5, #0
 800e0ce:	f000 83ba 	beq.w	800e846 <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 800e0d2:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e0d4:	0259      	lsls	r1, r3, #9
 800e0d6:	f100 82c4 	bmi.w	800e662 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e0da:	07df      	lsls	r7, r3, #31
 800e0dc:	d530      	bpl.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->Usart16ClockSelection)
 800e0de:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800e0e2:	2928      	cmp	r1, #40	@ 0x28
 800e0e4:	d82a      	bhi.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800e0e6:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e0ea:	02ad      	.short	0x02ad
 800e0ec:	00290029 	.word	0x00290029
 800e0f0:	00290029 	.word	0x00290029
 800e0f4:	00290029 	.word	0x00290029
 800e0f8:	029e0029 	.word	0x029e0029
 800e0fc:	00290029 	.word	0x00290029
 800e100:	00290029 	.word	0x00290029
 800e104:	00290029 	.word	0x00290029
 800e108:	05350029 	.word	0x05350029
 800e10c:	00290029 	.word	0x00290029
 800e110:	00290029 	.word	0x00290029
 800e114:	00290029 	.word	0x00290029
 800e118:	02ad0029 	.word	0x02ad0029
 800e11c:	00290029 	.word	0x00290029
 800e120:	00290029 	.word	0x00290029
 800e124:	00290029 	.word	0x00290029
 800e128:	02ad0029 	.word	0x02ad0029
 800e12c:	00290029 	.word	0x00290029
 800e130:	00290029 	.word	0x00290029
 800e134:	00290029 	.word	0x00290029
 800e138:	02ad0029 	.word	0x02ad0029
 800e13c:	2601      	movs	r6, #1
 800e13e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e140:	0798      	lsls	r0, r3, #30
 800e142:	d51e      	bpl.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x476>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e144:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800e146:	2905      	cmp	r1, #5
 800e148:	f200 8524 	bhi.w	800eb94 <HAL_RCCEx_PeriphCLKConfig+0xe88>
 800e14c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e150:	00060015 	.word	0x00060015
 800e154:	001504de 	.word	0x001504de
 800e158:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e15c:	4910      	ldr	r1, [pc, #64]	@ (800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800e15e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e160:	f001 0103 	and.w	r1, r1, #3
 800e164:	2903      	cmp	r1, #3
 800e166:	f000 8515 	beq.w	800eb94 <HAL_RCCEx_PeriphCLKConfig+0xe88>
 800e16a:	2101      	movs	r1, #1
 800e16c:	f104 0008 	add.w	r0, r4, #8
 800e170:	f7ff fce8 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e174:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e176:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e17a:	2d00      	cmp	r5, #0
 800e17c:	f000 837f 	beq.w	800e87e <HAL_RCCEx_PeriphCLKConfig+0xb72>
 800e180:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e182:	0759      	lsls	r1, r3, #29
 800e184:	d521      	bpl.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x4be>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e186:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800e18a:	2905      	cmp	r1, #5
 800e18c:	f200 8506 	bhi.w	800eb9c <HAL_RCCEx_PeriphCLKConfig+0xe90>
 800e190:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e194:	00080017 	.word	0x00080017
 800e198:	001704ce 	.word	0x001704ce
 800e19c:	00170017 	.word	0x00170017
 800e1a0:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e1a4:	49b0      	ldr	r1, [pc, #704]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e1a6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e1a8:	f001 0103 	and.w	r1, r1, #3
 800e1ac:	2903      	cmp	r1, #3
 800e1ae:	f000 84f5 	beq.w	800eb9c <HAL_RCCEx_PeriphCLKConfig+0xe90>
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	f104 0008 	add.w	r0, r4, #8
 800e1b8:	f7ff fcc4 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e1bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e1be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e1c2:	2d00      	cmp	r5, #0
 800e1c4:	f000 8363 	beq.w	800e88e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e1c8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e1ca:	069f      	lsls	r7, r3, #26
 800e1cc:	d526      	bpl.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x510>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e1ce:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e1d2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800e1d6:	f000 83d4 	beq.w	800e982 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800e1da:	f200 8194 	bhi.w	800e506 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
 800e1de:	b191      	cbz	r1, 800e206 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800e1e0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800e1e4:	f040 8199 	bne.w	800e51a <HAL_RCCEx_PeriphCLKConfig+0x80e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e1e8:	499f      	ldr	r1, [pc, #636]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e1ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e1ec:	f001 0103 	and.w	r1, r1, #3
 800e1f0:	2903      	cmp	r1, #3
 800e1f2:	f000 8192 	beq.w	800e51a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	f104 0008 	add.w	r0, r4, #8
 800e1fc:	f7ff fca2 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e200:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e202:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e206:	2d00      	cmp	r5, #0
 800e208:	f040 8351 	bne.w	800e8ae <HAL_RCCEx_PeriphCLKConfig+0xba2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e20c:	4f96      	ldr	r7, [pc, #600]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e20e:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800e212:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e214:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800e218:	4301      	orrs	r1, r0
 800e21a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e21c:	0658      	lsls	r0, r3, #25
 800e21e:	d526      	bpl.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x562>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e220:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800e224:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800e228:	f000 83bd 	beq.w	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
 800e22c:	f200 8178 	bhi.w	800e520 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800e230:	b191      	cbz	r1, 800e258 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 800e232:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e236:	f040 817d 	bne.w	800e534 <HAL_RCCEx_PeriphCLKConfig+0x828>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e23a:	498b      	ldr	r1, [pc, #556]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e23c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e23e:	f001 0103 	and.w	r1, r1, #3
 800e242:	2903      	cmp	r1, #3
 800e244:	f000 8176 	beq.w	800e534 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800e248:	2100      	movs	r1, #0
 800e24a:	f104 0008 	add.w	r0, r4, #8
 800e24e:	f7ff fc79 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e252:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e254:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e258:	2d00      	cmp	r5, #0
 800e25a:	f040 832d 	bne.w	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e25e:	4f82      	ldr	r7, [pc, #520]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e260:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 800e264:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e266:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 800e26a:	4301      	orrs	r1, r0
 800e26c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e26e:	0619      	lsls	r1, r3, #24
 800e270:	d526      	bpl.n	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e272:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 800e276:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800e27a:	f000 8337 	beq.w	800e8ec <HAL_RCCEx_PeriphCLKConfig+0xbe0>
 800e27e:	f200 815c 	bhi.w	800e53a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800e282:	b191      	cbz	r1, 800e2aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e284:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800e288:	f040 8161 	bne.w	800e54e <HAL_RCCEx_PeriphCLKConfig+0x842>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e28c:	4976      	ldr	r1, [pc, #472]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e28e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e290:	f001 0103 	and.w	r1, r1, #3
 800e294:	2903      	cmp	r1, #3
 800e296:	f000 815a 	beq.w	800e54e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800e29a:	2100      	movs	r1, #0
 800e29c:	f104 0008 	add.w	r0, r4, #8
 800e2a0:	f7ff fc50 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e2a4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e2a6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e2aa:	2d00      	cmp	r5, #0
 800e2ac:	f040 82fd 	bne.w	800e8aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e2b0:	4f6d      	ldr	r7, [pc, #436]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e2b2:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800e2b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e2b8:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800e2bc:	4301      	orrs	r1, r0
 800e2be:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e2c0:	071f      	lsls	r7, r3, #28
 800e2c2:	d50b      	bpl.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e2c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800e2c8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800e2cc:	f000 826a 	beq.w	800e7a4 <HAL_RCCEx_PeriphCLKConfig+0xa98>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e2d0:	4f65      	ldr	r7, [pc, #404]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e2d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e2d4:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800e2d8:	4301      	orrs	r1, r0
 800e2da:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e2dc:	06d8      	lsls	r0, r3, #27
 800e2de:	d50b      	bpl.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e2e0:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800e2e4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800e2e8:	f000 8248 	beq.w	800e77c <HAL_RCCEx_PeriphCLKConfig+0xa70>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e2ec:	4f5e      	ldr	r7, [pc, #376]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e2ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e2f0:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 800e2f4:	4301      	orrs	r1, r0
 800e2f6:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e2f8:	0319      	lsls	r1, r3, #12
 800e2fa:	d50e      	bpl.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    switch (PeriphClkInit->AdcClockSelection)
 800e2fc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800e300:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800e304:	f000 8171 	beq.w	800e5ea <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800e308:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800e30c:	f000 817c 	beq.w	800e608 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800e310:	2900      	cmp	r1, #0
 800e312:	f000 827f 	beq.w	800e814 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 800e316:	2601      	movs	r6, #1
 800e318:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e31a:	035f      	lsls	r7, r3, #13
 800e31c:	d50f      	bpl.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x632>
    switch (PeriphClkInit->UsbClockSelection)
 800e31e:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800e322:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800e326:	f000 8306 	beq.w	800e936 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
 800e32a:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800e32e:	f000 8150 	beq.w	800e5d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800e332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800e336:	f000 8147 	beq.w	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800e33a:	2601      	movs	r6, #1
 800e33c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e33e:	03d8      	lsls	r0, r3, #15
 800e340:	d520      	bpl.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch (PeriphClkInit->SdmmcClockSelection)
 800e342:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800e344:	2900      	cmp	r1, #0
 800e346:	f000 824a 	beq.w	800e7de <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800e34a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800e34e:	f040 8128 	bne.w	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x896>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e352:	4945      	ldr	r1, [pc, #276]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e354:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e356:	f001 0103 	and.w	r1, r1, #3
 800e35a:	2903      	cmp	r1, #3
 800e35c:	f000 8121 	beq.w	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x896>
 800e360:	2102      	movs	r1, #2
 800e362:	f104 0008 	add.w	r0, r4, #8
 800e366:	f7ff fbed 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e36a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e36c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e370:	2d00      	cmp	r5, #0
 800e372:	f040 823c 	bne.w	800e7ee <HAL_RCCEx_PeriphCLKConfig+0xae2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e376:	4f3c      	ldr	r7, [pc, #240]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e378:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800e37a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e37c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800e380:	4301      	orrs	r1, r0
 800e382:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e384:	0099      	lsls	r1, r3, #2
 800e386:	d50e      	bpl.n	800e3a6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e388:	4937      	ldr	r1, [pc, #220]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e38a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e38c:	f001 0103 	and.w	r1, r1, #3
 800e390:	2903      	cmp	r1, #3
 800e392:	d007      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800e394:	2102      	movs	r1, #2
 800e396:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e39a:	f7ff fc45 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e39e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e3a2:	b100      	cbz	r0, 800e3a6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
      status = HAL_ERROR;
 800e3a4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e3a6:	039f      	lsls	r7, r3, #14
 800e3a8:	f140 80e0 	bpl.w	800e56c <HAL_RCCEx_PeriphCLKConfig+0x860>
    switch (PeriphClkInit->RngClockSelection)
 800e3ac:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800e3b0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800e3b4:	f000 820a 	beq.w	800e7cc <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800e3b8:	f240 80cc 	bls.w	800e554 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800e3bc:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 800e3c0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800e3c4:	f000 80c9 	beq.w	800e55a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800e3c8:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e3ca:	02d8      	lsls	r0, r3, #11
 800e3cc:	d506      	bpl.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e3ce:	4826      	ldr	r0, [pc, #152]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e3d0:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 800e3d2:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800e3d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e3d8:	4331      	orrs	r1, r6
 800e3da:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e3dc:	00d9      	lsls	r1, r3, #3
 800e3de:	d507      	bpl.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e3e0:	4821      	ldr	r0, [pc, #132]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e3e2:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 800e3e6:	6901      	ldr	r1, [r0, #16]
 800e3e8:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800e3ec:	4331      	orrs	r1, r6
 800e3ee:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e3f0:	029f      	lsls	r7, r3, #10
 800e3f2:	d506      	bpl.n	800e402 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e3f4:	481c      	ldr	r0, [pc, #112]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e3f6:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 800e3f8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800e3fa:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800e3fe:	4331      	orrs	r1, r6
 800e400:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e402:	005e      	lsls	r6, r3, #1
 800e404:	d509      	bpl.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e406:	4918      	ldr	r1, [pc, #96]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e408:	6908      	ldr	r0, [r1, #16]
 800e40a:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800e40e:	6108      	str	r0, [r1, #16]
 800e410:	6908      	ldr	r0, [r1, #16]
 800e412:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 800e416:	4330      	orrs	r0, r6
 800e418:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	da06      	bge.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0x720>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e41e:	4812      	ldr	r0, [pc, #72]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e420:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 800e422:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e424:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800e428:	4331      	orrs	r1, r6
 800e42a:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e42c:	0218      	lsls	r0, r3, #8
 800e42e:	d507      	bpl.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x734>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e430:	490d      	ldr	r1, [pc, #52]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e432:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800e436:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800e438:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800e43c:	4303      	orrs	r3, r0
 800e43e:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e440:	07d1      	lsls	r1, r2, #31
 800e442:	d513      	bpl.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x760>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e444:	4b08      	ldr	r3, [pc, #32]	@ (800e468 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800e446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e448:	f003 0303 	and.w	r3, r3, #3
 800e44c:	2b03      	cmp	r3, #3
 800e44e:	f000 818c 	beq.w	800e76a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800e452:	2100      	movs	r1, #0
 800e454:	f104 0008 	add.w	r0, r4, #8
 800e458:	f7ff fb74 	bl	800db44 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e45c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800e45e:	2800      	cmp	r0, #0
 800e460:	f040 820b 	bne.w	800e87a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800e464:	e002      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800e466:	bf00      	nop
 800e468:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e46c:	0793      	lsls	r3, r2, #30
 800e46e:	d50f      	bpl.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x784>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e470:	4bb5      	ldr	r3, [pc, #724]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e474:	f003 0303 	and.w	r3, r3, #3
 800e478:	2b03      	cmp	r3, #3
 800e47a:	f000 8172 	beq.w	800e762 <HAL_RCCEx_PeriphCLKConfig+0xa56>
 800e47e:	2101      	movs	r1, #1
 800e480:	f104 0008 	add.w	r0, r4, #8
 800e484:	f7ff fb5e 	bl	800db44 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e488:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800e48a:	2800      	cmp	r0, #0
 800e48c:	f040 81f1 	bne.w	800e872 <HAL_RCCEx_PeriphCLKConfig+0xb66>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e490:	0757      	lsls	r7, r2, #29
 800e492:	d50f      	bpl.n	800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e494:	4bac      	ldr	r3, [pc, #688]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e498:	f003 0303 	and.w	r3, r3, #3
 800e49c:	2b03      	cmp	r3, #3
 800e49e:	f000 8162 	beq.w	800e766 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 800e4a2:	2102      	movs	r1, #2
 800e4a4:	f104 0008 	add.w	r0, r4, #8
 800e4a8:	f7ff fb4c 	bl	800db44 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e4ac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	f040 81e1 	bne.w	800e876 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e4b4:	0716      	lsls	r6, r2, #28
 800e4b6:	d50f      	bpl.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e4b8:	4ba3      	ldr	r3, [pc, #652]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4bc:	f003 0303 	and.w	r3, r3, #3
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	f000 8159 	beq.w	800e778 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e4cc:	f7ff fbac 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e4d0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	f040 81cb 	bne.w	800e86e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e4d8:	06d0      	lsls	r0, r2, #27
 800e4da:	d54a      	bpl.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0x866>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e4dc:	4b9a      	ldr	r3, [pc, #616]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e4de:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4e4:	f003 0303 	and.w	r3, r3, #3
 800e4e8:	2b03      	cmp	r3, #3
 800e4ea:	f000 8140 	beq.w	800e76e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f7ff fb99 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d03a      	beq.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x864>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e4fa:	6863      	ldr	r3, [r4, #4]
 800e4fc:	069a      	lsls	r2, r3, #26
 800e4fe:	f140 808f 	bpl.w	800e620 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800e502:	4605      	mov	r5, r0
 800e504:	e039      	b.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e506:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800e50a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e50e:	f43f ae7a 	beq.w	800e206 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800e512:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800e516:	f43f ae76 	beq.w	800e206 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800e51a:	2601      	movs	r6, #1
 800e51c:	4635      	mov	r5, r6
 800e51e:	e67d      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x510>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e520:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 800e524:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800e528:	f43f ae96 	beq.w	800e258 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 800e52c:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 800e530:	f43f ae92 	beq.w	800e258 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 800e534:	2601      	movs	r6, #1
 800e536:	4635      	mov	r5, r6
 800e538:	e699      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x562>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e53a:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800e53e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800e542:	f43f aeb2 	beq.w	800e2aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e546:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800e54a:	f43f aeae 	beq.w	800e2aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e54e:	2601      	movs	r6, #1
 800e550:	4635      	mov	r5, r6
 800e552:	e6b5      	b.n	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    switch (PeriphClkInit->RngClockSelection)
 800e554:	2900      	cmp	r1, #0
 800e556:	f47f af37 	bne.w	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    if (ret == HAL_OK)
 800e55a:	2d00      	cmp	r5, #0
 800e55c:	f47f af35 	bne.w	800e3ca <HAL_RCCEx_PeriphCLKConfig+0x6be>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e560:	4d79      	ldr	r5, [pc, #484]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e562:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800e564:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800e568:	4301      	orrs	r1, r0
 800e56a:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 800e56c:	4635      	mov	r5, r6
 800e56e:	e72c      	b.n	800e3ca <HAL_RCCEx_PeriphCLKConfig+0x6be>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e570:	6862      	ldr	r2, [r4, #4]
 800e572:	0693      	lsls	r3, r2, #26
 800e574:	d50d      	bpl.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0x886>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e576:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e57a:	4b73      	ldr	r3, [pc, #460]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e57e:	f003 0303 	and.w	r3, r3, #3
 800e582:	2b03      	cmp	r3, #3
 800e584:	d04c      	beq.n	800e620 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800e586:	2102      	movs	r1, #2
 800e588:	4630      	mov	r0, r6
 800e58a:	f7ff fb4d 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800e58e:	2800      	cmp	r0, #0
 800e590:	d146      	bne.n	800e620 <HAL_RCCEx_PeriphCLKConfig+0x914>
  if (status == HAL_OK)
 800e592:	1e28      	subs	r0, r5, #0
 800e594:	bf18      	it	ne
 800e596:	2001      	movne	r0, #1
}
 800e598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e59c:	2601      	movs	r6, #1
 800e59e:	4635      	mov	r5, r6
 800e5a0:	e526      	b.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800e5a2:	2601      	movs	r6, #1
 800e5a4:	4635      	mov	r5, r6
 800e5a6:	e6ed      	b.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5a8:	4867      	ldr	r0, [pc, #412]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e5aa:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e5ac:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e5b0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e5b2:	2d00      	cmp	r5, #0
 800e5b4:	f040 813f 	bne.w	800e836 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e5b8:	4f63      	ldr	r7, [pc, #396]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e5ba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e5bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e5be:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800e5c2:	4301      	orrs	r1, r0
 800e5c4:	6539      	str	r1, [r7, #80]	@ 0x50
 800e5c6:	e523      	b.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5c8:	485f      	ldr	r0, [pc, #380]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e5ca:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e5cc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e5d0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e5d2:	2d00      	cmp	r5, #0
 800e5d4:	f040 8132 	bne.w	800e83c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e5d8:	4f5b      	ldr	r7, [pc, #364]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e5da:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800e5de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e5e0:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800e5e4:	4301      	orrs	r1, r0
 800e5e6:	6579      	str	r1, [r7, #84]	@ 0x54
 800e5e8:	e6a9      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e5ea:	4957      	ldr	r1, [pc, #348]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e5ec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e5ee:	f001 0103 	and.w	r1, r1, #3
 800e5f2:	2903      	cmp	r1, #3
 800e5f4:	f43f ae8f 	beq.w	800e316 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800e5f8:	2102      	movs	r1, #2
 800e5fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e5fe:	f7ff fb13 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800e602:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e604:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e608:	2d00      	cmp	r5, #0
 800e60a:	f040 8149 	bne.w	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xb94>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e60e:	4f4e      	ldr	r7, [pc, #312]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e610:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800e614:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e616:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 800e61a:	4301      	orrs	r1, r0
 800e61c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e61e:	e67c      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x60e>
  return HAL_ERROR;
 800e620:	2001      	movs	r0, #1
}
 800e622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e626:	4948      	ldr	r1, [pc, #288]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e628:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e62a:	f001 0103 	and.w	r1, r1, #3
 800e62e:	2903      	cmp	r1, #3
 800e630:	f43f ad84 	beq.w	800e13c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800e634:	2101      	movs	r1, #1
 800e636:	f104 0008 	add.w	r0, r4, #8
 800e63a:	f7ff fa83 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e63e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e640:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e644:	2d00      	cmp	r5, #0
 800e646:	f040 8139 	bne.w	800e8bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e64a:	4f3f      	ldr	r7, [pc, #252]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e64c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800e650:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e652:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800e656:	4301      	orrs	r1, r0
 800e658:	6579      	str	r1, [r7, #84]	@ 0x54
 800e65a:	e571      	b.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800e65c:	2601      	movs	r6, #1
 800e65e:	f7ff bb84 	b.w	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e662:	4f3a      	ldr	r7, [pc, #232]	@ (800e74c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e66a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800e66c:	f7fa fb06 	bl	8008c7c <HAL_GetTick>
 800e670:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e672:	e006      	b.n	800e682 <HAL_RCCEx_PeriphCLKConfig+0x976>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e674:	f7fa fb02 	bl	8008c7c <HAL_GetTick>
 800e678:	eba0 0008 	sub.w	r0, r0, r8
 800e67c:	2864      	cmp	r0, #100	@ 0x64
 800e67e:	f200 827c 	bhi.w	800eb7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	05da      	lsls	r2, r3, #23
 800e686:	d5f5      	bpl.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0x968>
    if (ret == HAL_OK)
 800e688:	2d00      	cmp	r5, #0
 800e68a:	f040 8277 	bne.w	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xe70>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e68e:	4a2e      	ldr	r2, [pc, #184]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e690:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 800e694:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800e696:	4059      	eors	r1, r3
 800e698:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800e69c:	d00b      	beq.n	800e6b6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e69e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800e6a0:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e6a2:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800e6a6:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800e6aa:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e6ac:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 800e6ae:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 800e6b2:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800e6b4:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e6b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6ba:	f000 828b 	beq.w	800ebd4 <HAL_RCCEx_PeriphCLKConfig+0xec8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e6be:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e6c2:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800e6c6:	f000 8299 	beq.w	800ebfc <HAL_RCCEx_PeriphCLKConfig+0xef0>
 800e6ca:	491f      	ldr	r1, [pc, #124]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e6cc:	690a      	ldr	r2, [r1, #16]
 800e6ce:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800e6d2:	610a      	str	r2, [r1, #16]
 800e6d4:	481c      	ldr	r0, [pc, #112]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e6d6:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800e6da:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800e6dc:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e6de:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e6e2:	6701      	str	r1, [r0, #112]	@ 0x70
 800e6e4:	e4f9      	b.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6e6:	4818      	ldr	r0, [pc, #96]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e6e8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e6ea:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e6ee:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e6f0:	2d00      	cmp	r5, #0
 800e6f2:	f040 80b6 	bne.w	800e862 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 800e6f6:	f7ff bbbe 	b.w	800de76 <HAL_RCCEx_PeriphCLKConfig+0x16a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6fa:	4813      	ldr	r0, [pc, #76]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e6fc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e6fe:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e702:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e704:	2d00      	cmp	r5, #0
 800e706:	f040 80af 	bne.w	800e868 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800e70a:	f7ff bbf9 	b.w	800df00 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e70e:	480e      	ldr	r0, [pc, #56]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e710:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e712:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e716:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800e718:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800e71a:	2d00      	cmp	r5, #0
 800e71c:	f040 8190 	bne.w	800ea40 <HAL_RCCEx_PeriphCLKConfig+0xd34>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e720:	4f09      	ldr	r7, [pc, #36]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e722:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e724:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e726:	f021 0107 	bic.w	r1, r1, #7
 800e72a:	4301      	orrs	r1, r0
 800e72c:	6539      	str	r1, [r7, #80]	@ 0x50
 800e72e:	f7ff bb2d 	b.w	800dd8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e732:	4805      	ldr	r0, [pc, #20]	@ (800e748 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800e734:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e736:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e73a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e73c:	2d00      	cmp	r5, #0
 800e73e:	f040 808a 	bne.w	800e856 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 800e742:	f7ff bb43 	b.w	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800e746:	bf00      	nop
 800e748:	58024400 	.word	0x58024400
 800e74c:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e750:	48bd      	ldr	r0, [pc, #756]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e752:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e754:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e758:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e75a:	2d00      	cmp	r5, #0
 800e75c:	d17e      	bne.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0xb50>
 800e75e:	f7ff bb5f 	b.w	800de20 <HAL_RCCEx_PeriphCLKConfig+0x114>
    return HAL_ERROR;
 800e762:	2501      	movs	r5, #1
 800e764:	e694      	b.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x784>
 800e766:	2501      	movs	r5, #1
 800e768:	e6a4      	b.n	800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 800e76a:	2501      	movs	r5, #1
 800e76c:	e67e      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x760>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e76e:	0691      	lsls	r1, r2, #26
 800e770:	f57f af56 	bpl.w	800e620 <HAL_RCCEx_PeriphCLKConfig+0x914>
    return HAL_ERROR;
 800e774:	2501      	movs	r5, #1
 800e776:	e700      	b.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x86e>
 800e778:	2501      	movs	r5, #1
 800e77a:	e6ad      	b.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e77c:	49b2      	ldr	r1, [pc, #712]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e77e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e780:	f001 0103 	and.w	r1, r1, #3
 800e784:	2903      	cmp	r1, #3
 800e786:	f000 820d 	beq.w	800eba4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800e78a:	2102      	movs	r1, #2
 800e78c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e790:	f7ff fa4a 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e794:	2800      	cmp	r0, #0
 800e796:	f040 8212 	bne.w	800ebbe <HAL_RCCEx_PeriphCLKConfig+0xeb2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e79a:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e79e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800e7a2:	e5a3      	b.n	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e7a4:	49a8      	ldr	r1, [pc, #672]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e7a6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e7a8:	f001 0103 	and.w	r1, r1, #3
 800e7ac:	2903      	cmp	r1, #3
 800e7ae:	f000 81fc 	beq.w	800ebaa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800e7b2:	2102      	movs	r1, #2
 800e7b4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e7b8:	f7ff fa36 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	f040 81f7 	bne.w	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0xea4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e7c2:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e7c6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800e7ca:	e581      	b.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7cc:	4f9e      	ldr	r7, [pc, #632]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e7ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e7d0:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800e7d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e7d6:	2d00      	cmp	r5, #0
 800e7d8:	f47f adf7 	bne.w	800e3ca <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800e7dc:	e6c0      	b.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x854>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7de:	489a      	ldr	r0, [pc, #616]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e7e0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e7e2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800e7e6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e7e8:	2d00      	cmp	r5, #0
 800e7ea:	f43f adc4 	beq.w	800e376 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e7ee:	462e      	mov	r6, r5
 800e7f0:	e5c8      	b.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x678>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e7f2:	4995      	ldr	r1, [pc, #596]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e7f4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e7f6:	f001 0103 	and.w	r1, r1, #3
 800e7fa:	2903      	cmp	r1, #3
 800e7fc:	f43f ac06 	beq.w	800e00c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800e800:	2101      	movs	r1, #1
 800e802:	f104 0008 	add.w	r0, r4, #8
 800e806:	f7ff f99d 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e80a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e80c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e810:	b98d      	cbnz	r5, 800e836 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800e812:	e6d1      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e814:	488c      	ldr	r0, [pc, #560]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e816:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e818:	f000 0003 	and.w	r0, r0, #3
 800e81c:	2803      	cmp	r0, #3
 800e81e:	f43f ad7a 	beq.w	800e316 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800e822:	f104 0008 	add.w	r0, r4, #8
 800e826:	f7ff f98d 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e82a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e82c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e830:	2d00      	cmp	r5, #0
 800e832:	d135      	bne.n	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xb94>
 800e834:	e6eb      	b.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x902>
 800e836:	462e      	mov	r6, r5
 800e838:	f7ff bbea 	b.w	800e010 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800e83c:	462e      	mov	r6, r5
 800e83e:	e57e      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x632>
 800e840:	462e      	mov	r6, r5
 800e842:	f7ff bb3b 	b.w	800debc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e846:	4f80      	ldr	r7, [pc, #512]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e848:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800e84a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e84c:	f021 0103 	bic.w	r1, r1, #3
 800e850:	4301      	orrs	r1, r0
 800e852:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800e854:	e43e      	b.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800e856:	462e      	mov	r6, r5
 800e858:	f7ff babf 	b.w	800ddda <HAL_RCCEx_PeriphCLKConfig+0xce>
 800e85c:	462e      	mov	r6, r5
 800e85e:	f7ff bae7 	b.w	800de30 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800e862:	462e      	mov	r6, r5
 800e864:	f7ff bb0f 	b.w	800de86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800e868:	462e      	mov	r6, r5
 800e86a:	f7ff bb50 	b.w	800df0e <HAL_RCCEx_PeriphCLKConfig+0x202>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e86e:	4605      	mov	r5, r0
 800e870:	e632      	b.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e872:	4605      	mov	r5, r0
 800e874:	e60c      	b.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x784>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e876:	4605      	mov	r5, r0
 800e878:	e61c      	b.n	800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e87a:	4605      	mov	r5, r0
 800e87c:	e5f6      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x760>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e87e:	4f72      	ldr	r7, [pc, #456]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e880:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800e882:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e884:	f021 0107 	bic.w	r1, r1, #7
 800e888:	4301      	orrs	r1, r0
 800e88a:	6579      	str	r1, [r7, #84]	@ 0x54
 800e88c:	e479      	b.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x476>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e88e:	4f6e      	ldr	r7, [pc, #440]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e890:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800e894:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e896:	f021 0107 	bic.w	r1, r1, #7
 800e89a:	4301      	orrs	r1, r0
 800e89c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e89e:	e494      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800e8a0:	462e      	mov	r6, r5
 800e8a2:	e53a      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x60e>
 800e8a4:	462e      	mov	r6, r5
 800e8a6:	f7ff bb82 	b.w	800dfae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800e8aa:	462e      	mov	r6, r5
 800e8ac:	e508      	b.n	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800e8ae:	462e      	mov	r6, r5
 800e8b0:	e4b4      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800e8b2:	462e      	mov	r6, r5
 800e8b4:	f7ff bb52 	b.w	800df5c <HAL_RCCEx_PeriphCLKConfig+0x250>
 800e8b8:	462e      	mov	r6, r5
 800e8ba:	e4d8      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x562>
 800e8bc:	462e      	mov	r6, r5
 800e8be:	e43f      	b.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800e8c0:	462e      	mov	r6, r5
 800e8c2:	f7ff bb95 	b.w	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e8c6:	4960      	ldr	r1, [pc, #384]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e8c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e8ca:	f001 0103 	and.w	r1, r1, #3
 800e8ce:	2903      	cmp	r1, #3
 800e8d0:	f000 817c 	beq.w	800ebcc <HAL_RCCEx_PeriphCLKConfig+0xec0>
 800e8d4:	2102      	movs	r1, #2
 800e8d6:	f104 0008 	add.w	r0, r4, #8
 800e8da:	f7ff f933 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e8de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e8e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e8e4:	2d00      	cmp	r5, #0
 800e8e6:	f47f abf4 	bne.w	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800e8ea:	e7ac      	b.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0xb3a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e8ec:	4956      	ldr	r1, [pc, #344]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e8ee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e8f0:	f001 0103 	and.w	r1, r1, #3
 800e8f4:	2903      	cmp	r1, #3
 800e8f6:	f43f ae2a 	beq.w	800e54e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800e8fa:	2102      	movs	r1, #2
 800e8fc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e900:	f7ff f992 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800e904:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e906:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e90a:	2d00      	cmp	r5, #0
 800e90c:	d1cd      	bne.n	800e8aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
 800e90e:	e4cf      	b.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e910:	494d      	ldr	r1, [pc, #308]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e912:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e914:	f001 0103 	and.w	r1, r1, #3
 800e918:	2903      	cmp	r1, #3
 800e91a:	f43f aba8 	beq.w	800e06e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800e91e:	2102      	movs	r1, #2
 800e920:	f104 0008 	add.w	r0, r4, #8
 800e924:	f7ff f90e 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800e928:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e92a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e92e:	2d00      	cmp	r5, #0
 800e930:	d186      	bne.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800e932:	f7ff babc 	b.w	800deae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e936:	4944      	ldr	r1, [pc, #272]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e938:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e93a:	f001 0103 	and.w	r1, r1, #3
 800e93e:	2903      	cmp	r1, #3
 800e940:	f43f acfb 	beq.w	800e33a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800e944:	2101      	movs	r1, #1
 800e946:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e94a:	f7ff f96d 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800e94e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e950:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e954:	2d00      	cmp	r5, #0
 800e956:	f47f af71 	bne.w	800e83c <HAL_RCCEx_PeriphCLKConfig+0xb30>
 800e95a:	e63d      	b.n	800e5d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e95c:	493a      	ldr	r1, [pc, #232]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e95e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e960:	f001 0103 	and.w	r1, r1, #3
 800e964:	2903      	cmp	r1, #3
 800e966:	f43f ab9c 	beq.w	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
 800e96a:	2101      	movs	r1, #1
 800e96c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e970:	f7ff f95a 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800e974:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e976:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	d199      	bne.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800e97e:	f7ff bae6 	b.w	800df4e <HAL_RCCEx_PeriphCLKConfig+0x242>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e982:	4931      	ldr	r1, [pc, #196]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e984:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e986:	f001 0103 	and.w	r1, r1, #3
 800e98a:	2903      	cmp	r1, #3
 800e98c:	f43f adc5 	beq.w	800e51a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800e990:	2102      	movs	r1, #2
 800e992:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e996:	f7ff f947 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800e99a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e99c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e9a0:	2d00      	cmp	r5, #0
 800e9a2:	d184      	bne.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800e9a4:	e432      	b.n	800e20c <HAL_RCCEx_PeriphCLKConfig+0x500>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e9a6:	4928      	ldr	r1, [pc, #160]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e9a8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e9aa:	f001 0103 	and.w	r1, r1, #3
 800e9ae:	2903      	cmp	r1, #3
 800e9b0:	f43f adc0 	beq.w	800e534 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800e9b4:	2102      	movs	r1, #2
 800e9b6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e9ba:	f7ff f935 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800e9be:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e9c0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e9c4:	2d00      	cmp	r5, #0
 800e9c6:	f47f af77 	bne.w	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e9ca:	e448      	b.n	800e25e <HAL_RCCEx_PeriphCLKConfig+0x552>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e9cc:	491e      	ldr	r1, [pc, #120]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e9ce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e9d0:	f001 0103 	and.w	r1, r1, #3
 800e9d4:	2903      	cmp	r1, #3
 800e9d6:	f43f ab71 	beq.w	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800e9da:	2101      	movs	r1, #1
 800e9dc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e9e0:	f7ff f922 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800e9e4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800e9e6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800e9ea:	2d00      	cmp	r5, #0
 800e9ec:	f47f af5a 	bne.w	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e9f0:	f7ff bad5 	b.w	800df9e <HAL_RCCEx_PeriphCLKConfig+0x292>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e9f4:	4914      	ldr	r1, [pc, #80]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800e9f6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e9f8:	f001 0103 	and.w	r1, r1, #3
 800e9fc:	2903      	cmp	r1, #3
 800e9fe:	f43f ae2d 	beq.w	800e65c <HAL_RCCEx_PeriphCLKConfig+0x950>
 800ea02:	2102      	movs	r1, #2
 800ea04:	3028      	adds	r0, #40	@ 0x28
 800ea06:	f7ff f90f 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800ea0a:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ea0c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800ea10:	2e00      	cmp	r6, #0
 800ea12:	f47f a9aa 	bne.w	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ea16:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800ea18:	f7ff b9a0 	b.w	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ea1c:	490a      	ldr	r1, [pc, #40]	@ (800ea48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800ea1e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800ea20:	f001 0103 	and.w	r1, r1, #3
 800ea24:	2903      	cmp	r1, #3
 800ea26:	f43f a9af 	beq.w	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	f104 0008 	add.w	r0, r4, #8
 800ea30:	f7ff f888 	bl	800db44 <RCCEx_PLL2_Config.part.0>
 800ea34:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ea36:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800ea3a:	2d00      	cmp	r5, #0
 800ea3c:	f43f ae70 	beq.w	800e720 <HAL_RCCEx_PeriphCLKConfig+0xa14>
 800ea40:	462e      	mov	r6, r5
 800ea42:	f7ff b9a3 	b.w	800dd8c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800ea46:	bf00      	nop
 800ea48:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ea4c:	4973      	ldr	r1, [pc, #460]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800ea4e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800ea50:	f001 0103 	and.w	r1, r1, #3
 800ea54:	2903      	cmp	r1, #3
 800ea56:	f43f a997 	beq.w	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ea60:	f7ff f8e2 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800ea64:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ea66:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800ea6a:	e656      	b.n	800e71a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ea6c:	496b      	ldr	r1, [pc, #428]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800ea6e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800ea70:	f001 0103 	and.w	r1, r1, #3
 800ea74:	2903      	cmp	r1, #3
 800ea76:	f43f aaf4 	beq.w	800e062 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ea80:	f7ff f8d2 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800ea84:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ea86:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800ea8a:	2d00      	cmp	r5, #0
 800ea8c:	f47f aee9 	bne.w	800e862 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 800ea90:	f7ff b9f1 	b.w	800de76 <HAL_RCCEx_PeriphCLKConfig+0x16a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ea94:	4961      	ldr	r1, [pc, #388]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800ea96:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800ea98:	f001 0103 	and.w	r1, r1, #3
 800ea9c:	2903      	cmp	r1, #3
 800ea9e:	f43f aaca 	beq.w	800e036 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800eaa8:	f7ff f8be 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800eaac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800eaae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800eab2:	2d00      	cmp	r5, #0
 800eab4:	f47f aecf 	bne.w	800e856 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 800eab8:	f7ff b988 	b.w	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eabc:	4957      	ldr	r1, [pc, #348]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800eabe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800eac0:	f001 0103 	and.w	r1, r1, #3
 800eac4:	2903      	cmp	r1, #3
 800eac6:	f43f aac1 	beq.w	800e04c <HAL_RCCEx_PeriphCLKConfig+0x340>
 800eaca:	2100      	movs	r1, #0
 800eacc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ead0:	f7ff f8aa 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800ead4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ead6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800eada:	2d00      	cmp	r5, #0
 800eadc:	f47f aebe 	bne.w	800e85c <HAL_RCCEx_PeriphCLKConfig+0xb50>
 800eae0:	f7ff b99e 	b.w	800de20 <HAL_RCCEx_PeriphCLKConfig+0x114>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eae4:	494d      	ldr	r1, [pc, #308]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800eae6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800eae8:	f001 0103 	and.w	r1, r1, #3
 800eaec:	2903      	cmp	r1, #3
 800eaee:	f43f aacb 	beq.w	800e088 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800eaf8:	f7ff f896 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800eafc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800eafe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800eb02:	2d00      	cmp	r5, #0
 800eb04:	f47f aeb0 	bne.w	800e868 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800eb08:	f7ff b9fa 	b.w	800df00 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eb0c:	4943      	ldr	r1, [pc, #268]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800eb0e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800eb10:	f001 0103 	and.w	r1, r1, #3
 800eb14:	2903      	cmp	r1, #3
 800eb16:	d03d      	beq.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0xe88>
 800eb18:	2101      	movs	r1, #1
 800eb1a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800eb1e:	f7ff f883 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800eb22:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800eb24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800eb28:	2d00      	cmp	r5, #0
 800eb2a:	f47f ab29 	bne.w	800e180 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800eb2e:	e6a6      	b.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xb72>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eb30:	493a      	ldr	r1, [pc, #232]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800eb32:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800eb34:	f001 0103 	and.w	r1, r1, #3
 800eb38:	2903      	cmp	r1, #3
 800eb3a:	d02f      	beq.n	800eb9c <HAL_RCCEx_PeriphCLKConfig+0xe90>
 800eb3c:	2101      	movs	r1, #1
 800eb3e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800eb42:	f7ff f871 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800eb46:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800eb48:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800eb4c:	2d00      	cmp	r5, #0
 800eb4e:	f47f ab3b 	bne.w	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800eb52:	e69c      	b.n	800e88e <HAL_RCCEx_PeriphCLKConfig+0xb82>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eb54:	4931      	ldr	r1, [pc, #196]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800eb56:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800eb58:	f001 0103 	and.w	r1, r1, #3
 800eb5c:	2903      	cmp	r1, #3
 800eb5e:	f43f aaed 	beq.w	800e13c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800eb62:	2101      	movs	r1, #1
 800eb64:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800eb68:	f7ff f85e 	bl	800dc28 <RCCEx_PLL3_Config.part.0>
 800eb6c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800eb6e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800eb72:	2d00      	cmp	r5, #0
 800eb74:	f47f aea2 	bne.w	800e8bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800eb78:	e567      	b.n	800e64a <HAL_RCCEx_PeriphCLKConfig+0x93e>
        ret = HAL_TIMEOUT;
 800eb7a:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800eb7c:	462e      	mov	r6, r5
 800eb7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800eb82:	f7ff baaa 	b.w	800e0da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb86:	4d25      	ldr	r5, [pc, #148]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800eb88:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800eb8a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800eb8e:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 800eb90:	f7ff b8e4 	b.w	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x50>
 800eb94:	2601      	movs	r6, #1
 800eb96:	4635      	mov	r5, r6
 800eb98:	f7ff baf3 	b.w	800e182 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800eb9c:	2601      	movs	r6, #1
 800eb9e:	4635      	mov	r5, r6
 800eba0:	f7ff bb13 	b.w	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x4be>
        status = HAL_ERROR;
 800eba4:	2601      	movs	r6, #1
 800eba6:	f7ff bba1 	b.w	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
        status = HAL_ERROR;
 800ebaa:	2601      	movs	r6, #1
 800ebac:	f7ff bb90 	b.w	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ebb0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
        status = HAL_ERROR;
 800ebb4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ebb6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ebba:	f7ff bb89 	b.w	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ebbe:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
        status = HAL_ERROR;
 800ebc2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ebc4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ebc8:	f7ff bb90 	b.w	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800ebcc:	2601      	movs	r6, #1
 800ebce:	4635      	mov	r5, r6
 800ebd0:	f7ff ba80 	b.w	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        tickstart = HAL_GetTick();
 800ebd4:	f7fa f852 	bl	8008c7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ebd8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>
        tickstart = HAL_GetTick();
 800ebdc:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ebde:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ebe2:	e004      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0xee2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ebe4:	f7fa f84a 	bl	8008c7c <HAL_GetTick>
 800ebe8:	1bc0      	subs	r0, r0, r7
 800ebea:	4548      	cmp	r0, r9
 800ebec:	d810      	bhi.n	800ec10 <HAL_RCCEx_PeriphCLKConfig+0xf04>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ebee:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ebf2:	079b      	lsls	r3, r3, #30
 800ebf4:	d5f6      	bpl.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xed8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ebf6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 800ebfa:	e560      	b.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800ebfc:	4807      	ldr	r0, [pc, #28]	@ (800ec1c <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 800ebfe:	4a08      	ldr	r2, [pc, #32]	@ (800ec20 <HAL_RCCEx_PeriphCLKConfig+0xf14>)
 800ec00:	6901      	ldr	r1, [r0, #16]
 800ec02:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ec06:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800ec0a:	430a      	orrs	r2, r1
 800ec0c:	6102      	str	r2, [r0, #16]
 800ec0e:	e561      	b.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
        status = ret;
 800ec10:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ec12:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ec16:	4635      	mov	r5, r6
 800ec18:	f7ff ba5f 	b.w	800e0da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ec1c:	58024400 	.word	0x58024400
 800ec20:	00ffffcf 	.word	0x00ffffcf

0800ec24 <imlib_yuv_to_rgb>:
    return COLOR_R8_G8_B8_TO_RGB565(red, green, blue);
}

// https://en.wikipedia.org/wiki/YCbCr -> JPEG Conversion
uint16_t imlib_yuv_to_rgb(uint8_t y, int8_t u, int8_t v)
{
 800ec24:	b410      	push	{r4}
    uint32_t r = IM_MAX(IM_MIN(y + ((91881 * v) >> 16), COLOR_R8_MAX), COLOR_R8_MIN);
 800ec26:	4c13      	ldr	r4, [pc, #76]	@ (800ec74 <imlib_yuv_to_rgb+0x50>)
    uint32_t g = IM_MAX(IM_MIN(y - (((22554 * u) + (46802 * v)) >> 16), COLOR_G8_MAX), COLOR_G8_MIN);
    uint32_t b = IM_MAX(IM_MIN(y + ((116130 * u) >> 16), COLOR_B8_MAX), COLOR_B8_MIN);

    return COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800ec28:	4b13      	ldr	r3, [pc, #76]	@ (800ec78 <imlib_yuv_to_rgb+0x54>)
    uint32_t r = IM_MAX(IM_MIN(y + ((91881 * v) >> 16), COLOR_R8_MAX), COLOR_R8_MIN);
 800ec2a:	fb02 f404 	mul.w	r4, r2, r4
 800ec2e:	eb00 4424 	add.w	r4, r0, r4, asr #16
    return COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800ec32:	f384 0408 	usat	r4, #8, r4
 800ec36:	ea03 2304 	and.w	r3, r3, r4, lsl #8
    uint32_t b = IM_MAX(IM_MIN(y + ((116130 * u) >> 16), COLOR_B8_MAX), COLOR_B8_MIN);
 800ec3a:	4c10      	ldr	r4, [pc, #64]	@ (800ec7c <imlib_yuv_to_rgb+0x58>)
 800ec3c:	fb04 fc01 	mul.w	ip, r4, r1
    uint32_t g = IM_MAX(IM_MIN(y - (((22554 * u) + (46802 * v)) >> 16), COLOR_G8_MAX), COLOR_G8_MIN);
 800ec40:	f645 041a 	movw	r4, #22554	@ 0x581a
    uint32_t b = IM_MAX(IM_MIN(y + ((116130 * u) >> 16), COLOR_B8_MAX), COLOR_B8_MIN);
 800ec44:	eb00 4c2c 	add.w	ip, r0, ip, asr #16
    return COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800ec48:	f38c 0c08 	usat	ip, #8, ip
 800ec4c:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    uint32_t g = IM_MAX(IM_MIN(y - (((22554 * u) + (46802 * v)) >> 16), COLOR_G8_MAX), COLOR_G8_MIN);
 800ec50:	f24b 6cd2 	movw	ip, #46802	@ 0xb6d2
 800ec54:	fb0c f202 	mul.w	r2, ip, r2
 800ec58:	fb04 2101 	mla	r1, r4, r1, r2
}
 800ec5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    uint32_t g = IM_MAX(IM_MIN(y - (((22554 * u) + (46802 * v)) >> 16), COLOR_G8_MAX), COLOR_G8_MIN);
 800ec60:	eba0 4021 	sub.w	r0, r0, r1, asr #16
    return COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800ec64:	f380 0008 	usat	r0, #8, r0
 800ec68:	00c0      	lsls	r0, r0, #3
 800ec6a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800ec6e:	4318      	orrs	r0, r3
}
 800ec70:	b280      	uxth	r0, r0
 800ec72:	4770      	bx	lr
 800ec74:	000166e9 	.word	0x000166e9
 800ec78:	fffff800 	.word	0xfffff800
 800ec7c:	0001c5a2 	.word	0x0001c5a2

0800ec80 <STM32Ipl_ImageDataSize>:
 * @param img	Image.
 * @return		Size of the image data buffer (bytes), 0 in case of wrong/unsupported argument.
 */
uint32_t STM32Ipl_ImageDataSize(const image_t *img)
{
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 800ec80:	b150      	cbz	r0, 800ec98 <STM32Ipl_ImageDataSize+0x18>
	switch ((uint32_t)format) {
 800ec82:	7a02      	ldrb	r2, [r0, #8]
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 800ec84:	e9d0 3000 	ldrd	r3, r0, [r0]
	switch ((uint32_t)format) {
 800ec88:	2a04      	cmp	r2, #4
 800ec8a:	d804      	bhi.n	800ec96 <STM32Ipl_ImageDataSize+0x16>
 800ec8c:	e8df f002 	tbb	[pc, r2]
 800ec90:	050e0508 	.word	0x050e0508
 800ec94:	12          	.byte	0x12
 800ec95:	00          	.byte	0x00
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 800ec96:	2000      	movs	r0, #0
}
 800ec98:	4770      	bx	lr
			return width * height * sizeof(uint8_t);
 800ec9a:	fb03 f000 	mul.w	r0, r3, r0
 800ec9e:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 800eca0:	331f      	adds	r3, #31
 800eca2:	095b      	lsrs	r3, r3, #5
 800eca4:	fb00 f303 	mul.w	r3, r0, r3
 800eca8:	0098      	lsls	r0, r3, #2
 800ecaa:	4770      	bx	lr
			return width * height * sizeof(uint16_t);
 800ecac:	fb00 f303 	mul.w	r3, r0, r3
 800ecb0:	0058      	lsls	r0, r3, #1
 800ecb2:	4770      	bx	lr
			return width * height * 3;
 800ecb4:	fb03 f000 	mul.w	r0, r3, r0
 800ecb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop

0800ecc0 <STM32Ipl_ImageFormatSupported>:
 */
bool STM32Ipl_ImageFormatSupported(const image_t *img, uint32_t formats)
{
	stm32ipl_if_t format;

	switch (img->bpp) {
 800ecc0:	6883      	ldr	r3, [r0, #8]
 800ecc2:	2b04      	cmp	r3, #4
 800ecc4:	d810      	bhi.n	800ece8 <STM32Ipl_ImageFormatSupported+0x28>
 800ecc6:	e8df f003 	tbb	[pc, r3]
 800ecca:	0309      	.short	0x0309
 800eccc:	0f0d      	.short	0x0f0d
 800ecce:	0b          	.byte	0x0b
 800eccf:	00          	.byte	0x00
 800ecd0:	2302      	movs	r3, #2

		default:
			return false;
	}

	return (format & formats);
 800ecd2:	4219      	tst	r1, r3
 800ecd4:	bf14      	ite	ne
 800ecd6:	2001      	movne	r0, #1
 800ecd8:	2000      	moveq	r0, #0
 800ecda:	4770      	bx	lr
	switch (img->bpp) {
 800ecdc:	2301      	movs	r3, #1
 800ecde:	e7f8      	b.n	800ecd2 <STM32Ipl_ImageFormatSupported+0x12>
			break;
 800ece0:	2308      	movs	r3, #8
 800ece2:	e7f6      	b.n	800ecd2 <STM32Ipl_ImageFormatSupported+0x12>
			break;
 800ece4:	2304      	movs	r3, #4
 800ece6:	e7f4      	b.n	800ecd2 <STM32Ipl_ImageFormatSupported+0x12>
	switch (img->bpp) {
 800ece8:	2000      	movs	r0, #0
}
 800ecea:	4770      	bx	lr

0800ecec <STM32Ipl_ConvertRev>:
 * otherwise it is executed normally (from the first to the last pixel).
 * @return		  stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_ConvertRev(const image_t *src, image_t *dst, bool reverse)
{
	STM32IPL_CHECK_VALID_IMAGE(src)
 800ecec:	2800      	cmp	r0, #0
 800ecee:	f000 85ec 	beq.w	800f8ca <STM32Ipl_ConvertRev+0xbde>
 800ecf2:	68c3      	ldr	r3, [r0, #12]
{
 800ecf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf8:	4682      	mov	sl, r0
 800ecfa:	b087      	sub	sp, #28
	STM32IPL_CHECK_VALID_IMAGE(dst)
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d056      	beq.n	800edae <STM32Ipl_ConvertRev+0xc2>
 800ed00:	4689      	mov	r9, r1
 800ed02:	2900      	cmp	r1, #0
 800ed04:	d053      	beq.n	800edae <STM32Ipl_ConvertRev+0xc2>
 800ed06:	68cb      	ldr	r3, [r1, #12]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d050      	beq.n	800edae <STM32Ipl_ConvertRev+0xc2>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 800ed0c:	210f      	movs	r1, #15
 800ed0e:	4690      	mov	r8, r2
 800ed10:	f7ff ffd6 	bl	800ecc0 <STM32Ipl_ImageFormatSupported>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d04f      	beq.n	800edb8 <STM32Ipl_ConvertRev+0xcc>
	STM32IPL_CHECK_FORMAT(dst, STM32IPL_IF_ALL)
 800ed18:	210f      	movs	r1, #15
 800ed1a:	4648      	mov	r0, r9
 800ed1c:	f7ff ffd0 	bl	800ecc0 <STM32Ipl_ImageFormatSupported>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d049      	beq.n	800edb8 <STM32Ipl_ConvertRev+0xcc>
	STM32IPL_CHECK_SAME_SIZE(src, dst)
 800ed24:	f8da 7000 	ldr.w	r7, [sl]
 800ed28:	f8d9 3000 	ldr.w	r3, [r9]
 800ed2c:	429f      	cmp	r7, r3
 800ed2e:	d13e      	bne.n	800edae <STM32Ipl_ConvertRev+0xc2>
 800ed30:	f8da 4004 	ldr.w	r4, [sl, #4]
 800ed34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ed38:	429c      	cmp	r4, r3
 800ed3a:	d138      	bne.n	800edae <STM32Ipl_ConvertRev+0xc2>

	if (src->data == dst->data)
 800ed3c:	f8da 600c 	ldr.w	r6, [sl, #12]
 800ed40:	f8d9 500c 	ldr.w	r5, [r9, #12]
 800ed44:	42ae      	cmp	r6, r5
 800ed46:	d032      	beq.n	800edae <STM32Ipl_ConvertRev+0xc2>
		return stm32ipl_err_InvalidParameter;

	switch (src->bpp) {
 800ed48:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	d833      	bhi.n	800edb8 <STM32Ipl_ConvertRev+0xcc>
 800ed50:	e8df f003 	tbb	[pc, r3]
 800ed54:	3224190e 	.word	0x3224190e
 800ed58:	03          	.byte	0x03
 800ed59:	00          	.byte	0x00
			}
			break;
		}

		case IMAGE_BPP_RGB888: {
			switch (dst->bpp) {
 800ed5a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d82a      	bhi.n	800edb8 <STM32Ipl_ConvertRev+0xcc>
 800ed62:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ed66:	0280      	.short	0x0280
 800ed68:	01a501c7 	.word	0x01a501c7
 800ed6c:	02380029 	.word	0x02380029
			switch (dst->bpp) {
 800ed70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ed74:	2b04      	cmp	r3, #4
 800ed76:	d81f      	bhi.n	800edb8 <STM32Ipl_ConvertRev+0xcc>
 800ed78:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ed7c:	024a0210 	.word	0x024a0210
 800ed80:	001e0093 	.word	0x001e0093
 800ed84:	01de      	.short	0x01de
			switch (dst->bpp) {
 800ed86:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ed8a:	2b04      	cmp	r3, #4
 800ed8c:	d814      	bhi.n	800edb8 <STM32Ipl_ConvertRev+0xcc>
 800ed8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ed92:	0158      	.short	0x0158
 800ed94:	00b700cc 	.word	0x00b700cc
 800ed98:	013f0013 	.word	0x013f0013
			switch (dst->bpp) {
 800ed9c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	d809      	bhi.n	800edb8 <STM32Ipl_ConvertRev+0xcc>
 800eda4:	e8df f003 	tbb	[pc, r3]
 800eda8:	083450dd 	.word	0x083450dd
 800edac:	0b          	.byte	0x0b
 800edad:	00          	.byte	0x00
	STM32IPL_CHECK_VALID_IMAGE(src)
 800edae:	f06f 0001 	mvn.w	r0, #1
		default:
			return stm32ipl_err_UnsupportedFormat;
	}

	return stm32ipl_err_Ok;
}
 800edb2:	b007      	add	sp, #28
 800edb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 800edb8:	f06f 0004 	mvn.w	r0, #4
 800edbc:	e7f9      	b.n	800edb2 <STM32Ipl_ConvertRev+0xc6>
	uint32_t size = width * height;
 800edbe:	fb04 f707 	mul.w	r7, r4, r7
	if (reverse) {
 800edc2:	f1b8 0f00 	cmp.w	r8, #0
 800edc6:	f040 8469 	bne.w	800f69c <STM32Ipl_ConvertRev+0x9b0>
		for (uint32_t i = 0; i < size; i++) {
 800edca:	2f00      	cmp	r7, #0
 800edcc:	f000 8094 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800edd0:	1ceb      	adds	r3, r5, #3
 800edd2:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 800edd6:	18cc      	adds	r4, r1, r3
			uint16_t v = *srcData++;
 800edd8:	f836 2b02 	ldrh.w	r2, [r6], #2
		for (uint32_t i = 0; i < size; i++) {
 800eddc:	3303      	adds	r3, #3
			*dst++ = COLOR_RGB565_TO_B8(v);
 800edde:	f3c2 0182 	ubfx	r1, r2, #2, #3
 800ede2:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
 800ede6:	f803 1c06 	strb.w	r1, [r3, #-6]
			*dst++ = COLOR_RGB565_TO_G8(v);
 800edea:	08d1      	lsrs	r1, r2, #3
			*dst++ = COLOR_RGB565_TO_R8(v);
 800edec:	0a12      	lsrs	r2, r2, #8
		for (uint32_t i = 0; i < size; i++) {
 800edee:	429c      	cmp	r4, r3
			*dst++ = COLOR_RGB565_TO_G8(v);
 800edf0:	f001 00fc 	and.w	r0, r1, #252	@ 0xfc
 800edf4:	f3c1 1181 	ubfx	r1, r1, #6, #2
 800edf8:	ea41 0100 	orr.w	r1, r1, r0
 800edfc:	f803 1c05 	strb.w	r1, [r3, #-5]
			*dst++ = COLOR_RGB565_TO_R8(v);
 800ee00:	f002 01f8 	and.w	r1, r2, #248	@ 0xf8
 800ee04:	ea41 1252 	orr.w	r2, r1, r2, lsr #5
 800ee08:	f803 2c04 	strb.w	r2, [r3, #-4]
		for (uint32_t i = 0; i < size; i++) {
 800ee0c:	d1e4      	bne.n	800edd8 <STM32Ipl_ConvertRev+0xec>
 800ee0e:	e073      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
					STM32Ipl_SimpleCopy(src->data, dst->data, STM32Ipl_ImageDataSize(dst), reverse);
 800ee10:	4648      	mov	r0, r9
 800ee12:	f7ff ff35 	bl	800ec80 <STM32Ipl_ImageDataSize>
	if (reverse) {
 800ee16:	f1b8 0f00 	cmp.w	r8, #0
 800ee1a:	f040 83f6 	bne.w	800f60a <STM32Ipl_ConvertRev+0x91e>
		for (uint32_t i = 0; i < size; i++)
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	d06a      	beq.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800ee22:	1e43      	subs	r3, r0, #1
 800ee24:	1c72      	adds	r2, r6, #1
 800ee26:	2b05      	cmp	r3, #5
 800ee28:	d903      	bls.n	800ee32 <STM32Ipl_ConvertRev+0x146>
 800ee2a:	1aab      	subs	r3, r5, r2
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	f200 8504 	bhi.w	800f83a <STM32Ipl_ConvertRev+0xb4e>
 800ee32:	1e6b      	subs	r3, r5, #1
 800ee34:	4430      	add	r0, r6
			*dst++ = *src++;
 800ee36:	f812 1c01 	ldrb.w	r1, [r2, #-1]
		for (uint32_t i = 0; i < size; i++)
 800ee3a:	4290      	cmp	r0, r2
 800ee3c:	f102 0201 	add.w	r2, r2, #1
			*dst++ = *src++;
 800ee40:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (uint32_t i = 0; i < size; i++)
 800ee44:	d1f7      	bne.n	800ee36 <STM32Ipl_ConvertRev+0x14a>
 800ee46:	e057      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
	uint32_t size = width * height;
 800ee48:	fb07 f404 	mul.w	r4, r7, r4
	if (reverse) {
 800ee4c:	f1b8 0f00 	cmp.w	r8, #0
 800ee50:	f040 82b6 	bne.w	800f3c0 <STM32Ipl_ConvertRev+0x6d4>
		for (uint32_t i = 0; i < size; i++) {
 800ee54:	2c00      	cmp	r4, #0
 800ee56:	d04f      	beq.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800ee58:	3e02      	subs	r6, #2
 800ee5a:	1929      	adds	r1, r5, r4
			*dst++ = COLOR_RGB565_TO_GRAYSCALE(*srcData);
 800ee5c:	2026      	movs	r0, #38	@ 0x26
 800ee5e:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800ee62:	08d4      	lsrs	r4, r2, #3
 800ee64:	0a17      	lsrs	r7, r2, #8
 800ee66:	f004 03fc 	and.w	r3, r4, #252	@ 0xfc
 800ee6a:	f3c4 1481 	ubfx	r4, r4, #6, #2
 800ee6e:	00d2      	lsls	r2, r2, #3
 800ee70:	4323      	orrs	r3, r4
 800ee72:	f007 04f8 	and.w	r4, r7, #248	@ 0xf8
 800ee76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ee7a:	ea44 1457 	orr.w	r4, r4, r7, lsr #5
 800ee7e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800ee82:	fb00 3304 	mla	r3, r0, r4, r3
 800ee86:	f002 04f8 	and.w	r4, r2, #248	@ 0xf8
 800ee8a:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800ee8e:	4322      	orrs	r2, r4
 800ee90:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800ee94:	4413      	add	r3, r2
 800ee96:	11db      	asrs	r3, r3, #7
 800ee98:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint32_t i = 0; i < size; i++) {
 800ee9c:	428d      	cmp	r5, r1
 800ee9e:	d1de      	bne.n	800ee5e <STM32Ipl_ConvertRev+0x172>
 800eea0:	e02a      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
	uint32_t srcRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 800eea2:	f107 031f 	add.w	r3, r7, #31
 800eea6:	095b      	lsrs	r3, r3, #5
	if (reverse) {
 800eea8:	f1b8 0f00 	cmp.w	r8, #0
 800eeac:	f040 83ba 	bne.w	800f624 <STM32Ipl_ConvertRev+0x938>
		for (uint32_t y = 0; y < height; y++) {
 800eeb0:	b314      	cbz	r4, 800eef8 <STM32Ipl_ConvertRev+0x20c>
			srcData += srcRowLen;
 800eeb2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800eeb6:	b1ff      	cbz	r7, 800eef8 <STM32Ipl_ConvertRev+0x20c>
 800eeb8:	007b      	lsls	r3, r7, #1
 800eeba:	9301      	str	r3, [sp, #4]
			for (int32_t x = width - 1; x >= 0; x--)
 800eebc:	46ab      	mov	fp, r5
			for (uint32_t x = 0; x < width; x++)
 800eebe:	f04f 0900 	mov.w	r9, #0
				*dstData++ = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800eec2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 800eec6:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800eeca:	f009 021f 	and.w	r2, r9, #31
			for (uint32_t x = 0; x < width; x++)
 800eece:	f109 0901 	add.w	r9, r9, #1
				*dstData++ = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800eed2:	40d0      	lsrs	r0, r2
 800eed4:	2200      	movs	r2, #0
 800eed6:	f340 0000 	sbfx	r0, r0, #0, #1
 800eeda:	4611      	mov	r1, r2
 800eedc:	b2c0      	uxtb	r0, r0
 800eede:	f7ff fea1 	bl	800ec24 <imlib_yuv_to_rgb>
			for (uint32_t x = 0; x < width; x++)
 800eee2:	454f      	cmp	r7, r9
				*dstData++ = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800eee4:	f82b 0b02 	strh.w	r0, [fp], #2
			for (uint32_t x = 0; x < width; x++)
 800eee8:	d1eb      	bne.n	800eec2 <STM32Ipl_ConvertRev+0x1d6>
		for (uint32_t y = 0; y < height; y++) {
 800eeea:	f108 0801 	add.w	r8, r8, #1
				*dstData++ = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800eeee:	9b01      	ldr	r3, [sp, #4]
			srcData += srcRowLen;
 800eef0:	4456      	add	r6, sl
		for (uint32_t y = 0; y < height; y++) {
 800eef2:	4544      	cmp	r4, r8
				*dstData++ = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800eef4:	441d      	add	r5, r3
		for (uint32_t y = 0; y < height; y++) {
 800eef6:	d1e1      	bne.n	800eebc <STM32Ipl_ConvertRev+0x1d0>
	return stm32ipl_err_Ok;
 800eef8:	2000      	movs	r0, #0
}
 800eefa:	b007      	add	sp, #28
 800eefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t size = width * height;
 800ef00:	fb07 f404 	mul.w	r4, r7, r4
	if (reverse) {
 800ef04:	f1b8 0f00 	cmp.w	r8, #0
 800ef08:	f040 8366 	bne.w	800f5d8 <STM32Ipl_ConvertRev+0x8ec>
		for (uint32_t i = 0; i < size; i++) {
 800ef0c:	2c00      	cmp	r4, #0
 800ef0e:	d0f3      	beq.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800ef10:	3e01      	subs	r6, #1
 800ef12:	4434      	add	r4, r6
			*dstData++ = COLOR_GRAYSCALE_TO_RGB565(*src);
 800ef14:	2200      	movs	r2, #0
 800ef16:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	f7ff fe82 	bl	800ec24 <imlib_yuv_to_rgb>
		for (uint32_t i = 0; i < size; i++) {
 800ef20:	42b4      	cmp	r4, r6
			*dstData++ = COLOR_GRAYSCALE_TO_RGB565(*src);
 800ef22:	f825 0b02 	strh.w	r0, [r5], #2
		for (uint32_t i = 0; i < size; i++) {
 800ef26:	d1f5      	bne.n	800ef14 <STM32Ipl_ConvertRev+0x228>
 800ef28:	e7e6      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
					STM32Ipl_SimpleCopy(src->data, dst->data, STM32Ipl_ImageDataSize(dst), reverse);
 800ef2a:	4648      	mov	r0, r9
 800ef2c:	f7ff fea8 	bl	800ec80 <STM32Ipl_ImageDataSize>
	if (reverse) {
 800ef30:	f1b8 0f00 	cmp.w	r8, #0
 800ef34:	f040 843b 	bne.w	800f7ae <STM32Ipl_ConvertRev+0xac2>
		for (uint32_t i = 0; i < size; i++)
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d0dd      	beq.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800ef3c:	1e43      	subs	r3, r0, #1
 800ef3e:	1c72      	adds	r2, r6, #1
 800ef40:	2b05      	cmp	r3, #5
 800ef42:	d903      	bls.n	800ef4c <STM32Ipl_ConvertRev+0x260>
 800ef44:	1aab      	subs	r3, r5, r2
 800ef46:	2b02      	cmp	r3, #2
 800ef48:	f200 84a7 	bhi.w	800f89a <STM32Ipl_ConvertRev+0xbae>
 800ef4c:	1e6b      	subs	r3, r5, #1
 800ef4e:	4430      	add	r0, r6
			*dst++ = *src++;
 800ef50:	f812 1c01 	ldrb.w	r1, [r2, #-1]
		for (uint32_t i = 0; i < size; i++)
 800ef54:	4290      	cmp	r0, r2
 800ef56:	f102 0201 	add.w	r2, r2, #1
			*dst++ = *src++;
 800ef5a:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (uint32_t i = 0; i < size; i++)
 800ef5e:	d1f7      	bne.n	800ef50 <STM32Ipl_ConvertRev+0x264>
 800ef60:	e7ca      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
	uint32_t dstRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 800ef62:	f107 031f 	add.w	r3, r7, #31
 800ef66:	095b      	lsrs	r3, r3, #5
	if (reverse) {
 800ef68:	f1b8 0f00 	cmp.w	r8, #0
 800ef6c:	f040 83be 	bne.w	800f6ec <STM32Ipl_ConvertRev+0xa00>
		for (uint32_t y = 0; y < height; y++) {
 800ef70:	2c00      	cmp	r4, #0
 800ef72:	d0c1      	beq.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
			dstData += dstRowLen;
 800ef74:	0099      	lsls	r1, r3, #2
			srcData += width;
 800ef76:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 800ef7a:	2f00      	cmp	r7, #0
 800ef7c:	d0bc      	beq.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		for (uint32_t y = 0; y < height; y++) {
 800ef7e:	46c1      	mov	r9, r8
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 800ef80:	f04f 0b26 	mov.w	fp, #38	@ 0x26
 800ef84:	e9cd 4e02 	strd	r4, lr, [sp, #8]
 800ef88:	468e      	mov	lr, r1
			for (uint32_t x = 0; x < width; x++)
 800ef8a:	f1a6 0802 	sub.w	r8, r6, #2
 800ef8e:	2000      	movs	r0, #0
 800ef90:	9601      	str	r6, [sp, #4]
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 800ef92:	f838 1f02 	ldrh.w	r1, [r8, #2]!
 800ef96:	f000 041f 	and.w	r4, r0, #31
 800ef9a:	ea4f 1c50 	mov.w	ip, r0, lsr #5
			for (uint32_t x = 0; x < width; x++)
 800ef9e:	3001      	adds	r0, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 800efa0:	08cb      	lsrs	r3, r1, #3
 800efa2:	ea4f 2a11 	mov.w	sl, r1, lsr #8
 800efa6:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 800efaa:	f003 02fc 	and.w	r2, r3, #252	@ 0xfc
 800efae:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800efb2:	00c9      	lsls	r1, r1, #3
 800efb4:	431a      	orrs	r2, r3
 800efb6:	f00a 03f8 	and.w	r3, sl, #248	@ 0xf8
 800efba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800efbe:	ea43 135a 	orr.w	r3, r3, sl, lsr #5
 800efc2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800efc6:	fb0b 2303 	mla	r3, fp, r3, r2
 800efca:	f001 02f8 	and.w	r2, r1, #248	@ 0xf8
 800efce:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800efd2:	430a      	orrs	r2, r1
 800efd4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800efd8:	4413      	add	r3, r2
 800efda:	2201      	movs	r2, #1
 800efdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800efe0:	bfb4      	ite	lt
 800efe2:	2300      	movlt	r3, #0
 800efe4:	2301      	movge	r3, #1
			for (uint32_t x = 0; x < width; x++)
 800efe6:	4287      	cmp	r7, r0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 800efe8:	fa03 f304 	lsl.w	r3, r3, r4
 800efec:	fa02 f404 	lsl.w	r4, r2, r4
 800eff0:	ea26 0604 	bic.w	r6, r6, r4
 800eff4:	ea43 0306 	orr.w	r3, r3, r6
 800eff8:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
			for (uint32_t x = 0; x < width; x++)
 800effc:	d1c9      	bne.n	800ef92 <STM32Ipl_ConvertRev+0x2a6>
			srcData += width;
 800effe:	9b03      	ldr	r3, [sp, #12]
		for (uint32_t y = 0; y < height; y++) {
 800f000:	4491      	add	r9, r2
 800f002:	9e01      	ldr	r6, [sp, #4]
			dstData += dstRowLen;
 800f004:	4475      	add	r5, lr
			srcData += width;
 800f006:	441e      	add	r6, r3
		for (uint32_t y = 0; y < height; y++) {
 800f008:	9b02      	ldr	r3, [sp, #8]
 800f00a:	454b      	cmp	r3, r9
 800f00c:	d1bd      	bne.n	800ef8a <STM32Ipl_ConvertRev+0x29e>
 800f00e:	e773      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
	uint32_t size = width * height;
 800f010:	fb07 f404 	mul.w	r4, r7, r4
	if (reverse) {
 800f014:	f1b8 0f00 	cmp.w	r8, #0
 800f018:	f040 83d7 	bne.w	800f7ca <STM32Ipl_ConvertRev+0xade>
		for (uint32_t i = 0; i < size; i++) {
 800f01c:	2c00      	cmp	r4, #0
 800f01e:	f43f af6b 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f022:	1931      	adds	r1, r6, r4
			uint8_t v = *src++;
 800f024:	f816 3b01 	ldrb.w	r3, [r6], #1
			*dst++ = v;
 800f028:	f04f 0200 	mov.w	r2, #0
 800f02c:	f363 0207 	bfi	r2, r3, #0, #8
		for (uint32_t i = 0; i < size; i++) {
 800f030:	428e      	cmp	r6, r1
			*dst++ = v;
 800f032:	f363 220f 	bfi	r2, r3, #8, #8
 800f036:	f825 2b03 	strh.w	r2, [r5], #3
			*dst++ = v;
 800f03a:	f805 3c01 	strb.w	r3, [r5, #-1]
		for (uint32_t i = 0; i < size; i++) {
 800f03e:	d1f1      	bne.n	800f024 <STM32Ipl_ConvertRev+0x338>
 800f040:	e75a      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
	uint32_t dstRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 800f042:	f107 0e1f 	add.w	lr, r7, #31
 800f046:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
	if (reverse) {
 800f04a:	f1b8 0f00 	cmp.w	r8, #0
 800f04e:	f040 8257 	bne.w	800f500 <STM32Ipl_ConvertRev+0x814>
		for (uint32_t y = 0; y < height; y++) {
 800f052:	2c00      	cmp	r4, #0
 800f054:	f43f af50 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			dstData += dstRowLen;
 800f058:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f05c:	2f00      	cmp	r7, #0
 800f05e:	f43f af4b 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		for (uint32_t y = 0; y < height; y++) {
 800f062:	4642      	mov	r2, r8
 800f064:	eb06 0807 	add.w	r8, r6, r7
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 800f068:	f04f 0c01 	mov.w	ip, #1
 800f06c:	4640      	mov	r0, r8
			for (uint32_t x = 0; x < width; x++) {
 800f06e:	2100      	movs	r1, #0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 800f070:	f816 ab01 	ldrb.w	sl, [r6], #1
 800f074:	f001 031f 	and.w	r3, r1, #31
 800f078:	ea4f 1951 	mov.w	r9, r1, lsr #5
			for (uint32_t x = 0; x < width; x++) {
 800f07c:	3101      	adds	r1, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 800f07e:	ea4f 1ada 	mov.w	sl, sl, lsr #7
 800f082:	fa0c fb03 	lsl.w	fp, ip, r3
			for (uint32_t x = 0; x < width; x++) {
 800f086:	4286      	cmp	r6, r0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 800f088:	fa0a fa03 	lsl.w	sl, sl, r3
 800f08c:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
 800f090:	ea23 030b 	bic.w	r3, r3, fp
 800f094:	ea43 030a 	orr.w	r3, r3, sl
 800f098:	f845 3029 	str.w	r3, [r5, r9, lsl #2]
			for (uint32_t x = 0; x < width; x++) {
 800f09c:	d1e8      	bne.n	800f070 <STM32Ipl_ConvertRev+0x384>
		for (uint32_t y = 0; y < height; y++) {
 800f09e:	3201      	adds	r2, #1
			dstData += dstRowLen;
 800f0a0:	4475      	add	r5, lr
		for (uint32_t y = 0; y < height; y++) {
 800f0a2:	4438      	add	r0, r7
				src++;
 800f0a4:	4646      	mov	r6, r8
		for (uint32_t y = 0; y < height; y++) {
 800f0a6:	4294      	cmp	r4, r2
 800f0a8:	f43f af26 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f0ac:	44b8      	add	r8, r7
 800f0ae:	e7de      	b.n	800f06e <STM32Ipl_ConvertRev+0x382>
	uint32_t size = width * height;
 800f0b0:	fb07 f404 	mul.w	r4, r7, r4
	if (reverse) {
 800f0b4:	f1b8 0f00 	cmp.w	r8, #0
 800f0b8:	f040 8260 	bne.w	800f57c <STM32Ipl_ConvertRev+0x890>
		for (uint32_t i = 0; i < size; i++) {
 800f0bc:	2c00      	cmp	r4, #0
 800f0be:	f43f af1b 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f0c2:	3603      	adds	r6, #3
 800f0c4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
			*dstData++ = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800f0c8:	48d3      	ldr	r0, [pc, #844]	@ (800f418 <STM32Ipl_ConvertRev+0x72c>)
 800f0ca:	1873      	adds	r3, r6, r1
 800f0cc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
		for (uint32_t i = 0; i < size; i++) {
 800f0d0:	3603      	adds	r6, #3
			*dstData++ = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800f0d2:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 800f0d6:	00c9      	lsls	r1, r1, #3
 800f0d8:	ea00 2202 	and.w	r2, r0, r2, lsl #8
 800f0dc:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 800f0e0:	430a      	orrs	r2, r1
 800f0e2:	f816 1c06 	ldrb.w	r1, [r6, #-6]
		for (uint32_t i = 0; i < size; i++) {
 800f0e6:	429e      	cmp	r6, r3
			*dstData++ = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800f0e8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 800f0ec:	f825 2b02 	strh.w	r2, [r5], #2
		for (uint32_t i = 0; i < size; i++) {
 800f0f0:	d1ec      	bne.n	800f0cc <STM32Ipl_ConvertRev+0x3e0>
 800f0f2:	e701      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
	uint32_t size = width * height;
 800f0f4:	fb04 f707 	mul.w	r7, r4, r7
	if (reverse) {
 800f0f8:	f1b8 0f00 	cmp.w	r8, #0
 800f0fc:	f040 837e 	bne.w	800f7fc <STM32Ipl_ConvertRev+0xb10>
		for (uint32_t i = 0; i < size; i++) {
 800f100:	2f00      	cmp	r7, #0
 800f102:	f43f aef9 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f106:	3603      	adds	r6, #3
 800f108:	19e9      	adds	r1, r5, r7
			*dst++ = COLOR_RGB888_TO_Y(r, g, b);
 800f10a:	2426      	movs	r4, #38	@ 0x26
 800f10c:	200f      	movs	r0, #15
 800f10e:	f816 3c02 	ldrb.w	r3, [r6, #-2]
		for (uint32_t i = 0; i < size; i++) {
 800f112:	3603      	adds	r6, #3
			*dst++ = COLOR_RGB888_TO_Y(r, g, b);
 800f114:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 800f118:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f11c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800f120:	fb14 3202 	smlabb	r2, r4, r2, r3
 800f124:	f816 3c06 	ldrb.w	r3, [r6, #-6]
 800f128:	fb10 2303 	smlabb	r3, r0, r3, r2
 800f12c:	11db      	asrs	r3, r3, #7
 800f12e:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint32_t i = 0; i < size; i++) {
 800f132:	428d      	cmp	r5, r1
 800f134:	d1eb      	bne.n	800f10e <STM32Ipl_ConvertRev+0x422>
 800f136:	e6df      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
	uint32_t srcRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 800f138:	f107 0e1f 	add.w	lr, r7, #31
 800f13c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
	if (reverse) {
 800f140:	f1b8 0f00 	cmp.w	r8, #0
 800f144:	f040 816a 	bne.w	800f41c <STM32Ipl_ConvertRev+0x730>
		for (uint32_t y = 0; y < height; y++) {
 800f148:	2c00      	cmp	r4, #0
 800f14a:	f43f aed5 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			srcData += srcRowLen;
 800f14e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f152:	2f00      	cmp	r7, #0
 800f154:	f43f aed0 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		for (uint32_t y = 0; y < height; y++) {
 800f158:	4642      	mov	r2, r8
 800f15a:	eb07 0847 	add.w	r8, r7, r7, lsl #1
			for (int32_t x = width - 1; x >= 0; x--) {
 800f15e:	46ac      	mov	ip, r5
			for (uint32_t x = 0; x < width; x++) {
 800f160:	2100      	movs	r1, #0
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 800f162:	094b      	lsrs	r3, r1, #5
 800f164:	f001 001f 	and.w	r0, r1, #31
			for (uint32_t x = 0; x < width; x++) {
 800f168:	3101      	adds	r1, #1
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 800f16a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
			for (uint32_t x = 0; x < width; x++) {
 800f16e:	428f      	cmp	r7, r1
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 800f170:	fa23 f300 	lsr.w	r3, r3, r0
				*dst++ = v;
 800f174:	f04f 0000 	mov.w	r0, #0
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 800f178:	f343 0300 	sbfx	r3, r3, #0, #1
 800f17c:	b2db      	uxtb	r3, r3
				*dst++ = v;
 800f17e:	f363 0007 	bfi	r0, r3, #0, #8
 800f182:	f363 200f 	bfi	r0, r3, #8, #8
 800f186:	f82c 0b03 	strh.w	r0, [ip], #3
				*dst++ = v;
 800f18a:	f80c 3c01 	strb.w	r3, [ip, #-1]
			for (uint32_t x = 0; x < width; x++) {
 800f18e:	d1e8      	bne.n	800f162 <STM32Ipl_ConvertRev+0x476>
		for (uint32_t y = 0; y < height; y++) {
 800f190:	3201      	adds	r2, #1
				*dst++ = v;
 800f192:	4445      	add	r5, r8
			srcData += srcRowLen;
 800f194:	4476      	add	r6, lr
		for (uint32_t y = 0; y < height; y++) {
 800f196:	4294      	cmp	r4, r2
 800f198:	d1e1      	bne.n	800f15e <STM32Ipl_ConvertRev+0x472>
 800f19a:	e6ad      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
					STM32Ipl_SimpleCopy(src->data, dst->data, STM32Ipl_ImageDataSize(dst), reverse);
 800f19c:	4648      	mov	r0, r9
 800f19e:	f7ff fd6f 	bl	800ec80 <STM32Ipl_ImageDataSize>
	if (reverse) {
 800f1a2:	f1b8 0f00 	cmp.w	r8, #0
 800f1a6:	f040 820a 	bne.w	800f5be <STM32Ipl_ConvertRev+0x8d2>
		for (uint32_t i = 0; i < size; i++)
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	f43f aea4 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f1b0:	1e43      	subs	r3, r0, #1
 800f1b2:	1c72      	adds	r2, r6, #1
 800f1b4:	2b05      	cmp	r3, #5
 800f1b6:	d903      	bls.n	800f1c0 <STM32Ipl_ConvertRev+0x4d4>
 800f1b8:	1aab      	subs	r3, r5, r2
 800f1ba:	2b02      	cmp	r3, #2
 800f1bc:	f200 8361 	bhi.w	800f882 <STM32Ipl_ConvertRev+0xb96>
 800f1c0:	1e6b      	subs	r3, r5, #1
 800f1c2:	4430      	add	r0, r6
			*dst++ = *src++;
 800f1c4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
		for (uint32_t i = 0; i < size; i++)
 800f1c8:	4290      	cmp	r0, r2
 800f1ca:	f102 0201 	add.w	r2, r2, #1
			*dst++ = *src++;
 800f1ce:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (uint32_t i = 0; i < size; i++)
 800f1d2:	d1f7      	bne.n	800f1c4 <STM32Ipl_ConvertRev+0x4d8>
 800f1d4:	e690      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
					STM32Ipl_SimpleCopy(src->data, dst->data, STM32Ipl_ImageDataSize(dst), reverse);
 800f1d6:	4648      	mov	r0, r9
 800f1d8:	f7ff fd52 	bl	800ec80 <STM32Ipl_ImageDataSize>
	if (reverse) {
 800f1dc:	f1b8 0f00 	cmp.w	r8, #0
 800f1e0:	f040 80e1 	bne.w	800f3a6 <STM32Ipl_ConvertRev+0x6ba>
		for (uint32_t i = 0; i < size; i++)
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	f43f ae87 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f1ea:	1e43      	subs	r3, r0, #1
 800f1ec:	1c72      	adds	r2, r6, #1
 800f1ee:	2b05      	cmp	r3, #5
 800f1f0:	d903      	bls.n	800f1fa <STM32Ipl_ConvertRev+0x50e>
 800f1f2:	1aab      	subs	r3, r5, r2
 800f1f4:	2b02      	cmp	r3, #2
 800f1f6:	f200 835c 	bhi.w	800f8b2 <STM32Ipl_ConvertRev+0xbc6>
 800f1fa:	1e6b      	subs	r3, r5, #1
 800f1fc:	4430      	add	r0, r6
			*dst++ = *src++;
 800f1fe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
		for (uint32_t i = 0; i < size; i++)
 800f202:	4282      	cmp	r2, r0
 800f204:	f102 0201 	add.w	r2, r2, #1
			*dst++ = *src++;
 800f208:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (uint32_t i = 0; i < size; i++)
 800f20c:	d1f7      	bne.n	800f1fe <STM32Ipl_ConvertRev+0x512>
 800f20e:	e673      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
	uint32_t srcRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 800f210:	f107 0e1f 	add.w	lr, r7, #31
 800f214:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
	if (reverse) {
 800f218:	f1b8 0f00 	cmp.w	r8, #0
 800f21c:	f040 813c 	bne.w	800f498 <STM32Ipl_ConvertRev+0x7ac>
		for (uint32_t y = 0; y < height; y++) {
 800f220:	2c00      	cmp	r4, #0
 800f222:	f43f ae69 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			srcData += srcRowLen;
 800f226:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f22a:	2f00      	cmp	r7, #0
 800f22c:	f43f ae64 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		for (uint32_t y = 0; y < height; y++) {
 800f230:	4642      	mov	r2, r8
 800f232:	eb05 0807 	add.w	r8, r5, r7
 800f236:	46c4      	mov	ip, r8
			for (uint32_t x = 0; x < width; x++)
 800f238:	2100      	movs	r1, #0
				*dst++ = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f23a:	094b      	lsrs	r3, r1, #5
 800f23c:	f001 001f 	and.w	r0, r1, #31
			for (uint32_t x = 0; x < width; x++)
 800f240:	3101      	adds	r1, #1
				*dst++ = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f242:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800f246:	40c3      	lsrs	r3, r0
 800f248:	f343 0300 	sbfx	r3, r3, #0, #1
 800f24c:	f805 3b01 	strb.w	r3, [r5], #1
			for (uint32_t x = 0; x < width; x++)
 800f250:	4565      	cmp	r5, ip
 800f252:	d1f2      	bne.n	800f23a <STM32Ipl_ConvertRev+0x54e>
		for (uint32_t y = 0; y < height; y++) {
 800f254:	3201      	adds	r2, #1
			srcData += srcRowLen;
 800f256:	4476      	add	r6, lr
		for (uint32_t y = 0; y < height; y++) {
 800f258:	44bc      	add	ip, r7
				*dst++ = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f25a:	4645      	mov	r5, r8
		for (uint32_t y = 0; y < height; y++) {
 800f25c:	4294      	cmp	r4, r2
 800f25e:	f43f ae4b 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f262:	44b8      	add	r8, r7
 800f264:	e7e8      	b.n	800f238 <STM32Ipl_ConvertRev+0x54c>
	uint32_t dstRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 800f266:	f107 0b1f 	add.w	fp, r7, #31
 800f26a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	if (reverse) {
 800f26e:	f1b8 0f00 	cmp.w	r8, #0
 800f272:	d143      	bne.n	800f2fc <STM32Ipl_ConvertRev+0x610>
		for (uint32_t y = 0; y < height; y++) {
 800f274:	2c00      	cmp	r4, #0
 800f276:	f43f ae3f 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			dstData += dstRowLen;
 800f27a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800f27e:	2f00      	cmp	r7, #0
 800f280:	f43f ae3a 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		for (uint32_t y = 0; y < height; y++) {
 800f284:	4642      	mov	r2, r8
 800f286:	eb07 0c47 	add.w	ip, r7, r7, lsl #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f28a:	f04f 0a26 	mov.w	sl, #38	@ 0x26
 800f28e:	f04f 090f 	mov.w	r9, #15
 800f292:	f04f 0801 	mov.w	r8, #1
 800f296:	9402      	str	r4, [sp, #8]
			for (uint32_t x = 0; x < width; x++) {
 800f298:	1cf0      	adds	r0, r6, #3
 800f29a:	2100      	movs	r1, #0
 800f29c:	9601      	str	r6, [sp, #4]
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f29e:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 800f2a2:	ea4f 1e51 	mov.w	lr, r1, lsr #5
 800f2a6:	f810 4c01 	ldrb.w	r4, [r0, #-1]
			for (uint32_t x = 0; x < width; x++) {
 800f2aa:	3003      	adds	r0, #3
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f2ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f2b0:	f855 602e 	ldr.w	r6, [r5, lr, lsl #2]
 800f2b4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800f2b8:	fb1a 3404 	smlabb	r4, sl, r4, r3
 800f2bc:	f810 3c06 	ldrb.w	r3, [r0, #-6]
 800f2c0:	fb19 4303 	smlabb	r3, r9, r3, r4
 800f2c4:	f001 041f 	and.w	r4, r1, #31
			for (uint32_t x = 0; x < width; x++) {
 800f2c8:	3101      	adds	r1, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f2ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f2ce:	bfb4      	ite	lt
 800f2d0:	2300      	movlt	r3, #0
 800f2d2:	2301      	movge	r3, #1
			for (uint32_t x = 0; x < width; x++) {
 800f2d4:	428f      	cmp	r7, r1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f2d6:	fa03 f304 	lsl.w	r3, r3, r4
 800f2da:	fa08 f404 	lsl.w	r4, r8, r4
 800f2de:	ea26 0604 	bic.w	r6, r6, r4
 800f2e2:	ea43 0306 	orr.w	r3, r3, r6
 800f2e6:	f845 302e 	str.w	r3, [r5, lr, lsl #2]
			for (uint32_t x = 0; x < width; x++) {
 800f2ea:	d1d8      	bne.n	800f29e <STM32Ipl_ConvertRev+0x5b2>
		for (uint32_t y = 0; y < height; y++) {
 800f2ec:	3201      	adds	r2, #1
 800f2ee:	9b02      	ldr	r3, [sp, #8]
 800f2f0:	9e01      	ldr	r6, [sp, #4]
			dstData += dstRowLen;
 800f2f2:	445d      	add	r5, fp
		for (uint32_t y = 0; y < height; y++) {
 800f2f4:	4293      	cmp	r3, r2
				rgb888++;
 800f2f6:	4466      	add	r6, ip
		for (uint32_t y = 0; y < height; y++) {
 800f2f8:	d1ce      	bne.n	800f298 <STM32Ipl_ConvertRev+0x5ac>
 800f2fa:	e5fd      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		rgb888_t *rgb888 = (rgb888_t*)(src + (width * height * 3) - 3);
 800f2fc:	fb04 f307 	mul.w	r3, r4, r7
		dstData += dstRowLen * (height - 1);
 800f300:	f104 3cff 	add.w	ip, r4, #4294967295
		rgb888_t *rgb888 = (rgb888_t*)(src + (width * height * 3) - 3);
 800f304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		dstData += dstRowLen * (height - 1);
 800f308:	fb0b fc0c 	mul.w	ip, fp, ip
		rgb888_t *rgb888 = (rgb888_t*)(src + (width * height * 3) - 3);
 800f30c:	f1a3 0903 	sub.w	r9, r3, #3
		dstData += dstRowLen * (height - 1);
 800f310:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
		rgb888_t *rgb888 = (rgb888_t*)(src + (width * height * 3) - 3);
 800f314:	44b1      	add	r9, r6
		for (uint32_t y = 0; y < height; y++) {
 800f316:	2c00      	cmp	r4, #0
 800f318:	f43f adee 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			dstData -= dstRowLen;
 800f31c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800f320:	1e78      	subs	r0, r7, #1
 800f322:	f1cb 0a00 	rsb	sl, fp, #0
 800f326:	f53f ade7 	bmi.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f32a:	1ebb      	subs	r3, r7, #2
 800f32c:	eba7 0187 	sub.w	r1, r7, r7, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 800f330:	f04f 0b00 	mov.w	fp, #0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f334:	f04f 0826 	mov.w	r8, #38	@ 0x26
 800f338:	3301      	adds	r3, #1
 800f33a:	f04f 0e0f 	mov.w	lr, #15
 800f33e:	f04f 0701 	mov.w	r7, #1
 800f342:	bfac      	ite	ge
 800f344:	460d      	movge	r5, r1
 800f346:	f06f 0502 	mvnlt.w	r5, #2
 800f34a:	e9cd 4001 	strd	r4, r0, [sp, #4]
			for (int32_t x = width - 1; x >= 0; x--) {
 800f34e:	f1a9 0103 	sub.w	r1, r9, #3
 800f352:	9a02      	ldr	r2, [sp, #8]
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f354:	790b      	ldrb	r3, [r1, #4]
 800f356:	1156      	asrs	r6, r2, #5
 800f358:	7948      	ldrb	r0, [r1, #5]
			for (int32_t x = width - 1; x >= 0; x--) {
 800f35a:	3903      	subs	r1, #3
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f35c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f360:	f85c 4026 	ldr.w	r4, [ip, r6, lsl #2]
 800f364:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800f368:	fb18 3000 	smlabb	r0, r8, r0, r3
 800f36c:	798b      	ldrb	r3, [r1, #6]
 800f36e:	fb1e 0303 	smlabb	r3, lr, r3, r0
 800f372:	f002 001f 	and.w	r0, r2, #31
			for (int32_t x = width - 1; x >= 0; x--) {
 800f376:	3a01      	subs	r2, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 800f378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f37c:	bfb4      	ite	lt
 800f37e:	2300      	movlt	r3, #0
 800f380:	2301      	movge	r3, #1
 800f382:	4083      	lsls	r3, r0
 800f384:	fa07 f000 	lsl.w	r0, r7, r0
 800f388:	ea24 0400 	bic.w	r4, r4, r0
 800f38c:	4323      	orrs	r3, r4
 800f38e:	f84c 3026 	str.w	r3, [ip, r6, lsl #2]
			for (int32_t x = width - 1; x >= 0; x--) {
 800f392:	1c56      	adds	r6, r2, #1
 800f394:	d1de      	bne.n	800f354 <STM32Ipl_ConvertRev+0x668>
		for (uint32_t y = 0; y < height; y++) {
 800f396:	f10b 0b01 	add.w	fp, fp, #1
 800f39a:	9b01      	ldr	r3, [sp, #4]
				rgb888--;
 800f39c:	44a9      	add	r9, r5
			dstData -= dstRowLen;
 800f39e:	44d4      	add	ip, sl
		for (uint32_t y = 0; y < height; y++) {
 800f3a0:	455b      	cmp	r3, fp
 800f3a2:	d1d4      	bne.n	800f34e <STM32Ipl_ConvertRev+0x662>
 800f3a4:	e5a8      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		src += size;
 800f3a6:	1833      	adds	r3, r6, r0
		for (uint32_t i = 0; i < size; i++)
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	f43f ada5 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f3ae:	3001      	adds	r0, #1
 800f3b0:	182a      	adds	r2, r5, r0
			*dst-- = *src--;
 800f3b2:	f813 1901 	ldrb.w	r1, [r3], #-1
		for (uint32_t i = 0; i < size; i++)
 800f3b6:	429e      	cmp	r6, r3
			*dst-- = *src--;
 800f3b8:	f802 1d01 	strb.w	r1, [r2, #-1]!
		for (uint32_t i = 0; i < size; i++)
 800f3bc:	d1f9      	bne.n	800f3b2 <STM32Ipl_ConvertRev+0x6c6>
 800f3be:	e59b      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		dst += (width * height) - 1;
 800f3c0:	1e60      	subs	r0, r4, #1
 800f3c2:	4428      	add	r0, r5
		for (uint32_t i = 0; i < size; i++) {
 800f3c4:	2c00      	cmp	r4, #0
 800f3c6:	f43f ad97 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f3ca:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 800f3ce:	1e6b      	subs	r3, r5, #1
			*dst-- = COLOR_RGB565_TO_GRAYSCALE(*srcData);
 800f3d0:	2626      	movs	r6, #38	@ 0x26
 800f3d2:	f834 1d02 	ldrh.w	r1, [r4, #-2]!
 800f3d6:	08cd      	lsrs	r5, r1, #3
 800f3d8:	0a0f      	lsrs	r7, r1, #8
 800f3da:	f005 02fc 	and.w	r2, r5, #252	@ 0xfc
 800f3de:	f3c5 1581 	ubfx	r5, r5, #6, #2
 800f3e2:	00c9      	lsls	r1, r1, #3
 800f3e4:	432a      	orrs	r2, r5
 800f3e6:	f007 05f8 	and.w	r5, r7, #248	@ 0xf8
 800f3ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800f3ee:	ea45 1557 	orr.w	r5, r5, r7, lsr #5
 800f3f2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800f3f6:	fb06 2205 	mla	r2, r6, r5, r2
 800f3fa:	f001 05f8 	and.w	r5, r1, #248	@ 0xf8
 800f3fe:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800f402:	4329      	orrs	r1, r5
 800f404:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800f408:	440a      	add	r2, r1
 800f40a:	11d2      	asrs	r2, r2, #7
 800f40c:	f800 2901 	strb.w	r2, [r0], #-1
		for (uint32_t i = 0; i < size; i++) {
 800f410:	4298      	cmp	r0, r3
 800f412:	d1de      	bne.n	800f3d2 <STM32Ipl_ConvertRev+0x6e6>
 800f414:	e570      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f416:	bf00      	nop
 800f418:	fffff800 	.word	0xfffff800
		dst += (width * height * 3) - 1;
 800f41c:	fb04 f307 	mul.w	r3, r4, r7
 800f420:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f424:	f103 3cff 	add.w	ip, r3, #4294967295
 800f428:	44ac      	add	ip, r5
		srcData += srcRowLen * (height - 1);
 800f42a:	1e65      	subs	r5, r4, #1
 800f42c:	fb0e f505 	mul.w	r5, lr, r5
 800f430:	eb06 0585 	add.w	r5, r6, r5, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 800f434:	2c00      	cmp	r4, #0
 800f436:	f43f ad5f 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			srcData -= srcRowLen;
 800f43a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f43e:	f1ce 0600 	rsb	r6, lr, #0
 800f442:	f1b7 0e01 	subs.w	lr, r7, #1
 800f446:	f53f ad57 	bmi.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f44a:	1ebb      	subs	r3, r7, #2
 800f44c:	eba7 0187 	sub.w	r1, r7, r7, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 800f450:	2700      	movs	r7, #0
 800f452:	3301      	adds	r3, #1
 800f454:	bfac      	ite	ge
 800f456:	4688      	movge	r8, r1
 800f458:	f06f 0802 	mvnlt.w	r8, #2
			for (int32_t x = width - 1; x >= 0; x--) {
 800f45c:	f1ac 0002 	sub.w	r0, ip, #2
 800f460:	4672      	mov	r2, lr
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 800f462:	1153      	asrs	r3, r2, #5
 800f464:	f002 011f 	and.w	r1, r2, #31
			for (int32_t x = width - 1; x >= 0; x--) {
 800f468:	3a01      	subs	r2, #1
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 800f46a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800f46e:	40cb      	lsrs	r3, r1
				*dst-- = v;
 800f470:	f04f 0100 	mov.w	r1, #0
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 800f474:	f343 0300 	sbfx	r3, r3, #0, #1
 800f478:	b2db      	uxtb	r3, r3
				*dst-- = v;
 800f47a:	f363 0107 	bfi	r1, r3, #0, #8
				*dst-- = v;
 800f47e:	7083      	strb	r3, [r0, #2]
				*dst-- = v;
 800f480:	f363 210f 	bfi	r1, r3, #8, #8
			for (int32_t x = width - 1; x >= 0; x--) {
 800f484:	1c53      	adds	r3, r2, #1
				*dst-- = v;
 800f486:	f820 1903 	strh.w	r1, [r0], #-3
			for (int32_t x = width - 1; x >= 0; x--) {
 800f48a:	d1ea      	bne.n	800f462 <STM32Ipl_ConvertRev+0x776>
		for (uint32_t y = 0; y < height; y++) {
 800f48c:	3701      	adds	r7, #1
				*dst-- = v;
 800f48e:	44c4      	add	ip, r8
			srcData -= srcRowLen;
 800f490:	4435      	add	r5, r6
		for (uint32_t y = 0; y < height; y++) {
 800f492:	42bc      	cmp	r4, r7
 800f494:	d1e2      	bne.n	800f45c <STM32Ipl_ConvertRev+0x770>
 800f496:	e52f      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		dst += (width * height) - 1;
 800f498:	fb04 5307 	mla	r3, r4, r7, r5
		srcData += srcRowLen * (height - 1);
 800f49c:	1e65      	subs	r5, r4, #1
 800f49e:	fb0e f505 	mul.w	r5, lr, r5
		dst += (width * height) - 1;
 800f4a2:	f103 3cff 	add.w	ip, r3, #4294967295
		srcData += srcRowLen * (height - 1);
 800f4a6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 800f4aa:	2c00      	cmp	r4, #0
 800f4ac:	f43f ad24 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			srcData -= srcRowLen;
 800f4b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f4b4:	f1b7 0801 	subs.w	r8, r7, #1
 800f4b8:	f1ce 0600 	rsb	r6, lr, #0
 800f4bc:	f53f ad1c 	bmi.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		for (uint32_t y = 0; y < height; y++) {
 800f4c0:	f04f 0e00 	mov.w	lr, #0
 800f4c4:	f1c7 0a00 	rsb	sl, r7, #0
 800f4c8:	1eb9      	subs	r1, r7, #2
 800f4ca:	4660      	mov	r0, ip
			for (int32_t x = width - 1; x >= 0; x--)
 800f4cc:	4642      	mov	r2, r8
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f4ce:	1153      	asrs	r3, r2, #5
 800f4d0:	f002 071f 	and.w	r7, r2, #31
			for (int32_t x = width - 1; x >= 0; x--)
 800f4d4:	3a01      	subs	r2, #1
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f4d6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800f4da:	40fb      	lsrs	r3, r7
			for (int32_t x = width - 1; x >= 0; x--)
 800f4dc:	1c57      	adds	r7, r2, #1
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f4de:	f343 0300 	sbfx	r3, r3, #0, #1
 800f4e2:	f800 3901 	strb.w	r3, [r0], #-1
			for (int32_t x = width - 1; x >= 0; x--)
 800f4e6:	d1f2      	bne.n	800f4ce <STM32Ipl_ConvertRev+0x7e2>
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f4e8:	1c48      	adds	r0, r1, #1
		for (uint32_t y = 0; y < height; y++) {
 800f4ea:	f10e 0e01 	add.w	lr, lr, #1
			srcData -= srcRowLen;
 800f4ee:	4435      	add	r5, r6
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f4f0:	bfac      	ite	ge
 800f4f2:	4653      	movge	r3, sl
 800f4f4:	f04f 33ff 	movlt.w	r3, #4294967295
		for (uint32_t y = 0; y < height; y++) {
 800f4f8:	4574      	cmp	r4, lr
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f4fa:	449c      	add	ip, r3
		for (uint32_t y = 0; y < height; y++) {
 800f4fc:	d1e5      	bne.n	800f4ca <STM32Ipl_ConvertRev+0x7de>
 800f4fe:	e4fb      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		dstData += dstRowLen * (height - 1);
 800f500:	1e63      	subs	r3, r4, #1
		src += (width * height) - 1;
 800f502:	fb04 6207 	mla	r2, r4, r7, r6
		dstData += dstRowLen * (height - 1);
 800f506:	fb0e f303 	mul.w	r3, lr, r3
		src += (width * height) - 1;
 800f50a:	3a01      	subs	r2, #1
		dstData += dstRowLen * (height - 1);
 800f50c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 800f510:	2c00      	cmp	r4, #0
 800f512:	f43f acf1 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			dstData -= dstRowLen;
 800f516:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800f51a:	f1b7 0b01 	subs.w	fp, r7, #1
 800f51e:	f1ce 0800 	rsb	r8, lr, #0
 800f522:	f53f ace9 	bmi.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f526:	f1c7 0a00 	rsb	sl, r7, #0
 800f52a:	1eb9      	subs	r1, r7, #2
		for (uint32_t y = 0; y < height; y++) {
 800f52c:	f04f 0900 	mov.w	r9, #0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 800f530:	2701      	movs	r7, #1
 800f532:	9401      	str	r4, [sp, #4]
		for (uint32_t y = 0; y < height; y++) {
 800f534:	4696      	mov	lr, r2
			for (int32_t x = width - 1; x >= 0; x--) {
 800f536:	465d      	mov	r5, fp
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 800f538:	f81e 4901 	ldrb.w	r4, [lr], #-1
 800f53c:	f005 061f 	and.w	r6, r5, #31
 800f540:	ea4f 1c65 	mov.w	ip, r5, asr #5
			for (int32_t x = width - 1; x >= 0; x--) {
 800f544:	3d01      	subs	r5, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 800f546:	09e4      	lsrs	r4, r4, #7
 800f548:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800f54c:	40b4      	lsls	r4, r6
 800f54e:	fa07 f606 	lsl.w	r6, r7, r6
 800f552:	ea20 0006 	bic.w	r0, r0, r6
			for (int32_t x = width - 1; x >= 0; x--) {
 800f556:	1c6e      	adds	r6, r5, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 800f558:	ea40 0004 	orr.w	r0, r0, r4
 800f55c:	f843 002c 	str.w	r0, [r3, ip, lsl #2]
			for (int32_t x = width - 1; x >= 0; x--) {
 800f560:	d1ea      	bne.n	800f538 <STM32Ipl_ConvertRev+0x84c>
				src--;
 800f562:	1c4c      	adds	r4, r1, #1
		for (uint32_t y = 0; y < height; y++) {
 800f564:	f109 0901 	add.w	r9, r9, #1
			dstData -= dstRowLen;
 800f568:	4443      	add	r3, r8
				src--;
 800f56a:	bfac      	ite	ge
 800f56c:	4650      	movge	r0, sl
 800f56e:	f04f 30ff 	movlt.w	r0, #4294967295
 800f572:	4402      	add	r2, r0
		for (uint32_t y = 0; y < height; y++) {
 800f574:	9801      	ldr	r0, [sp, #4]
 800f576:	4548      	cmp	r0, r9
 800f578:	d1dc      	bne.n	800f534 <STM32Ipl_ConvertRev+0x848>
 800f57a:	e4bd      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		src += (width * height * 3) - 1;
 800f57c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		dstData += (width * height) - 1;
 800f580:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
		src += (width * height * 3) - 1;
 800f584:	1e5a      	subs	r2, r3, #1
		dstData += (width * height) - 1;
 800f586:	4420      	add	r0, r4
		src += (width * height * 3) - 1;
 800f588:	4432      	add	r2, r6
		dstData += (width * height) - 1;
 800f58a:	eb05 0040 	add.w	r0, r5, r0, lsl #1
		for (uint32_t i = 0; i < size; i++) {
 800f58e:	2c00      	cmp	r4, #0
 800f590:	f43f acb2 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f594:	1ad3      	subs	r3, r2, r3
			*dstData-- = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800f596:	4dce      	ldr	r5, [pc, #824]	@ (800f8d0 <STM32Ipl_ConvertRev+0xbe4>)
 800f598:	3a03      	subs	r2, #3
 800f59a:	1edc      	subs	r4, r3, #3
 800f59c:	7891      	ldrb	r1, [r2, #2]
		for (uint32_t i = 0; i < size; i++) {
 800f59e:	3a03      	subs	r2, #3
			*dstData-- = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800f5a0:	7993      	ldrb	r3, [r2, #6]
 800f5a2:	00c9      	lsls	r1, r1, #3
 800f5a4:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 800f5a8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 800f5ac:	430b      	orrs	r3, r1
 800f5ae:	7911      	ldrb	r1, [r2, #4]
		for (uint32_t i = 0; i < size; i++) {
 800f5b0:	42a2      	cmp	r2, r4
			*dstData-- = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 800f5b2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 800f5b6:	f820 3902 	strh.w	r3, [r0], #-2
		for (uint32_t i = 0; i < size; i++) {
 800f5ba:	d1ef      	bne.n	800f59c <STM32Ipl_ConvertRev+0x8b0>
 800f5bc:	e49c      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		src += size;
 800f5be:	1833      	adds	r3, r6, r0
		for (uint32_t i = 0; i < size; i++)
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	f43f ac99 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f5c6:	1c42      	adds	r2, r0, #1
 800f5c8:	442a      	add	r2, r5
			*dst-- = *src--;
 800f5ca:	f813 1901 	ldrb.w	r1, [r3], #-1
		for (uint32_t i = 0; i < size; i++)
 800f5ce:	429e      	cmp	r6, r3
			*dst-- = *src--;
 800f5d0:	f802 1d01 	strb.w	r1, [r2, #-1]!
		for (uint32_t i = 0; i < size; i++)
 800f5d4:	d1f9      	bne.n	800f5ca <STM32Ipl_ConvertRev+0x8de>
 800f5d6:	e48f      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		dstData += (width * height) - 1;
 800f5d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
		src += (width * height) - 1;
 800f5dc:	1e62      	subs	r2, r4, #1
		dstData += (width * height) - 1;
 800f5de:	4423      	add	r3, r4
		src += (width * height) - 1;
 800f5e0:	4432      	add	r2, r6
		dstData += (width * height) - 1;
 800f5e2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
		for (uint32_t i = 0; i < size; i++) {
 800f5e6:	2c00      	cmp	r4, #0
 800f5e8:	f43f ac86 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f5ec:	f1c4 0301 	rsb	r3, r4, #1
 800f5f0:	4434      	add	r4, r6
 800f5f2:	18d6      	adds	r6, r2, r3
			*dstData-- = COLOR_GRAYSCALE_TO_RGB565(*src);
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	f7ff fb12 	bl	800ec24 <imlib_yuv_to_rgb>
		for (uint32_t i = 0; i < size; i++) {
 800f600:	42a6      	cmp	r6, r4
			*dstData-- = COLOR_GRAYSCALE_TO_RGB565(*src);
 800f602:	f825 0902 	strh.w	r0, [r5], #-2
		for (uint32_t i = 0; i < size; i++) {
 800f606:	d1f5      	bne.n	800f5f4 <STM32Ipl_ConvertRev+0x908>
 800f608:	e476      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		src += size;
 800f60a:	1833      	adds	r3, r6, r0
		for (uint32_t i = 0; i < size; i++)
 800f60c:	2800      	cmp	r0, #0
 800f60e:	f43f ac73 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f612:	1c42      	adds	r2, r0, #1
 800f614:	442a      	add	r2, r5
			*dst-- = *src--;
 800f616:	f813 1901 	ldrb.w	r1, [r3], #-1
		for (uint32_t i = 0; i < size; i++)
 800f61a:	429e      	cmp	r6, r3
			*dst-- = *src--;
 800f61c:	f802 1d01 	strb.w	r1, [r2, #-1]!
		for (uint32_t i = 0; i < size; i++)
 800f620:	d1f9      	bne.n	800f616 <STM32Ipl_ConvertRev+0x92a>
 800f622:	e469      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		srcData += srcRowLen * (height - 1);
 800f624:	f104 39ff 	add.w	r9, r4, #4294967295
		dstData += (width * height) - 1;
 800f628:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
		srcData += srcRowLen * (height - 1);
 800f62c:	fb03 f909 	mul.w	r9, r3, r9
		dstData += (width * height) - 1;
 800f630:	fb04 bb07 	mla	fp, r4, r7, fp
		srcData += srcRowLen * (height - 1);
 800f634:	eb06 0989 	add.w	r9, r6, r9, lsl #2
		dstData += (width * height) - 1;
 800f638:	eb05 0b4b 	add.w	fp, r5, fp, lsl #1
		for (uint32_t y = 0; y < height; y++) {
 800f63c:	2c00      	cmp	r4, #0
 800f63e:	f43f ac5b 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			srcData -= srcRowLen;
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	f1c3 0a00 	rsb	sl, r3, #0
 800f648:	1e7b      	subs	r3, r7, #1
 800f64a:	f53f ac55 	bmi.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f64e:	1eb9      	subs	r1, r7, #2
 800f650:	ebc7 78c7 	rsb	r8, r7, r7, lsl #31
		for (uint32_t y = 0; y < height; y++) {
 800f654:	461e      	mov	r6, r3
 800f656:	2700      	movs	r7, #0
 800f658:	3101      	adds	r1, #1
 800f65a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f65e:	9401      	str	r4, [sp, #4]
 800f660:	bfb8      	it	lt
 800f662:	f06f 0801 	mvnlt.w	r8, #1
 800f666:	465c      	mov	r4, fp
			for (int32_t x = width - 1; x >= 0; x--)
 800f668:	4635      	mov	r5, r6
				*dstData-- = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f66a:	116a      	asrs	r2, r5, #5
 800f66c:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 800f670:	f005 021f 	and.w	r2, r5, #31
			for (int32_t x = width - 1; x >= 0; x--)
 800f674:	3d01      	subs	r5, #1
				*dstData-- = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f676:	40d0      	lsrs	r0, r2
 800f678:	2200      	movs	r2, #0
 800f67a:	f340 0000 	sbfx	r0, r0, #0, #1
 800f67e:	4611      	mov	r1, r2
 800f680:	b2c0      	uxtb	r0, r0
 800f682:	f7ff facf 	bl	800ec24 <imlib_yuv_to_rgb>
			for (int32_t x = width - 1; x >= 0; x--)
 800f686:	1c6a      	adds	r2, r5, #1
				*dstData-- = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f688:	f824 0902 	strh.w	r0, [r4], #-2
			for (int32_t x = width - 1; x >= 0; x--)
 800f68c:	d1ed      	bne.n	800f66a <STM32Ipl_ConvertRev+0x97e>
		for (uint32_t y = 0; y < height; y++) {
 800f68e:	3701      	adds	r7, #1
 800f690:	9b01      	ldr	r3, [sp, #4]
				*dstData-- = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 800f692:	44c3      	add	fp, r8
			srcData -= srcRowLen;
 800f694:	44d1      	add	r9, sl
		for (uint32_t y = 0; y < height; y++) {
 800f696:	42bb      	cmp	r3, r7
 800f698:	d1e5      	bne.n	800f666 <STM32Ipl_ConvertRev+0x97a>
 800f69a:	e42d      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		srcData += (width * height) - 1;
 800f69c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
		dst += (width * height * 3) - 1;
 800f6a0:	eb07 0247 	add.w	r2, r7, r7, lsl #1
		srcData += (width * height) - 1;
 800f6a4:	443c      	add	r4, r7
		dst += (width * height * 3) - 1;
 800f6a6:	1e53      	subs	r3, r2, #1
		srcData += (width * height) - 1;
 800f6a8:	eb06 0444 	add.w	r4, r6, r4, lsl #1
		dst += (width * height * 3) - 1;
 800f6ac:	442b      	add	r3, r5
		for (uint32_t i = 0; i < size; i++) {
 800f6ae:	2f00      	cmp	r7, #0
 800f6b0:	f43f ac22 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f6b4:	1a9a      	subs	r2, r3, r2
 800f6b6:	3b03      	subs	r3, #3
 800f6b8:	1ed6      	subs	r6, r2, #3
			uint16_t v = *srcData--;
 800f6ba:	f834 1902 	ldrh.w	r1, [r4], #-2
		for (uint32_t i = 0; i < size; i++) {
 800f6be:	3b03      	subs	r3, #3
			*dst-- = COLOR_RGB565_TO_B8(v);
 800f6c0:	f3c1 0082 	ubfx	r0, r1, #2, #3
			*dst-- = COLOR_RGB565_TO_R8(v);
 800f6c4:	0a0d      	lsrs	r5, r1, #8
			*dst-- = COLOR_RGB565_TO_G8(v);
 800f6c6:	08ca      	lsrs	r2, r1, #3
			*dst-- = COLOR_RGB565_TO_B8(v);
 800f6c8:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
 800f6cc:	7119      	strb	r1, [r3, #4]
			*dst-- = COLOR_RGB565_TO_R8(v);
 800f6ce:	f005 01f8 	and.w	r1, r5, #248	@ 0xf8
 800f6d2:	ea41 1155 	orr.w	r1, r1, r5, lsr #5
 800f6d6:	7199      	strb	r1, [r3, #6]
			*dst-- = COLOR_RGB565_TO_G8(v);
 800f6d8:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 800f6dc:	f3c2 1281 	ubfx	r2, r2, #6, #2
		for (uint32_t i = 0; i < size; i++) {
 800f6e0:	42b3      	cmp	r3, r6
			*dst-- = COLOR_RGB565_TO_G8(v);
 800f6e2:	ea42 0201 	orr.w	r2, r2, r1
 800f6e6:	715a      	strb	r2, [r3, #5]
		for (uint32_t i = 0; i < size; i++) {
 800f6e8:	d1e7      	bne.n	800f6ba <STM32Ipl_ConvertRev+0x9ce>
 800f6ea:	e405      	b.n	800eef8 <STM32Ipl_ConvertRev+0x20c>
		srcData += width * (height - 1);
 800f6ec:	1e62      	subs	r2, r4, #1
 800f6ee:	0079      	lsls	r1, r7, #1
 800f6f0:	fb01 6602 	mla	r6, r1, r2, r6
		dstData += dstRowLen * (height - 1);
 800f6f4:	fb03 f202 	mul.w	r2, r3, r2
 800f6f8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 800f6fc:	2c00      	cmp	r4, #0
 800f6fe:	f43f abfb 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			dstData -= dstRowLen;
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	3f01      	subs	r7, #1
			srcData -= width;
 800f706:	f1c1 0500 	rsb	r5, r1, #0
			dstData -= dstRowLen;
 800f70a:	f1c3 0200 	rsb	r2, r3, #0
 800f70e:	f53f abf3 	bmi.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		for (uint32_t y = 0; y < height; y++) {
 800f712:	f04f 0e00 	mov.w	lr, #0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 800f716:	f04f 0b26 	mov.w	fp, #38	@ 0x26
 800f71a:	f04f 0a01 	mov.w	sl, #1
 800f71e:	468c      	mov	ip, r1
 800f720:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800f724:	e9cd 5204 	strd	r5, r2, [sp, #16]
			for (int32_t x = width - 1; x >= 0; x--)
 800f728:	eb06 090c 	add.w	r9, r6, ip
 800f72c:	9803      	ldr	r0, [sp, #12]
 800f72e:	9601      	str	r6, [sp, #4]
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 800f730:	f839 1d02 	ldrh.w	r1, [r9, #-2]!
 800f734:	f000 041f 	and.w	r4, r0, #31
 800f738:	1146      	asrs	r6, r0, #5
			for (int32_t x = width - 1; x >= 0; x--)
 800f73a:	3801      	subs	r0, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 800f73c:	08cb      	lsrs	r3, r1, #3
 800f73e:	0a0f      	lsrs	r7, r1, #8
 800f740:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
 800f744:	f003 02fc 	and.w	r2, r3, #252	@ 0xfc
 800f748:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800f74c:	00c9      	lsls	r1, r1, #3
 800f74e:	431a      	orrs	r2, r3
 800f750:	f007 03f8 	and.w	r3, r7, #248	@ 0xf8
 800f754:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800f758:	ea43 1357 	orr.w	r3, r3, r7, lsr #5
 800f75c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800f760:	fb0b 2303 	mla	r3, fp, r3, r2
 800f764:	f001 02f8 	and.w	r2, r1, #248	@ 0xf8
 800f768:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800f76c:	430a      	orrs	r2, r1
 800f76e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800f772:	4413      	add	r3, r2
 800f774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f778:	bfb4      	ite	lt
 800f77a:	2300      	movlt	r3, #0
 800f77c:	2301      	movge	r3, #1
			for (int32_t x = width - 1; x >= 0; x--)
 800f77e:	1c47      	adds	r7, r0, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 800f780:	fa03 f304 	lsl.w	r3, r3, r4
 800f784:	fa0a f404 	lsl.w	r4, sl, r4
 800f788:	ea25 0504 	bic.w	r5, r5, r4
 800f78c:	ea43 0305 	orr.w	r3, r3, r5
 800f790:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
			for (int32_t x = width - 1; x >= 0; x--)
 800f794:	d1cc      	bne.n	800f730 <STM32Ipl_ConvertRev+0xa44>
			srcData -= width;
 800f796:	9b04      	ldr	r3, [sp, #16]
		for (uint32_t y = 0; y < height; y++) {
 800f798:	f10e 0e01 	add.w	lr, lr, #1
 800f79c:	9e01      	ldr	r6, [sp, #4]
			srcData -= width;
 800f79e:	441e      	add	r6, r3
			dstData -= dstRowLen;
 800f7a0:	9b05      	ldr	r3, [sp, #20]
 800f7a2:	4498      	add	r8, r3
		for (uint32_t y = 0; y < height; y++) {
 800f7a4:	9b02      	ldr	r3, [sp, #8]
 800f7a6:	4573      	cmp	r3, lr
 800f7a8:	d1be      	bne.n	800f728 <STM32Ipl_ConvertRev+0xa3c>
 800f7aa:	f7ff bba5 	b.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		src += size;
 800f7ae:	1833      	adds	r3, r6, r0
		for (uint32_t i = 0; i < size; i++)
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	f43f aba1 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f7b6:	1c42      	adds	r2, r0, #1
 800f7b8:	442a      	add	r2, r5
			*dst-- = *src--;
 800f7ba:	f813 1901 	ldrb.w	r1, [r3], #-1
		for (uint32_t i = 0; i < size; i++)
 800f7be:	429e      	cmp	r6, r3
			*dst-- = *src--;
 800f7c0:	f802 1d01 	strb.w	r1, [r2, #-1]!
		for (uint32_t i = 0; i < size; i++)
 800f7c4:	d1f9      	bne.n	800f7ba <STM32Ipl_ConvertRev+0xace>
 800f7c6:	f7ff bb97 	b.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		src += (width * height) - 1;
 800f7ca:	1e60      	subs	r0, r4, #1
		dst += (width * height * 3) - 1;
 800f7cc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		src += (width * height) - 1;
 800f7d0:	4430      	add	r0, r6
		for (uint32_t i = 0; i < size; i++) {
 800f7d2:	2c00      	cmp	r4, #0
 800f7d4:	f43f ab90 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f7d8:	3b03      	subs	r3, #3
 800f7da:	3e01      	subs	r6, #1
 800f7dc:	18e9      	adds	r1, r5, r3
			uint8_t v = *src--;
 800f7de:	f810 2901 	ldrb.w	r2, [r0], #-1
			*dst-- = v;
 800f7e2:	f04f 0300 	mov.w	r3, #0
 800f7e6:	f362 0307 	bfi	r3, r2, #0, #8
		for (uint32_t i = 0; i < size; i++) {
 800f7ea:	42b0      	cmp	r0, r6
			*dst-- = v;
 800f7ec:	708a      	strb	r2, [r1, #2]
			*dst-- = v;
 800f7ee:	f362 230f 	bfi	r3, r2, #8, #8
 800f7f2:	f821 3903 	strh.w	r3, [r1], #-3
		for (uint32_t i = 0; i < size; i++) {
 800f7f6:	d1f2      	bne.n	800f7de <STM32Ipl_ConvertRev+0xaf2>
 800f7f8:	f7ff bb7e 	b.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
		dst += (width * height) - 1;
 800f7fc:	1e7c      	subs	r4, r7, #1
		src += (width * height * 3) - 1;
 800f7fe:	eb07 0347 	add.w	r3, r7, r7, lsl #1
		dst += (width * height) - 1;
 800f802:	442c      	add	r4, r5
		for (uint32_t i = 0; i < size; i++) {
 800f804:	2f00      	cmp	r7, #0
 800f806:	f43f ab77 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f80a:	1f19      	subs	r1, r3, #4
			*dst-- = COLOR_RGB888_TO_Y(r, g, b);
 800f80c:	2726      	movs	r7, #38	@ 0x26
 800f80e:	1e6b      	subs	r3, r5, #1
 800f810:	250f      	movs	r5, #15
 800f812:	4431      	add	r1, r6
 800f814:	788a      	ldrb	r2, [r1, #2]
		for (uint32_t i = 0; i < size; i++) {
 800f816:	3903      	subs	r1, #3
			*dst-- = COLOR_RGB888_TO_Y(r, g, b);
 800f818:	7988      	ldrb	r0, [r1, #6]
 800f81a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800f81e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800f822:	fb17 2000 	smlabb	r0, r7, r0, r2
 800f826:	790a      	ldrb	r2, [r1, #4]
 800f828:	fb15 0202 	smlabb	r2, r5, r2, r0
 800f82c:	11d2      	asrs	r2, r2, #7
 800f82e:	f804 2901 	strb.w	r2, [r4], #-1
		for (uint32_t i = 0; i < size; i++) {
 800f832:	429c      	cmp	r4, r3
 800f834:	d1ee      	bne.n	800f814 <STM32Ipl_ConvertRev+0xb28>
 800f836:	f7ff bb5f 	b.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f83a:	f020 0403 	bic.w	r4, r0, #3
 800f83e:	462b      	mov	r3, r5
 800f840:	4632      	mov	r2, r6
 800f842:	442c      	add	r4, r5
			*dst++ = *src++;
 800f844:	f852 1b04 	ldr.w	r1, [r2], #4
 800f848:	f843 1b04 	str.w	r1, [r3], #4
		for (uint32_t i = 0; i < size; i++)
 800f84c:	42a3      	cmp	r3, r4
 800f84e:	d1f9      	bne.n	800f844 <STM32Ipl_ConvertRev+0xb58>
 800f850:	f020 0303 	bic.w	r3, r0, #3
 800f854:	0784      	lsls	r4, r0, #30
 800f856:	eb06 0103 	add.w	r1, r6, r3
 800f85a:	eb05 0203 	add.w	r2, r5, r3
 800f85e:	f43f ab4b 	beq.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			*dst++ = *src++;
 800f862:	5cf4      	ldrb	r4, [r6, r3]
 800f864:	54ec      	strb	r4, [r5, r3]
		for (uint32_t i = 0; i < size; i++)
 800f866:	1c5c      	adds	r4, r3, #1
 800f868:	42a0      	cmp	r0, r4
 800f86a:	f67f ab45 	bls.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f86e:	3302      	adds	r3, #2
			*dst++ = *src++;
 800f870:	784c      	ldrb	r4, [r1, #1]
		for (uint32_t i = 0; i < size; i++)
 800f872:	4298      	cmp	r0, r3
			*dst++ = *src++;
 800f874:	7054      	strb	r4, [r2, #1]
		for (uint32_t i = 0; i < size; i++)
 800f876:	f67f ab3f 	bls.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
			*dst++ = *src++;
 800f87a:	788b      	ldrb	r3, [r1, #2]
 800f87c:	7093      	strb	r3, [r2, #2]
		for (uint32_t i = 0; i < size; i++)
 800f87e:	f7ff bb3b 	b.w	800eef8 <STM32Ipl_ConvertRev+0x20c>
 800f882:	f020 0403 	bic.w	r4, r0, #3
 800f886:	4633      	mov	r3, r6
 800f888:	462a      	mov	r2, r5
 800f88a:	4434      	add	r4, r6
			*dst++ = *src++;
 800f88c:	f853 1b04 	ldr.w	r1, [r3], #4
 800f890:	429c      	cmp	r4, r3
 800f892:	f842 1b04 	str.w	r1, [r2], #4
		for (uint32_t i = 0; i < size; i++)
 800f896:	d1f9      	bne.n	800f88c <STM32Ipl_ConvertRev+0xba0>
 800f898:	e7da      	b.n	800f850 <STM32Ipl_ConvertRev+0xb64>
 800f89a:	f020 0403 	bic.w	r4, r0, #3
 800f89e:	462b      	mov	r3, r5
 800f8a0:	4632      	mov	r2, r6
 800f8a2:	442c      	add	r4, r5
			*dst++ = *src++;
 800f8a4:	f852 1b04 	ldr.w	r1, [r2], #4
 800f8a8:	f843 1b04 	str.w	r1, [r3], #4
		for (uint32_t i = 0; i < size; i++)
 800f8ac:	429c      	cmp	r4, r3
 800f8ae:	d1f9      	bne.n	800f8a4 <STM32Ipl_ConvertRev+0xbb8>
 800f8b0:	e7ce      	b.n	800f850 <STM32Ipl_ConvertRev+0xb64>
 800f8b2:	f020 0203 	bic.w	r2, r0, #3
 800f8b6:	462b      	mov	r3, r5
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	442a      	add	r2, r5
			*dst++ = *src++;
 800f8bc:	f851 4b04 	ldr.w	r4, [r1], #4
 800f8c0:	f843 4b04 	str.w	r4, [r3], #4
		for (uint32_t i = 0; i < size; i++)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d1f9      	bne.n	800f8bc <STM32Ipl_ConvertRev+0xbd0>
 800f8c8:	e7c2      	b.n	800f850 <STM32Ipl_ConvertRev+0xb64>
	STM32IPL_CHECK_VALID_IMAGE(src)
 800f8ca:	f06f 0001 	mvn.w	r0, #1
}
 800f8ce:	4770      	bx	lr
 800f8d0:	fffff800 	.word	0xfffff800

0800f8d4 <STM32Ipl_Downscale>:
	int32_t dstW;
	int32_t dstH;
	int32_t wRatio;
	int32_t hRatio;

	STM32IPL_CHECK_VALID_IMAGE(src)
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	f000 81d8 	beq.w	800fc8a <STM32Ipl_Downscale+0x3b6>
 800f8da:	68c3      	ldr	r3, [r0, #12]
{
 800f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e0:	4607      	mov	r7, r0
 800f8e2:	b087      	sub	sp, #28
	STM32IPL_CHECK_VALID_IMAGE(dst)
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f000 81cd 	beq.w	800fc84 <STM32Ipl_Downscale+0x3b0>
 800f8ea:	460e      	mov	r6, r1
 800f8ec:	2900      	cmp	r1, #0
 800f8ee:	f000 81c9 	beq.w	800fc84 <STM32Ipl_Downscale+0x3b0>
 800f8f2:	68cb      	ldr	r3, [r1, #12]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f000 81c5 	beq.w	800fc84 <STM32Ipl_Downscale+0x3b0>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 800f8fa:	210f      	movs	r1, #15
 800f8fc:	4690      	mov	r8, r2
 800f8fe:	f7ff f9df 	bl	800ecc0 <STM32Ipl_ImageFormatSupported>
 800f902:	2800      	cmp	r0, #0
 800f904:	f000 81b9 	beq.w	800fc7a <STM32Ipl_Downscale+0x3a6>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 800f908:	68b8      	ldr	r0, [r7, #8]
 800f90a:	68b3      	ldr	r3, [r6, #8]
 800f90c:	4298      	cmp	r0, r3
 800f90e:	f040 81b9 	bne.w	800fc84 <STM32Ipl_Downscale+0x3b0>

	if ((dst->w < 1) || (dst->h < 1))
 800f912:	6835      	ldr	r5, [r6, #0]
 800f914:	2d00      	cmp	r5, #0
 800f916:	f340 81b5 	ble.w	800fc84 <STM32Ipl_Downscale+0x3b0>
 800f91a:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800f91e:	f1ba 0f00 	cmp.w	sl, #0
 800f922:	f340 81af 	ble.w	800fc84 <STM32Ipl_Downscale+0x3b0>

	dstW = dst->w;
	dstH = dst->h;

	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 800f926:	e9d7 4300 	ldrd	r4, r3, [r7]
 800f92a:	041b      	lsls	r3, r3, #16
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 800f92c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 800f930:	fb93 f3fa 	sdiv	r3, r3, sl
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 800f934:	fb9c fcf5 	sdiv	ip, ip, r5
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 800f938:	3301      	adds	r3, #1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 800f93a:	f10c 0c01 	add.w	ip, ip, #1
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 800f93e:	9300      	str	r3, [sp, #0]

	if (reversed) {
 800f940:	f1b8 0f00 	cmp.w	r8, #0
 800f944:	d009      	beq.n	800f95a <STM32Ipl_Downscale+0x86>
		switch (src->bpp) {
 800f946:	2804      	cmp	r0, #4
 800f948:	f200 8197 	bhi.w	800fc7a <STM32Ipl_Downscale+0x3a6>
 800f94c:	e8df f010 	tbh	[pc, r0, lsl #1]
 800f950:	00820094 	.word	0x00820094
 800f954:	01950051 	.word	0x01950051
 800f958:	000f      	.short	0x000f

			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	} else {
		switch (src->bpp) {
 800f95a:	2804      	cmp	r0, #4
 800f95c:	f200 818d 	bhi.w	800fc7a <STM32Ipl_Downscale+0x3a6>
 800f960:	e8df f010 	tbh	[pc, r0, lsl #1]
 800f964:	0128014a 	.word	0x0128014a
 800f968:	018b0103 	.word	0x018b0103
 800f96c:	00d4      	.short	0x00d4
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800f96e:	f10a 38ff 	add.w	r8, sl, #4294967295
 800f972:	68f2      	ldr	r2, [r6, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 800f974:	f105 39ff 	add.w	r9, r5, #4294967295
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800f978:	68fe      	ldr	r6, [r7, #12]
 800f97a:	fb08 f305 	mul.w	r3, r8, r5
 800f97e:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
 800f982:	fb0c f909 	mul.w	r9, ip, r9
 800f986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f98a:	464f      	mov	r7, r9
 800f98c:	eb02 0e03 	add.w	lr, r2, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800f990:	eba5 03c5 	sub.w	r3, r5, r5, lsl #3
 800f994:	1958      	adds	r0, r3, r5
 800f996:	9b00      	ldr	r3, [sp, #0]
 800f998:	fb08 f503 	mul.w	r5, r8, r3
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800f99c:	ea4f 4a25 	mov.w	sl, r5, asr #16
 800f9a0:	eb0b 090e 	add.w	r9, fp, lr
 800f9a4:	4639      	mov	r1, r7
 800f9a6:	fb04 fa0a 	mul.w	sl, r4, sl
 800f9aa:	464a      	mov	r2, r9
 800f9ac:	e9cd 8501 	strd	r8, r5, [sp, #4]
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 800f9b0:	eb0a 4321 	add.w	r3, sl, r1, asr #16
 800f9b4:	1ed5      	subs	r5, r2, #3
 800f9b6:	eba1 010c 	sub.w	r1, r1, ip
 800f9ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					for (int x = dstW - 1; x >= 0; x--)
 800f9be:	45ae      	cmp	lr, r5
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 800f9c0:	f836 8003 	ldrh.w	r8, [r6, r3]
 800f9c4:	4433      	add	r3, r6
 800f9c6:	789b      	ldrb	r3, [r3, #2]
 800f9c8:	f822 8c03 	strh.w	r8, [r2, #-3]
 800f9cc:	f802 3c01 	strb.w	r3, [r2, #-1]
					for (int x = dstW - 1; x >= 0; x--)
 800f9d0:	462a      	mov	r2, r5
 800f9d2:	d1ed      	bne.n	800f9b0 <STM32Ipl_Downscale+0xdc>
 800f9d4:	9b00      	ldr	r3, [sp, #0]
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800f9d6:	eb00 0e09 	add.w	lr, r0, r9
 800f9da:	e9dd 8501 	ldrd	r8, r5, [sp, #4]
 800f9de:	f108 38ff 	add.w	r8, r8, #4294967295
 800f9e2:	1aed      	subs	r5, r5, r3
 800f9e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f9e8:	d1d8      	bne.n	800f99c <STM32Ipl_Downscale+0xc8>
			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	}

	return stm32ipl_err_Ok;
 800f9ea:	2000      	movs	r0, #0
}
 800f9ec:	b007      	add	sp, #28
 800f9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800f9f2:	f10a 3eff 	add.w	lr, sl, #4294967295
 800f9f6:	68f6      	ldr	r6, [r6, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 800f9f8:	f105 3bff 	add.w	fp, r5, #4294967295
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800f9fc:	ebc5 7a85 	rsb	sl, r5, r5, lsl #30
 800fa00:	fb0e f305 	mul.w	r3, lr, r5
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fa04:	68ff      	ldr	r7, [r7, #12]
 800fa06:	fb0c fb0b 	mul.w	fp, ip, fp
 800fa0a:	006d      	lsls	r5, r5, #1
 800fa0c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800fa10:	9b00      	ldr	r3, [sp, #0]
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800fa12:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800fa16:	fb0e f803 	mul.w	r8, lr, r3
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fa1a:	ea4f 4028 	mov.w	r0, r8, asr #16
 800fa1e:	eb05 0906 	add.w	r9, r5, r6
 800fa22:	465a      	mov	r2, fp
 800fa24:	fb04 f000 	mul.w	r0, r4, r0
 800fa28:	464b      	mov	r3, r9
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 800fa2a:	eb00 4122 	add.w	r1, r0, r2, asr #16
 800fa2e:	eba2 020c 	sub.w	r2, r2, ip
 800fa32:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 800fa36:	f823 1d02 	strh.w	r1, [r3, #-2]!
					for (int x = dstW - 1; x >= 0; x--)
 800fa3a:	429e      	cmp	r6, r3
 800fa3c:	d1f5      	bne.n	800fa2a <STM32Ipl_Downscale+0x156>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800fa3e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800fa42:	9b00      	ldr	r3, [sp, #0]
 800fa44:	eb0a 0609 	add.w	r6, sl, r9
 800fa48:	f1be 3fff 	cmp.w	lr, #4294967295
 800fa4c:	eba8 0803 	sub.w	r8, r8, r3
 800fa50:	d1e3      	bne.n	800fa1a <STM32Ipl_Downscale+0x146>
 800fa52:	e7ca      	b.n	800f9ea <STM32Ipl_Downscale+0x116>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800fa54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa58:	462b      	mov	r3, r5
 800fa5a:	e000      	b.n	800fa5e <STM32Ipl_Downscale+0x18a>
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 800fa5c:	6833      	ldr	r3, [r6, #0]
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 800fa5e:	68f0      	ldr	r0, [r6, #12]
 800fa60:	462a      	mov	r2, r5
 800fa62:	2100      	movs	r1, #0
 800fa64:	fb03 000a 	mla	r0, r3, sl, r0
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800fa68:	f10a 3aff 	add.w	sl, sl, #4294967295
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 800fa6c:	f009 fe93 	bl	8019796 <memset>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800fa70:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fa74:	d1f2      	bne.n	800fa5c <STM32Ipl_Downscale+0x188>
 800fa76:	e7b8      	b.n	800f9ea <STM32Ipl_Downscale+0x116>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fa78:	341f      	adds	r4, #31
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800fa7a:	f10a 3eff 	add.w	lr, sl, #4294967295
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fa7e:	f8d7 900c 	ldr.w	r9, [r7, #12]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 800fa82:	f04f 0a01 	mov.w	sl, #1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fa86:	0963      	lsrs	r3, r4, #5
					for (int32_t x = dstW - 1; x >= 0; x--)
 800fa88:	1e6c      	subs	r4, r5, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 800fa8a:	68f6      	ldr	r6, [r6, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fa8c:	9303      	str	r3, [sp, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 800fa8e:	f105 031f 	add.w	r3, r5, #31
 800fa92:	fb04 f50c 	mul.w	r5, r4, ip
 800fa96:	0959      	lsrs	r1, r3, #5
 800fa98:	9b00      	ldr	r3, [sp, #0]
 800fa9a:	fb01 f80e 	mul.w	r8, r1, lr
 800fa9e:	9104      	str	r1, [sp, #16]
 800faa0:	4629      	mov	r1, r5
 800faa2:	fb0e fb03 	mul.w	fp, lr, r3
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800faa6:	ea4f 472b 	mov.w	r7, fp, asr #16
 800faaa:	9b03      	ldr	r3, [sp, #12]
 800faac:	4608      	mov	r0, r1
					for (int32_t x = dstW - 1; x >= 0; x--)
 800faae:	4622      	mov	r2, r4
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fab0:	fb03 f707 	mul.w	r7, r3, r7
					for (int32_t x = dstW - 1; x >= 0; x--)
 800fab4:	e9cd e101 	strd	lr, r1, [sp, #4]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 800fab8:	eb07 5360 	add.w	r3, r7, r0, asr #21
 800fabc:	f3c0 4504 	ubfx	r5, r0, #16, #5
 800fac0:	eb08 1e62 	add.w	lr, r8, r2, asr #5
 800fac4:	eba0 000c 	sub.w	r0, r0, ip
 800fac8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800facc:	f856 102e 	ldr.w	r1, [r6, lr, lsl #2]
 800fad0:	40eb      	lsrs	r3, r5
 800fad2:	f002 051f 	and.w	r5, r2, #31
					for (int32_t x = dstW - 1; x >= 0; x--)
 800fad6:	3a01      	subs	r2, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 800fad8:	f003 0301 	and.w	r3, r3, #1
 800fadc:	40ab      	lsls	r3, r5
 800fade:	fa0a f505 	lsl.w	r5, sl, r5
 800fae2:	ea21 0505 	bic.w	r5, r1, r5
 800fae6:	432b      	orrs	r3, r5
 800fae8:	f846 302e 	str.w	r3, [r6, lr, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 800faec:	1c53      	adds	r3, r2, #1
 800faee:	d1e3      	bne.n	800fab8 <STM32Ipl_Downscale+0x1e4>
 800faf0:	9b00      	ldr	r3, [sp, #0]
				for (int32_t y = dstH - 1; y >= 0; y--) {
 800faf2:	e9dd e101 	ldrd	lr, r1, [sp, #4]
 800faf6:	ebab 0b03 	sub.w	fp, fp, r3
 800fafa:	9b04      	ldr	r3, [sp, #16]
 800fafc:	f10e 3eff 	add.w	lr, lr, #4294967295
 800fb00:	eba8 0803 	sub.w	r8, r8, r3
 800fb04:	f1be 3fff 	cmp.w	lr, #4294967295
 800fb08:	d1cd      	bne.n	800faa6 <STM32Ipl_Downscale+0x1d2>
 800fb0a:	e76e      	b.n	800f9ea <STM32Ipl_Downscale+0x116>
					rgb888_t *dstRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(dst, y);
 800fb0c:	f04f 0800 	mov.w	r8, #0
 800fb10:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800fb14:	68f3      	ldr	r3, [r6, #12]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fb16:	68f8      	ldr	r0, [r7, #12]
					rgb888_t *dstRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(dst, y);
 800fb18:	46c3      	mov	fp, r8
 800fb1a:	eb03 0e02 	add.w	lr, r3, r2
				for (int32_t y = 0; y < dstH; y++) {
 800fb1e:	46c1      	mov	r9, r8
 800fb20:	9201      	str	r2, [sp, #4]
 800fb22:	9502      	str	r5, [sp, #8]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fb24:	ea4f 472b 	mov.w	r7, fp, asr #16
 800fb28:	2500      	movs	r5, #0
 800fb2a:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 800fb2e:	fb04 f707 	mul.w	r7, r4, r7
					for (int32_t x = 0; x < dstW; x++)
 800fb32:	4419      	add	r1, r3
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 800fb34:	eb07 4225 	add.w	r2, r7, r5, asr #16
					for (int32_t x = 0; x < dstW; x++)
 800fb38:	3103      	adds	r1, #3
 800fb3a:	4465      	add	r5, ip
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 800fb3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
					for (int32_t x = 0; x < dstW; x++)
 800fb40:	458e      	cmp	lr, r1
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 800fb42:	eb00 0602 	add.w	r6, r0, r2
 800fb46:	5a82      	ldrh	r2, [r0, r2]
 800fb48:	78b6      	ldrb	r6, [r6, #2]
 800fb4a:	f821 2c03 	strh.w	r2, [r1, #-3]
 800fb4e:	f801 6c01 	strb.w	r6, [r1, #-1]
					for (int32_t x = 0; x < dstW; x++)
 800fb52:	d1ef      	bne.n	800fb34 <STM32Ipl_Downscale+0x260>
				for (int32_t y = 0; y < dstH; y++) {
 800fb54:	9a00      	ldr	r2, [sp, #0]
 800fb56:	f109 0901 	add.w	r9, r9, #1
 800fb5a:	4493      	add	fp, r2
 800fb5c:	9a02      	ldr	r2, [sp, #8]
 800fb5e:	45ca      	cmp	sl, r9
 800fb60:	4490      	add	r8, r2
 800fb62:	9a01      	ldr	r2, [sp, #4]
 800fb64:	4496      	add	lr, r2
 800fb66:	d1dd      	bne.n	800fb24 <STM32Ipl_Downscale+0x250>
 800fb68:	e73f      	b.n	800f9ea <STM32Ipl_Downscale+0x116>
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 800fb6a:	f04f 0e00 	mov.w	lr, #0
 800fb6e:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800fb72:	006b      	lsls	r3, r5, #1
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fb74:	68ff      	ldr	r7, [r7, #12]
 800fb76:	eb0b 0645 	add.w	r6, fp, r5, lsl #1
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 800fb7a:	46f1      	mov	r9, lr
				for (int32_t y = 0; y < dstH; y++) {
 800fb7c:	46f0      	mov	r8, lr
 800fb7e:	9301      	str	r3, [sp, #4]
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fb80:	ea4f 4029 	mov.w	r0, r9, asr #16
 800fb84:	2300      	movs	r3, #0
 800fb86:	eb0b 024e 	add.w	r2, fp, lr, lsl #1
 800fb8a:	fb04 f000 	mul.w	r0, r4, r0
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 800fb8e:	eb00 4123 	add.w	r1, r0, r3, asr #16
					for (int32_t x = 0; x < dstW; x++)
 800fb92:	4463      	add	r3, ip
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 800fb94:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 800fb98:	f822 1b02 	strh.w	r1, [r2], #2
					for (int32_t x = 0; x < dstW; x++)
 800fb9c:	4296      	cmp	r6, r2
 800fb9e:	d1f6      	bne.n	800fb8e <STM32Ipl_Downscale+0x2ba>
				for (int32_t y = 0; y < dstH; y++) {
 800fba0:	9b00      	ldr	r3, [sp, #0]
 800fba2:	f108 0801 	add.w	r8, r8, #1
 800fba6:	44ae      	add	lr, r5
 800fba8:	4499      	add	r9, r3
 800fbaa:	45c2      	cmp	sl, r8
 800fbac:	9b01      	ldr	r3, [sp, #4]
 800fbae:	441e      	add	r6, r3
 800fbb0:	d1e6      	bne.n	800fb80 <STM32Ipl_Downscale+0x2ac>
 800fbb2:	e71a      	b.n	800f9ea <STM32Ipl_Downscale+0x116>
		switch (src->bpp) {
 800fbb4:	f04f 0e00 	mov.w	lr, #0
 800fbb8:	4629      	mov	r1, r5
 800fbba:	f8dd 8000 	ldr.w	r8, [sp]
				for (int32_t y = 0; y < dstH; y++) {
 800fbbe:	4670      	mov	r0, lr
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 800fbc0:	68f3      	ldr	r3, [r6, #12]
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fbc2:	ea4f 492e 	mov.w	r9, lr, asr #16
 800fbc6:	68fa      	ldr	r2, [r7, #12]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 800fbc8:	fb00 f101 	mul.w	r1, r0, r1
					for (int32_t x = 0; x < dstW; x++)
 800fbcc:	fb04 2909 	mla	r9, r4, r9, r2
 800fbd0:	195c      	adds	r4, r3, r5
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	440b      	add	r3, r1
 800fbd6:	440c      	add	r4, r1
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 800fbd8:	1411      	asrs	r1, r2, #16
					for (int32_t x = 0; x < dstW; x++)
 800fbda:	4462      	add	r2, ip
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 800fbdc:	f819 1001 	ldrb.w	r1, [r9, r1]
 800fbe0:	f803 1b01 	strb.w	r1, [r3], #1
					for (int32_t x = 0; x < dstW; x++)
 800fbe4:	429c      	cmp	r4, r3
 800fbe6:	d1f7      	bne.n	800fbd8 <STM32Ipl_Downscale+0x304>
				for (int32_t y = 0; y < dstH; y++) {
 800fbe8:	3001      	adds	r0, #1
 800fbea:	44c6      	add	lr, r8
 800fbec:	4582      	cmp	sl, r0
 800fbee:	f43f aefc 	beq.w	800f9ea <STM32Ipl_Downscale+0x116>
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fbf2:	683c      	ldr	r4, [r7, #0]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 800fbf4:	6831      	ldr	r1, [r6, #0]
 800fbf6:	e7e3      	b.n	800fbc0 <STM32Ipl_Downscale+0x2ec>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fbf8:	341f      	adds	r4, #31
 800fbfa:	f8d7 900c 	ldr.w	r9, [r7, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 800fbfe:	2700      	movs	r7, #0
 800fc00:	68f2      	ldr	r2, [r6, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fc02:	0963      	lsrs	r3, r4, #5
				for (int32_t y = 0; y < dstH; y++) {
 800fc04:	4683      	mov	fp, r0
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 800fc06:	f04f 0801 	mov.w	r8, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 800fc0a:	463c      	mov	r4, r7
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fc0c:	9302      	str	r3, [sp, #8]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 800fc0e:	f105 031f 	add.w	r3, r5, #31
 800fc12:	095b      	lsrs	r3, r3, #5
 800fc14:	e9cd 0a04 	strd	r0, sl, [sp, #16]
 800fc18:	9303      	str	r3, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fc1a:	ea4f 4a24 	mov.w	sl, r4, asr #16
 800fc1e:	9b02      	ldr	r3, [sp, #8]
					for (int32_t x = 0; x < dstW; x++)
 800fc20:	9904      	ldr	r1, [sp, #16]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 800fc22:	2600      	movs	r6, #0
 800fc24:	fb03 fa0a 	mul.w	sl, r3, sl
 800fc28:	9401      	str	r4, [sp, #4]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 800fc2a:	eb0a 5366 	add.w	r3, sl, r6, asr #21
 800fc2e:	f3c6 4004 	ubfx	r0, r6, #16, #5
 800fc32:	eb07 1e61 	add.w	lr, r7, r1, asr #5
					for (int32_t x = 0; x < dstW; x++)
 800fc36:	4466      	add	r6, ip
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 800fc38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fc3c:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 800fc40:	40c3      	lsrs	r3, r0
 800fc42:	f001 001f 	and.w	r0, r1, #31
					for (int32_t x = 0; x < dstW; x++)
 800fc46:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 800fc48:	f003 0301 	and.w	r3, r3, #1
					for (int32_t x = 0; x < dstW; x++)
 800fc4c:	428d      	cmp	r5, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 800fc4e:	fa03 f300 	lsl.w	r3, r3, r0
 800fc52:	fa08 f000 	lsl.w	r0, r8, r0
 800fc56:	ea24 0000 	bic.w	r0, r4, r0
 800fc5a:	ea43 0300 	orr.w	r3, r3, r0
 800fc5e:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 800fc62:	d1e2      	bne.n	800fc2a <STM32Ipl_Downscale+0x356>
				for (int32_t y = 0; y < dstH; y++) {
 800fc64:	9b00      	ldr	r3, [sp, #0]
 800fc66:	f10b 0b01 	add.w	fp, fp, #1
 800fc6a:	9c01      	ldr	r4, [sp, #4]
 800fc6c:	441c      	add	r4, r3
 800fc6e:	9b03      	ldr	r3, [sp, #12]
 800fc70:	441f      	add	r7, r3
 800fc72:	9b05      	ldr	r3, [sp, #20]
 800fc74:	455b      	cmp	r3, fp
 800fc76:	d1d0      	bne.n	800fc1a <STM32Ipl_Downscale+0x346>
 800fc78:	e6b7      	b.n	800f9ea <STM32Ipl_Downscale+0x116>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 800fc7a:	f06f 0004 	mvn.w	r0, #4
}
 800fc7e:	b007      	add	sp, #28
 800fc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 800fc84:	f06f 0001 	mvn.w	r0, #1
 800fc88:	e6b0      	b.n	800f9ec <STM32Ipl_Downscale+0x118>
 800fc8a:	f06f 0001 	mvn.w	r0, #1
}
 800fc8e:	4770      	bx	lr

0800fc90 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800fc90:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800fc92:	e9d0 2300 	ldrd	r2, r3, [r0]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800fc96:	4c14      	ldr	r4, [pc, #80]	@ (800fce8 <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800fc98:	6881      	ldr	r1, [r0, #8]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800fc9a:	4e14      	ldr	r6, [pc, #80]	@ (800fcec <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800fc9c:	e9c4 2300 	strd	r2, r3, [r4]
  FuncDriver.FillRect       = pDrv->FillRect;
 800fca0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800fca4:	e9c4 1302 	strd	r1, r3, [r4, #8]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800fca8:	e9d0 3505 	ldrd	r3, r5, [r0, #20]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 800fcac:	e9c4 2304 	strd	r2, r3, [r4, #16]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800fcb0:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800fcb4:	e9c4 5306 	strd	r5, r3, [r4, #24]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800fcb8:	6222      	str	r2, [r4, #32]
  DrawProp->LcdLayer = 0;
 800fcba:	2500      	movs	r5, #0
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800fcbc:	e9d0 2109 	ldrd	r2, r1, [r0, #36]	@ 0x24
  DrawProp->LcdLayer = 0;
 800fcc0:	e9c6 5503 	strd	r5, r5, [r6, #12]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800fcc4:	62a1      	str	r1, [r4, #40]	@ 0x28
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800fccc:	6262      	str	r2, [r4, #36]	@ 0x24
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800fcce:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800fcd0:	f106 0118 	add.w	r1, r6, #24
 800fcd4:	6a23      	ldr	r3, [r4, #32]
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800fcda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800fcdc:	f106 011c 	add.w	r1, r6, #28
 800fce0:	4628      	mov	r0, r5
}
 800fce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800fce6:	4718      	bx	r3
 800fce8:	24015a60 	.word	0x24015a60
 800fcec:	24015a90 	.word	0x24015a90

0800fcf0 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 800fcf0:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 800fcf2:	4b05      	ldr	r3, [pc, #20]	@ (800fd08 <UTIL_LCD_SetLayer+0x18>)
 800fcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcf6:	b133      	cbz	r3, 800fd06 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800fcf8:	4d04      	ldr	r5, [pc, #16]	@ (800fd0c <UTIL_LCD_SetLayer+0x1c>)
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	4601      	mov	r1, r0
 800fcfe:	6928      	ldr	r0, [r5, #16]
 800fd00:	4798      	blx	r3
 800fd02:	b900      	cbnz	r0, 800fd06 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 800fd04:	60ec      	str	r4, [r5, #12]
    }
  }
}
 800fd06:	bd38      	pop	{r3, r4, r5, pc}
 800fd08:	24015a60 	.word	0x24015a60
 800fd0c:	24015a90 	.word	0x24015a90

0800fd10 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800fd10:	4a02      	ldr	r2, [pc, #8]	@ (800fd1c <UTIL_LCD_SetTextColor+0xc>)
 800fd12:	68d3      	ldr	r3, [r2, #12]
 800fd14:	015b      	lsls	r3, r3, #5
 800fd16:	50d0      	str	r0, [r2, r3]
}
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	24015a90 	.word	0x24015a90

0800fd20 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800fd20:	4b02      	ldr	r3, [pc, #8]	@ (800fd2c <UTIL_LCD_SetBackColor+0xc>)
 800fd22:	68da      	ldr	r2, [r3, #12]
 800fd24:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800fd28:	6058      	str	r0, [r3, #4]
}
 800fd2a:	4770      	bx	lr
 800fd2c:	24015a90 	.word	0x24015a90

0800fd30 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800fd30:	4b02      	ldr	r3, [pc, #8]	@ (800fd3c <UTIL_LCD_SetFont+0xc>)
 800fd32:	68da      	ldr	r2, [r3, #12]
 800fd34:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800fd38:	6098      	str	r0, [r3, #8]
}
 800fd3a:	4770      	bx	lr
 800fd3c:	24015a90 	.word	0x24015a90

0800fd40 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 800fd40:	4b02      	ldr	r3, [pc, #8]	@ (800fd4c <UTIL_LCD_GetFont+0xc>)
 800fd42:	68da      	ldr	r2, [r3, #12]
 800fd44:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 800fd48:	6898      	ldr	r0, [r3, #8]
 800fd4a:	4770      	bx	lr
 800fd4c:	24015a90 	.word	0x24015a90

0800fd50 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800fd50:	b570      	push	{r4, r5, r6, lr}
 800fd52:	461c      	mov	r4, r3
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800fd54:	4b11      	ldr	r3, [pc, #68]	@ (800fd9c <UTIL_LCD_DrawHLine+0x4c>)
 800fd56:	4d12      	ldr	r5, [pc, #72]	@ (800fda0 <UTIL_LCD_DrawHLine+0x50>)
{
 800fd58:	4684      	mov	ip, r0
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fd5a:	69de      	ldr	r6, [r3, #28]
{
 800fd5c:	b082      	sub	sp, #8
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800fd5e:	68ad      	ldr	r5, [r5, #8]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fd60:	2e02      	cmp	r6, #2
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800fd62:	6918      	ldr	r0, [r3, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fd64:	d006      	beq.n	800fd74 <UTIL_LCD_DrawHLine+0x24>
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 800fd66:	4613      	mov	r3, r2
 800fd68:	460a      	mov	r2, r1
 800fd6a:	4661      	mov	r1, ip
 800fd6c:	9400      	str	r4, [sp, #0]
 800fd6e:	47a8      	blx	r5
  }
}
 800fd70:	b002      	add	sp, #8
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800fd74:	4613      	mov	r3, r2
 800fd76:	0a26      	lsrs	r6, r4, #8
 800fd78:	460a      	mov	r2, r1
 800fd7a:	4661      	mov	r1, ip
 800fd7c:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800fd80:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 800fd84:	f3c4 0ec4 	ubfx	lr, r4, #3, #5
 800fd88:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 800fd8c:	ea4c 0406 	orr.w	r4, ip, r6
 800fd90:	ea44 040e 	orr.w	r4, r4, lr
 800fd94:	9400      	str	r4, [sp, #0]
 800fd96:	47a8      	blx	r5
}
 800fd98:	b002      	add	sp, #8
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}
 800fd9c:	24015a90 	.word	0x24015a90
 800fda0:	24015a60 	.word	0x24015a60

0800fda4 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	461c      	mov	r4, r3
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800fda8:	4b11      	ldr	r3, [pc, #68]	@ (800fdf0 <UTIL_LCD_DrawVLine+0x4c>)
 800fdaa:	4d12      	ldr	r5, [pc, #72]	@ (800fdf4 <UTIL_LCD_DrawVLine+0x50>)
{
 800fdac:	4684      	mov	ip, r0
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fdae:	69de      	ldr	r6, [r3, #28]
{
 800fdb0:	b082      	sub	sp, #8
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800fdb2:	68ed      	ldr	r5, [r5, #12]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fdb4:	2e02      	cmp	r6, #2
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800fdb6:	6918      	ldr	r0, [r3, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fdb8:	d006      	beq.n	800fdc8 <UTIL_LCD_DrawVLine+0x24>
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 800fdba:	4613      	mov	r3, r2
 800fdbc:	460a      	mov	r2, r1
 800fdbe:	4661      	mov	r1, ip
 800fdc0:	9400      	str	r4, [sp, #0]
 800fdc2:	47a8      	blx	r5
  }
}
 800fdc4:	b002      	add	sp, #8
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800fdc8:	4613      	mov	r3, r2
 800fdca:	0a26      	lsrs	r6, r4, #8
 800fdcc:	460a      	mov	r2, r1
 800fdce:	4661      	mov	r1, ip
 800fdd0:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800fdd4:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 800fdd8:	f3c4 0ec4 	ubfx	lr, r4, #3, #5
 800fddc:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 800fde0:	ea4c 0406 	orr.w	r4, ip, r6
 800fde4:	ea44 040e 	orr.w	r4, r4, lr
 800fde8:	9400      	str	r4, [sp, #0]
 800fdea:	47a8      	blx	r5
}
 800fdec:	b002      	add	sp, #8
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
 800fdf0:	24015a90 	.word	0x24015a90
 800fdf4:	24015a60 	.word	0x24015a60

0800fdf8 <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800fdf8:	4a13      	ldr	r2, [pc, #76]	@ (800fe48 <UTIL_LCD_Clear+0x50>)
{
 800fdfa:	4601      	mov	r1, r0
 800fdfc:	b570      	push	{r4, r5, r6, lr}
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fdfe:	69d6      	ldr	r6, [r2, #28]
{
 800fe00:	b082      	sub	sp, #8
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800fe02:	4c12      	ldr	r4, [pc, #72]	@ (800fe4c <UTIL_LCD_Clear+0x54>)
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fe04:	2e02      	cmp	r6, #2
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800fe06:	6953      	ldr	r3, [r2, #20]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800fe08:	6924      	ldr	r4, [r4, #16]
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800fe0a:	6995      	ldr	r5, [r2, #24]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800fe0c:	6910      	ldr	r0, [r2, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fe0e:	d006      	beq.n	800fe1e <UTIL_LCD_Clear+0x26>
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800fe10:	2200      	movs	r2, #0
 800fe12:	9101      	str	r1, [sp, #4]
 800fe14:	9500      	str	r5, [sp, #0]
 800fe16:	4611      	mov	r1, r2
 800fe18:	47a0      	blx	r4
}
 800fe1a:	b002      	add	sp, #8
 800fe1c:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800fe1e:	9500      	str	r5, [sp, #0]
 800fe20:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 800fe24:	0a0d      	lsrs	r5, r1, #8
 800fe26:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800fe2a:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800fe34:	ea4c 0c05 	orr.w	ip, ip, r5
 800fe38:	ea4c 0101 	orr.w	r1, ip, r1
 800fe3c:	9101      	str	r1, [sp, #4]
 800fe3e:	4611      	mov	r1, r2
 800fe40:	47a0      	blx	r4
}
 800fe42:	b002      	add	sp, #8
 800fe44:	bd70      	pop	{r4, r5, r6, pc}
 800fe46:	bf00      	nop
 800fe48:	24015a90 	.word	0x24015a90
 800fe4c:	24015a60 	.word	0x24015a60

0800fe50 <UTIL_LCD_DisplayChar>:
{
 800fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800fe54:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 800ffac <UTIL_LCD_DisplayChar+0x15c>
{
 800fe58:	b0ad      	sub	sp, #180	@ 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800fe5a:	3a20      	subs	r2, #32
 800fe5c:	f8d9 300c 	ldr.w	r3, [r9, #12]
{
 800fe60:	9004      	str	r0, [sp, #16]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800fe62:	eb09 1443 	add.w	r4, r9, r3, lsl #5
 800fe66:	0158      	lsls	r0, r3, #5
 800fe68:	68a3      	ldr	r3, [r4, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800fe6a:	f8b3 b004 	ldrh.w	fp, [r3, #4]
 800fe6e:	88dc      	ldrh	r4, [r3, #6]
 800fe70:	f10b 0807 	add.w	r8, fp, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800fe74:	681f      	ldr	r7, [r3, #0]
 800fe76:	fb04 f202 	mul.w	r2, r4, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800fe7a:	ea4f 03e8 	mov.w	r3, r8, asr #3
 800fe7e:	fb03 f202 	mul.w	r2, r3, r2
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 800fe82:	f028 0307 	bic.w	r3, r8, #7
 800fe86:	9306      	str	r3, [sp, #24]

  for(i = 0; i < height; i++)
 800fe88:	2c00      	cmp	r4, #0
 800fe8a:	f000 8082 	beq.w	800ff92 <UTIL_LCD_DisplayChar+0x142>
 800fe8e:	190b      	adds	r3, r1, r4
 800fe90:	1c4e      	adds	r6, r1, #1
 800fe92:	4417      	add	r7, r2
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 800fe94:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800fe98:	9305      	str	r3, [sp, #20]
 800fe9a:	ab14      	add	r3, sp, #80	@ 0x50

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 800fe9c:	2401      	movs	r4, #1
 800fe9e:	4601      	mov	r1, r0
 800fea0:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800fea4:	ab08      	add	r3, sp, #32
 800fea6:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 800feaa:	469a      	mov	sl, r3
 800feac:	e9cd b502 	strd	fp, r5, [sp, #8]
    switch(((width + 7)/8))
 800feb0:	f1b8 0f01 	cmp.w	r8, #1
 800feb4:	f106 3bff 	add.w	fp, r6, #4294967295
      line =  pchar[0];
 800feb8:	783b      	ldrb	r3, [r7, #0]
    switch(((width + 7)/8))
 800feba:	d005      	beq.n	800fec8 <UTIL_LCD_DisplayChar+0x78>
 800febc:	f1b8 0f02 	cmp.w	r8, #2
 800fec0:	d16a      	bne.n	800ff98 <UTIL_LCD_DisplayChar+0x148>
      line =  (pchar[0]<< 8) | pchar[1];
 800fec2:	883b      	ldrh	r3, [r7, #0]
 800fec4:	ba5b      	rev16	r3, r3
 800fec6:	b29b      	uxth	r3, r3
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fec8:	4449      	add	r1, r9
 800feca:	69ca      	ldr	r2, [r1, #28]
 800fecc:	2a02      	cmp	r2, #2
      for (j = 0; j < width; j++)
 800fece:	9a02      	ldr	r2, [sp, #8]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800fed0:	d02d      	beq.n	800ff2e <UTIL_LCD_DisplayChar+0xde>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 800fed2:	b182      	cbz	r2, 800fef6 <UTIL_LCD_DisplayChar+0xa6>
 800fed4:	9a06      	ldr	r2, [sp, #24]
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800fed6:	9d03      	ldr	r5, [sp, #12]
 800fed8:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800fedc:	1e51      	subs	r1, r2, #1
 800fede:	aa14      	add	r2, sp, #80	@ 0x50
        if(line & (1 << (width- j + offset- 1)))
 800fee0:	fa04 f001 	lsl.w	r0, r4, r1
 800fee4:	4218      	tst	r0, r3
 800fee6:	d11b      	bne.n	800ff20 <UTIL_LCD_DisplayChar+0xd0>
 800fee8:	f842 eb04 	str.w	lr, [r2], #4
      for (j = 0; j < width; j++)
 800feec:	4295      	cmp	r5, r2
 800feee:	f101 31ff 	add.w	r1, r1, #4294967295
 800fef2:	d1f5      	bne.n	800fee0 <UTIL_LCD_DisplayChar+0x90>
 800fef4:	9503      	str	r5, [sp, #12]
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800fef6:	9b02      	ldr	r3, [sp, #8]
 800fef8:	465a      	mov	r2, fp
 800fefa:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 800fefc:	4447      	add	r7, r8
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	4b29      	ldr	r3, [pc, #164]	@ (800ffa8 <UTIL_LCD_DisplayChar+0x158>)
 800ff02:	9904      	ldr	r1, [sp, #16]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ff0a:	461d      	mov	r5, r3
 800ff0c:	ab14      	add	r3, sp, #80	@ 0x50
 800ff0e:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 800ff10:	9b05      	ldr	r3, [sp, #20]
 800ff12:	429e      	cmp	r6, r3
 800ff14:	d03d      	beq.n	800ff92 <UTIL_LCD_DisplayChar+0x142>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800ff16:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800ff1a:	3601      	adds	r6, #1
 800ff1c:	0149      	lsls	r1, r1, #5
 800ff1e:	e7c7      	b.n	800feb0 <UTIL_LCD_DisplayChar+0x60>
 800ff20:	f842 cb04 	str.w	ip, [r2], #4
      for (j = 0; j < width; j++)
 800ff24:	42aa      	cmp	r2, r5
 800ff26:	f101 31ff 	add.w	r1, r1, #4294967295
 800ff2a:	d1d9      	bne.n	800fee0 <UTIL_LCD_DisplayChar+0x90>
 800ff2c:	e7e2      	b.n	800fef4 <UTIL_LCD_DisplayChar+0xa4>
      for (j = 0; j < width; j++)
 800ff2e:	b302      	cbz	r2, 800ff72 <UTIL_LCD_DisplayChar+0x122>
 800ff30:	9a06      	ldr	r2, [sp, #24]
 800ff32:	a808      	add	r0, sp, #32
 800ff34:	9d03      	ldr	r5, [sp, #12]
 800ff36:	f102 3cff 	add.w	ip, r2, #4294967295
 800ff3a:	f8cd 801c 	str.w	r8, [sp, #28]
        if(line & (1 << (width- j + offset- 1)))
 800ff3e:	fa04 f20c 	lsl.w	r2, r4, ip
      for (j = 0; j < width; j++)
 800ff42:	f10c 3cff 	add.w	ip, ip, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 800ff46:	421a      	tst	r2, r3
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800ff48:	bf14      	ite	ne
 800ff4a:	680a      	ldrne	r2, [r1, #0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 800ff4c:	684a      	ldreq	r2, [r1, #4]
 800ff4e:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 800ff52:	f3c2 0ec4 	ubfx	lr, r2, #3, #5
 800ff56:	0952      	lsrs	r2, r2, #5
 800ff58:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
 800ff5c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800ff60:	ea4e 0e02 	orr.w	lr, lr, r2
 800ff64:	f820 eb02 	strh.w	lr, [r0], #2
      for (j = 0; j < width; j++)
 800ff68:	4550      	cmp	r0, sl
 800ff6a:	d1e8      	bne.n	800ff3e <UTIL_LCD_DisplayChar+0xee>
 800ff6c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800ff70:	9503      	str	r5, [sp, #12]
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800ff72:	9b02      	ldr	r3, [sp, #8]
 800ff74:	465a      	mov	r2, fp
 800ff76:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 800ff78:	4447      	add	r7, r8
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	4b0a      	ldr	r3, [pc, #40]	@ (800ffa8 <UTIL_LCD_DisplayChar+0x158>)
 800ff7e:	9904      	ldr	r1, [sp, #16]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ff86:	461d      	mov	r5, r3
 800ff88:	ab08      	add	r3, sp, #32
 800ff8a:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 800ff8c:	9b05      	ldr	r3, [sp, #20]
 800ff8e:	429e      	cmp	r6, r3
 800ff90:	d1c1      	bne.n	800ff16 <UTIL_LCD_DisplayChar+0xc6>
}
 800ff92:	b02d      	add	sp, #180	@ 0xb4
 800ff94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800ff98:	787a      	ldrb	r2, [r7, #1]
 800ff9a:	041b      	lsls	r3, r3, #16
 800ff9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ffa0:	78ba      	ldrb	r2, [r7, #2]
 800ffa2:	4313      	orrs	r3, r2
      break;
 800ffa4:	e790      	b.n	800fec8 <UTIL_LCD_DisplayChar+0x78>
 800ffa6:	bf00      	nop
 800ffa8:	24015a60 	.word	0x24015a60
 800ffac:	24015a90 	.word	0x24015a90

0800ffb0 <UTIL_LCD_DisplayStringAt>:
{
 800ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb4:	4604      	mov	r4, r0
  while (*ptr++) size ++ ;
 800ffb6:	4610      	mov	r0, r2
{
 800ffb8:	4615      	mov	r5, r2
 800ffba:	b082      	sub	sp, #8
  while (*ptr++) size ++ ;
 800ffbc:	f810 2b01 	ldrb.w	r2, [r0], #1
{
 800ffc0:	460e      	mov	r6, r1
 800ffc2:	461f      	mov	r7, r3
  while (*ptr++) size ++ ;
 800ffc4:	2a00      	cmp	r2, #0
 800ffc6:	d046      	beq.n	8010056 <UTIL_LCD_DisplayStringAt+0xa6>
 800ffc8:	9201      	str	r2, [sp, #4]
 800ffca:	f7f0 f9d9 	bl	8000380 <strlen>
 800ffce:	9a01      	ldr	r2, [sp, #4]
 800ffd0:	3001      	adds	r0, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800ffd2:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801005c <UTIL_LCD_DisplayStringAt+0xac>
  switch (Mode)
 800ffd6:	2f01      	cmp	r7, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800ffd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ffdc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ffe0:	eb08 1343 	add.w	r3, r8, r3, lsl #5
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 800ffea:	fbb1 f3fc 	udiv	r3, r1, ip
  switch (Mode)
 800ffee:	d02c      	beq.n	801004a <UTIL_LCD_DisplayStringAt+0x9a>
 800fff0:	2f02      	cmp	r7, #2
 800fff2:	d103      	bne.n	800fffc <UTIL_LCD_DisplayStringAt+0x4c>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800fff4:	1a1b      	subs	r3, r3, r0
 800fff6:	fb0c f303 	mul.w	r3, ip, r3
 800fffa:	1b1c      	subs	r4, r3, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800fffc:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800fffe:	1e60      	subs	r0, r4, #1
 8010000:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
    refcolumn = 1;
 8010004:	4298      	cmp	r0, r3
 8010006:	bf88      	it	hi
 8010008:	2401      	movhi	r4, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801000a:	458c      	cmp	ip, r1
 801000c:	d81a      	bhi.n	8010044 <UTIL_LCD_DisplayStringAt+0x94>
 801000e:	b1ca      	cbz	r2, 8010044 <UTIL_LCD_DisplayStringAt+0x94>
 8010010:	f1c5 0701 	rsb	r7, r5, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8010014:	4620      	mov	r0, r4
 8010016:	4631      	mov	r1, r6
 8010018:	f7ff ff1a 	bl	800fe50 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801001c:	f8d8 200c 	ldr.w	r2, [r8, #12]
    i++;
 8010020:	1978      	adds	r0, r7, r5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8010022:	f8d8 3014 	ldr.w	r3, [r8, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8010026:	eb08 1142 	add.w	r1, r8, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801002a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801002e:	6889      	ldr	r1, [r1, #8]
 8010030:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8010034:	fb00 331c 	mls	r3, r0, ip, r3
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8010038:	4464      	add	r4, ip
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801003a:	b29b      	uxth	r3, r3
 801003c:	459c      	cmp	ip, r3
 801003e:	d801      	bhi.n	8010044 <UTIL_LCD_DisplayStringAt+0x94>
 8010040:	2a00      	cmp	r2, #0
 8010042:	d1e7      	bne.n	8010014 <UTIL_LCD_DisplayStringAt+0x64>
}
 8010044:	b002      	add	sp, #8
 8010046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801004a:	1a1b      	subs	r3, r3, r0
 801004c:	fb0c f303 	mul.w	r3, ip, r3
 8010050:	eb04 0453 	add.w	r4, r4, r3, lsr #1
      break;
 8010054:	e7d2      	b.n	800fffc <UTIL_LCD_DisplayStringAt+0x4c>
  uint32_t size = 0, xsize = 0;
 8010056:	4610      	mov	r0, r2
 8010058:	e7bb      	b.n	800ffd2 <UTIL_LCD_DisplayStringAt+0x22>
 801005a:	bf00      	nop
 801005c:	24015a90 	.word	0x24015a90

08010060 <UTIL_LCD_DrawRect>:
{
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8010064:	4d3e      	ldr	r5, [pc, #248]	@ (8010160 <UTIL_LCD_DrawRect+0x100>)
{
 8010066:	4698      	mov	r8, r3
 8010068:	b083      	sub	sp, #12
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801006a:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8010164 <UTIL_LCD_DrawRect+0x104>
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801006e:	69eb      	ldr	r3, [r5, #28]
{
 8010070:	4682      	mov	sl, r0
 8010072:	460f      	mov	r7, r1
 8010074:	4614      	mov	r4, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8010076:	2b02      	cmp	r3, #2
{
 8010078:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801007a:	6928      	ldr	r0, [r5, #16]
 801007c:	f8d9 b008 	ldr.w	fp, [r9, #8]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8010080:	d02d      	beq.n	80100de <UTIL_LCD_DrawRect+0x7e>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8010082:	4613      	mov	r3, r2
 8010084:	9600      	str	r6, [sp, #0]
 8010086:	460a      	mov	r2, r1
 8010088:	4651      	mov	r1, sl
 801008a:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801008c:	69eb      	ldr	r3, [r5, #28]
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801008e:	f108 32ff 	add.w	r2, r8, #4294967295
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8010092:	f8d9 b008 	ldr.w	fp, [r9, #8]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8010096:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8010098:	443a      	add	r2, r7
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801009a:	6928      	ldr	r0, [r5, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801009c:	d051      	beq.n	8010142 <UTIL_LCD_DrawRect+0xe2>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801009e:	4623      	mov	r3, r4
 80100a0:	4651      	mov	r1, sl
 80100a2:	9600      	str	r6, [sp, #0]
 80100a4:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80100a6:	69eb      	ldr	r3, [r5, #28]
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80100a8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80100ac:	2b02      	cmp	r3, #2
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80100ae:	6928      	ldr	r0, [r5, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80100b0:	d037      	beq.n	8010122 <UTIL_LCD_DrawRect+0xc2>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80100b2:	4643      	mov	r3, r8
 80100b4:	463a      	mov	r2, r7
 80100b6:	4651      	mov	r1, sl
 80100b8:	9600      	str	r6, [sp, #0]
 80100ba:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80100bc:	69eb      	ldr	r3, [r5, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 80100be:	3c01      	subs	r4, #1
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80100c0:	f8d9 e00c 	ldr.w	lr, [r9, #12]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80100c4:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 80100c6:	eb04 010a 	add.w	r1, r4, sl
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80100ca:	6928      	ldr	r0, [r5, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80100cc:	d017      	beq.n	80100fe <UTIL_LCD_DrawRect+0x9e>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80100ce:	4643      	mov	r3, r8
 80100d0:	463a      	mov	r2, r7
 80100d2:	46f4      	mov	ip, lr
 80100d4:	960c      	str	r6, [sp, #48]	@ 0x30
}
 80100d6:	b003      	add	sp, #12
 80100d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80100dc:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80100de:	0973      	lsrs	r3, r6, #5
 80100e0:	0a32      	lsrs	r2, r6, #8
 80100e2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80100e6:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 80100ea:	4313      	orrs	r3, r2
 80100ec:	f3c6 02c4 	ubfx	r2, r6, #3, #5
 80100f0:	4313      	orrs	r3, r2
 80100f2:	460a      	mov	r2, r1
 80100f4:	4651      	mov	r1, sl
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	4623      	mov	r3, r4
 80100fa:	47d8      	blx	fp
}
 80100fc:	e7c6      	b.n	801008c <UTIL_LCD_DrawRect+0x2c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80100fe:	0974      	lsrs	r4, r6, #5
 8010100:	4643      	mov	r3, r8
 8010102:	0a35      	lsrs	r5, r6, #8
 8010104:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8010108:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801010c:	463a      	mov	r2, r7
 801010e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8010112:	46f4      	mov	ip, lr
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8010114:	432c      	orrs	r4, r5
 8010116:	4326      	orrs	r6, r4
 8010118:	960c      	str	r6, [sp, #48]	@ 0x30
}
 801011a:	b003      	add	sp, #12
 801011c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8010120:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8010122:	0973      	lsrs	r3, r6, #5
 8010124:	4651      	mov	r1, sl
 8010126:	0a32      	lsrs	r2, r6, #8
 8010128:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801012c:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8010130:	4313      	orrs	r3, r2
 8010132:	f3c6 02c4 	ubfx	r2, r6, #3, #5
 8010136:	4313      	orrs	r3, r2
 8010138:	463a      	mov	r2, r7
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	4643      	mov	r3, r8
 801013e:	47d8      	blx	fp
}
 8010140:	e7bc      	b.n	80100bc <UTIL_LCD_DrawRect+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8010142:	0973      	lsrs	r3, r6, #5
 8010144:	0a31      	lsrs	r1, r6, #8
 8010146:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801014a:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801014e:	430b      	orrs	r3, r1
 8010150:	f3c6 01c4 	ubfx	r1, r6, #3, #5
 8010154:	430b      	orrs	r3, r1
 8010156:	4651      	mov	r1, sl
 8010158:	9300      	str	r3, [sp, #0]
 801015a:	4623      	mov	r3, r4
 801015c:	47d8      	blx	fp
}
 801015e:	e7a2      	b.n	80100a6 <UTIL_LCD_DrawRect+0x46>
 8010160:	24015a90 	.word	0x24015a90
 8010164:	24015a60 	.word	0x24015a60

08010168 <ai_buffer_get_size>:
 8010168:	b368      	cbz	r0, 80101c6 <ai_buffer_get_size+0x5e>
 801016a:	4b17      	ldr	r3, [pc, #92]	@ (80101c8 <ai_buffer_get_size+0x60>)
 801016c:	4a17      	ldr	r2, [pc, #92]	@ (80101cc <ai_buffer_get_size+0x64>)
 801016e:	b410      	push	{r4}
 8010170:	6804      	ldr	r4, [r0, #0]
 8010172:	4023      	ands	r3, r4
 8010174:	4293      	cmp	r3, r2
 8010176:	d123      	bne.n	80101c0 <ai_buffer_get_size+0x58>
 8010178:	b311      	cbz	r1, 80101c0 <ai_buffer_get_size+0x58>
 801017a:	6984      	ldr	r4, [r0, #24]
 801017c:	6862      	ldr	r2, [r4, #4]
 801017e:	321f      	adds	r2, #31
 8010180:	f022 021f 	bic.w	r2, r2, #31
 8010184:	7d03      	ldrb	r3, [r0, #20]
 8010186:	6941      	ldr	r1, [r0, #20]
 8010188:	f1a3 0301 	sub.w	r3, r3, #1
 801018c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8010190:	fab3 f383 	clz	r3, r3
 8010194:	095b      	lsrs	r3, r3, #5
 8010196:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801019a:	da0c      	bge.n	80101b6 <ai_buffer_get_size+0x4e>
 801019c:	2b01      	cmp	r3, #1
 801019e:	d103      	bne.n	80101a8 <ai_buffer_get_size+0x40>
 80101a0:	2802      	cmp	r0, #2
 80101a2:	f04f 0302 	mov.w	r3, #2
 80101a6:	d006      	beq.n	80101b6 <ai_buffer_get_size+0x4e>
 80101a8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80101ac:	3301      	adds	r3, #1
 80101ae:	4298      	cmp	r0, r3
 80101b0:	fb01 f202 	mul.w	r2, r1, r2
 80101b4:	d1f2      	bne.n	801019c <ai_buffer_get_size+0x34>
 80101b6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80101ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101be:	4770      	bx	lr
 80101c0:	6984      	ldr	r4, [r0, #24]
 80101c2:	6862      	ldr	r2, [r4, #4]
 80101c4:	e7de      	b.n	8010184 <ai_buffer_get_size+0x1c>
 80101c6:	4770      	bx	lr
 80101c8:	017fffff 	.word	0x017fffff
 80101cc:	000400c0 	.word	0x000400c0

080101d0 <ai_buffer_array_sane>:
 80101d0:	b138      	cbz	r0, 80101e2 <ai_buffer_array_sane+0x12>
 80101d2:	6843      	ldr	r3, [r0, #4]
 80101d4:	b123      	cbz	r3, 80101e0 <ai_buffer_array_sane+0x10>
 80101d6:	8840      	ldrh	r0, [r0, #2]
 80101d8:	3800      	subs	r0, #0
 80101da:	bf18      	it	ne
 80101dc:	2001      	movne	r0, #1
 80101de:	4770      	bx	lr
 80101e0:	4618      	mov	r0, r3
 80101e2:	4770      	bx	lr

080101e4 <ai_buffer_array_item_set_address>:
 80101e4:	b150      	cbz	r0, 80101fc <ai_buffer_array_item_set_address+0x18>
 80101e6:	6843      	ldr	r3, [r0, #4]
 80101e8:	b14b      	cbz	r3, 80101fe <ai_buffer_array_item_set_address+0x1a>
 80101ea:	8840      	ldrh	r0, [r0, #2]
 80101ec:	b900      	cbnz	r0, 80101f0 <ai_buffer_array_item_set_address+0xc>
 80101ee:	4770      	bx	lr
 80101f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80101f4:	2001      	movs	r0, #1
 80101f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80101fa:	605a      	str	r2, [r3, #4]
 80101fc:	4770      	bx	lr
 80101fe:	4618      	mov	r0, r3
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop

08010204 <ai_platform_get_weights_map>:
 8010204:	2900      	cmp	r1, #0
 8010206:	bf18      	it	ne
 8010208:	2800      	cmpne	r0, #0
 801020a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020c:	bf0c      	ite	eq
 801020e:	2401      	moveq	r4, #1
 8010210:	2400      	movne	r4, #0
 8010212:	2a00      	cmp	r2, #0
 8010214:	bf08      	it	eq
 8010216:	f044 0401 	orreq.w	r4, r4, #1
 801021a:	b114      	cbz	r4, 8010222 <ai_platform_get_weights_map+0x1e>
 801021c:	2400      	movs	r4, #0
 801021e:	4620      	mov	r0, r4
 8010220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010222:	4616      	mov	r6, r2
 8010224:	4b22      	ldr	r3, [pc, #136]	@ (80102b0 <ai_platform_get_weights_map+0xac>)
 8010226:	6812      	ldr	r2, [r2, #0]
 8010228:	4605      	mov	r5, r0
 801022a:	460f      	mov	r7, r1
 801022c:	429a      	cmp	r2, r3
 801022e:	d022      	beq.n	8010276 <ai_platform_get_weights_map+0x72>
 8010230:	6870      	ldr	r0, [r6, #4]
 8010232:	2800      	cmp	r0, #0
 8010234:	d0f2      	beq.n	801021c <ai_platform_get_weights_map+0x18>
 8010236:	6806      	ldr	r6, [r0, #0]
 8010238:	429e      	cmp	r6, r3
 801023a:	d006      	beq.n	801024a <ai_platform_get_weights_map+0x46>
 801023c:	f1a1 0401 	sub.w	r4, r1, #1
 8010240:	6028      	str	r0, [r5, #0]
 8010242:	fab4 f484 	clz	r4, r4
 8010246:	0964      	lsrs	r4, r4, #5
 8010248:	e7e9      	b.n	801021e <ai_platform_get_weights_map+0x1a>
 801024a:	3d04      	subs	r5, #4
 801024c:	4602      	mov	r2, r0
 801024e:	4621      	mov	r1, r4
 8010250:	e000      	b.n	8010254 <ai_platform_get_weights_map+0x50>
 8010252:	4619      	mov	r1, r3
 8010254:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010258:	42b3      	cmp	r3, r6
 801025a:	d025      	beq.n	80102a8 <ai_platform_get_weights_map+0xa4>
 801025c:	f845 3f04 	str.w	r3, [r5, #4]!
 8010260:	1c4b      	adds	r3, r1, #1
 8010262:	429f      	cmp	r7, r3
 8010264:	d8f5      	bhi.n	8010252 <ai_platform_get_weights_map+0x4e>
 8010266:	d1da      	bne.n	801021e <ai_platform_get_weights_map+0x1a>
 8010268:	3102      	adds	r1, #2
 801026a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801026e:	42b3      	cmp	r3, r6
 8010270:	d1d5      	bne.n	801021e <ai_platform_get_weights_map+0x1a>
 8010272:	2401      	movs	r4, #1
 8010274:	e7d3      	b.n	801021e <ai_platform_get_weights_map+0x1a>
 8010276:	1d30      	adds	r0, r6, #4
 8010278:	f7ff ffaa 	bl	80101d0 <ai_buffer_array_sane>
 801027c:	2800      	cmp	r0, #0
 801027e:	d0cd      	beq.n	801021c <ai_platform_get_weights_map+0x18>
 8010280:	88f3      	ldrh	r3, [r6, #6]
 8010282:	429f      	cmp	r7, r3
 8010284:	d1ca      	bne.n	801021c <ai_platform_get_weights_map+0x18>
 8010286:	3d04      	subs	r5, #4
 8010288:	4622      	mov	r2, r4
 801028a:	68b3      	ldr	r3, [r6, #8]
 801028c:	4423      	add	r3, r4
 801028e:	341c      	adds	r4, #28
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	b123      	cbz	r3, 801029e <ai_platform_get_weights_map+0x9a>
 8010294:	3201      	adds	r2, #1
 8010296:	f845 3f04 	str.w	r3, [r5, #4]!
 801029a:	4297      	cmp	r7, r2
 801029c:	d8f5      	bhi.n	801028a <ai_platform_get_weights_map+0x86>
 801029e:	1abc      	subs	r4, r7, r2
 80102a0:	fab4 f484 	clz	r4, r4
 80102a4:	0964      	lsrs	r4, r4, #5
 80102a6:	e7ba      	b.n	801021e <ai_platform_get_weights_map+0x1a>
 80102a8:	428f      	cmp	r7, r1
 80102aa:	d1b8      	bne.n	801021e <ai_platform_get_weights_map+0x1a>
 80102ac:	e7e1      	b.n	8010272 <ai_platform_get_weights_map+0x6e>
 80102ae:	bf00      	nop
 80102b0:	a1facade 	.word	0xa1facade

080102b4 <ai_platform_get_activations_map>:
 80102b4:	2900      	cmp	r1, #0
 80102b6:	bf18      	it	ne
 80102b8:	2800      	cmpne	r0, #0
 80102ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102bc:	bf0c      	ite	eq
 80102be:	2401      	moveq	r4, #1
 80102c0:	2400      	movne	r4, #0
 80102c2:	2a00      	cmp	r2, #0
 80102c4:	bf08      	it	eq
 80102c6:	f044 0401 	orreq.w	r4, r4, #1
 80102ca:	b114      	cbz	r4, 80102d2 <ai_platform_get_activations_map+0x1e>
 80102cc:	2400      	movs	r4, #0
 80102ce:	4620      	mov	r0, r4
 80102d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102d2:	4616      	mov	r6, r2
 80102d4:	4b22      	ldr	r3, [pc, #136]	@ (8010360 <ai_platform_get_activations_map+0xac>)
 80102d6:	6812      	ldr	r2, [r2, #0]
 80102d8:	4605      	mov	r5, r0
 80102da:	460f      	mov	r7, r1
 80102dc:	429a      	cmp	r2, r3
 80102de:	d022      	beq.n	8010326 <ai_platform_get_activations_map+0x72>
 80102e0:	6a30      	ldr	r0, [r6, #32]
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d0f2      	beq.n	80102cc <ai_platform_get_activations_map+0x18>
 80102e6:	6806      	ldr	r6, [r0, #0]
 80102e8:	429e      	cmp	r6, r3
 80102ea:	d006      	beq.n	80102fa <ai_platform_get_activations_map+0x46>
 80102ec:	f1a1 0401 	sub.w	r4, r1, #1
 80102f0:	6028      	str	r0, [r5, #0]
 80102f2:	fab4 f484 	clz	r4, r4
 80102f6:	0964      	lsrs	r4, r4, #5
 80102f8:	e7e9      	b.n	80102ce <ai_platform_get_activations_map+0x1a>
 80102fa:	3d04      	subs	r5, #4
 80102fc:	4602      	mov	r2, r0
 80102fe:	4621      	mov	r1, r4
 8010300:	e000      	b.n	8010304 <ai_platform_get_activations_map+0x50>
 8010302:	4619      	mov	r1, r3
 8010304:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010308:	42b3      	cmp	r3, r6
 801030a:	d026      	beq.n	801035a <ai_platform_get_activations_map+0xa6>
 801030c:	f845 3f04 	str.w	r3, [r5, #4]!
 8010310:	1c4b      	adds	r3, r1, #1
 8010312:	429f      	cmp	r7, r3
 8010314:	d8f5      	bhi.n	8010302 <ai_platform_get_activations_map+0x4e>
 8010316:	d1da      	bne.n	80102ce <ai_platform_get_activations_map+0x1a>
 8010318:	3102      	adds	r1, #2
 801031a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801031e:	42b3      	cmp	r3, r6
 8010320:	d1d5      	bne.n	80102ce <ai_platform_get_activations_map+0x1a>
 8010322:	2401      	movs	r4, #1
 8010324:	e7d3      	b.n	80102ce <ai_platform_get_activations_map+0x1a>
 8010326:	f106 000c 	add.w	r0, r6, #12
 801032a:	f7ff ff51 	bl	80101d0 <ai_buffer_array_sane>
 801032e:	2800      	cmp	r0, #0
 8010330:	d0cc      	beq.n	80102cc <ai_platform_get_activations_map+0x18>
 8010332:	89f3      	ldrh	r3, [r6, #14]
 8010334:	429f      	cmp	r7, r3
 8010336:	d1c9      	bne.n	80102cc <ai_platform_get_activations_map+0x18>
 8010338:	3d04      	subs	r5, #4
 801033a:	4622      	mov	r2, r4
 801033c:	6933      	ldr	r3, [r6, #16]
 801033e:	4423      	add	r3, r4
 8010340:	341c      	adds	r4, #28
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	b123      	cbz	r3, 8010350 <ai_platform_get_activations_map+0x9c>
 8010346:	3201      	adds	r2, #1
 8010348:	f845 3f04 	str.w	r3, [r5, #4]!
 801034c:	4297      	cmp	r7, r2
 801034e:	d8f5      	bhi.n	801033c <ai_platform_get_activations_map+0x88>
 8010350:	1abc      	subs	r4, r7, r2
 8010352:	fab4 f484 	clz	r4, r4
 8010356:	0964      	lsrs	r4, r4, #5
 8010358:	e7b9      	b.n	80102ce <ai_platform_get_activations_map+0x1a>
 801035a:	428f      	cmp	r7, r1
 801035c:	d1b7      	bne.n	80102ce <ai_platform_get_activations_map+0x1a>
 801035e:	e7e0      	b.n	8010322 <ai_platform_get_activations_map+0x6e>
 8010360:	a1facade 	.word	0xa1facade

08010364 <ai_platform_bind_network_params>:
 8010364:	2a00      	cmp	r2, #0
 8010366:	bf18      	it	ne
 8010368:	2900      	cmpne	r1, #0
 801036a:	d010      	beq.n	801038e <ai_platform_bind_network_params+0x2a>
 801036c:	b178      	cbz	r0, 801038e <ai_platform_bind_network_params+0x2a>
 801036e:	4603      	mov	r3, r0
 8010370:	4808      	ldr	r0, [pc, #32]	@ (8010394 <ai_platform_bind_network_params+0x30>)
 8010372:	f103 0c0c 	add.w	ip, r3, #12
 8010376:	f843 0b04 	str.w	r0, [r3], #4
 801037a:	c903      	ldmia	r1, {r0, r1}
 801037c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010380:	2301      	movs	r3, #1
 8010382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010386:	e88c 0003 	stmia.w	ip, {r0, r1}
 801038a:	4618      	mov	r0, r3
 801038c:	4770      	bx	lr
 801038e:	2300      	movs	r3, #0
 8010390:	4618      	mov	r0, r3
 8010392:	4770      	bx	lr
 8010394:	a1facade 	.word	0xa1facade

08010398 <ai_platform_network_get_error>:
 8010398:	4b04      	ldr	r3, [pc, #16]	@ (80103ac <ai_platform_network_get_error+0x14>)
 801039a:	6802      	ldr	r2, [r0, #0]
 801039c:	4393      	bics	r3, r2
 801039e:	d102      	bne.n	80103a6 <ai_platform_network_get_error+0xe>
 80103a0:	300c      	adds	r0, #12
 80103a2:	f000 bc73 	b.w	8010c8c <core_get_error>
 80103a6:	f241 0010 	movw	r0, #4112	@ 0x1010
 80103aa:	4770      	bx	lr
 80103ac:	a1c00100 	.word	0xa1c00100

080103b0 <ai_platform_network_set_error>:
 80103b0:	b110      	cbz	r0, 80103b8 <ai_platform_network_set_error+0x8>
 80103b2:	300c      	adds	r0, #12
 80103b4:	f000 bc70 	b.w	8010c98 <core_set_error>
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop

080103bc <ai_platform_inputs_get>:
 80103bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c0:	4b39      	ldr	r3, [pc, #228]	@ (80104a8 <ai_platform_inputs_get+0xec>)
 80103c2:	b085      	sub	sp, #20
 80103c4:	6802      	ldr	r2, [r0, #0]
 80103c6:	4393      	bics	r3, r2
 80103c8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80103cc:	d162      	bne.n	8010494 <ai_platform_inputs_get+0xd8>
 80103ce:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d051      	beq.n	8010478 <ai_platform_inputs_get+0xbc>
 80103d4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80103d8:	f1ba 0f00 	cmp.w	sl, #0
 80103dc:	d04c      	beq.n	8010478 <ai_platform_inputs_get+0xbc>
 80103de:	f04f 0900 	mov.w	r9, #0
 80103e2:	464d      	mov	r5, r9
 80103e4:	e016      	b.n	8010414 <ai_platform_inputs_get+0x58>
 80103e6:	9901      	ldr	r1, [sp, #4]
 80103e8:	2301      	movs	r3, #1
 80103ea:	f848 3001 	str.w	r3, [r8, r1]
 80103ee:	69b1      	ldr	r1, [r6, #24]
 80103f0:	f04f 0301 	mov.w	r3, #1
 80103f4:	684e      	ldr	r6, [r1, #4]
 80103f6:	3501      	adds	r5, #1
 80103f8:	f109 091c 	add.w	r9, r9, #28
 80103fc:	7523      	strb	r3, [r4, #20]
 80103fe:	2300      	movs	r3, #0
 8010400:	6961      	ldr	r1, [r4, #20]
 8010402:	6020      	str	r0, [r4, #0]
 8010404:	f36b 211f 	bfi	r1, fp, #8, #24
 8010408:	e9c4 c701 	strd	ip, r7, [r4, #4]
 801040c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8010410:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8010414:	f8ba 3000 	ldrh.w	r3, [sl]
 8010418:	b2ac      	uxth	r4, r5
 801041a:	42ab      	cmp	r3, r5
 801041c:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8010420:	9301      	str	r3, [sp, #4]
 8010422:	d93b      	bls.n	801049c <ai_platform_inputs_get+0xe0>
 8010424:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d037      	beq.n	801049c <ai_platform_inputs_get+0xe0>
 801042c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8010430:	2e00      	cmp	r6, #0
 8010432:	d033      	beq.n	801049c <ai_platform_inputs_get+0xe0>
 8010434:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010438:	69b2      	ldr	r2, [r6, #24]
 801043a:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 801043e:	6810      	ldr	r0, [r2, #0]
 8010440:	68b3      	ldr	r3, [r6, #8]
 8010442:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8010446:	68f2      	ldr	r2, [r6, #12]
 8010448:	444c      	add	r4, r9
 801044a:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 801044e:	9200      	str	r2, [sp, #0]
 8010450:	f005 ff82 	bl	8016358 <ai_array_to_buffer_fmt>
 8010454:	69b1      	ldr	r1, [r6, #24]
 8010456:	9a00      	ldr	r2, [sp, #0]
 8010458:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801045c:	2f00      	cmp	r7, #0
 801045e:	d0c7      	beq.n	80103f0 <ai_platform_inputs_get+0x34>
 8010460:	2100      	movs	r1, #0
 8010462:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8010466:	6831      	ldr	r1, [r6, #0]
 8010468:	6079      	str	r1, [r7, #4]
 801046a:	b111      	cbz	r1, 8010472 <ai_platform_inputs_get+0xb6>
 801046c:	8849      	ldrh	r1, [r1, #2]
 801046e:	2900      	cmp	r1, #0
 8010470:	d1b9      	bne.n	80103e6 <ai_platform_inputs_get+0x2a>
 8010472:	69b1      	ldr	r1, [r6, #24]
 8010474:	2700      	movs	r7, #0
 8010476:	e7bb      	b.n	80103f0 <ai_platform_inputs_get+0x34>
 8010478:	9803      	ldr	r0, [sp, #12]
 801047a:	2400      	movs	r4, #0
 801047c:	2218      	movs	r2, #24
 801047e:	2111      	movs	r1, #17
 8010480:	300c      	adds	r0, #12
 8010482:	f000 fc09 	bl	8010c98 <core_set_error>
 8010486:	4620      	mov	r0, r4
 8010488:	9b02      	ldr	r3, [sp, #8]
 801048a:	b103      	cbz	r3, 801048e <ai_platform_inputs_get+0xd2>
 801048c:	801c      	strh	r4, [r3, #0]
 801048e:	b005      	add	sp, #20
 8010490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010494:	2000      	movs	r0, #0
 8010496:	b005      	add	sp, #20
 8010498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049c:	2c00      	cmp	r4, #0
 801049e:	d0eb      	beq.n	8010478 <ai_platform_inputs_get+0xbc>
 80104a0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80104a4:	6858      	ldr	r0, [r3, #4]
 80104a6:	e7ef      	b.n	8010488 <ai_platform_inputs_get+0xcc>
 80104a8:	a1c00100 	.word	0xa1c00100

080104ac <ai_platform_outputs_get>:
 80104ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b0:	4b38      	ldr	r3, [pc, #224]	@ (8010594 <ai_platform_outputs_get+0xe8>)
 80104b2:	b085      	sub	sp, #20
 80104b4:	6802      	ldr	r2, [r0, #0]
 80104b6:	4393      	bics	r3, r2
 80104b8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80104bc:	d15f      	bne.n	801057e <ai_platform_outputs_get+0xd2>
 80104be:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d94e      	bls.n	8010562 <ai_platform_outputs_get+0xb6>
 80104c4:	f04f 0900 	mov.w	r9, #0
 80104c8:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80104cc:	464d      	mov	r5, r9
 80104ce:	e016      	b.n	80104fe <ai_platform_outputs_get+0x52>
 80104d0:	9901      	ldr	r1, [sp, #4]
 80104d2:	2301      	movs	r3, #1
 80104d4:	f848 3001 	str.w	r3, [r8, r1]
 80104d8:	69b1      	ldr	r1, [r6, #24]
 80104da:	f04f 0301 	mov.w	r3, #1
 80104de:	684e      	ldr	r6, [r1, #4]
 80104e0:	3501      	adds	r5, #1
 80104e2:	f109 091c 	add.w	r9, r9, #28
 80104e6:	7523      	strb	r3, [r4, #20]
 80104e8:	2300      	movs	r3, #0
 80104ea:	6961      	ldr	r1, [r4, #20]
 80104ec:	6020      	str	r0, [r4, #0]
 80104ee:	f36b 211f 	bfi	r1, fp, #8, #24
 80104f2:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80104f6:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80104fa:	e9c4 1205 	strd	r1, r2, [r4, #20]
 80104fe:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010502:	b2ac      	uxth	r4, r5
 8010504:	42ab      	cmp	r3, r5
 8010506:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 801050a:	9301      	str	r3, [sp, #4]
 801050c:	d93b      	bls.n	8010586 <ai_platform_outputs_get+0xda>
 801050e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d037      	beq.n	8010586 <ai_platform_outputs_get+0xda>
 8010516:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801051a:	2e00      	cmp	r6, #0
 801051c:	d033      	beq.n	8010586 <ai_platform_outputs_get+0xda>
 801051e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8010522:	69b2      	ldr	r2, [r6, #24]
 8010524:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8010528:	6810      	ldr	r0, [r2, #0]
 801052a:	68b3      	ldr	r3, [r6, #8]
 801052c:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8010530:	68f2      	ldr	r2, [r6, #12]
 8010532:	444c      	add	r4, r9
 8010534:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8010538:	9200      	str	r2, [sp, #0]
 801053a:	f005 ff0d 	bl	8016358 <ai_array_to_buffer_fmt>
 801053e:	69b1      	ldr	r1, [r6, #24]
 8010540:	9a00      	ldr	r2, [sp, #0]
 8010542:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8010546:	2f00      	cmp	r7, #0
 8010548:	d0c7      	beq.n	80104da <ai_platform_outputs_get+0x2e>
 801054a:	2100      	movs	r1, #0
 801054c:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8010550:	6831      	ldr	r1, [r6, #0]
 8010552:	6079      	str	r1, [r7, #4]
 8010554:	b111      	cbz	r1, 801055c <ai_platform_outputs_get+0xb0>
 8010556:	8849      	ldrh	r1, [r1, #2]
 8010558:	2900      	cmp	r1, #0
 801055a:	d1b9      	bne.n	80104d0 <ai_platform_outputs_get+0x24>
 801055c:	69b1      	ldr	r1, [r6, #24]
 801055e:	2700      	movs	r7, #0
 8010560:	e7bb      	b.n	80104da <ai_platform_outputs_get+0x2e>
 8010562:	9803      	ldr	r0, [sp, #12]
 8010564:	2400      	movs	r4, #0
 8010566:	2218      	movs	r2, #24
 8010568:	2111      	movs	r1, #17
 801056a:	300c      	adds	r0, #12
 801056c:	f000 fb94 	bl	8010c98 <core_set_error>
 8010570:	4620      	mov	r0, r4
 8010572:	9b02      	ldr	r3, [sp, #8]
 8010574:	b103      	cbz	r3, 8010578 <ai_platform_outputs_get+0xcc>
 8010576:	801c      	strh	r4, [r3, #0]
 8010578:	b005      	add	sp, #20
 801057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057e:	2000      	movs	r0, #0
 8010580:	b005      	add	sp, #20
 8010582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010586:	2c00      	cmp	r4, #0
 8010588:	d0eb      	beq.n	8010562 <ai_platform_outputs_get+0xb6>
 801058a:	f8da 3014 	ldr.w	r3, [sl, #20]
 801058e:	6858      	ldr	r0, [r3, #4]
 8010590:	e7ef      	b.n	8010572 <ai_platform_outputs_get+0xc6>
 8010592:	bf00      	nop
 8010594:	a1c00100 	.word	0xa1c00100

08010598 <ai_platform_network_create>:
 8010598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801059c:	b083      	sub	sp, #12
 801059e:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80105a2:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80105a6:	b320      	cbz	r0, 80105f2 <ai_platform_network_create+0x5a>
 80105a8:	6002      	str	r2, [r0, #0]
 80105aa:	4616      	mov	r6, r2
 80105ac:	461f      	mov	r7, r3
 80105ae:	4604      	mov	r4, r0
 80105b0:	f000 fb6a 	bl	8010c88 <core_init>
 80105b4:	b970      	cbnz	r0, 80105d4 <ai_platform_network_create+0x3c>
 80105b6:	2530      	movs	r5, #48	@ 0x30
 80105b8:	2300      	movs	r3, #0
 80105ba:	6023      	str	r3, [r4, #0]
 80105bc:	2410      	movs	r4, #16
 80105be:	464a      	mov	r2, r9
 80105c0:	4641      	mov	r1, r8
 80105c2:	4638      	mov	r0, r7
 80105c4:	f005 ff72 	bl	80164ac <ai_version_get>
 80105c8:	60b0      	str	r0, [r6, #8]
 80105ca:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80105ce:	b003      	add	sp, #12
 80105d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105d4:	2200      	movs	r2, #0
 80105d6:	4641      	mov	r1, r8
 80105d8:	4638      	mov	r0, r7
 80105da:	f005 ff67 	bl	80164ac <ai_version_get>
 80105de:	4605      	mov	r5, r0
 80105e0:	2200      	movs	r2, #0
 80105e2:	2105      	movs	r1, #5
 80105e4:	2001      	movs	r0, #1
 80105e6:	f005 ff61 	bl	80164ac <ai_version_get>
 80105ea:	4285      	cmp	r5, r0
 80105ec:	d008      	beq.n	8010600 <ai_platform_network_create+0x68>
 80105ee:	2501      	movs	r5, #1
 80105f0:	e7e2      	b.n	80105b8 <ai_platform_network_create+0x20>
 80105f2:	2510      	movs	r5, #16
 80105f4:	462c      	mov	r4, r5
 80105f6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80105fa:	b003      	add	sp, #12
 80105fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010600:	4b05      	ldr	r3, [pc, #20]	@ (8010618 <ai_platform_network_create+0x80>)
 8010602:	a801      	add	r0, sp, #4
 8010604:	9301      	str	r3, [sp, #4]
 8010606:	f000 fd25 	bl	8011054 <ai_check_custom_types>
 801060a:	b110      	cbz	r0, 8010612 <ai_platform_network_create+0x7a>
 801060c:	2400      	movs	r4, #0
 801060e:	4625      	mov	r5, r4
 8010610:	e7d5      	b.n	80105be <ai_platform_network_create+0x26>
 8010612:	2502      	movs	r5, #2
 8010614:	e7d0      	b.n	80105b8 <ai_platform_network_create+0x20>
 8010616:	bf00      	nop
 8010618:	84048403 	.word	0x84048403

0801061c <ai_platform_network_init>:
 801061c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010620:	4a5c      	ldr	r2, [pc, #368]	@ (8010794 <ai_platform_network_init+0x178>)
 8010622:	460c      	mov	r4, r1
 8010624:	6801      	ldr	r1, [r0, #0]
 8010626:	438a      	bics	r2, r1
 8010628:	d133      	bne.n	8010692 <ai_platform_network_init+0x76>
 801062a:	4605      	mov	r5, r0
 801062c:	2c00      	cmp	r4, #0
 801062e:	f000 8093 	beq.w	8010758 <ai_platform_network_init+0x13c>
 8010632:	f8d4 b000 	ldr.w	fp, [r4]
 8010636:	4a58      	ldr	r2, [pc, #352]	@ (8010798 <ai_platform_network_init+0x17c>)
 8010638:	4593      	cmp	fp, r2
 801063a:	d10f      	bne.n	801065c <ai_platform_network_init+0x40>
 801063c:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8010640:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010644:	4b53      	ldr	r3, [pc, #332]	@ (8010794 <ai_platform_network_init+0x178>)
 8010646:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 801064a:	0c32      	lsrs	r2, r6, #16
 801064c:	4299      	cmp	r1, r3
 801064e:	d02c      	beq.n	80106aa <ai_platform_network_init+0x8e>
 8010650:	2303      	movs	r3, #3
 8010652:	462c      	mov	r4, r5
 8010654:	612b      	str	r3, [r5, #16]
 8010656:	4620      	mov	r0, r4
 8010658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801065c:	4627      	mov	r7, r4
 801065e:	2101      	movs	r1, #1
 8010660:	6864      	ldr	r4, [r4, #4]
 8010662:	4638      	mov	r0, r7
 8010664:	f107 081c 	add.w	r8, r7, #28
 8010668:	f7ff fd7e 	bl	8010168 <ai_buffer_get_size>
 801066c:	4606      	mov	r6, r0
 801066e:	2101      	movs	r1, #1
 8010670:	4640      	mov	r0, r8
 8010672:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8010676:	f7ff fd77 	bl	8010168 <ai_buffer_get_size>
 801067a:	b976      	cbnz	r6, 801069a <ai_platform_network_init+0x7e>
 801067c:	2800      	cmp	r0, #0
 801067e:	d150      	bne.n	8010722 <ai_platform_network_init+0x106>
 8010680:	4680      	mov	r8, r0
 8010682:	4686      	mov	lr, r0
 8010684:	4606      	mov	r6, r0
 8010686:	4607      	mov	r7, r0
 8010688:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 801068c:	6829      	ldr	r1, [r5, #0]
 801068e:	0436      	lsls	r6, r6, #16
 8010690:	e7d8      	b.n	8010644 <ai_platform_network_init+0x28>
 8010692:	2400      	movs	r4, #0
 8010694:	4620      	mov	r0, r4
 8010696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069a:	2800      	cmp	r0, #0
 801069c:	d13b      	bne.n	8010716 <ai_platform_network_init+0xfa>
 801069e:	4680      	mov	r8, r0
 80106a0:	4686      	mov	lr, r0
 80106a2:	2c00      	cmp	r4, #0
 80106a4:	d05e      	beq.n	8010764 <ai_platform_network_init+0x148>
 80106a6:	2601      	movs	r6, #1
 80106a8:	e7ee      	b.n	8010688 <ai_platform_network_init+0x6c>
 80106aa:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 80106ac:	4293      	cmp	r3, r2
 80106ae:	4b3a      	ldr	r3, [pc, #232]	@ (8010798 <ai_platform_network_init+0x17c>)
 80106b0:	d33e      	bcc.n	8010730 <ai_platform_network_init+0x114>
 80106b2:	459b      	cmp	fp, r3
 80106b4:	d03e      	beq.n	8010734 <ai_platform_network_init+0x118>
 80106b6:	b1a2      	cbz	r2, 80106e2 <ai_platform_network_init+0xc6>
 80106b8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80106bc:	f04f 0c00 	mov.w	ip, #0
 80106c0:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80106c4:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80106c6:	eb07 0b0c 	add.w	fp, r7, ip
 80106ca:	4464      	add	r4, ip
 80106cc:	f10c 0c1c 	add.w	ip, ip, #28
 80106d0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80106d4:	45cc      	cmp	ip, r9
 80106d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106d8:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80106dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80106e0:	d1f0      	bne.n	80106c4 <ai_platform_network_init+0xa8>
 80106e2:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 80106e4:	622e      	str	r6, [r5, #32]
 80106e6:	4553      	cmp	r3, sl
 80106e8:	d34b      	bcc.n	8010782 <ai_platform_network_init+0x166>
 80106ea:	f1ba 0f00 	cmp.w	sl, #0
 80106ee:	d025      	beq.n	801073c <ai_platform_network_init+0x120>
 80106f0:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80106f4:	2700      	movs	r7, #0
 80106f6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80106fa:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 80106fc:	eb08 0607 	add.w	r6, r8, r7
 8010700:	443c      	add	r4, r7
 8010702:	371c      	adds	r7, #28
 8010704:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010706:	4557      	cmp	r7, sl
 8010708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801070a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801070e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010712:	d1f2      	bne.n	80106fa <ai_platform_network_init+0xde>
 8010714:	e012      	b.n	801073c <ai_platform_network_init+0x120>
 8010716:	f1b9 0f00 	cmp.w	r9, #0
 801071a:	d015      	beq.n	8010748 <ai_platform_network_init+0x12c>
 801071c:	f04f 0e01 	mov.w	lr, #1
 8010720:	e7bf      	b.n	80106a2 <ai_platform_network_init+0x86>
 8010722:	f1b9 0f00 	cmp.w	r9, #0
 8010726:	d00f      	beq.n	8010748 <ai_platform_network_init+0x12c>
 8010728:	f04f 0e01 	mov.w	lr, #1
 801072c:	4637      	mov	r7, r6
 801072e:	e7ab      	b.n	8010688 <ai_platform_network_init+0x6c>
 8010730:	459b      	cmp	fp, r3
 8010732:	d11e      	bne.n	8010772 <ai_platform_network_init+0x156>
 8010734:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8010738:	e9c5 6708 	strd	r6, r7, [r5, #32]
 801073c:	4628      	mov	r0, r5
 801073e:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 8010742:	f000 fcaf 	bl	80110a4 <ai_layers_init_all>
 8010746:	e783      	b.n	8010650 <ai_platform_network_init+0x34>
 8010748:	2213      	movs	r2, #19
 801074a:	2110      	movs	r1, #16
 801074c:	f105 000c 	add.w	r0, r5, #12
 8010750:	2400      	movs	r4, #0
 8010752:	f000 faa1 	bl	8010c98 <core_set_error>
 8010756:	e77e      	b.n	8010656 <ai_platform_network_init+0x3a>
 8010758:	2211      	movs	r2, #17
 801075a:	2110      	movs	r1, #16
 801075c:	300c      	adds	r0, #12
 801075e:	f000 fa9b 	bl	8010c98 <core_set_error>
 8010762:	e778      	b.n	8010656 <ai_platform_network_init+0x3a>
 8010764:	2212      	movs	r2, #18
 8010766:	2110      	movs	r1, #16
 8010768:	f105 000c 	add.w	r0, r5, #12
 801076c:	f000 fa94 	bl	8010c98 <core_set_error>
 8010770:	e771      	b.n	8010656 <ai_platform_network_init+0x3a>
 8010772:	2212      	movs	r2, #18
 8010774:	2116      	movs	r1, #22
 8010776:	f105 000c 	add.w	r0, r5, #12
 801077a:	2400      	movs	r4, #0
 801077c:	f000 fa8c 	bl	8010c98 <core_set_error>
 8010780:	e769      	b.n	8010656 <ai_platform_network_init+0x3a>
 8010782:	2213      	movs	r2, #19
 8010784:	2116      	movs	r1, #22
 8010786:	f105 000c 	add.w	r0, r5, #12
 801078a:	2400      	movs	r4, #0
 801078c:	f000 fa84 	bl	8010c98 <core_set_error>
 8010790:	e761      	b.n	8010656 <ai_platform_network_init+0x3a>
 8010792:	bf00      	nop
 8010794:	a1c00100 	.word	0xa1c00100
 8010798:	a1facade 	.word	0xa1facade

0801079c <ai_platform_network_post_init>:
 801079c:	b538      	push	{r3, r4, r5, lr}
 801079e:	4b16      	ldr	r3, [pc, #88]	@ (80107f8 <ai_platform_network_post_init+0x5c>)
 80107a0:	6802      	ldr	r2, [r0, #0]
 80107a2:	ea02 0103 	and.w	r1, r2, r3
 80107a6:	4393      	bics	r3, r2
 80107a8:	d108      	bne.n	80107bc <ai_platform_network_post_init+0x20>
 80107aa:	6903      	ldr	r3, [r0, #16]
 80107ac:	4604      	mov	r4, r0
 80107ae:	f013 0502 	ands.w	r5, r3, #2
 80107b2:	d005      	beq.n	80107c0 <ai_platform_network_post_init+0x24>
 80107b4:	428a      	cmp	r2, r1
 80107b6:	d00a      	beq.n	80107ce <ai_platform_network_post_init+0x32>
 80107b8:	2001      	movs	r0, #1
 80107ba:	bd38      	pop	{r3, r4, r5, pc}
 80107bc:	2000      	movs	r0, #0
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	2210      	movs	r2, #16
 80107c2:	2111      	movs	r1, #17
 80107c4:	300c      	adds	r0, #12
 80107c6:	f000 fa67 	bl	8010c98 <core_set_error>
 80107ca:	4628      	mov	r0, r5
 80107cc:	bd38      	pop	{r3, r4, r5, pc}
 80107ce:	f000 fc77 	bl	80110c0 <ai_layers_post_init_all>
 80107d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d0ef      	beq.n	80107b8 <ai_platform_network_post_init+0x1c>
 80107d8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80107da:	e008      	b.n	80107ee <ai_platform_network_post_init+0x52>
 80107dc:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80107e0:	4798      	blx	r3
 80107e2:	692b      	ldr	r3, [r5, #16]
 80107e4:	42ab      	cmp	r3, r5
 80107e6:	461d      	mov	r5, r3
 80107e8:	d0e6      	beq.n	80107b8 <ai_platform_network_post_init+0x1c>
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d0e4      	beq.n	80107b8 <ai_platform_network_post_init+0x1c>
 80107ee:	4629      	mov	r1, r5
 80107f0:	2000      	movs	r0, #0
 80107f2:	2d00      	cmp	r5, #0
 80107f4:	d1f2      	bne.n	80107dc <ai_platform_network_post_init+0x40>
 80107f6:	e7df      	b.n	80107b8 <ai_platform_network_post_init+0x1c>
 80107f8:	a1c00100 	.word	0xa1c00100

080107fc <ai_platform_network_process>:
 80107fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010800:	b085      	sub	sp, #20
 8010802:	4bb7      	ldr	r3, [pc, #732]	@ (8010ae0 <ai_platform_network_process+0x2e4>)
 8010804:	9202      	str	r2, [sp, #8]
 8010806:	6802      	ldr	r2, [r0, #0]
 8010808:	4393      	bics	r3, r2
 801080a:	f040 8142 	bne.w	8010a92 <ai_platform_network_process+0x296>
 801080e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010810:	4605      	mov	r5, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	f000 8126 	beq.w	8010a64 <ai_platform_network_process+0x268>
 8010818:	6903      	ldr	r3, [r0, #16]
 801081a:	2200      	movs	r2, #0
 801081c:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8010820:	f003 0303 	and.w	r3, r3, #3
 8010824:	6182      	str	r2, [r0, #24]
 8010826:	2b03      	cmp	r3, #3
 8010828:	f040 8122 	bne.w	8010a70 <ai_platform_network_process+0x274>
 801082c:	2900      	cmp	r1, #0
 801082e:	f000 8136 	beq.w	8010a9e <ai_platform_network_process+0x2a2>
 8010832:	fab8 f788 	clz	r7, r8
 8010836:	097f      	lsrs	r7, r7, #5
 8010838:	f1b8 0f00 	cmp.w	r8, #0
 801083c:	f000 812f 	beq.w	8010a9e <ai_platform_network_process+0x2a2>
 8010840:	f8b8 3000 	ldrh.w	r3, [r8]
 8010844:	2b00      	cmp	r3, #0
 8010846:	f000 812a 	beq.w	8010a9e <ai_platform_network_process+0x2a2>
 801084a:	698b      	ldr	r3, [r1, #24]
 801084c:	460e      	mov	r6, r1
 801084e:	9003      	str	r0, [sp, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	9301      	str	r3, [sp, #4]
 8010854:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d072      	beq.n	8010942 <ai_platform_network_process+0x146>
 801085c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010860:	2c00      	cmp	r4, #0
 8010862:	d06e      	beq.n	8010942 <ai_platform_network_process+0x146>
 8010864:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010868:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801086c:	f8d3 a000 	ldr.w	sl, [r3]
 8010870:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8010874:	f000 8112 	beq.w	8010a9c <ai_platform_network_process+0x2a0>
 8010878:	69a3      	ldr	r3, [r4, #24]
 801087a:	2101      	movs	r1, #1
 801087c:	4630      	mov	r0, r6
 801087e:	685d      	ldr	r5, [r3, #4]
 8010880:	f7ff fc72 	bl	8010168 <ai_buffer_get_size>
 8010884:	4285      	cmp	r5, r0
 8010886:	f0c0 8115 	bcc.w	8010ab4 <ai_platform_network_process+0x2b8>
 801088a:	68e0      	ldr	r0, [r4, #12]
 801088c:	69b1      	ldr	r1, [r6, #24]
 801088e:	68c2      	ldr	r2, [r0, #12]
 8010890:	68cb      	ldr	r3, [r1, #12]
 8010892:	429a      	cmp	r2, r3
 8010894:	f040 810e 	bne.w	8010ab4 <ai_platform_network_process+0x2b8>
 8010898:	6882      	ldr	r2, [r0, #8]
 801089a:	688b      	ldr	r3, [r1, #8]
 801089c:	429a      	cmp	r2, r3
 801089e:	f040 8109 	bne.w	8010ab4 <ai_platform_network_process+0x2b8>
 80108a2:	6842      	ldr	r2, [r0, #4]
 80108a4:	684b      	ldr	r3, [r1, #4]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	f040 8104 	bne.w	8010ab4 <ai_platform_network_process+0x2b8>
 80108ac:	69a3      	ldr	r3, [r4, #24]
 80108ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108b2:	f005 fde9 	bl	8016488 <ai_array_get_data_byte_size>
 80108b6:	4605      	mov	r5, r0
 80108b8:	4620      	mov	r0, r4
 80108ba:	f005 fdfd 	bl	80164b8 <get_tensor_byte_size>
 80108be:	4285      	cmp	r5, r0
 80108c0:	f0c0 80f8 	bcc.w	8010ab4 <ai_platform_network_process+0x2b8>
 80108c4:	69a3      	ldr	r3, [r4, #24]
 80108c6:	6818      	ldr	r0, [r3, #0]
 80108c8:	f005 fd46 	bl	8016358 <ai_array_to_buffer_fmt>
 80108cc:	6833      	ldr	r3, [r6, #0]
 80108ce:	4058      	eors	r0, r3
 80108d0:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80108d4:	f040 81a4 	bne.w	8010c20 <ai_platform_network_process+0x424>
 80108d8:	6873      	ldr	r3, [r6, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 80de 	beq.w	8010a9c <ai_platform_network_process+0x2a0>
 80108e0:	69b3      	ldr	r3, [r6, #24]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f000 81a4 	beq.w	8010c32 <ai_platform_network_process+0x436>
 80108ea:	9a01      	ldr	r2, [sp, #4]
 80108ec:	4620      	mov	r0, r4
 80108ee:	3701      	adds	r7, #1
 80108f0:	361c      	adds	r6, #28
 80108f2:	429a      	cmp	r2, r3
 80108f4:	bf38      	it	cc
 80108f6:	461a      	movcc	r2, r3
 80108f8:	9201      	str	r2, [sp, #4]
 80108fa:	f005 fddd 	bl	80164b8 <get_tensor_byte_size>
 80108fe:	f8c9 0008 	str.w	r0, [r9, #8]
 8010902:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	fb00 f303 	mul.w	r3, r0, r3
 801090c:	f8c9 300c 	str.w	r3, [r9, #12]
 8010910:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010914:	440b      	add	r3, r1
 8010916:	f8c9 1004 	str.w	r1, [r9, #4]
 801091a:	f84a 300b 	str.w	r3, [sl, fp]
 801091e:	69a0      	ldr	r0, [r4, #24]
 8010920:	6803      	ldr	r3, [r0, #0]
 8010922:	009a      	lsls	r2, r3, #2
 8010924:	f100 80af 	bmi.w	8010a86 <ai_platform_network_process+0x28a>
 8010928:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801092c:	1a9b      	subs	r3, r3, r2
 801092e:	4419      	add	r1, r3
 8010930:	6081      	str	r1, [r0, #8]
 8010932:	69a3      	ldr	r3, [r4, #24]
 8010934:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010938:	60da      	str	r2, [r3, #12]
 801093a:	f8b8 3000 	ldrh.w	r3, [r8]
 801093e:	42bb      	cmp	r3, r7
 8010940:	d888      	bhi.n	8010854 <ai_platform_network_process+0x58>
 8010942:	9d03      	ldr	r5, [sp, #12]
 8010944:	9b02      	ldr	r3, [sp, #8]
 8010946:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8010948:	2b00      	cmp	r3, #0
 801094a:	f000 817b 	beq.w	8010c44 <ai_platform_network_process+0x448>
 801094e:	2a01      	cmp	r2, #1
 8010950:	f240 80bd 	bls.w	8010ace <ai_platform_network_process+0x2d2>
 8010954:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8010958:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801095c:	2b00      	cmp	r3, #0
 801095e:	f000 80b6 	beq.w	8010ace <ai_platform_network_process+0x2d2>
 8010962:	2700      	movs	r7, #0
 8010964:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010968:	9502      	str	r5, [sp, #8]
 801096a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801096e:	2b00      	cmp	r3, #0
 8010970:	f000 80bd 	beq.w	8010aee <ai_platform_network_process+0x2f2>
 8010974:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8010978:	2e00      	cmp	r6, #0
 801097a:	f000 80b8 	beq.w	8010aee <ai_platform_network_process+0x2f2>
 801097e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010982:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8010986:	681c      	ldr	r4, [r3, #0]
 8010988:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 801098c:	f000 8170 	beq.w	8010c70 <ai_platform_network_process+0x474>
 8010990:	69b3      	ldr	r3, [r6, #24]
 8010992:	2101      	movs	r1, #1
 8010994:	4658      	mov	r0, fp
 8010996:	685d      	ldr	r5, [r3, #4]
 8010998:	f7ff fbe6 	bl	8010168 <ai_buffer_get_size>
 801099c:	4285      	cmp	r5, r0
 801099e:	f0c0 8095 	bcc.w	8010acc <ai_platform_network_process+0x2d0>
 80109a2:	68f0      	ldr	r0, [r6, #12]
 80109a4:	f8db 1018 	ldr.w	r1, [fp, #24]
 80109a8:	68c2      	ldr	r2, [r0, #12]
 80109aa:	68cb      	ldr	r3, [r1, #12]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	f040 808d 	bne.w	8010acc <ai_platform_network_process+0x2d0>
 80109b2:	6882      	ldr	r2, [r0, #8]
 80109b4:	688b      	ldr	r3, [r1, #8]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	f040 8088 	bne.w	8010acc <ai_platform_network_process+0x2d0>
 80109bc:	6842      	ldr	r2, [r0, #4]
 80109be:	684b      	ldr	r3, [r1, #4]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	f040 8083 	bne.w	8010acc <ai_platform_network_process+0x2d0>
 80109c6:	69b3      	ldr	r3, [r6, #24]
 80109c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109cc:	f005 fd5c 	bl	8016488 <ai_array_get_data_byte_size>
 80109d0:	9003      	str	r0, [sp, #12]
 80109d2:	4630      	mov	r0, r6
 80109d4:	f005 fd70 	bl	80164b8 <get_tensor_byte_size>
 80109d8:	9b03      	ldr	r3, [sp, #12]
 80109da:	4283      	cmp	r3, r0
 80109dc:	d376      	bcc.n	8010acc <ai_platform_network_process+0x2d0>
 80109de:	69b3      	ldr	r3, [r6, #24]
 80109e0:	6818      	ldr	r0, [r3, #0]
 80109e2:	f005 fcb9 	bl	8016358 <ai_array_to_buffer_fmt>
 80109e6:	f8db 3000 	ldr.w	r3, [fp]
 80109ea:	4058      	eors	r0, r3
 80109ec:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80109f0:	f040 812c 	bne.w	8010c4c <ai_platform_network_process+0x450>
 80109f4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 8139 	beq.w	8010c70 <ai_platform_network_process+0x474>
 80109fe:	f8db 3018 	ldr.w	r3, [fp, #24]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f000 812a 	beq.w	8010c5e <ai_platform_network_process+0x462>
 8010a0a:	9a01      	ldr	r2, [sp, #4]
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	3701      	adds	r7, #1
 8010a10:	f10b 0b1c 	add.w	fp, fp, #28
 8010a14:	429a      	cmp	r2, r3
 8010a16:	bf38      	it	cc
 8010a18:	461a      	movcc	r2, r3
 8010a1a:	9201      	str	r2, [sp, #4]
 8010a1c:	f005 fd4c 	bl	80164b8 <get_tensor_byte_size>
 8010a20:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a24:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	fb00 f303 	mul.w	r3, r0, r3
 8010a2e:	f8c8 300c 	str.w	r3, [r8, #12]
 8010a32:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8010a36:	440b      	add	r3, r1
 8010a38:	f8c8 1004 	str.w	r1, [r8, #4]
 8010a3c:	f844 300a 	str.w	r3, [r4, sl]
 8010a40:	69b0      	ldr	r0, [r6, #24]
 8010a42:	6803      	ldr	r3, [r0, #0]
 8010a44:	009b      	lsls	r3, r3, #2
 8010a46:	d44d      	bmi.n	8010ae4 <ai_platform_network_process+0x2e8>
 8010a48:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010a4c:	1a9b      	subs	r3, r3, r2
 8010a4e:	4419      	add	r1, r3
 8010a50:	6081      	str	r1, [r0, #8]
 8010a52:	69b3      	ldr	r3, [r6, #24]
 8010a54:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010a58:	60da      	str	r2, [r3, #12]
 8010a5a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010a5e:	42bb      	cmp	r3, r7
 8010a60:	d883      	bhi.n	801096a <ai_platform_network_process+0x16e>
 8010a62:	e044      	b.n	8010aee <ai_platform_network_process+0x2f2>
 8010a64:	6902      	ldr	r2, [r0, #16]
 8010a66:	6183      	str	r3, [r0, #24]
 8010a68:	f002 0203 	and.w	r2, r2, #3
 8010a6c:	2a03      	cmp	r2, #3
 8010a6e:	d016      	beq.n	8010a9e <ai_platform_network_process+0x2a2>
 8010a70:	2230      	movs	r2, #48	@ 0x30
 8010a72:	2111      	movs	r1, #17
 8010a74:	f105 000c 	add.w	r0, r5, #12
 8010a78:	2400      	movs	r4, #0
 8010a7a:	f000 f90d 	bl	8010c98 <core_set_error>
 8010a7e:	4620      	mov	r0, r4
 8010a80:	b005      	add	sp, #20
 8010a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a86:	f8b8 3000 	ldrh.w	r3, [r8]
 8010a8a:	429f      	cmp	r7, r3
 8010a8c:	f4ff aee2 	bcc.w	8010854 <ai_platform_network_process+0x58>
 8010a90:	e757      	b.n	8010942 <ai_platform_network_process+0x146>
 8010a92:	2400      	movs	r4, #0
 8010a94:	4620      	mov	r0, r4
 8010a96:	b005      	add	sp, #20
 8010a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9c:	9d03      	ldr	r5, [sp, #12]
 8010a9e:	2400      	movs	r4, #0
 8010aa0:	2217      	movs	r2, #23
 8010aa2:	2112      	movs	r1, #18
 8010aa4:	f105 000c 	add.w	r0, r5, #12
 8010aa8:	f000 f8f6 	bl	8010c98 <core_set_error>
 8010aac:	4620      	mov	r0, r4
 8010aae:	b005      	add	sp, #20
 8010ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab4:	9d03      	ldr	r5, [sp, #12]
 8010ab6:	2400      	movs	r4, #0
 8010ab8:	2218      	movs	r2, #24
 8010aba:	2112      	movs	r1, #18
 8010abc:	f105 000c 	add.w	r0, r5, #12
 8010ac0:	f000 f8ea 	bl	8010c98 <core_set_error>
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	b005      	add	sp, #20
 8010ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010acc:	9d02      	ldr	r5, [sp, #8]
 8010ace:	2218      	movs	r2, #24
 8010ad0:	2113      	movs	r1, #19
 8010ad2:	f105 000c 	add.w	r0, r5, #12
 8010ad6:	2400      	movs	r4, #0
 8010ad8:	f000 f8de 	bl	8010c98 <core_set_error>
 8010adc:	e7cf      	b.n	8010a7e <ai_platform_network_process+0x282>
 8010ade:	bf00      	nop
 8010ae0:	a1c00100 	.word	0xa1c00100
 8010ae4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010ae8:	429f      	cmp	r7, r3
 8010aea:	f4ff af3e 	bcc.w	801096a <ai_platform_network_process+0x16e>
 8010aee:	9d02      	ldr	r5, [sp, #8]
 8010af0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010af4:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8010af6:	832b      	strh	r3, [r5, #24]
 8010af8:	2a00      	cmp	r2, #0
 8010afa:	f040 808b 	bne.w	8010c14 <ai_platform_network_process+0x418>
 8010afe:	4616      	mov	r6, r2
 8010b00:	4617      	mov	r7, r2
 8010b02:	8b6c      	ldrh	r4, [r5, #26]
 8010b04:	429c      	cmp	r4, r3
 8010b06:	d2ba      	bcs.n	8010a7e <ai_platform_network_process+0x282>
 8010b08:	46ab      	mov	fp, r5
 8010b0a:	2e00      	cmp	r6, #0
 8010b0c:	d030      	beq.n	8010b70 <ai_platform_network_process+0x374>
 8010b0e:	f04f 0800 	mov.w	r8, #0
 8010b12:	e014      	b.n	8010b3e <ai_platform_network_process+0x342>
 8010b14:	6882      	ldr	r2, [r0, #8]
 8010b16:	68c5      	ldr	r5, [r0, #12]
 8010b18:	6863      	ldr	r3, [r4, #4]
 8010b1a:	1b52      	subs	r2, r2, r5
 8010b1c:	4413      	add	r3, r2
 8010b1e:	6083      	str	r3, [r0, #8]
 8010b20:	698b      	ldr	r3, [r1, #24]
 8010b22:	6862      	ldr	r2, [r4, #4]
 8010b24:	60da      	str	r2, [r3, #12]
 8010b26:	f859 200a 	ldr.w	r2, [r9, sl]
 8010b2a:	f108 0801 	add.w	r8, r8, #1
 8010b2e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8010b32:	440b      	add	r3, r1
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d301      	bcc.n	8010b3c <ai_platform_network_process+0x340>
 8010b38:	68e3      	ldr	r3, [r4, #12]
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	6063      	str	r3, [r4, #4]
 8010b3e:	8833      	ldrh	r3, [r6, #0]
 8010b40:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8010b44:	4543      	cmp	r3, r8
 8010b46:	d913      	bls.n	8010b70 <ai_platform_network_process+0x374>
 8010b48:	6873      	ldr	r3, [r6, #4]
 8010b4a:	b18b      	cbz	r3, 8010b70 <ai_platform_network_process+0x374>
 8010b4c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8010b50:	b171      	cbz	r1, 8010b70 <ai_platform_network_process+0x374>
 8010b52:	6988      	ldr	r0, [r1, #24]
 8010b54:	68b2      	ldr	r2, [r6, #8]
 8010b56:	6803      	ldr	r3, [r0, #0]
 8010b58:	f8d2 9000 	ldr.w	r9, [r2]
 8010b5c:	009d      	lsls	r5, r3, #2
 8010b5e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8010b62:	d5d7      	bpl.n	8010b14 <ai_platform_network_process+0x318>
 8010b64:	6881      	ldr	r1, [r0, #8]
 8010b66:	68a2      	ldr	r2, [r4, #8]
 8010b68:	6860      	ldr	r0, [r4, #4]
 8010b6a:	f003 ff81 	bl	8014a70 <st_int8_copy>
 8010b6e:	e7da      	b.n	8010b26 <ai_platform_network_process+0x32a>
 8010b70:	4658      	mov	r0, fp
 8010b72:	f000 fab9 	bl	80110e8 <ai_layers_forward_all>
 8010b76:	2f00      	cmp	r7, #0
 8010b78:	d03d      	beq.n	8010bf6 <ai_platform_network_process+0x3fa>
 8010b7a:	2400      	movs	r4, #0
 8010b7c:	e016      	b.n	8010bac <ai_platform_network_process+0x3b0>
 8010b7e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8010b82:	f859 100a 	ldr.w	r1, [r9, sl]
 8010b86:	4413      	add	r3, r2
 8010b88:	428b      	cmp	r3, r1
 8010b8a:	d302      	bcc.n	8010b92 <ai_platform_network_process+0x396>
 8010b8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b90:	1acb      	subs	r3, r1, r3
 8010b92:	f8c8 3004 	str.w	r3, [r8, #4]
 8010b96:	6981      	ldr	r1, [r0, #24]
 8010b98:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8010b9c:	1b52      	subs	r2, r2, r5
 8010b9e:	4413      	add	r3, r2
 8010ba0:	608b      	str	r3, [r1, #8]
 8010ba2:	6983      	ldr	r3, [r0, #24]
 8010ba4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010ba8:	60da      	str	r2, [r3, #12]
 8010baa:	3401      	adds	r4, #1
 8010bac:	883b      	ldrh	r3, [r7, #0]
 8010bae:	42a3      	cmp	r3, r4
 8010bb0:	d921      	bls.n	8010bf6 <ai_platform_network_process+0x3fa>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	b1fb      	cbz	r3, 8010bf6 <ai_platform_network_process+0x3fa>
 8010bb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010bba:	b1e0      	cbz	r0, 8010bf6 <ai_platform_network_process+0x3fa>
 8010bbc:	68ba      	ldr	r2, [r7, #8]
 8010bbe:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010bc2:	6983      	ldr	r3, [r0, #24]
 8010bc4:	f8d2 9000 	ldr.w	r9, [r2]
 8010bc8:	681a      	ldr	r2, [r3, #0]
 8010bca:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8010bce:	0092      	lsls	r2, r2, #2
 8010bd0:	d5d5      	bpl.n	8010b7e <ai_platform_network_process+0x382>
 8010bd2:	6898      	ldr	r0, [r3, #8]
 8010bd4:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010bd8:	f003 ff4a 	bl	8014a70 <st_int8_copy>
 8010bdc:	f859 200a 	ldr.w	r2, [r9, sl]
 8010be0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010be4:	440b      	add	r3, r1
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d302      	bcc.n	8010bf0 <ai_platform_network_process+0x3f4>
 8010bea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	f8c8 3004 	str.w	r3, [r8, #4]
 8010bf4:	e7d9      	b.n	8010baa <ai_platform_network_process+0x3ae>
 8010bf6:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8010bfa:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8010bfe:	3401      	adds	r4, #1
 8010c00:	b2a4      	uxth	r4, r4
 8010c02:	42a3      	cmp	r3, r4
 8010c04:	f8ab 401a 	strh.w	r4, [fp, #26]
 8010c08:	f63f af7f 	bhi.w	8010b0a <ai_platform_network_process+0x30e>
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	b005      	add	sp, #20
 8010c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c14:	2a01      	cmp	r2, #1
 8010c16:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8010c18:	d033      	beq.n	8010c82 <ai_platform_network_process+0x486>
 8010c1a:	f106 070c 	add.w	r7, r6, #12
 8010c1e:	e770      	b.n	8010b02 <ai_platform_network_process+0x306>
 8010c20:	9d03      	ldr	r5, [sp, #12]
 8010c22:	2219      	movs	r2, #25
 8010c24:	2112      	movs	r1, #18
 8010c26:	2400      	movs	r4, #0
 8010c28:	f105 000c 	add.w	r0, r5, #12
 8010c2c:	f000 f834 	bl	8010c98 <core_set_error>
 8010c30:	e725      	b.n	8010a7e <ai_platform_network_process+0x282>
 8010c32:	9d03      	ldr	r5, [sp, #12]
 8010c34:	4604      	mov	r4, r0
 8010c36:	2221      	movs	r2, #33	@ 0x21
 8010c38:	2112      	movs	r1, #18
 8010c3a:	f105 000c 	add.w	r0, r5, #12
 8010c3e:	f000 f82b 	bl	8010c98 <core_set_error>
 8010c42:	e71c      	b.n	8010a7e <ai_platform_network_process+0x282>
 8010c44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010c48:	832b      	strh	r3, [r5, #24]
 8010c4a:	e755      	b.n	8010af8 <ai_platform_network_process+0x2fc>
 8010c4c:	9d02      	ldr	r5, [sp, #8]
 8010c4e:	2219      	movs	r2, #25
 8010c50:	2113      	movs	r1, #19
 8010c52:	2400      	movs	r4, #0
 8010c54:	f105 000c 	add.w	r0, r5, #12
 8010c58:	f000 f81e 	bl	8010c98 <core_set_error>
 8010c5c:	e70f      	b.n	8010a7e <ai_platform_network_process+0x282>
 8010c5e:	9d02      	ldr	r5, [sp, #8]
 8010c60:	4604      	mov	r4, r0
 8010c62:	2221      	movs	r2, #33	@ 0x21
 8010c64:	2113      	movs	r1, #19
 8010c66:	f105 000c 	add.w	r0, r5, #12
 8010c6a:	f000 f815 	bl	8010c98 <core_set_error>
 8010c6e:	e706      	b.n	8010a7e <ai_platform_network_process+0x282>
 8010c70:	9d02      	ldr	r5, [sp, #8]
 8010c72:	2217      	movs	r2, #23
 8010c74:	2113      	movs	r1, #19
 8010c76:	2400      	movs	r4, #0
 8010c78:	f105 000c 	add.w	r0, r5, #12
 8010c7c:	f000 f80c 	bl	8010c98 <core_set_error>
 8010c80:	e6fd      	b.n	8010a7e <ai_platform_network_process+0x282>
 8010c82:	2700      	movs	r7, #0
 8010c84:	e73d      	b.n	8010b02 <ai_platform_network_process+0x306>
 8010c86:	bf00      	nop

08010c88 <core_init>:
 8010c88:	2001      	movs	r0, #1
 8010c8a:	4770      	bx	lr

08010c8c <core_get_error>:
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2200      	movs	r2, #0
 8010c90:	6800      	ldr	r0, [r0, #0]
 8010c92:	601a      	str	r2, [r3, #0]
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop

08010c98 <core_set_error>:
 8010c98:	4603      	mov	r3, r0
 8010c9a:	7800      	ldrb	r0, [r0, #0]
 8010c9c:	b108      	cbz	r0, 8010ca2 <core_set_error+0xa>
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	4770      	bx	lr
 8010ca2:	7019      	strb	r1, [r3, #0]
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	6819      	ldr	r1, [r3, #0]
 8010ca8:	f362 211f 	bfi	r1, r2, #8, #24
 8010cac:	6019      	str	r1, [r3, #0]
 8010cae:	4770      	bx	lr

08010cb0 <node_convert>:
 8010cb0:	6982      	ldr	r2, [r0, #24]
 8010cb2:	8813      	ldrh	r3, [r2, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d038      	beq.n	8010d2a <node_convert+0x7a>
 8010cb8:	6852      	ldr	r2, [r2, #4]
 8010cba:	6850      	ldr	r0, [r2, #4]
 8010cbc:	b100      	cbz	r0, 8010cc0 <node_convert+0x10>
 8010cbe:	6800      	ldr	r0, [r0, #0]
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	f000 80e6 	beq.w	8010e92 <node_convert+0x1e2>
 8010cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cc8:	6915      	ldr	r5, [r2, #16]
 8010cca:	b083      	sub	sp, #12
 8010ccc:	b105      	cbz	r5, 8010cd0 <node_convert+0x20>
 8010cce:	682d      	ldr	r5, [r5, #0]
 8010cd0:	6883      	ldr	r3, [r0, #8]
 8010cd2:	0a1b      	lsrs	r3, r3, #8
 8010cd4:	f000 809b 	beq.w	8010e0e <node_convert+0x15e>
 8010cd8:	68c1      	ldr	r1, [r0, #12]
 8010cda:	2401      	movs	r4, #1
 8010cdc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010ce0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ce4:	4299      	cmp	r1, r3
 8010ce6:	fb02 f404 	mul.w	r4, r2, r4
 8010cea:	d1f9      	bne.n	8010ce0 <node_convert+0x30>
 8010cec:	6982      	ldr	r2, [r0, #24]
 8010cee:	69ae      	ldr	r6, [r5, #24]
 8010cf0:	6813      	ldr	r3, [r2, #0]
 8010cf2:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8010cf6:	2901      	cmp	r1, #1
 8010cf8:	d019      	beq.n	8010d2e <node_convert+0x7e>
 8010cfa:	6801      	ldr	r1, [r0, #0]
 8010cfc:	68b5      	ldr	r5, [r6, #8]
 8010cfe:	2900      	cmp	r1, #0
 8010d00:	d032      	beq.n	8010d68 <node_convert+0xb8>
 8010d02:	684e      	ldr	r6, [r1, #4]
 8010d04:	6890      	ldr	r0, [r2, #8]
 8010d06:	f3c3 52c0 	ubfx	r2, r3, #23, #1
 8010d0a:	2e00      	cmp	r6, #0
 8010d0c:	d06b      	beq.n	8010de6 <node_convert+0x136>
 8010d0e:	884b      	ldrh	r3, [r1, #2]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d151      	bne.n	8010db8 <node_convert+0x108>
 8010d14:	2a00      	cmp	r2, #0
 8010d16:	d068      	beq.n	8010dea <node_convert+0x13a>
 8010d18:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8010e98 <node_convert+0x1e8>
 8010d1c:	4622      	mov	r2, r4
 8010d1e:	4629      	mov	r1, r5
 8010d20:	b003      	add	sp, #12
 8010d22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010d26:	f001 bacb 	b.w	80122c0 <forward_lite_node_convert_integer_is8of32>
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	deff      	udf	#255	@ 0xff
 8010d2e:	682d      	ldr	r5, [r5, #0]
 8010d30:	6890      	ldr	r0, [r2, #8]
 8010d32:	2d00      	cmp	r5, #0
 8010d34:	d06d      	beq.n	8010e12 <node_convert+0x162>
 8010d36:	6833      	ldr	r3, [r6, #0]
 8010d38:	686a      	ldr	r2, [r5, #4]
 8010d3a:	68b1      	ldr	r1, [r6, #8]
 8010d3c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8010d40:	2a00      	cmp	r2, #0
 8010d42:	d041      	beq.n	8010dc8 <node_convert+0x118>
 8010d44:	886d      	ldrh	r5, [r5, #2]
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	d043      	beq.n	8010dd2 <node_convert+0x122>
 8010d4a:	6815      	ldr	r5, [r2, #0]
 8010d4c:	ed95 0a00 	vldr	s0, [r5]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f000 8097 	beq.w	8010e84 <node_convert+0x1d4>
 8010d56:	6853      	ldr	r3, [r2, #4]
 8010d58:	f993 3000 	ldrsb.w	r3, [r3]
 8010d5c:	4622      	mov	r2, r4
 8010d5e:	b003      	add	sp, #12
 8010d60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010d64:	f001 bab0 	b.w	80122c8 <forward_lite_node_convert_integer_if32os8>
 8010d68:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8010d6c:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
 8010d70:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8010d74:	6890      	ldr	r0, [r2, #8]
 8010d76:	1b8e      	subs	r6, r1, r6
 8010d78:	2908      	cmp	r1, #8
 8010d7a:	4622      	mov	r2, r4
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 8010d82:	eba6 0603 	sub.w	r6, r6, r3
 8010d86:	d06f      	beq.n	8010e68 <node_convert+0x1b8>
 8010d88:	f003 fd24 	bl	80147d4 <st_int16_to_f32>
 8010d8c:	b196      	cbz	r6, 8010db4 <node_convert+0x104>
 8010d8e:	ee07 6a90 	vmov	s15, r6
 8010d92:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8010d96:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8010d9a:	f00a fc6d 	bl	801b678 <powf>
 8010d9e:	b14c      	cbz	r4, 8010db4 <node_convert+0x104>
 8010da0:	2300      	movs	r3, #0
 8010da2:	ecf5 7a01 	vldmia	r5!, {s15}
 8010da6:	3301      	adds	r3, #1
 8010da8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010dac:	42a3      	cmp	r3, r4
 8010dae:	ed45 7a01 	vstr	s15, [r5, #-4]
 8010db2:	d1f6      	bne.n	8010da2 <node_convert+0xf2>
 8010db4:	b003      	add	sp, #12
 8010db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010db8:	6833      	ldr	r3, [r6, #0]
 8010dba:	ed93 0a00 	vldr	s0, [r3]
 8010dbe:	6873      	ldr	r3, [r6, #4]
 8010dc0:	b1ea      	cbz	r2, 8010dfe <node_convert+0x14e>
 8010dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8010dc6:	e7a9      	b.n	8010d1c <node_convert+0x6c>
 8010dc8:	b12b      	cbz	r3, 8010dd6 <node_convert+0x126>
 8010dca:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8010e98 <node_convert+0x1e8>
 8010dce:	4613      	mov	r3, r2
 8010dd0:	e7c4      	b.n	8010d5c <node_convert+0xac>
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d159      	bne.n	8010e8a <node_convert+0x1da>
 8010dd6:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8010e98 <node_convert+0x1e8>
 8010dda:	4622      	mov	r2, r4
 8010ddc:	b003      	add	sp, #12
 8010dde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010de2:	f001 ba73 	b.w	80122cc <forward_lite_node_convert_integer_if32ou8>
 8010de6:	2a00      	cmp	r2, #0
 8010de8:	d141      	bne.n	8010e6e <node_convert+0x1be>
 8010dea:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8010e98 <node_convert+0x1e8>
 8010dee:	2300      	movs	r3, #0
 8010df0:	4622      	mov	r2, r4
 8010df2:	4629      	mov	r1, r5
 8010df4:	b003      	add	sp, #12
 8010df6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010dfa:	f001 ba63 	b.w	80122c4 <forward_lite_node_convert_integer_iu8of32>
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	4622      	mov	r2, r4
 8010e02:	4629      	mov	r1, r5
 8010e04:	b003      	add	sp, #12
 8010e06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e0a:	f001 ba5b 	b.w	80122c4 <forward_lite_node_convert_integer_iu8of32>
 8010e0e:	2401      	movs	r4, #1
 8010e10:	e76c      	b.n	8010cec <node_convert+0x3c>
 8010e12:	6832      	ldr	r2, [r6, #0]
 8010e14:	f3c2 17c6 	ubfx	r7, r2, #7, #7
 8010e18:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 8010e1c:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8010e20:	1afb      	subs	r3, r7, r3
 8010e22:	3340      	adds	r3, #64	@ 0x40
 8010e24:	1a9b      	subs	r3, r3, r2
 8010e26:	d016      	beq.n	8010e56 <node_convert+0x1a6>
 8010e28:	425b      	negs	r3, r3
 8010e2a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8010e2e:	9001      	str	r0, [sp, #4]
 8010e30:	ee00 3a90 	vmov	s1, r3
 8010e34:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8010e38:	f00a fc1e 	bl	801b678 <powf>
 8010e3c:	9801      	ldr	r0, [sp, #4]
 8010e3e:	b154      	cbz	r4, 8010e56 <node_convert+0x1a6>
 8010e40:	462b      	mov	r3, r5
 8010e42:	4602      	mov	r2, r0
 8010e44:	ecf2 7a01 	vldmia	r2!, {s15}
 8010e48:	3301      	adds	r3, #1
 8010e4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010e4e:	42a3      	cmp	r3, r4
 8010e50:	ed42 7a01 	vstr	s15, [r2, #-4]
 8010e54:	d1f6      	bne.n	8010e44 <node_convert+0x194>
 8010e56:	2f08      	cmp	r7, #8
 8010e58:	d00d      	beq.n	8010e76 <node_convert+0x1c6>
 8010e5a:	4622      	mov	r2, r4
 8010e5c:	68b1      	ldr	r1, [r6, #8]
 8010e5e:	b003      	add	sp, #12
 8010e60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e64:	f003 bb34 	b.w	80144d0 <st_f32_to_int16>
 8010e68:	f004 f98c 	bl	8015184 <st_int8_to_f32>
 8010e6c:	e78e      	b.n	8010d8c <node_convert+0xdc>
 8010e6e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8010e98 <node_convert+0x1e8>
 8010e72:	4633      	mov	r3, r6
 8010e74:	e752      	b.n	8010d1c <node_convert+0x6c>
 8010e76:	4622      	mov	r2, r4
 8010e78:	68b1      	ldr	r1, [r6, #8]
 8010e7a:	b003      	add	sp, #12
 8010e7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e80:	f003 bbdc 	b.w	801463c <st_f32_to_int8>
 8010e84:	6853      	ldr	r3, [r2, #4]
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	e7a7      	b.n	8010dda <node_convert+0x12a>
 8010e8a:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8010e98 <node_convert+0x1e8>
 8010e8e:	462b      	mov	r3, r5
 8010e90:	e764      	b.n	8010d5c <node_convert+0xac>
 8010e92:	2300      	movs	r3, #0
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	deff      	udf	#255	@ 0xff
 8010e98:	00000000 	.word	0x00000000

08010e9c <node_convert_integer>:
 8010e9c:	6982      	ldr	r2, [r0, #24]
 8010e9e:	8813      	ldrh	r3, [r2, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d056      	beq.n	8010f52 <node_convert_integer+0xb6>
 8010ea4:	b570      	push	{r4, r5, r6, lr}
 8010ea6:	6852      	ldr	r2, [r2, #4]
 8010ea8:	b082      	sub	sp, #8
 8010eaa:	6855      	ldr	r5, [r2, #4]
 8010eac:	b105      	cbz	r5, 8010eb0 <node_convert_integer+0x14>
 8010eae:	682d      	ldr	r5, [r5, #0]
 8010eb0:	2b01      	cmp	r3, #1
 8010eb2:	f000 80ca 	beq.w	801104a <node_convert_integer+0x1ae>
 8010eb6:	6916      	ldr	r6, [r2, #16]
 8010eb8:	b106      	cbz	r6, 8010ebc <node_convert_integer+0x20>
 8010eba:	6836      	ldr	r6, [r6, #0]
 8010ebc:	68ab      	ldr	r3, [r5, #8]
 8010ebe:	0a1b      	lsrs	r3, r3, #8
 8010ec0:	f000 80a2 	beq.w	8011008 <node_convert_integer+0x16c>
 8010ec4:	68e8      	ldr	r0, [r5, #12]
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010ecc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ed0:	4298      	cmp	r0, r3
 8010ed2:	fb01 f202 	mul.w	r2, r1, r2
 8010ed6:	d1f9      	bne.n	8010ecc <node_convert_integer+0x30>
 8010ed8:	682b      	ldr	r3, [r5, #0]
 8010eda:	6834      	ldr	r4, [r6, #0]
 8010edc:	b17b      	cbz	r3, 8010efe <node_convert_integer+0x62>
 8010ede:	6859      	ldr	r1, [r3, #4]
 8010ee0:	b169      	cbz	r1, 8010efe <node_convert_integer+0x62>
 8010ee2:	8858      	ldrh	r0, [r3, #2]
 8010ee4:	b158      	cbz	r0, 8010efe <node_convert_integer+0x62>
 8010ee6:	6809      	ldr	r1, [r1, #0]
 8010ee8:	ed91 7a00 	vldr	s14, [r1]
 8010eec:	b15c      	cbz	r4, 8010f06 <node_convert_integer+0x6a>
 8010eee:	6861      	ldr	r1, [r4, #4]
 8010ef0:	b149      	cbz	r1, 8010f06 <node_convert_integer+0x6a>
 8010ef2:	8860      	ldrh	r0, [r4, #2]
 8010ef4:	b138      	cbz	r0, 8010f06 <node_convert_integer+0x6a>
 8010ef6:	6809      	ldr	r1, [r1, #0]
 8010ef8:	edd1 7a00 	vldr	s15, [r1]
 8010efc:	e005      	b.n	8010f0a <node_convert_integer+0x6e>
 8010efe:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8011050 <node_convert_integer+0x1b4>
 8010f02:	2c00      	cmp	r4, #0
 8010f04:	d1f3      	bne.n	8010eee <node_convert_integer+0x52>
 8010f06:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011050 <node_convert_integer+0x1b4>
 8010f0a:	69a8      	ldr	r0, [r5, #24]
 8010f0c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010f10:	69b5      	ldr	r5, [r6, #24]
 8010f12:	6806      	ldr	r6, [r0, #0]
 8010f14:	6829      	ldr	r1, [r5, #0]
 8010f16:	0236      	lsls	r6, r6, #8
 8010f18:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 8010f1c:	d41b      	bmi.n	8010f56 <node_convert_integer+0xba>
 8010f1e:	2900      	cmp	r1, #0
 8010f20:	d153      	bne.n	8010fca <node_convert_integer+0x12e>
 8010f22:	6880      	ldr	r0, [r0, #8]
 8010f24:	68a9      	ldr	r1, [r5, #8]
 8010f26:	b13b      	cbz	r3, 8010f38 <node_convert_integer+0x9c>
 8010f28:	685d      	ldr	r5, [r3, #4]
 8010f2a:	2d00      	cmp	r5, #0
 8010f2c:	f000 8082 	beq.w	8011034 <node_convert_integer+0x198>
 8010f30:	885b      	ldrh	r3, [r3, #2]
 8010f32:	b10b      	cbz	r3, 8010f38 <node_convert_integer+0x9c>
 8010f34:	686b      	ldr	r3, [r5, #4]
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	b134      	cbz	r4, 8010f48 <node_convert_integer+0xac>
 8010f3a:	6865      	ldr	r5, [r4, #4]
 8010f3c:	2d00      	cmp	r5, #0
 8010f3e:	d06d      	beq.n	801101c <node_convert_integer+0x180>
 8010f40:	8864      	ldrh	r4, [r4, #2]
 8010f42:	b10c      	cbz	r4, 8010f48 <node_convert_integer+0xac>
 8010f44:	686c      	ldr	r4, [r5, #4]
 8010f46:	7824      	ldrb	r4, [r4, #0]
 8010f48:	9400      	str	r4, [sp, #0]
 8010f4a:	f001 f9c9 	bl	80122e0 <forward_lite_node_convert_integer_iu8ou8>
 8010f4e:	b002      	add	sp, #8
 8010f50:	bd70      	pop	{r4, r5, r6, pc}
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	deff      	udf	#255	@ 0xff
 8010f56:	6880      	ldr	r0, [r0, #8]
 8010f58:	b1b9      	cbz	r1, 8010f8a <node_convert_integer+0xee>
 8010f5a:	68a9      	ldr	r1, [r5, #8]
 8010f5c:	b13b      	cbz	r3, 8010f6e <node_convert_integer+0xd2>
 8010f5e:	685d      	ldr	r5, [r3, #4]
 8010f60:	2d00      	cmp	r5, #0
 8010f62:	d057      	beq.n	8011014 <node_convert_integer+0x178>
 8010f64:	885b      	ldrh	r3, [r3, #2]
 8010f66:	b113      	cbz	r3, 8010f6e <node_convert_integer+0xd2>
 8010f68:	686b      	ldr	r3, [r5, #4]
 8010f6a:	f993 3000 	ldrsb.w	r3, [r3]
 8010f6e:	b13c      	cbz	r4, 8010f80 <node_convert_integer+0xe4>
 8010f70:	6865      	ldr	r5, [r4, #4]
 8010f72:	2d00      	cmp	r5, #0
 8010f74:	d04c      	beq.n	8011010 <node_convert_integer+0x174>
 8010f76:	8864      	ldrh	r4, [r4, #2]
 8010f78:	b114      	cbz	r4, 8010f80 <node_convert_integer+0xe4>
 8010f7a:	686c      	ldr	r4, [r5, #4]
 8010f7c:	f994 4000 	ldrsb.w	r4, [r4]
 8010f80:	9400      	str	r4, [sp, #0]
 8010f82:	f001 f9a5 	bl	80122d0 <forward_lite_node_convert_integer_is8os8>
 8010f86:	b002      	add	sp, #8
 8010f88:	bd70      	pop	{r4, r5, r6, pc}
 8010f8a:	68a9      	ldr	r1, [r5, #8]
 8010f8c:	b13b      	cbz	r3, 8010f9e <node_convert_integer+0x102>
 8010f8e:	685d      	ldr	r5, [r3, #4]
 8010f90:	2d00      	cmp	r5, #0
 8010f92:	d04b      	beq.n	801102c <node_convert_integer+0x190>
 8010f94:	885b      	ldrh	r3, [r3, #2]
 8010f96:	b113      	cbz	r3, 8010f9e <node_convert_integer+0x102>
 8010f98:	686b      	ldr	r3, [r5, #4]
 8010f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8010f9e:	b134      	cbz	r4, 8010fae <node_convert_integer+0x112>
 8010fa0:	6865      	ldr	r5, [r4, #4]
 8010fa2:	2d00      	cmp	r5, #0
 8010fa4:	d03c      	beq.n	8011020 <node_convert_integer+0x184>
 8010fa6:	8864      	ldrh	r4, [r4, #2]
 8010fa8:	b10c      	cbz	r4, 8010fae <node_convert_integer+0x112>
 8010faa:	686c      	ldr	r4, [r5, #4]
 8010fac:	7824      	ldrb	r4, [r4, #0]
 8010fae:	eeb4 7a67 	vcmp.f32	s14, s15
 8010fb2:	9400      	str	r4, [sp, #0]
 8010fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb8:	d103      	bne.n	8010fc2 <node_convert_integer+0x126>
 8010fba:	f103 0580 	add.w	r5, r3, #128	@ 0x80
 8010fbe:	42a5      	cmp	r5, r4
 8010fc0:	d040      	beq.n	8011044 <node_convert_integer+0x1a8>
 8010fc2:	f001 f99f 	bl	8012304 <forward_lite_node_convert_integer_is8ou8>
 8010fc6:	b002      	add	sp, #8
 8010fc8:	bd70      	pop	{r4, r5, r6, pc}
 8010fca:	b12b      	cbz	r3, 8010fd8 <node_convert_integer+0x13c>
 8010fcc:	6859      	ldr	r1, [r3, #4]
 8010fce:	b349      	cbz	r1, 8011024 <node_convert_integer+0x188>
 8010fd0:	885b      	ldrh	r3, [r3, #2]
 8010fd2:	b10b      	cbz	r3, 8010fd8 <node_convert_integer+0x13c>
 8010fd4:	684b      	ldr	r3, [r1, #4]
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	b134      	cbz	r4, 8010fe8 <node_convert_integer+0x14c>
 8010fda:	6861      	ldr	r1, [r4, #4]
 8010fdc:	b1b1      	cbz	r1, 801100c <node_convert_integer+0x170>
 8010fde:	8864      	ldrh	r4, [r4, #2]
 8010fe0:	b114      	cbz	r4, 8010fe8 <node_convert_integer+0x14c>
 8010fe2:	6849      	ldr	r1, [r1, #4]
 8010fe4:	f991 4000 	ldrsb.w	r4, [r1]
 8010fe8:	eeb4 7a67 	vcmp.f32	s14, s15
 8010fec:	6880      	ldr	r0, [r0, #8]
 8010fee:	68a9      	ldr	r1, [r5, #8]
 8010ff0:	9400      	str	r4, [sp, #0]
 8010ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff6:	d103      	bne.n	8011000 <node_convert_integer+0x164>
 8010ff8:	f104 0580 	add.w	r5, r4, #128	@ 0x80
 8010ffc:	42ab      	cmp	r3, r5
 8010ffe:	d01e      	beq.n	801103e <node_convert_integer+0x1a2>
 8011000:	f001 f976 	bl	80122f0 <forward_lite_node_convert_integer_iu8os8>
 8011004:	b002      	add	sp, #8
 8011006:	bd70      	pop	{r4, r5, r6, pc}
 8011008:	2201      	movs	r2, #1
 801100a:	e765      	b.n	8010ed8 <node_convert_integer+0x3c>
 801100c:	460c      	mov	r4, r1
 801100e:	e7eb      	b.n	8010fe8 <node_convert_integer+0x14c>
 8011010:	462c      	mov	r4, r5
 8011012:	e7b5      	b.n	8010f80 <node_convert_integer+0xe4>
 8011014:	462b      	mov	r3, r5
 8011016:	2c00      	cmp	r4, #0
 8011018:	d1aa      	bne.n	8010f70 <node_convert_integer+0xd4>
 801101a:	e7b1      	b.n	8010f80 <node_convert_integer+0xe4>
 801101c:	462c      	mov	r4, r5
 801101e:	e793      	b.n	8010f48 <node_convert_integer+0xac>
 8011020:	462c      	mov	r4, r5
 8011022:	e7c4      	b.n	8010fae <node_convert_integer+0x112>
 8011024:	460b      	mov	r3, r1
 8011026:	2c00      	cmp	r4, #0
 8011028:	d1d7      	bne.n	8010fda <node_convert_integer+0x13e>
 801102a:	e7dd      	b.n	8010fe8 <node_convert_integer+0x14c>
 801102c:	462b      	mov	r3, r5
 801102e:	2c00      	cmp	r4, #0
 8011030:	d1b6      	bne.n	8010fa0 <node_convert_integer+0x104>
 8011032:	e7bc      	b.n	8010fae <node_convert_integer+0x112>
 8011034:	462b      	mov	r3, r5
 8011036:	2c00      	cmp	r4, #0
 8011038:	f47f af7f 	bne.w	8010f3a <node_convert_integer+0x9e>
 801103c:	e784      	b.n	8010f48 <node_convert_integer+0xac>
 801103e:	f001 f95f 	bl	8012300 <forward_lite_node_convert_integer_iu8os8_fast>
 8011042:	e784      	b.n	8010f4e <node_convert_integer+0xb2>
 8011044:	f001 f966 	bl	8012314 <forward_lite_node_convert_integer_is8ou8_fast>
 8011048:	e781      	b.n	8010f4e <node_convert_integer+0xb2>
 801104a:	2300      	movs	r3, #0
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	deff      	udf	#255	@ 0xff
 8011050:	00000000 	.word	0x00000000

08011054 <ai_check_custom_types>:
 8011054:	b082      	sub	sp, #8
 8011056:	4b12      	ldr	r3, [pc, #72]	@ (80110a0 <ai_check_custom_types+0x4c>)
 8011058:	9301      	str	r3, [sp, #4]
 801105a:	b118      	cbz	r0, 8011064 <ai_check_custom_types+0x10>
 801105c:	7803      	ldrb	r3, [r0, #0]
 801105e:	2b03      	cmp	r3, #3
 8011060:	d002      	beq.n	8011068 <ai_check_custom_types+0x14>
 8011062:	2000      	movs	r0, #0
 8011064:	b002      	add	sp, #8
 8011066:	4770      	bx	lr
 8011068:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801106c:	4293      	cmp	r3, r2
 801106e:	d004      	beq.n	801107a <ai_check_custom_types+0x26>
 8011070:	2001      	movs	r0, #1
 8011072:	f080 0001 	eor.w	r0, r0, #1
 8011076:	b002      	add	sp, #8
 8011078:	4770      	bx	lr
 801107a:	7842      	ldrb	r2, [r0, #1]
 801107c:	3001      	adds	r0, #1
 801107e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011082:	429a      	cmp	r2, r3
 8011084:	d1f4      	bne.n	8011070 <ai_check_custom_types+0x1c>
 8011086:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801108a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801108e:	429a      	cmp	r2, r3
 8011090:	d1ee      	bne.n	8011070 <ai_check_custom_types+0x1c>
 8011092:	7842      	ldrb	r2, [r0, #1]
 8011094:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011098:	429a      	cmp	r2, r3
 801109a:	d1e9      	bne.n	8011070 <ai_check_custom_types+0x1c>
 801109c:	2000      	movs	r0, #0
 801109e:	e7e8      	b.n	8011072 <ai_check_custom_types+0x1e>
 80110a0:	84048403 	.word	0x84048403

080110a4 <ai_layers_init_all>:
 80110a4:	2100      	movs	r1, #0
 80110a6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80110a8:	b13b      	cbz	r3, 80110ba <ai_layers_init_all+0x16>
 80110aa:	691a      	ldr	r2, [r3, #16]
 80110ac:	3101      	adds	r1, #1
 80110ae:	60d8      	str	r0, [r3, #12]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	4613      	mov	r3, r2
 80110b4:	d001      	beq.n	80110ba <ai_layers_init_all+0x16>
 80110b6:	2a00      	cmp	r2, #0
 80110b8:	d1f6      	bne.n	80110a8 <ai_layers_init_all+0x4>
 80110ba:	4608      	mov	r0, r1
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop

080110c0 <ai_layers_post_init_all>:
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	2500      	movs	r5, #0
 80110c4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80110c6:	b16c      	cbz	r4, 80110e4 <ai_layers_post_init_all+0x24>
 80110c8:	6863      	ldr	r3, [r4, #4]
 80110ca:	07db      	lsls	r3, r3, #31
 80110cc:	d504      	bpl.n	80110d8 <ai_layers_post_init_all+0x18>
 80110ce:	6a23      	ldr	r3, [r4, #32]
 80110d0:	4620      	mov	r0, r4
 80110d2:	b10b      	cbz	r3, 80110d8 <ai_layers_post_init_all+0x18>
 80110d4:	3501      	adds	r5, #1
 80110d6:	4798      	blx	r3
 80110d8:	6923      	ldr	r3, [r4, #16]
 80110da:	42a3      	cmp	r3, r4
 80110dc:	461c      	mov	r4, r3
 80110de:	d001      	beq.n	80110e4 <ai_layers_post_init_all+0x24>
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1f0      	bne.n	80110c6 <ai_layers_post_init_all+0x6>
 80110e4:	4628      	mov	r0, r5
 80110e6:	bd38      	pop	{r3, r4, r5, pc}

080110e8 <ai_layers_forward_all>:
 80110e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ec:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80110f0:	4604      	mov	r4, r0
 80110f2:	f1b8 0f00 	cmp.w	r8, #0
 80110f6:	d02a      	beq.n	801114e <ai_layers_forward_all+0x66>
 80110f8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80110fa:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80110fc:	b319      	cbz	r1, 8011146 <ai_layers_forward_all+0x5e>
 80110fe:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8011100:	2001      	movs	r0, #1
 8011102:	47c0      	blx	r8
 8011104:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8011106:	b1f6      	cbz	r6, 8011146 <ai_layers_forward_all+0x5e>
 8011108:	2700      	movs	r7, #0
 801110a:	4631      	mov	r1, r6
 801110c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801110e:	2002      	movs	r0, #2
 8011110:	47c0      	blx	r8
 8011112:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8011114:	4628      	mov	r0, r5
 8011116:	696b      	ldr	r3, [r5, #20]
 8011118:	4798      	blx	r3
 801111a:	692e      	ldr	r6, [r5, #16]
 801111c:	2003      	movs	r0, #3
 801111e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011120:	42b5      	cmp	r5, r6
 8011122:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8011124:	d007      	beq.n	8011136 <ai_layers_forward_all+0x4e>
 8011126:	47c0      	blx	r8
 8011128:	3701      	adds	r7, #1
 801112a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801112c:	2e00      	cmp	r6, #0
 801112e:	d1ec      	bne.n	801110a <ai_layers_forward_all+0x22>
 8011130:	4638      	mov	r0, r7
 8011132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011136:	2003      	movs	r0, #3
 8011138:	3701      	adds	r7, #1
 801113a:	47c0      	blx	r8
 801113c:	2300      	movs	r3, #0
 801113e:	4638      	mov	r0, r7
 8011140:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011146:	2700      	movs	r7, #0
 8011148:	4638      	mov	r0, r7
 801114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801114e:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8011150:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8011152:	2d00      	cmp	r5, #0
 8011154:	d0f7      	beq.n	8011146 <ai_layers_forward_all+0x5e>
 8011156:	4647      	mov	r7, r8
 8011158:	696b      	ldr	r3, [r5, #20]
 801115a:	4628      	mov	r0, r5
 801115c:	4798      	blx	r3
 801115e:	462b      	mov	r3, r5
 8011160:	692d      	ldr	r5, [r5, #16]
 8011162:	429d      	cmp	r5, r3
 8011164:	d004      	beq.n	8011170 <ai_layers_forward_all+0x88>
 8011166:	3701      	adds	r7, #1
 8011168:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801116a:	2d00      	cmp	r5, #0
 801116c:	d1f4      	bne.n	8011158 <ai_layers_forward_all+0x70>
 801116e:	e7df      	b.n	8011130 <ai_layers_forward_all+0x48>
 8011170:	2300      	movs	r3, #0
 8011172:	3701      	adds	r7, #1
 8011174:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011176:	e7db      	b.n	8011130 <ai_layers_forward_all+0x48>

08011178 <forward_conv2d_rgb_sssa8_ch>:
 8011178:	6982      	ldr	r2, [r0, #24]
 801117a:	8813      	ldrh	r3, [r2, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	f000 80a8 	beq.w	80112d2 <forward_conv2d_rgb_sssa8_ch+0x15a>
 8011182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011186:	6854      	ldr	r4, [r2, #4]
 8011188:	b097      	sub	sp, #92	@ 0x5c
 801118a:	6861      	ldr	r1, [r4, #4]
 801118c:	b101      	cbz	r1, 8011190 <forward_conv2d_rgb_sssa8_ch+0x18>
 801118e:	6809      	ldr	r1, [r1, #0]
 8011190:	2b01      	cmp	r3, #1
 8011192:	f000 80b7 	beq.w	8011304 <forward_conv2d_rgb_sssa8_ch+0x18c>
 8011196:	6922      	ldr	r2, [r4, #16]
 8011198:	b102      	cbz	r2, 801119c <forward_conv2d_rgb_sssa8_ch+0x24>
 801119a:	6812      	ldr	r2, [r2, #0]
 801119c:	2b02      	cmp	r3, #2
 801119e:	f000 80ac 	beq.w	80112fa <forward_conv2d_rgb_sssa8_ch+0x182>
 80111a2:	69e5      	ldr	r5, [r4, #28]
 80111a4:	2d00      	cmp	r5, #0
 80111a6:	f000 80a0 	beq.w	80112ea <forward_conv2d_rgb_sssa8_ch+0x172>
 80111aa:	8b26      	ldrh	r6, [r4, #24]
 80111ac:	f8d5 e000 	ldr.w	lr, [r5]
 80111b0:	2e01      	cmp	r6, #1
 80111b2:	f240 809c 	bls.w	80112ee <forward_conv2d_rgb_sssa8_ch+0x176>
 80111b6:	686d      	ldr	r5, [r5, #4]
 80111b8:	2b03      	cmp	r3, #3
 80111ba:	f000 80a6 	beq.w	801130a <forward_conv2d_rgb_sssa8_ch+0x192>
 80111be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f000 8096 	beq.w	80112f2 <forward_conv2d_rgb_sssa8_ch+0x17a>
 80111c6:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 80111c8:	b104      	cbz	r4, 80111cc <forward_conv2d_rgb_sssa8_ch+0x54>
 80111ca:	685a      	ldr	r2, [r3, #4]
 80111cc:	681c      	ldr	r4, [r3, #0]
 80111ce:	69ab      	ldr	r3, [r5, #24]
 80111d0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80111d4:	689b      	ldr	r3, [r3, #8]
 80111d6:	68d4      	ldr	r4, [r2, #12]
 80111d8:	9314      	str	r3, [sp, #80]	@ 0x50
 80111da:	68cb      	ldr	r3, [r1, #12]
 80111dc:	680d      	ldr	r5, [r1, #0]
 80111de:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80111e2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80111e4:	f8de 6000 	ldr.w	r6, [lr]
 80111e8:	889b      	ldrh	r3, [r3, #4]
 80111ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80111ec:	f8de 300c 	ldr.w	r3, [lr, #12]
 80111f0:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80111f4:	88a3      	ldrh	r3, [r4, #4]
 80111f6:	68a4      	ldr	r4, [r4, #8]
 80111f8:	9411      	str	r4, [sp, #68]	@ 0x44
 80111fa:	8d04      	ldrh	r4, [r0, #40]	@ 0x28
 80111fc:	9412      	str	r4, [sp, #72]	@ 0x48
 80111fe:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8011202:	9415      	str	r4, [sp, #84]	@ 0x54
 8011204:	6814      	ldr	r4, [r2, #0]
 8011206:	2d00      	cmp	r5, #0
 8011208:	d068      	beq.n	80112dc <forward_conv2d_rgb_sssa8_ch+0x164>
 801120a:	686f      	ldr	r7, [r5, #4]
 801120c:	2f00      	cmp	r7, #0
 801120e:	d065      	beq.n	80112dc <forward_conv2d_rgb_sssa8_ch+0x164>
 8011210:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8011214:	f1b8 0f00 	cmp.w	r8, #0
 8011218:	d060      	beq.n	80112dc <forward_conv2d_rgb_sssa8_ch+0x164>
 801121a:	683f      	ldr	r7, [r7, #0]
 801121c:	ed97 0a00 	vldr	s0, [r7]
 8011220:	2c00      	cmp	r4, #0
 8011222:	d058      	beq.n	80112d6 <forward_conv2d_rgb_sssa8_ch+0x15e>
 8011224:	6867      	ldr	r7, [r4, #4]
 8011226:	2f00      	cmp	r7, #0
 8011228:	d055      	beq.n	80112d6 <forward_conv2d_rgb_sssa8_ch+0x15e>
 801122a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 801122e:	f1b8 0f00 	cmp.w	r8, #0
 8011232:	d050      	beq.n	80112d6 <forward_conv2d_rgb_sssa8_ch+0x15e>
 8011234:	683f      	ldr	r7, [r7, #0]
 8011236:	edd7 0a00 	vldr	s1, [r7]
 801123a:	6997      	ldr	r7, [r2, #24]
 801123c:	6989      	ldr	r1, [r1, #24]
 801123e:	f8de 2018 	ldr.w	r2, [lr, #24]
 8011242:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8011246:	f890 8041 	ldrb.w	r8, [r0, #65]	@ 0x41
 801124a:	688f      	ldr	r7, [r1, #8]
 801124c:	6892      	ldr	r2, [r2, #8]
 801124e:	b116      	cbz	r6, 8011256 <forward_conv2d_rgb_sssa8_ch+0xde>
 8011250:	6876      	ldr	r6, [r6, #4]
 8011252:	b106      	cbz	r6, 8011256 <forward_conv2d_rgb_sssa8_ch+0xde>
 8011254:	6836      	ldr	r6, [r6, #0]
 8011256:	b13d      	cbz	r5, 8011268 <forward_conv2d_rgb_sssa8_ch+0xf0>
 8011258:	6869      	ldr	r1, [r5, #4]
 801125a:	2900      	cmp	r1, #0
 801125c:	d041      	beq.n	80112e2 <forward_conv2d_rgb_sssa8_ch+0x16a>
 801125e:	886d      	ldrh	r5, [r5, #2]
 8011260:	b115      	cbz	r5, 8011268 <forward_conv2d_rgb_sssa8_ch+0xf0>
 8011262:	6849      	ldr	r1, [r1, #4]
 8011264:	f991 5000 	ldrsb.w	r5, [r1]
 8011268:	b13c      	cbz	r4, 801127a <forward_conv2d_rgb_sssa8_ch+0x102>
 801126a:	6861      	ldr	r1, [r4, #4]
 801126c:	2900      	cmp	r1, #0
 801126e:	d03a      	beq.n	80112e6 <forward_conv2d_rgb_sssa8_ch+0x16e>
 8011270:	8864      	ldrh	r4, [r4, #2]
 8011272:	b114      	cbz	r4, 801127a <forward_conv2d_rgb_sssa8_ch+0x102>
 8011274:	6849      	ldr	r1, [r1, #4]
 8011276:	f991 4000 	ldrsb.w	r4, [r1]
 801127a:	edcd 0a0e 	vstr	s1, [sp, #56]	@ 0x38
 801127e:	ed8d 0a0d 	vstr	s0, [sp, #52]	@ 0x34
 8011282:	e9dc 0100 	ldrd	r0, r1, [ip]
 8011286:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801128a:	f005 f8d5 	bl	8016438 <ai_array_get_byte_size>
 801128e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011290:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8011294:	eddd 0a0e 	vldr	s1, [sp, #56]	@ 0x38
 8011298:	9109      	str	r1, [sp, #36]	@ 0x24
 801129a:	fa1f f189 	uxth.w	r1, r9
 801129e:	ed9d 0a0d 	vldr	s0, [sp, #52]	@ 0x34
 80112a2:	9504      	str	r5, [sp, #16]
 80112a4:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
 80112a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80112aa:	4638      	mov	r0, r7
 80112ac:	9303      	str	r3, [sp, #12]
 80112ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80112b0:	9302      	str	r3, [sp, #8]
 80112b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80112b4:	e9cd 4605 	strd	r4, r6, [sp, #20]
 80112b8:	fa1f f48a 	uxth.w	r4, sl
 80112bc:	9301      	str	r3, [sp, #4]
 80112be:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80112c2:	e9cd 8b07 	strd	r8, fp, [sp, #28]
 80112c6:	9400      	str	r4, [sp, #0]
 80112c8:	f002 f988 	bl	80135dc <forward_lite_conv2d_rgb_sssa8_ch>
 80112cc:	b017      	add	sp, #92	@ 0x5c
 80112ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	deff      	udf	#255	@ 0xff
 80112d6:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8011310 <forward_conv2d_rgb_sssa8_ch+0x198>
 80112da:	e7ae      	b.n	801123a <forward_conv2d_rgb_sssa8_ch+0xc2>
 80112dc:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8011310 <forward_conv2d_rgb_sssa8_ch+0x198>
 80112e0:	e79e      	b.n	8011220 <forward_conv2d_rgb_sssa8_ch+0xa8>
 80112e2:	460d      	mov	r5, r1
 80112e4:	e7c0      	b.n	8011268 <forward_conv2d_rgb_sssa8_ch+0xf0>
 80112e6:	460c      	mov	r4, r1
 80112e8:	e7c7      	b.n	801127a <forward_conv2d_rgb_sssa8_ch+0x102>
 80112ea:	46ae      	mov	lr, r5
 80112ec:	e764      	b.n	80111b8 <forward_conv2d_rgb_sssa8_ch+0x40>
 80112ee:	2500      	movs	r5, #0
 80112f0:	e762      	b.n	80111b8 <forward_conv2d_rgb_sssa8_ch+0x40>
 80112f2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80112f4:	b922      	cbnz	r2, 8011300 <forward_conv2d_rgb_sssa8_ch+0x188>
 80112f6:	6993      	ldr	r3, [r2, #24]
 80112f8:	deff      	udf	#255	@ 0xff
 80112fa:	2300      	movs	r3, #0
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	deff      	udf	#255	@ 0xff
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	deff      	udf	#255	@ 0xff
 8011304:	2300      	movs	r3, #0
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	deff      	udf	#255	@ 0xff
 801130a:	2300      	movs	r3, #0
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	deff      	udf	#255	@ 0xff
 8011310:	00000000 	.word	0x00000000

08011314 <forward_dw_3x3_sssa8_ch>:
 8011314:	6982      	ldr	r2, [r0, #24]
 8011316:	8813      	ldrh	r3, [r2, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	f000 80a4 	beq.w	8011466 <forward_dw_3x3_sssa8_ch+0x152>
 801131e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011322:	6854      	ldr	r4, [r2, #4]
 8011324:	b099      	sub	sp, #100	@ 0x64
 8011326:	6861      	ldr	r1, [r4, #4]
 8011328:	b101      	cbz	r1, 801132c <forward_dw_3x3_sssa8_ch+0x18>
 801132a:	6809      	ldr	r1, [r1, #0]
 801132c:	2b01      	cmp	r3, #1
 801132e:	f000 80b3 	beq.w	8011498 <forward_dw_3x3_sssa8_ch+0x184>
 8011332:	6922      	ldr	r2, [r4, #16]
 8011334:	b102      	cbz	r2, 8011338 <forward_dw_3x3_sssa8_ch+0x24>
 8011336:	6812      	ldr	r2, [r2, #0]
 8011338:	2b02      	cmp	r3, #2
 801133a:	f000 80a8 	beq.w	801148e <forward_dw_3x3_sssa8_ch+0x17a>
 801133e:	69e5      	ldr	r5, [r4, #28]
 8011340:	2d00      	cmp	r5, #0
 8011342:	f000 809c 	beq.w	801147e <forward_dw_3x3_sssa8_ch+0x16a>
 8011346:	8b26      	ldrh	r6, [r4, #24]
 8011348:	682f      	ldr	r7, [r5, #0]
 801134a:	2e01      	cmp	r6, #1
 801134c:	f240 8099 	bls.w	8011482 <forward_dw_3x3_sssa8_ch+0x16e>
 8011350:	686d      	ldr	r5, [r5, #4]
 8011352:	2b03      	cmp	r3, #3
 8011354:	f000 80a3 	beq.w	801149e <forward_dw_3x3_sssa8_ch+0x18a>
 8011358:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801135a:	2b00      	cmp	r3, #0
 801135c:	f000 8093 	beq.w	8011486 <forward_dw_3x3_sssa8_ch+0x172>
 8011360:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8011362:	b104      	cbz	r4, 8011366 <forward_dw_3x3_sssa8_ch+0x52>
 8011364:	685a      	ldr	r2, [r3, #4]
 8011366:	681c      	ldr	r4, [r3, #0]
 8011368:	69ab      	ldr	r3, [r5, #24]
 801136a:	68d6      	ldr	r6, [r2, #12]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8011372:	9316      	str	r3, [sp, #88]	@ 0x58
 8011374:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8011376:	68cc      	ldr	r4, [r1, #12]
 8011378:	9314      	str	r3, [sp, #80]	@ 0x50
 801137a:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801137c:	68f0      	ldr	r0, [r6, #12]
 801137e:	680d      	ldr	r5, [r1, #0]
 8011380:	9012      	str	r0, [sp, #72]	@ 0x48
 8011382:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8011386:	9315      	str	r3, [sp, #84]	@ 0x54
 8011388:	683e      	ldr	r6, [r7, #0]
 801138a:	88a3      	ldrh	r3, [r4, #4]
 801138c:	e9d4 0a02 	ldrd	r0, sl, [r4, #8]
 8011390:	6814      	ldr	r4, [r2, #0]
 8011392:	9013      	str	r0, [sp, #76]	@ 0x4c
 8011394:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8011398:	9017      	str	r0, [sp, #92]	@ 0x5c
 801139a:	2d00      	cmp	r5, #0
 801139c:	d068      	beq.n	8011470 <forward_dw_3x3_sssa8_ch+0x15c>
 801139e:	6868      	ldr	r0, [r5, #4]
 80113a0:	2800      	cmp	r0, #0
 80113a2:	d065      	beq.n	8011470 <forward_dw_3x3_sssa8_ch+0x15c>
 80113a4:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 80113a8:	f1be 0f00 	cmp.w	lr, #0
 80113ac:	d060      	beq.n	8011470 <forward_dw_3x3_sssa8_ch+0x15c>
 80113ae:	6800      	ldr	r0, [r0, #0]
 80113b0:	ed90 0a00 	vldr	s0, [r0]
 80113b4:	2c00      	cmp	r4, #0
 80113b6:	d058      	beq.n	801146a <forward_dw_3x3_sssa8_ch+0x156>
 80113b8:	6860      	ldr	r0, [r4, #4]
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d055      	beq.n	801146a <forward_dw_3x3_sssa8_ch+0x156>
 80113be:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 80113c2:	f1be 0f00 	cmp.w	lr, #0
 80113c6:	d050      	beq.n	801146a <forward_dw_3x3_sssa8_ch+0x156>
 80113c8:	6800      	ldr	r0, [r0, #0]
 80113ca:	edd0 0a00 	vldr	s1, [r0]
 80113ce:	6988      	ldr	r0, [r1, #24]
 80113d0:	6992      	ldr	r2, [r2, #24]
 80113d2:	69b9      	ldr	r1, [r7, #24]
 80113d4:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80113d8:	6887      	ldr	r7, [r0, #8]
 80113da:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80113de:	b116      	cbz	r6, 80113e6 <forward_dw_3x3_sssa8_ch+0xd2>
 80113e0:	6876      	ldr	r6, [r6, #4]
 80113e2:	b106      	cbz	r6, 80113e6 <forward_dw_3x3_sssa8_ch+0xd2>
 80113e4:	6836      	ldr	r6, [r6, #0]
 80113e6:	b13d      	cbz	r5, 80113f8 <forward_dw_3x3_sssa8_ch+0xe4>
 80113e8:	6869      	ldr	r1, [r5, #4]
 80113ea:	2900      	cmp	r1, #0
 80113ec:	d043      	beq.n	8011476 <forward_dw_3x3_sssa8_ch+0x162>
 80113ee:	886d      	ldrh	r5, [r5, #2]
 80113f0:	b115      	cbz	r5, 80113f8 <forward_dw_3x3_sssa8_ch+0xe4>
 80113f2:	6849      	ldr	r1, [r1, #4]
 80113f4:	f991 5000 	ldrsb.w	r5, [r1]
 80113f8:	b13c      	cbz	r4, 801140a <forward_dw_3x3_sssa8_ch+0xf6>
 80113fa:	6861      	ldr	r1, [r4, #4]
 80113fc:	2900      	cmp	r1, #0
 80113fe:	d03c      	beq.n	801147a <forward_dw_3x3_sssa8_ch+0x166>
 8011400:	8864      	ldrh	r4, [r4, #2]
 8011402:	b114      	cbz	r4, 801140a <forward_dw_3x3_sssa8_ch+0xf6>
 8011404:	6849      	ldr	r1, [r1, #4]
 8011406:	f991 4000 	ldrsb.w	r4, [r1]
 801140a:	9311      	str	r3, [sp, #68]	@ 0x44
 801140c:	edcd 0a10 	vstr	s1, [sp, #64]	@ 0x40
 8011410:	ed8d 0a0f 	vstr	s0, [sp, #60]	@ 0x3c
 8011414:	e9dc 0100 	ldrd	r0, r1, [ip]
 8011418:	f005 f80e 	bl	8016438 <ai_array_get_byte_size>
 801141c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801141e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 8011422:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
 8011426:	9209      	str	r2, [sp, #36]	@ 0x24
 8011428:	fa1f f28a 	uxth.w	r2, sl
 801142c:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 8011430:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8011434:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 8011438:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801143a:	4638      	mov	r0, r7
 801143c:	9303      	str	r3, [sp, #12]
 801143e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011440:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8011444:	9302      	str	r3, [sp, #8]
 8011446:	fa1f f48b 	uxth.w	r4, fp
 801144a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801144c:	9408      	str	r4, [sp, #32]
 801144e:	2400      	movs	r4, #0
 8011450:	e9cd 8300 	strd	r8, r3, [sp]
 8011454:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011456:	940a      	str	r4, [sp, #40]	@ 0x28
 8011458:	e9cd 6906 	strd	r6, r9, [sp, #24]
 801145c:	f001 f916 	bl	801268c <forward_lite_dw_3x3_sssa8_ch>
 8011460:	b019      	add	sp, #100	@ 0x64
 8011462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	deff      	udf	#255	@ 0xff
 801146a:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80114a4 <forward_dw_3x3_sssa8_ch+0x190>
 801146e:	e7ae      	b.n	80113ce <forward_dw_3x3_sssa8_ch+0xba>
 8011470:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80114a4 <forward_dw_3x3_sssa8_ch+0x190>
 8011474:	e79e      	b.n	80113b4 <forward_dw_3x3_sssa8_ch+0xa0>
 8011476:	460d      	mov	r5, r1
 8011478:	e7be      	b.n	80113f8 <forward_dw_3x3_sssa8_ch+0xe4>
 801147a:	460c      	mov	r4, r1
 801147c:	e7c5      	b.n	801140a <forward_dw_3x3_sssa8_ch+0xf6>
 801147e:	462f      	mov	r7, r5
 8011480:	e767      	b.n	8011352 <forward_dw_3x3_sssa8_ch+0x3e>
 8011482:	2500      	movs	r5, #0
 8011484:	e765      	b.n	8011352 <forward_dw_3x3_sssa8_ch+0x3e>
 8011486:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8011488:	b922      	cbnz	r2, 8011494 <forward_dw_3x3_sssa8_ch+0x180>
 801148a:	6993      	ldr	r3, [r2, #24]
 801148c:	deff      	udf	#255	@ 0xff
 801148e:	2300      	movs	r3, #0
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	deff      	udf	#255	@ 0xff
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	deff      	udf	#255	@ 0xff
 8011498:	2300      	movs	r3, #0
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	deff      	udf	#255	@ 0xff
 801149e:	2300      	movs	r3, #0
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	deff      	udf	#255	@ 0xff
 80114a4:	00000000 	.word	0x00000000

080114a8 <forward_pad>:
 80114a8:	7f03      	ldrb	r3, [r0, #28]
 80114aa:	2b03      	cmp	r3, #3
 80114ac:	d80b      	bhi.n	80114c6 <forward_pad+0x1e>
 80114ae:	e8df f003 	tbb	[pc, r3]
 80114b2:	0608      	.short	0x0608
 80114b4:	0204      	.short	0x0204
 80114b6:	f000 baff 	b.w	8011ab8 <forward_pad_8bit_ch1st_3x3_constant>
 80114ba:	f000 bb8f 	b.w	8011bdc <forward_pad_edge>
 80114be:	f000 bbcf 	b.w	8011c60 <forward_pad_reflect>
 80114c2:	f000 bb43 	b.w	8011b4c <forward_pad_constant>
 80114c6:	4770      	bx	lr

080114c8 <forward_concat>:
 80114c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114cc:	ed2d 8b06 	vpush	{d8-d10}
 80114d0:	6982      	ldr	r2, [r0, #24]
 80114d2:	b087      	sub	sp, #28
 80114d4:	8813      	ldrh	r3, [r2, #0]
 80114d6:	9002      	str	r0, [sp, #8]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	f000 828e 	beq.w	80119fa <forward_concat+0x532>
 80114de:	2b01      	cmp	r3, #1
 80114e0:	6856      	ldr	r6, [r2, #4]
 80114e2:	f000 828a 	beq.w	80119fa <forward_concat+0x532>
 80114e6:	6933      	ldr	r3, [r6, #16]
 80114e8:	9301      	str	r3, [sp, #4]
 80114ea:	b10b      	cbz	r3, 80114f0 <forward_concat+0x28>
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	9301      	str	r3, [sp, #4]
 80114f0:	8830      	ldrh	r0, [r6, #0]
 80114f2:	2300      	movs	r3, #0
 80114f4:	4604      	mov	r4, r0
 80114f6:	4619      	mov	r1, r3
 80114f8:	e00c      	b.n	8011514 <forward_concat+0x4c>
 80114fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80114fe:	b172      	cbz	r2, 801151e <forward_concat+0x56>
 8011500:	6992      	ldr	r2, [r2, #24]
 8011502:	3301      	adds	r3, #1
 8011504:	6812      	ldr	r2, [r2, #0]
 8011506:	f3c2 4243 	ubfx	r2, r2, #17, #4
 801150a:	2a01      	cmp	r2, #1
 801150c:	bf0c      	ite	eq
 801150e:	2201      	moveq	r2, #1
 8011510:	2202      	movne	r2, #2
 8011512:	4311      	orrs	r1, r2
 8011514:	4298      	cmp	r0, r3
 8011516:	d002      	beq.n	801151e <forward_concat+0x56>
 8011518:	6872      	ldr	r2, [r6, #4]
 801151a:	2a00      	cmp	r2, #0
 801151c:	d1ed      	bne.n	80114fa <forward_concat+0x32>
 801151e:	9b01      	ldr	r3, [sp, #4]
 8011520:	699a      	ldr	r2, [r3, #24]
 8011522:	6813      	ldr	r3, [r2, #0]
 8011524:	6897      	ldr	r7, [r2, #8]
 8011526:	f3c3 4243 	ubfx	r2, r3, #17, #4
 801152a:	2a01      	cmp	r2, #1
 801152c:	d137      	bne.n	801159e <forward_concat+0xd6>
 801152e:	2901      	cmp	r1, #1
 8011530:	d13c      	bne.n	80115ac <forward_concat+0xe4>
 8011532:	f04f 0b00 	mov.w	fp, #0
 8011536:	455c      	cmp	r4, fp
 8011538:	d933      	bls.n	80115a2 <forward_concat+0xda>
 801153a:	6873      	ldr	r3, [r6, #4]
 801153c:	b38b      	cbz	r3, 80115a2 <forward_concat+0xda>
 801153e:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
 8011542:	b374      	cbz	r4, 80115a2 <forward_concat+0xda>
 8011544:	9b02      	ldr	r3, [sp, #8]
 8011546:	6961      	ldr	r1, [r4, #20]
 8011548:	69d8      	ldr	r0, [r3, #28]
 801154a:	68e2      	ldr	r2, [r4, #12]
 801154c:	9b01      	ldr	r3, [sp, #4]
 801154e:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8011552:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801155c:	fb02 f905 	mul.w	r9, r2, r5
 8011560:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011564:	e9dc 0100 	ldrd	r0, r1, [ip]
 8011568:	fb03 f805 	mul.w	r8, r3, r5
 801156c:	f004 ff64 	bl	8016438 <ai_array_get_byte_size>
 8011570:	69a3      	ldr	r3, [r4, #24]
 8011572:	fbb0 f0f9 	udiv	r0, r0, r9
 8011576:	689c      	ldr	r4, [r3, #8]
 8011578:	fb09 4500 	mla	r5, r9, r0, r4
 801157c:	42ac      	cmp	r4, r5
 801157e:	d209      	bcs.n	8011594 <forward_concat+0xcc>
 8011580:	46ba      	mov	sl, r7
 8011582:	4620      	mov	r0, r4
 8011584:	444c      	add	r4, r9
 8011586:	4651      	mov	r1, sl
 8011588:	464a      	mov	r2, r9
 801158a:	f003 fa71 	bl	8014a70 <st_int8_copy>
 801158e:	42a5      	cmp	r5, r4
 8011590:	44c2      	add	sl, r8
 8011592:	d8f6      	bhi.n	8011582 <forward_concat+0xba>
 8011594:	444f      	add	r7, r9
 8011596:	f10b 0b01 	add.w	fp, fp, #1
 801159a:	8834      	ldrh	r4, [r6, #0]
 801159c:	e7cb      	b.n	8011536 <forward_concat+0x6e>
 801159e:	2901      	cmp	r1, #1
 80115a0:	d108      	bne.n	80115b4 <forward_concat+0xec>
 80115a2:	b007      	add	sp, #28
 80115a4:	ecbd 8b06 	vpop	{d8-d10}
 80115a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ac:	2a01      	cmp	r2, #1
 80115ae:	d1f6      	bne.n	801159e <forward_concat+0xd6>
 80115b0:	078a      	lsls	r2, r1, #30
 80115b2:	d4f6      	bmi.n	80115a2 <forward_concat+0xda>
 80115b4:	9a01      	ldr	r2, [sp, #4]
 80115b6:	6811      	ldr	r1, [r2, #0]
 80115b8:	460c      	mov	r4, r1
 80115ba:	2900      	cmp	r1, #0
 80115bc:	f000 8207 	beq.w	80119ce <forward_concat+0x506>
 80115c0:	684a      	ldr	r2, [r1, #4]
 80115c2:	2a00      	cmp	r2, #0
 80115c4:	f000 8203 	beq.w	80119ce <forward_concat+0x506>
 80115c8:	8849      	ldrh	r1, [r1, #2]
 80115ca:	2900      	cmp	r1, #0
 80115cc:	f000 81ff 	beq.w	80119ce <forward_concat+0x506>
 80115d0:	6812      	ldr	r2, [r2, #0]
 80115d2:	edd2 8a00 	vldr	s17, [r2]
 80115d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80115da:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 80115de:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 80115e2:	9603      	str	r6, [sp, #12]
 80115e4:	9305      	str	r3, [sp, #20]
 80115e6:	2300      	movs	r3, #0
 80115e8:	eec7 9aa8 	vdiv.f32	s19, s15, s17
 80115ec:	ed9f 8ab1 	vldr	s16, [pc, #708]	@ 80118b4 <forward_concat+0x3ec>
 80115f0:	ed9f 9ab1 	vldr	s18, [pc, #708]	@ 80118b8 <forward_concat+0x3f0>
 80115f4:	4626      	mov	r6, r4
 80115f6:	4699      	mov	r9, r3
 80115f8:	4548      	cmp	r0, r9
 80115fa:	d9d2      	bls.n	80115a2 <forward_concat+0xda>
 80115fc:	9b03      	ldr	r3, [sp, #12]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d0ce      	beq.n	80115a2 <forward_concat+0xda>
 8011604:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d0ca      	beq.n	80115a2 <forward_concat+0xda>
 801160c:	9a02      	ldr	r2, [sp, #8]
 801160e:	9304      	str	r3, [sp, #16]
 8011610:	69d2      	ldr	r2, [r2, #28]
 8011612:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
 8011616:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 801161a:	68d9      	ldr	r1, [r3, #12]
 801161c:	9b01      	ldr	r3, [sp, #4]
 801161e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011622:	fb01 fb04 	mul.w	fp, r1, r4
 8011626:	68d9      	ldr	r1, [r3, #12]
 8011628:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801162c:	fb02 f804 	mul.w	r8, r2, r4
 8011630:	e9d0 4100 	ldrd	r4, r1, [r0]
 8011634:	4620      	mov	r0, r4
 8011636:	f004 feff 	bl	8016438 <ai_array_get_byte_size>
 801163a:	9b04      	ldr	r3, [sp, #16]
 801163c:	f3c4 4243 	ubfx	r2, r4, #17, #4
 8011640:	6999      	ldr	r1, [r3, #24]
 8011642:	2a01      	cmp	r2, #1
 8011644:	688c      	ldr	r4, [r1, #8]
 8011646:	fbb0 f0fb 	udiv	r0, r0, fp
 801164a:	fb0b 4500 	mla	r5, fp, r0, r4
 801164e:	d05f      	beq.n	8011710 <forward_concat+0x248>
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	2a00      	cmp	r2, #0
 8011654:	f000 80d1 	beq.w	80117fa <forward_concat+0x332>
 8011658:	6851      	ldr	r1, [r2, #4]
 801165a:	2900      	cmp	r1, #0
 801165c:	f000 813f 	beq.w	80118de <forward_concat+0x416>
 8011660:	8850      	ldrh	r0, [r2, #2]
 8011662:	2800      	cmp	r0, #0
 8011664:	f000 8138 	beq.w	80118d8 <forward_concat+0x410>
 8011668:	680b      	ldr	r3, [r1, #0]
 801166a:	edd3 6a00 	vldr	s13, [r3]
 801166e:	684b      	ldr	r3, [r1, #4]
 8011670:	f993 0000 	ldrsb.w	r0, [r3]
 8011674:	2e00      	cmp	r6, #0
 8011676:	f000 80c6 	beq.w	8011806 <forward_concat+0x33e>
 801167a:	6873      	ldr	r3, [r6, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	f000 8132 	beq.w	80118e6 <forward_concat+0x41e>
 8011682:	8871      	ldrh	r1, [r6, #2]
 8011684:	b111      	cbz	r1, 801168c <forward_concat+0x1c4>
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	f993 1000 	ldrsb.w	r1, [r3]
 801168c:	eef4 8a66 	vcmp.f32	s17, s13
 8011690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011694:	bf0c      	ite	eq
 8011696:	2301      	moveq	r3, #1
 8011698:	2300      	movne	r3, #0
 801169a:	4288      	cmp	r0, r1
 801169c:	d102      	bne.n	80116a4 <forward_concat+0x1dc>
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f040 80b3 	bne.w	801180a <forward_concat+0x342>
 80116a4:	9905      	ldr	r1, [sp, #20]
 80116a6:	2900      	cmp	r1, #0
 80116a8:	d17c      	bne.n	80117a4 <forward_concat+0x2dc>
 80116aa:	2a00      	cmp	r2, #0
 80116ac:	f000 8192 	beq.w	80119d4 <forward_concat+0x50c>
 80116b0:	6851      	ldr	r1, [r2, #4]
 80116b2:	2900      	cmp	r1, #0
 80116b4:	f000 8184 	beq.w	80119c0 <forward_concat+0x4f8>
 80116b8:	8852      	ldrh	r2, [r2, #2]
 80116ba:	2a00      	cmp	r2, #0
 80116bc:	f000 8180 	beq.w	80119c0 <forward_concat+0x4f8>
 80116c0:	684a      	ldr	r2, [r1, #4]
 80116c2:	f892 c000 	ldrb.w	ip, [r2]
 80116c6:	2e00      	cmp	r6, #0
 80116c8:	f000 817f 	beq.w	80119ca <forward_concat+0x502>
 80116cc:	6871      	ldr	r1, [r6, #4]
 80116ce:	2900      	cmp	r1, #0
 80116d0:	f000 8186 	beq.w	80119e0 <forward_concat+0x518>
 80116d4:	8872      	ldrh	r2, [r6, #2]
 80116d6:	b10a      	cbz	r2, 80116dc <forward_concat+0x214>
 80116d8:	684a      	ldr	r2, [r1, #4]
 80116da:	7812      	ldrb	r2, [r2, #0]
 80116dc:	4594      	cmp	ip, r2
 80116de:	f040 8107 	bne.w	80118f0 <forward_concat+0x428>
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f000 8104 	beq.w	80118f0 <forward_concat+0x428>
 80116e8:	42ac      	cmp	r4, r5
 80116ea:	d209      	bcs.n	8011700 <forward_concat+0x238>
 80116ec:	46ba      	mov	sl, r7
 80116ee:	4620      	mov	r0, r4
 80116f0:	445c      	add	r4, fp
 80116f2:	4651      	mov	r1, sl
 80116f4:	465a      	mov	r2, fp
 80116f6:	f003 f9bb 	bl	8014a70 <st_int8_copy>
 80116fa:	42a5      	cmp	r5, r4
 80116fc:	44c2      	add	sl, r8
 80116fe:	d8f6      	bhi.n	80116ee <forward_concat+0x226>
 8011700:	eb07 0e0b 	add.w	lr, r7, fp
 8011704:	4677      	mov	r7, lr
 8011706:	9b03      	ldr	r3, [sp, #12]
 8011708:	f109 0901 	add.w	r9, r9, #1
 801170c:	8818      	ldrh	r0, [r3, #0]
 801170e:	e773      	b.n	80115f8 <forward_concat+0x130>
 8011710:	f1bb 0f00 	cmp.w	fp, #0
 8011714:	4659      	mov	r1, fp
 8011716:	9b05      	ldr	r3, [sp, #20]
 8011718:	bfb8      	it	lt
 801171a:	f10b 0103 	addlt.w	r1, fp, #3
 801171e:	1089      	asrs	r1, r1, #2
 8011720:	2b00      	cmp	r3, #0
 8011722:	f040 8082 	bne.w	801182a <forward_concat+0x362>
 8011726:	2e00      	cmp	r6, #0
 8011728:	f000 80df 	beq.w	80118ea <forward_concat+0x422>
 801172c:	6873      	ldr	r3, [r6, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	f000 80db 	beq.w	80118ea <forward_concat+0x422>
 8011734:	8872      	ldrh	r2, [r6, #2]
 8011736:	2a00      	cmp	r2, #0
 8011738:	f000 80d7 	beq.w	80118ea <forward_concat+0x422>
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	ee06 3a90 	vmov	s13, r3
 8011744:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011748:	ee76 6a8a 	vadd.f32	s13, s13, s20
 801174c:	42ac      	cmp	r4, r5
 801174e:	d227      	bcs.n	80117a0 <forward_concat+0x2d8>
 8011750:	f1bb 0f03 	cmp.w	fp, #3
 8011754:	eba8 0801 	sub.w	r8, r8, r1
 8011758:	dd22      	ble.n	80117a0 <forward_concat+0x2d8>
 801175a:	46be      	mov	lr, r7
 801175c:	46f4      	mov	ip, lr
 801175e:	4620      	mov	r0, r4
 8011760:	2200      	movs	r2, #0
 8011762:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011766:	eef0 7a66 	vmov.f32	s15, s13
 801176a:	ee07 3a10 	vmov	s14, r3
 801176e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011772:	eee7 7a29 	vfma.f32	s15, s14, s19
 8011776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801177a:	ee17 3a90 	vmov	r3, s15
 801177e:	f383 0308 	usat	r3, #8, r3
 8011782:	3201      	adds	r2, #1
 8011784:	f80c 3b01 	strb.w	r3, [ip], #1
 8011788:	4291      	cmp	r1, r2
 801178a:	dcea      	bgt.n	8011762 <forward_concat+0x29a>
 801178c:	f1bb 0f03 	cmp.w	fp, #3
 8011790:	bfcc      	ite	gt
 8011792:	460b      	movgt	r3, r1
 8011794:	2301      	movle	r3, #1
 8011796:	441c      	add	r4, r3
 8011798:	4443      	add	r3, r8
 801179a:	42a5      	cmp	r5, r4
 801179c:	449e      	add	lr, r3
 801179e:	d8dd      	bhi.n	801175c <forward_concat+0x294>
 80117a0:	440f      	add	r7, r1
 80117a2:	e7b0      	b.n	8011706 <forward_concat+0x23e>
 80117a4:	b142      	cbz	r2, 80117b8 <forward_concat+0x2f0>
 80117a6:	6851      	ldr	r1, [r2, #4]
 80117a8:	2900      	cmp	r1, #0
 80117aa:	f000 811b 	beq.w	80119e4 <forward_concat+0x51c>
 80117ae:	8852      	ldrh	r2, [r2, #2]
 80117b0:	b112      	cbz	r2, 80117b8 <forward_concat+0x2f0>
 80117b2:	684a      	ldr	r2, [r1, #4]
 80117b4:	f992 2000 	ldrsb.w	r2, [r2]
 80117b8:	2e00      	cmp	r6, #0
 80117ba:	f000 810d 	beq.w	80119d8 <forward_concat+0x510>
 80117be:	6870      	ldr	r0, [r6, #4]
 80117c0:	2800      	cmp	r0, #0
 80117c2:	f000 810b 	beq.w	80119dc <forward_concat+0x514>
 80117c6:	8871      	ldrh	r1, [r6, #2]
 80117c8:	b111      	cbz	r1, 80117d0 <forward_concat+0x308>
 80117ca:	6841      	ldr	r1, [r0, #4]
 80117cc:	f991 1000 	ldrsb.w	r1, [r1]
 80117d0:	428a      	cmp	r2, r1
 80117d2:	f040 80bd 	bne.w	8011950 <forward_concat+0x488>
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f000 80ba 	beq.w	8011950 <forward_concat+0x488>
 80117dc:	42ac      	cmp	r4, r5
 80117de:	d28f      	bcs.n	8011700 <forward_concat+0x238>
 80117e0:	46ba      	mov	sl, r7
 80117e2:	4620      	mov	r0, r4
 80117e4:	445c      	add	r4, fp
 80117e6:	4651      	mov	r1, sl
 80117e8:	465a      	mov	r2, fp
 80117ea:	f003 f941 	bl	8014a70 <st_int8_copy>
 80117ee:	42a5      	cmp	r5, r4
 80117f0:	44c2      	add	sl, r8
 80117f2:	d8f6      	bhi.n	80117e2 <forward_concat+0x31a>
 80117f4:	eb07 0e0b 	add.w	lr, r7, fp
 80117f8:	e784      	b.n	8011704 <forward_concat+0x23c>
 80117fa:	eef0 6a49 	vmov.f32	s13, s18
 80117fe:	4610      	mov	r0, r2
 8011800:	2e00      	cmp	r6, #0
 8011802:	f47f af3a 	bne.w	801167a <forward_concat+0x1b2>
 8011806:	4631      	mov	r1, r6
 8011808:	e740      	b.n	801168c <forward_concat+0x1c4>
 801180a:	42ac      	cmp	r4, r5
 801180c:	f4bf af78 	bcs.w	8011700 <forward_concat+0x238>
 8011810:	46ba      	mov	sl, r7
 8011812:	4620      	mov	r0, r4
 8011814:	445c      	add	r4, fp
 8011816:	4651      	mov	r1, sl
 8011818:	465a      	mov	r2, fp
 801181a:	f003 f929 	bl	8014a70 <st_int8_copy>
 801181e:	42a5      	cmp	r5, r4
 8011820:	44c2      	add	sl, r8
 8011822:	d8f6      	bhi.n	8011812 <forward_concat+0x34a>
 8011824:	eb07 0e0b 	add.w	lr, r7, fp
 8011828:	e76c      	b.n	8011704 <forward_concat+0x23c>
 801182a:	2e00      	cmp	r6, #0
 801182c:	f000 80dc 	beq.w	80119e8 <forward_concat+0x520>
 8011830:	6873      	ldr	r3, [r6, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	f000 80de 	beq.w	80119f4 <forward_concat+0x52c>
 8011838:	8872      	ldrh	r2, [r6, #2]
 801183a:	2a00      	cmp	r2, #0
 801183c:	f000 80d7 	beq.w	80119ee <forward_concat+0x526>
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	f993 3000 	ldrsb.w	r3, [r3]
 8011846:	ee06 3a90 	vmov	s13, r3
 801184a:	42ac      	cmp	r4, r5
 801184c:	d2a8      	bcs.n	80117a0 <forward_concat+0x2d8>
 801184e:	f1bb 0f03 	cmp.w	fp, #3
 8011852:	eba8 0801 	sub.w	r8, r8, r1
 8011856:	dda3      	ble.n	80117a0 <forward_concat+0x2d8>
 8011858:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801185c:	46be      	mov	lr, r7
 801185e:	46f4      	mov	ip, lr
 8011860:	4620      	mov	r0, r4
 8011862:	2200      	movs	r2, #0
 8011864:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011868:	eef0 7a66 	vmov.f32	s15, s13
 801186c:	ee07 3a10 	vmov	s14, r3
 8011870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011874:	eee7 7a29 	vfma.f32	s15, s14, s19
 8011878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011880:	d41c      	bmi.n	80118bc <forward_concat+0x3f4>
 8011882:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8011886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801188a:	ee17 3a90 	vmov	r3, s15
 801188e:	f303 0307 	ssat	r3, #8, r3
 8011892:	3201      	adds	r2, #1
 8011894:	f80c 3b01 	strb.w	r3, [ip], #1
 8011898:	4291      	cmp	r1, r2
 801189a:	dce3      	bgt.n	8011864 <forward_concat+0x39c>
 801189c:	f1bb 0f03 	cmp.w	fp, #3
 80118a0:	bfcc      	ite	gt
 80118a2:	460b      	movgt	r3, r1
 80118a4:	2301      	movle	r3, #1
 80118a6:	441c      	add	r4, r3
 80118a8:	4443      	add	r3, r8
 80118aa:	42a5      	cmp	r5, r4
 80118ac:	449e      	add	lr, r3
 80118ae:	d8d6      	bhi.n	801185e <forward_concat+0x396>
 80118b0:	440f      	add	r7, r1
 80118b2:	e728      	b.n	8011706 <forward_concat+0x23e>
 80118b4:	3efffffc 	.word	0x3efffffc
 80118b8:	00000000 	.word	0x00000000
 80118bc:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80118c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118c4:	ee17 3a90 	vmov	r3, s15
 80118c8:	f303 0307 	ssat	r3, #8, r3
 80118cc:	3201      	adds	r2, #1
 80118ce:	f80c 3b01 	strb.w	r3, [ip], #1
 80118d2:	428a      	cmp	r2, r1
 80118d4:	dbc6      	blt.n	8011864 <forward_concat+0x39c>
 80118d6:	e7e1      	b.n	801189c <forward_concat+0x3d4>
 80118d8:	eef0 6a49 	vmov.f32	s13, s18
 80118dc:	e6ca      	b.n	8011674 <forward_concat+0x1ac>
 80118de:	eef0 6a49 	vmov.f32	s13, s18
 80118e2:	4608      	mov	r0, r1
 80118e4:	e6c6      	b.n	8011674 <forward_concat+0x1ac>
 80118e6:	4619      	mov	r1, r3
 80118e8:	e6d0      	b.n	801168c <forward_concat+0x1c4>
 80118ea:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80118ee:	e72d      	b.n	801174c <forward_concat+0x284>
 80118f0:	42ac      	cmp	r4, r5
 80118f2:	ee69 6aa6 	vmul.f32	s13, s19, s13
 80118f6:	f4bf af03 	bcs.w	8011700 <forward_concat+0x238>
 80118fa:	f1bb 0f00 	cmp.w	fp, #0
 80118fe:	f77f aeff 	ble.w	8011700 <forward_concat+0x238>
 8011902:	ee07 2a90 	vmov	s15, r2
 8011906:	eb07 0e0b 	add.w	lr, r7, fp
 801190a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801190e:	4670      	mov	r0, lr
 8011910:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8011914:	463a      	mov	r2, r7
 8011916:	4621      	mov	r1, r4
 8011918:	f811 3b01 	ldrb.w	r3, [r1], #1
 801191c:	eeb0 7a46 	vmov.f32	s14, s12
 8011920:	eba3 030c 	sub.w	r3, r3, ip
 8011924:	ee07 3a90 	vmov	s15, r3
 8011928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801192c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011930:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8011934:	ee17 3a90 	vmov	r3, s15
 8011938:	f383 0308 	usat	r3, #8, r3
 801193c:	f802 3b01 	strb.w	r3, [r2], #1
 8011940:	4282      	cmp	r2, r0
 8011942:	d1e9      	bne.n	8011918 <forward_concat+0x450>
 8011944:	445c      	add	r4, fp
 8011946:	4447      	add	r7, r8
 8011948:	4440      	add	r0, r8
 801194a:	42ac      	cmp	r4, r5
 801194c:	d3e2      	bcc.n	8011914 <forward_concat+0x44c>
 801194e:	e6d9      	b.n	8011704 <forward_concat+0x23c>
 8011950:	42ac      	cmp	r4, r5
 8011952:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8011956:	f4bf aed3 	bcs.w	8011700 <forward_concat+0x238>
 801195a:	f1bb 0f00 	cmp.w	fp, #0
 801195e:	f77f aecf 	ble.w	8011700 <forward_concat+0x238>
 8011962:	ee07 1a90 	vmov	s15, r1
 8011966:	eb04 000b 	add.w	r0, r4, fp
 801196a:	46bc      	mov	ip, r7
 801196c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8011970:	4601      	mov	r1, r0
 8011972:	46e6      	mov	lr, ip
 8011974:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8011978:	1a9b      	subs	r3, r3, r2
 801197a:	ee07 3a90 	vmov	s15, r3
 801197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011982:	eef0 7a46 	vmov.f32	s15, s12
 8011986:	eee7 7a26 	vfma.f32	s15, s14, s13
 801198a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011992:	bf4c      	ite	mi
 8011994:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 8011998:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 801199c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80119a0:	ee17 3a90 	vmov	r3, s15
 80119a4:	f303 0307 	ssat	r3, #8, r3
 80119a8:	428c      	cmp	r4, r1
 80119aa:	f80e 3b01 	strb.w	r3, [lr], #1
 80119ae:	d1e1      	bne.n	8011974 <forward_concat+0x4ac>
 80119b0:	42a8      	cmp	r0, r5
 80119b2:	44c4      	add	ip, r8
 80119b4:	4459      	add	r1, fp
 80119b6:	4604      	mov	r4, r0
 80119b8:	f4bf aea2 	bcs.w	8011700 <forward_concat+0x238>
 80119bc:	4458      	add	r0, fp
 80119be:	e7d8      	b.n	8011972 <forward_concat+0x4aa>
 80119c0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80119c4:	2e00      	cmp	r6, #0
 80119c6:	f47f ae81 	bne.w	80116cc <forward_concat+0x204>
 80119ca:	4632      	mov	r2, r6
 80119cc:	e686      	b.n	80116dc <forward_concat+0x214>
 80119ce:	ed5f 8a46 	vldr	s17, [pc, #-280]	@ 80118b8 <forward_concat+0x3f0>
 80119d2:	e600      	b.n	80115d6 <forward_concat+0x10e>
 80119d4:	468c      	mov	ip, r1
 80119d6:	e676      	b.n	80116c6 <forward_concat+0x1fe>
 80119d8:	4631      	mov	r1, r6
 80119da:	e6f9      	b.n	80117d0 <forward_concat+0x308>
 80119dc:	4601      	mov	r1, r0
 80119de:	e6f7      	b.n	80117d0 <forward_concat+0x308>
 80119e0:	460a      	mov	r2, r1
 80119e2:	e67b      	b.n	80116dc <forward_concat+0x214>
 80119e4:	460a      	mov	r2, r1
 80119e6:	e6e7      	b.n	80117b8 <forward_concat+0x2f0>
 80119e8:	ee06 6a90 	vmov	s13, r6
 80119ec:	e72d      	b.n	801184a <forward_concat+0x382>
 80119ee:	ee06 2a90 	vmov	s13, r2
 80119f2:	e72a      	b.n	801184a <forward_concat+0x382>
 80119f4:	ee06 3a90 	vmov	s13, r3
 80119f8:	e727      	b.n	801184a <forward_concat+0x382>
 80119fa:	2300      	movs	r3, #0
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	deff      	udf	#255	@ 0xff

08011a00 <forward_sm_integer>:
 8011a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a04:	6983      	ldr	r3, [r0, #24]
 8011a06:	b086      	sub	sp, #24
 8011a08:	881f      	ldrh	r7, [r3, #0]
 8011a0a:	2f00      	cmp	r7, #0
 8011a0c:	d042      	beq.n	8011a94 <forward_sm_integer+0x94>
 8011a0e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8011a12:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8011a16:	b106      	cbz	r6, 8011a1a <forward_sm_integer+0x1a>
 8011a18:	6836      	ldr	r6, [r6, #0]
 8011a1a:	2f01      	cmp	r7, #1
 8011a1c:	d043      	beq.n	8011aa6 <forward_sm_integer+0xa6>
 8011a1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d044      	beq.n	8011ab0 <forward_sm_integer+0xb0>
 8011a26:	f8d3 e000 	ldr.w	lr, [r3]
 8011a2a:	e9d6 1502 	ldrd	r1, r5, [r6, #8]
 8011a2e:	f8de 300c 	ldr.w	r3, [lr, #12]
 8011a32:	0a09      	lsrs	r1, r1, #8
 8011a34:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8011a38:	686b      	ldr	r3, [r5, #4]
 8011a3a:	d032      	beq.n	8011aa2 <forward_sm_integer+0xa2>
 8011a3c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8011a40:	2201      	movs	r2, #1
 8011a42:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a46:	428d      	cmp	r5, r1
 8011a48:	fb04 f202 	mul.w	r2, r4, r2
 8011a4c:	d1f9      	bne.n	8011a42 <forward_sm_integer+0x42>
 8011a4e:	69c1      	ldr	r1, [r0, #28]
 8011a50:	2f03      	cmp	r7, #3
 8011a52:	688c      	ldr	r4, [r1, #8]
 8011a54:	d927      	bls.n	8011aa6 <forward_sm_integer+0xa6>
 8011a56:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8011a5a:	b339      	cbz	r1, 8011aac <forward_sm_integer+0xac>
 8011a5c:	6809      	ldr	r1, [r1, #0]
 8011a5e:	69b0      	ldr	r0, [r6, #24]
 8011a60:	6989      	ldr	r1, [r1, #24]
 8011a62:	4e14      	ldr	r6, [pc, #80]	@ (8011ab4 <forward_sm_integer+0xb4>)
 8011a64:	688d      	ldr	r5, [r1, #8]
 8011a66:	6801      	ldr	r1, [r0, #0]
 8011a68:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 8011a6c:	42b1      	cmp	r1, r6
 8011a6e:	f8de 6018 	ldr.w	r6, [lr, #24]
 8011a72:	6881      	ldr	r1, [r0, #8]
 8011a74:	68b0      	ldr	r0, [r6, #8]
 8011a76:	9505      	str	r5, [sp, #20]
 8011a78:	68a5      	ldr	r5, [r4, #8]
 8011a7a:	9504      	str	r5, [sp, #16]
 8011a7c:	6865      	ldr	r5, [r4, #4]
 8011a7e:	9503      	str	r5, [sp, #12]
 8011a80:	6824      	ldr	r4, [r4, #0]
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	e9cd c401 	strd	ip, r4, [sp, #4]
 8011a88:	d006      	beq.n	8011a98 <forward_sm_integer+0x98>
 8011a8a:	f002 f8e7 	bl	8013c5c <forward_lite_nl_softmax_iu8ou8>
 8011a8e:	b006      	add	sp, #24
 8011a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	deff      	udf	#255	@ 0xff
 8011a98:	f002 f8de 	bl	8013c58 <forward_lite_nl_softmax_is8os8>
 8011a9c:	b006      	add	sp, #24
 8011a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa2:	2201      	movs	r2, #1
 8011aa4:	e7d3      	b.n	8011a4e <forward_sm_integer+0x4e>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	deff      	udf	#255	@ 0xff
 8011aac:	698b      	ldr	r3, [r1, #24]
 8011aae:	deff      	udf	#255	@ 0xff
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	deff      	udf	#255	@ 0xff
 8011ab4:	00840440 	.word	0x00840440

08011ab8 <forward_pad_8bit_ch1st_3x3_constant>:
 8011ab8:	6982      	ldr	r2, [r0, #24]
 8011aba:	8813      	ldrh	r3, [r2, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d03e      	beq.n	8011b3e <forward_pad_8bit_ch1st_3x3_constant+0x86>
 8011ac0:	6852      	ldr	r2, [r2, #4]
 8011ac2:	6851      	ldr	r1, [r2, #4]
 8011ac4:	b101      	cbz	r1, 8011ac8 <forward_pad_8bit_ch1st_3x3_constant+0x10>
 8011ac6:	6809      	ldr	r1, [r1, #0]
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d03c      	beq.n	8011b46 <forward_pad_8bit_ch1st_3x3_constant+0x8e>
 8011acc:	6913      	ldr	r3, [r2, #16]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d037      	beq.n	8011b42 <forward_pad_8bit_ch1st_3x3_constant+0x8a>
 8011ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ad6:	e9d0 5209 	ldrd	r5, r2, [r0, #36]	@ 0x24
 8011ada:	681f      	ldr	r7, [r3, #0]
 8011adc:	b085      	sub	sp, #20
 8011ade:	68cb      	ldr	r3, [r1, #12]
 8011ae0:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
 8011ae4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8011ae8:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 8011aec:	68db      	ldr	r3, [r3, #12]
 8011aee:	6892      	ldr	r2, [r2, #8]
 8011af0:	e9d5 0400 	ldrd	r0, r4, [r5]
 8011af4:	e9d1 6105 	ldrd	r6, r1, [r1, #20]
 8011af8:	4320      	orrs	r0, r4
 8011afa:	6875      	ldr	r5, [r6, #4]
 8011afc:	b204      	sxth	r4, r0
 8011afe:	6888      	ldr	r0, [r1, #8]
 8011b00:	e9d7 7105 	ldrd	r7, r1, [r7, #20]
 8011b04:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8011b08:	6889      	ldr	r1, [r1, #8]
 8011b0a:	68f7      	ldr	r7, [r6, #12]
 8011b0c:	b974      	cbnz	r4, 8011b2c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 8011b0e:	f1b8 0f02 	cmp.w	r8, #2
 8011b12:	d10b      	bne.n	8011b2c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 8011b14:	f1b9 0f02 	cmp.w	r9, #2
 8011b18:	d108      	bne.n	8011b2c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 8011b1a:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 8011b1e:	e9cd c500 	strd	ip, r5, [sp]
 8011b22:	f002 f89d 	bl	8013c60 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>
 8011b26:	b005      	add	sp, #20
 8011b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b2c:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 8011b30:	e9cd c500 	strd	ip, r5, [sp]
 8011b34:	f002 f8c8 	bl	8013cc8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>
 8011b38:	b005      	add	sp, #20
 8011b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	deff      	udf	#255	@ 0xff
 8011b42:	699b      	ldr	r3, [r3, #24]
 8011b44:	deff      	udf	#255	@ 0xff
 8011b46:	2300      	movs	r3, #0
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	deff      	udf	#255	@ 0xff

08011b4c <forward_pad_constant>:
 8011b4c:	6982      	ldr	r2, [r0, #24]
 8011b4e:	8813      	ldrh	r3, [r2, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d03b      	beq.n	8011bcc <forward_pad_constant+0x80>
 8011b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b58:	6852      	ldr	r2, [r2, #4]
 8011b5a:	b088      	sub	sp, #32
 8011b5c:	6854      	ldr	r4, [r2, #4]
 8011b5e:	b104      	cbz	r4, 8011b62 <forward_pad_constant+0x16>
 8011b60:	6824      	ldr	r4, [r4, #0]
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	d034      	beq.n	8011bd0 <forward_pad_constant+0x84>
 8011b66:	6913      	ldr	r3, [r2, #16]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d034      	beq.n	8011bd6 <forward_pad_constant+0x8a>
 8011b6c:	6819      	ldr	r1, [r3, #0]
 8011b6e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8011b70:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8011b72:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 8011b76:	69a3      	ldr	r3, [r4, #24]
 8011b78:	6967      	ldr	r7, [r4, #20]
 8011b7a:	f8d3 8000 	ldr.w	r8, [r3]
 8011b7e:	6892      	ldr	r2, [r2, #8]
 8011b80:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8011b84:	e9d0 ec02 	ldrd	lr, ip, [r0, #8]
 8011b88:	6889      	ldr	r1, [r1, #8]
 8011b8a:	fb0e f606 	mul.w	r6, lr, r6
 8011b8e:	6898      	ldr	r0, [r3, #8]
 8011b90:	f3c8 13c6 	ubfx	r3, r8, #7, #7
 8011b94:	9606      	str	r6, [sp, #24]
 8011b96:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8011b9a:	fb0e f606 	mul.w	r6, lr, r6
 8011b9e:	9605      	str	r6, [sp, #20]
 8011ba0:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8011ba4:	fb0c f606 	mul.w	r6, ip, r6
 8011ba8:	9604      	str	r6, [sp, #16]
 8011baa:	f9b5 5000 	ldrsh.w	r5, [r5]
 8011bae:	fb0c f505 	mul.w	r5, ip, r5
 8011bb2:	9503      	str	r5, [sp, #12]
 8011bb4:	68fd      	ldr	r5, [r7, #12]
 8011bb6:	9502      	str	r5, [sp, #8]
 8011bb8:	687d      	ldr	r5, [r7, #4]
 8011bba:	9501      	str	r5, [sp, #4]
 8011bbc:	68e4      	ldr	r4, [r4, #12]
 8011bbe:	68e4      	ldr	r4, [r4, #12]
 8011bc0:	9400      	str	r4, [sp, #0]
 8011bc2:	f002 f941 	bl	8013e48 <forward_lite_pad_constant>
 8011bc6:	b008      	add	sp, #32
 8011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	deff      	udf	#255	@ 0xff
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	deff      	udf	#255	@ 0xff
 8011bd6:	699b      	ldr	r3, [r3, #24]
 8011bd8:	deff      	udf	#255	@ 0xff
 8011bda:	bf00      	nop

08011bdc <forward_pad_edge>:
 8011bdc:	6982      	ldr	r2, [r0, #24]
 8011bde:	8813      	ldrh	r3, [r2, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d035      	beq.n	8011c50 <forward_pad_edge+0x74>
 8011be4:	6851      	ldr	r1, [r2, #4]
 8011be6:	684a      	ldr	r2, [r1, #4]
 8011be8:	b102      	cbz	r2, 8011bec <forward_pad_edge+0x10>
 8011bea:	6812      	ldr	r2, [r2, #0]
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d031      	beq.n	8011c54 <forward_pad_edge+0x78>
 8011bf0:	690b      	ldr	r3, [r1, #16]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d031      	beq.n	8011c5a <forward_pad_edge+0x7e>
 8011bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	b089      	sub	sp, #36	@ 0x24
 8011bfc:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8011bfe:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8011c02:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8011c06:	6990      	ldr	r0, [r2, #24]
 8011c08:	6957      	ldr	r7, [r2, #20]
 8011c0a:	6880      	ldr	r0, [r0, #8]
 8011c0c:	f8de 200c 	ldr.w	r2, [lr, #12]
 8011c10:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 8011c14:	f9b5 3000 	ldrsh.w	r3, [r5]
 8011c18:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8011c1c:	6889      	ldr	r1, [r1, #8]
 8011c1e:	fb04 f606 	mul.w	r6, r4, r6
 8011c22:	9606      	str	r6, [sp, #24]
 8011c24:	f8dc c008 	ldr.w	ip, [ip, #8]
 8011c28:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8011c2c:	9403      	str	r4, [sp, #12]
 8011c2e:	fb0c f606 	mul.w	r6, ip, r6
 8011c32:	fb03 f404 	mul.w	r4, r3, r4
 8011c36:	9605      	str	r6, [sp, #20]
 8011c38:	9404      	str	r4, [sp, #16]
 8011c3a:	68bc      	ldr	r4, [r7, #8]
 8011c3c:	9402      	str	r4, [sp, #8]
 8011c3e:	68fc      	ldr	r4, [r7, #12]
 8011c40:	9401      	str	r4, [sp, #4]
 8011c42:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8011c46:	9400      	str	r4, [sp, #0]
 8011c48:	f002 f99a 	bl	8013f80 <forward_lite_pad_edge>
 8011c4c:	b009      	add	sp, #36	@ 0x24
 8011c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	deff      	udf	#255	@ 0xff
 8011c54:	2300      	movs	r3, #0
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	deff      	udf	#255	@ 0xff
 8011c5a:	699b      	ldr	r3, [r3, #24]
 8011c5c:	deff      	udf	#255	@ 0xff
 8011c5e:	bf00      	nop

08011c60 <forward_pad_reflect>:
 8011c60:	6982      	ldr	r2, [r0, #24]
 8011c62:	8813      	ldrh	r3, [r2, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d044      	beq.n	8011cf2 <forward_pad_reflect+0x92>
 8011c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c6c:	6852      	ldr	r2, [r2, #4]
 8011c6e:	b08f      	sub	sp, #60	@ 0x3c
 8011c70:	6857      	ldr	r7, [r2, #4]
 8011c72:	b107      	cbz	r7, 8011c76 <forward_pad_reflect+0x16>
 8011c74:	683f      	ldr	r7, [r7, #0]
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d03d      	beq.n	8011cf6 <forward_pad_reflect+0x96>
 8011c7a:	6913      	ldr	r3, [r2, #16]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d03d      	beq.n	8011cfc <forward_pad_reflect+0x9c>
 8011c80:	6819      	ldr	r1, [r3, #0]
 8011c82:	68fa      	ldr	r2, [r7, #12]
 8011c84:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 8011c88:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8011c8c:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 8011c90:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8011c92:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8011c96:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8011c9a:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8011c9e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8011ca2:	6889      	ldr	r1, [r1, #8]
 8011ca4:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 8011ca8:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 8011cac:	fb05 f606 	mul.w	r6, r5, r6
 8011cb0:	6880      	ldr	r0, [r0, #8]
 8011cb2:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 8011cb6:	bf2c      	ite	cs
 8011cb8:	6912      	ldrcs	r2, [r2, #16]
 8011cba:	2201      	movcc	r2, #1
 8011cbc:	960c      	str	r6, [sp, #48]	@ 0x30
 8011cbe:	fb05 f60e 	mul.w	r6, r5, lr
 8011cc2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011cc4:	fb0c f60b 	mul.w	r6, ip, fp
 8011cc8:	960a      	str	r6, [sp, #40]	@ 0x28
 8011cca:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8011cce:	9409      	str	r4, [sp, #36]	@ 0x24
 8011cd0:	e9cd eb07 	strd	lr, fp, [sp, #28]
 8011cd4:	e9cd c505 	strd	ip, r5, [sp, #20]
 8011cd8:	68bc      	ldr	r4, [r7, #8]
 8011cda:	9404      	str	r4, [sp, #16]
 8011cdc:	68fc      	ldr	r4, [r7, #12]
 8011cde:	f8cd 8000 	str.w	r8, [sp]
 8011ce2:	9403      	str	r4, [sp, #12]
 8011ce4:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8011ce8:	f002 f9bc 	bl	8014064 <forward_lite_pad_reflect>
 8011cec:	b00f      	add	sp, #60	@ 0x3c
 8011cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	deff      	udf	#255	@ 0xff
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	deff      	udf	#255	@ 0xff
 8011cfc:	68db      	ldr	r3, [r3, #12]
 8011cfe:	deff      	udf	#255	@ 0xff

08011d00 <forward_pw_sssa8_ch>:
 8011d00:	6982      	ldr	r2, [r0, #24]
 8011d02:	8813      	ldrh	r3, [r2, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	f000 80a4 	beq.w	8011e52 <forward_pw_sssa8_ch+0x152>
 8011d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d0e:	6854      	ldr	r4, [r2, #4]
 8011d10:	b099      	sub	sp, #100	@ 0x64
 8011d12:	6861      	ldr	r1, [r4, #4]
 8011d14:	b101      	cbz	r1, 8011d18 <forward_pw_sssa8_ch+0x18>
 8011d16:	6809      	ldr	r1, [r1, #0]
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	f000 80b3 	beq.w	8011e84 <forward_pw_sssa8_ch+0x184>
 8011d1e:	6922      	ldr	r2, [r4, #16]
 8011d20:	b102      	cbz	r2, 8011d24 <forward_pw_sssa8_ch+0x24>
 8011d22:	6812      	ldr	r2, [r2, #0]
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	f000 80a8 	beq.w	8011e7a <forward_pw_sssa8_ch+0x17a>
 8011d2a:	69e5      	ldr	r5, [r4, #28]
 8011d2c:	2d00      	cmp	r5, #0
 8011d2e:	f000 809c 	beq.w	8011e6a <forward_pw_sssa8_ch+0x16a>
 8011d32:	8b26      	ldrh	r6, [r4, #24]
 8011d34:	f8d5 e000 	ldr.w	lr, [r5]
 8011d38:	2e01      	cmp	r6, #1
 8011d3a:	f240 8098 	bls.w	8011e6e <forward_pw_sssa8_ch+0x16e>
 8011d3e:	686d      	ldr	r5, [r5, #4]
 8011d40:	2b03      	cmp	r3, #3
 8011d42:	f000 80a2 	beq.w	8011e8a <forward_pw_sssa8_ch+0x18a>
 8011d46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f000 8092 	beq.w	8011e72 <forward_pw_sssa8_ch+0x172>
 8011d4e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8011d50:	b104      	cbz	r4, 8011d54 <forward_pw_sssa8_ch+0x54>
 8011d52:	685a      	ldr	r2, [r3, #4]
 8011d54:	681c      	ldr	r4, [r3, #0]
 8011d56:	69ab      	ldr	r3, [r5, #24]
 8011d58:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8011d5c:	689b      	ldr	r3, [r3, #8]
 8011d5e:	68d4      	ldr	r4, [r2, #12]
 8011d60:	9316      	str	r3, [sp, #88]	@ 0x58
 8011d62:	88a4      	ldrh	r4, [r4, #4]
 8011d64:	68cb      	ldr	r3, [r1, #12]
 8011d66:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011d68:	889c      	ldrh	r4, [r3, #4]
 8011d6a:	680d      	ldr	r5, [r1, #0]
 8011d6c:	9412      	str	r4, [sp, #72]	@ 0x48
 8011d6e:	8d84      	ldrh	r4, [r0, #44]	@ 0x2c
 8011d70:	f8de 6000 	ldr.w	r6, [lr]
 8011d74:	9415      	str	r4, [sp, #84]	@ 0x54
 8011d76:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8011d7a:	e9d3 3b02 	ldrd	r3, fp, [r3, #8]
 8011d7e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8011d80:	9314      	str	r3, [sp, #80]	@ 0x50
 8011d82:	6814      	ldr	r4, [r2, #0]
 8011d84:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8011d86:	2d00      	cmp	r5, #0
 8011d88:	d068      	beq.n	8011e5c <forward_pw_sssa8_ch+0x15c>
 8011d8a:	686f      	ldr	r7, [r5, #4]
 8011d8c:	2f00      	cmp	r7, #0
 8011d8e:	d065      	beq.n	8011e5c <forward_pw_sssa8_ch+0x15c>
 8011d90:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8011d94:	f1b8 0f00 	cmp.w	r8, #0
 8011d98:	d060      	beq.n	8011e5c <forward_pw_sssa8_ch+0x15c>
 8011d9a:	683f      	ldr	r7, [r7, #0]
 8011d9c:	ed97 0a00 	vldr	s0, [r7]
 8011da0:	2c00      	cmp	r4, #0
 8011da2:	d058      	beq.n	8011e56 <forward_pw_sssa8_ch+0x156>
 8011da4:	6867      	ldr	r7, [r4, #4]
 8011da6:	2f00      	cmp	r7, #0
 8011da8:	d055      	beq.n	8011e56 <forward_pw_sssa8_ch+0x156>
 8011daa:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8011dae:	f1b8 0f00 	cmp.w	r8, #0
 8011db2:	d050      	beq.n	8011e56 <forward_pw_sssa8_ch+0x156>
 8011db4:	683f      	ldr	r7, [r7, #0]
 8011db6:	edd7 0a00 	vldr	s1, [r7]
 8011dba:	698f      	ldr	r7, [r1, #24]
 8011dbc:	6992      	ldr	r2, [r2, #24]
 8011dbe:	f8de 1018 	ldr.w	r1, [lr, #24]
 8011dc2:	f890 9041 	ldrb.w	r9, [r0, #65]	@ 0x41
 8011dc6:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8011dca:	68bf      	ldr	r7, [r7, #8]
 8011dcc:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8011dd0:	b116      	cbz	r6, 8011dd8 <forward_pw_sssa8_ch+0xd8>
 8011dd2:	6876      	ldr	r6, [r6, #4]
 8011dd4:	b106      	cbz	r6, 8011dd8 <forward_pw_sssa8_ch+0xd8>
 8011dd6:	6836      	ldr	r6, [r6, #0]
 8011dd8:	b13d      	cbz	r5, 8011dea <forward_pw_sssa8_ch+0xea>
 8011dda:	6869      	ldr	r1, [r5, #4]
 8011ddc:	2900      	cmp	r1, #0
 8011dde:	d040      	beq.n	8011e62 <forward_pw_sssa8_ch+0x162>
 8011de0:	886d      	ldrh	r5, [r5, #2]
 8011de2:	b115      	cbz	r5, 8011dea <forward_pw_sssa8_ch+0xea>
 8011de4:	6849      	ldr	r1, [r1, #4]
 8011de6:	f991 5000 	ldrsb.w	r5, [r1]
 8011dea:	b13c      	cbz	r4, 8011dfc <forward_pw_sssa8_ch+0xfc>
 8011dec:	6861      	ldr	r1, [r4, #4]
 8011dee:	2900      	cmp	r1, #0
 8011df0:	d039      	beq.n	8011e66 <forward_pw_sssa8_ch+0x166>
 8011df2:	8864      	ldrh	r4, [r4, #2]
 8011df4:	b114      	cbz	r4, 8011dfc <forward_pw_sssa8_ch+0xfc>
 8011df6:	6849      	ldr	r1, [r1, #4]
 8011df8:	f991 4000 	ldrsb.w	r4, [r1]
 8011dfc:	9311      	str	r3, [sp, #68]	@ 0x44
 8011dfe:	edcd 0a10 	vstr	s1, [sp, #64]	@ 0x40
 8011e02:	ed8d 0a0f 	vstr	s0, [sp, #60]	@ 0x3c
 8011e06:	e9dc 0100 	ldrd	r0, r1, [ip]
 8011e0a:	f004 fb15 	bl	8016438 <ai_array_get_byte_size>
 8011e0e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e10:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
 8011e14:	fa1f f28b 	uxth.w	r2, fp
 8011e18:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 8011e1c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	@ 0x50
 8011e20:	9505      	str	r5, [sp, #20]
 8011e22:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 8011e26:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011e28:	4638      	mov	r0, r7
 8011e2a:	9304      	str	r3, [sp, #16]
 8011e2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011e2e:	e9cd 4606 	strd	r4, r6, [sp, #24]
 8011e32:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8011e36:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8011e38:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011e3a:	9400      	str	r4, [sp, #0]
 8011e3c:	2401      	movs	r4, #1
 8011e3e:	9301      	str	r3, [sp, #4]
 8011e40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011e42:	940a      	str	r4, [sp, #40]	@ 0x28
 8011e44:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 8011e48:	f001 f9b6 	bl	80131b8 <forward_lite_pw_sssa8_ch>
 8011e4c:	b019      	add	sp, #100	@ 0x64
 8011e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	deff      	udf	#255	@ 0xff
 8011e56:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8011e90 <forward_pw_sssa8_ch+0x190>
 8011e5a:	e7ae      	b.n	8011dba <forward_pw_sssa8_ch+0xba>
 8011e5c:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8011e90 <forward_pw_sssa8_ch+0x190>
 8011e60:	e79e      	b.n	8011da0 <forward_pw_sssa8_ch+0xa0>
 8011e62:	460d      	mov	r5, r1
 8011e64:	e7c1      	b.n	8011dea <forward_pw_sssa8_ch+0xea>
 8011e66:	460c      	mov	r4, r1
 8011e68:	e7c8      	b.n	8011dfc <forward_pw_sssa8_ch+0xfc>
 8011e6a:	46ae      	mov	lr, r5
 8011e6c:	e768      	b.n	8011d40 <forward_pw_sssa8_ch+0x40>
 8011e6e:	2500      	movs	r5, #0
 8011e70:	e766      	b.n	8011d40 <forward_pw_sssa8_ch+0x40>
 8011e72:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8011e74:	b922      	cbnz	r2, 8011e80 <forward_pw_sssa8_ch+0x180>
 8011e76:	6993      	ldr	r3, [r2, #24]
 8011e78:	deff      	udf	#255	@ 0xff
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	deff      	udf	#255	@ 0xff
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	deff      	udf	#255	@ 0xff
 8011e84:	2300      	movs	r3, #0
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	deff      	udf	#255	@ 0xff
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	deff      	udf	#255	@ 0xff
 8011e90:	00000000 	.word	0x00000000

08011e94 <forward_eltwise_integer_INT8>:
 8011e94:	6982      	ldr	r2, [r0, #24]
 8011e96:	8813      	ldrh	r3, [r2, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d04e      	beq.n	8011f3a <forward_eltwise_integer_INT8+0xa6>
 8011e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea0:	ed2d 8b02 	vpush	{d8}
 8011ea4:	6852      	ldr	r2, [r2, #4]
 8011ea6:	b0ab      	sub	sp, #172	@ 0xac
 8011ea8:	6854      	ldr	r4, [r2, #4]
 8011eaa:	2c00      	cmp	r4, #0
 8011eac:	f000 81cf 	beq.w	801224e <forward_eltwise_integer_INT8+0x3ba>
 8011eb0:	e9d4 5400 	ldrd	r5, r4, [r4]
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	f000 81ce 	beq.w	8012256 <forward_eltwise_integer_INT8+0x3c2>
 8011eba:	6916      	ldr	r6, [r2, #16]
 8011ebc:	b106      	cbz	r6, 8011ec0 <forward_eltwise_integer_INT8+0x2c>
 8011ebe:	6836      	ldr	r6, [r6, #0]
 8011ec0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8011ec4:	f105 0108 	add.w	r1, r5, #8
 8011ec8:	f104 0b08 	add.w	fp, r4, #8
 8011ecc:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 8011ed0:	68a0      	ldr	r0, [r4, #8]
 8011ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ed4:	ea8c 0300 	eor.w	r3, ip, r0
 8011ed8:	f3cc 2c17 	ubfx	ip, ip, #8, #24
 8011edc:	f033 03ff 	bics.w	r3, r3, #255	@ 0xff
 8011ee0:	d10e      	bne.n	8011f00 <forward_eltwise_integer_INT8+0x6c>
 8011ee2:	4663      	mov	r3, ip
 8011ee4:	4686      	mov	lr, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f000 81ad 	beq.w	8012246 <forward_eltwise_integer_INT8+0x3b2>
 8011eec:	3b01      	subs	r3, #1
 8011eee:	68e2      	ldr	r2, [r4, #12]
 8011ef0:	68e8      	ldr	r0, [r5, #12]
 8011ef2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011ef6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011efa:	4290      	cmp	r0, r2
 8011efc:	d0f3      	beq.n	8011ee6 <forward_eltwise_integer_INT8+0x52>
 8011efe:	4670      	mov	r0, lr
 8011f00:	2300      	movs	r3, #0
 8011f02:	9308      	str	r3, [sp, #32]
 8011f04:	f10c 33ff 	add.w	r3, ip, #4294967295
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	e005      	b.n	8011f18 <forward_eltwise_integer_INT8+0x84>
 8011f0c:	68ea      	ldr	r2, [r5, #12]
 8011f0e:	58d2      	ldr	r2, [r2, r3]
 8011f10:	3b04      	subs	r3, #4
 8011f12:	2a01      	cmp	r2, #1
 8011f14:	f040 8194 	bne.w	8012240 <forward_eltwise_integer_INT8+0x3ac>
 8011f18:	1d1a      	adds	r2, r3, #4
 8011f1a:	d1f7      	bne.n	8011f0c <forward_eltwise_integer_INT8+0x78>
 8011f1c:	f04f 0a01 	mov.w	sl, #1
 8011f20:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8011f24:	b158      	cbz	r0, 8011f3e <forward_eltwise_integer_INT8+0xaa>
 8011f26:	3801      	subs	r0, #1
 8011f28:	68e3      	ldr	r3, [r4, #12]
 8011f2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d0f8      	beq.n	8011f24 <forward_eltwise_integer_INT8+0x90>
 8011f32:	2300      	movs	r3, #0
 8011f34:	46d1      	mov	r9, sl
 8011f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f38:	e005      	b.n	8011f46 <forward_eltwise_integer_INT8+0xb2>
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	deff      	udf	#255	@ 0xff
 8011f3e:	2301      	movs	r3, #1
 8011f40:	f08a 0901 	eor.w	r9, sl, #1
 8011f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f46:	6972      	ldr	r2, [r6, #20]
 8011f48:	2000      	movs	r0, #0
 8011f4a:	696b      	ldr	r3, [r5, #20]
 8011f4c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8011f50:	aa1b      	add	r2, sp, #108	@ 0x6c
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	9216      	str	r2, [sp, #88]	@ 0x58
 8011f56:	f240 5201 	movw	r2, #1281	@ 0x501
 8011f5a:	901f      	str	r0, [sp, #124]	@ 0x7c
 8011f5c:	9215      	str	r2, [sp, #84]	@ 0x54
 8011f5e:	465a      	mov	r2, fp
 8011f60:	930d      	str	r3, [sp, #52]	@ 0x34
 8011f62:	910c      	str	r1, [sp, #48]	@ 0x30
 8011f64:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
 8011f68:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
 8011f6c:	a815      	add	r0, sp, #84	@ 0x54
 8011f6e:	f004 fab9 	bl	80164e4 <core_get_broadcasted_shape>
 8011f72:	69ab      	ldr	r3, [r5, #24]
 8011f74:	f8d5 c000 	ldr.w	ip, [r5]
 8011f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f7a:	6832      	ldr	r2, [r6, #0]
 8011f7c:	6820      	ldr	r0, [r4, #0]
 8011f7e:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	@ 0x30
 8011f82:	f1bc 0f00 	cmp.w	ip, #0
 8011f86:	d018      	beq.n	8011fba <forward_eltwise_integer_INT8+0x126>
 8011f88:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8011f8c:	b1ad      	cbz	r5, 8011fba <forward_eltwise_integer_INT8+0x126>
 8011f8e:	f8bc e002 	ldrh.w	lr, [ip, #2]
 8011f92:	f1be 0f00 	cmp.w	lr, #0
 8011f96:	d010      	beq.n	8011fba <forward_eltwise_integer_INT8+0x126>
 8011f98:	682d      	ldr	r5, [r5, #0]
 8011f9a:	682d      	ldr	r5, [r5, #0]
 8011f9c:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011f9e:	b980      	cbnz	r0, 8011fc2 <forward_eltwise_integer_INT8+0x12e>
 8011fa0:	2500      	movs	r5, #0
 8011fa2:	9510      	str	r5, [sp, #64]	@ 0x40
 8011fa4:	b1d2      	cbz	r2, 8011fdc <forward_eltwise_integer_INT8+0x148>
 8011fa6:	6855      	ldr	r5, [r2, #4]
 8011fa8:	b1c5      	cbz	r5, 8011fdc <forward_eltwise_integer_INT8+0x148>
 8011faa:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8011fae:	f1be 0f00 	cmp.w	lr, #0
 8011fb2:	d013      	beq.n	8011fdc <forward_eltwise_integer_INT8+0x148>
 8011fb4:	682d      	ldr	r5, [r5, #0]
 8011fb6:	682d      	ldr	r5, [r5, #0]
 8011fb8:	e011      	b.n	8011fde <forward_eltwise_integer_INT8+0x14a>
 8011fba:	2500      	movs	r5, #0
 8011fbc:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d0ee      	beq.n	8011fa0 <forward_eltwise_integer_INT8+0x10c>
 8011fc2:	6845      	ldr	r5, [r0, #4]
 8011fc4:	2d00      	cmp	r5, #0
 8011fc6:	d0eb      	beq.n	8011fa0 <forward_eltwise_integer_INT8+0x10c>
 8011fc8:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8011fcc:	f1be 0f00 	cmp.w	lr, #0
 8011fd0:	d0e6      	beq.n	8011fa0 <forward_eltwise_integer_INT8+0x10c>
 8011fd2:	682d      	ldr	r5, [r5, #0]
 8011fd4:	682d      	ldr	r5, [r5, #0]
 8011fd6:	9510      	str	r5, [sp, #64]	@ 0x40
 8011fd8:	2a00      	cmp	r2, #0
 8011fda:	d1e4      	bne.n	8011fa6 <forward_eltwise_integer_INT8+0x112>
 8011fdc:	2500      	movs	r5, #0
 8011fde:	69a4      	ldr	r4, [r4, #24]
 8011fe0:	69b6      	ldr	r6, [r6, #24]
 8011fe2:	9511      	str	r5, [sp, #68]	@ 0x44
 8011fe4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011fe6:	68a4      	ldr	r4, [r4, #8]
 8011fe8:	68ad      	ldr	r5, [r5, #8]
 8011fea:	68b6      	ldr	r6, [r6, #8]
 8011fec:	f1bc 0f00 	cmp.w	ip, #0
 8011ff0:	d00e      	beq.n	8012010 <forward_eltwise_integer_INT8+0x17c>
 8011ff2:	f8dc e004 	ldr.w	lr, [ip, #4]
 8011ff6:	f1be 0f00 	cmp.w	lr, #0
 8011ffa:	f000 80ff 	beq.w	80121fc <forward_eltwise_integer_INT8+0x368>
 8011ffe:	f8bc c002 	ldrh.w	ip, [ip, #2]
 8012002:	f1bc 0f00 	cmp.w	ip, #0
 8012006:	d003      	beq.n	8012010 <forward_eltwise_integer_INT8+0x17c>
 8012008:	f8de c004 	ldr.w	ip, [lr, #4]
 801200c:	f99c c000 	ldrsb.w	ip, [ip]
 8012010:	f88d c039 	strb.w	ip, [sp, #57]	@ 0x39
 8012014:	b158      	cbz	r0, 801202e <forward_eltwise_integer_INT8+0x19a>
 8012016:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801201a:	f1bc 0f00 	cmp.w	ip, #0
 801201e:	f000 80eb 	beq.w	80121f8 <forward_eltwise_integer_INT8+0x364>
 8012022:	8840      	ldrh	r0, [r0, #2]
 8012024:	b118      	cbz	r0, 801202e <forward_eltwise_integer_INT8+0x19a>
 8012026:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801202a:	f990 0000 	ldrsb.w	r0, [r0]
 801202e:	f88d 003a 	strb.w	r0, [sp, #58]	@ 0x3a
 8012032:	b142      	cbz	r2, 8012046 <forward_eltwise_integer_INT8+0x1b2>
 8012034:	6850      	ldr	r0, [r2, #4]
 8012036:	2800      	cmp	r0, #0
 8012038:	f000 80dc 	beq.w	80121f4 <forward_eltwise_integer_INT8+0x360>
 801203c:	8852      	ldrh	r2, [r2, #2]
 801203e:	b112      	cbz	r2, 8012046 <forward_eltwise_integer_INT8+0x1b2>
 8012040:	6842      	ldr	r2, [r0, #4]
 8012042:	f992 2000 	ldrsb.w	r2, [r2]
 8012046:	f88d 203b 	strb.w	r2, [sp, #59]	@ 0x3b
 801204a:	9a08      	ldr	r2, [sp, #32]
 801204c:	b912      	cbnz	r2, 8012054 <forward_eltwise_integer_INT8+0x1c0>
 801204e:	f1b9 0f00 	cmp.w	r9, #0
 8012052:	d02d      	beq.n	80120b0 <forward_eltwise_integer_INT8+0x21c>
 8012054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012056:	4553      	cmp	r3, sl
 8012058:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801205a:	bf14      	ite	ne
 801205c:	f1ca 0102 	rsbne	r1, sl, #2
 8012060:	2100      	moveq	r1, #0
 8012062:	0a1b      	lsrs	r3, r3, #8
 8012064:	f000 80f5 	beq.w	8012252 <forward_eltwise_integer_INT8+0x3be>
 8012068:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801206a:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 801206e:	2301      	movs	r3, #1
 8012070:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012074:	4297      	cmp	r7, r2
 8012076:	fb00 f303 	mul.w	r3, r0, r3
 801207a:	d1f9      	bne.n	8012070 <forward_eltwise_integer_INT8+0x1dc>
 801207c:	4622      	mov	r2, r4
 801207e:	f10d 043b 	add.w	r4, sp, #59	@ 0x3b
 8012082:	9106      	str	r1, [sp, #24]
 8012084:	4630      	mov	r0, r6
 8012086:	9405      	str	r4, [sp, #20]
 8012088:	ac11      	add	r4, sp, #68	@ 0x44
 801208a:	4629      	mov	r1, r5
 801208c:	9404      	str	r4, [sp, #16]
 801208e:	f10d 043a 	add.w	r4, sp, #58	@ 0x3a
 8012092:	9403      	str	r4, [sp, #12]
 8012094:	ac10      	add	r4, sp, #64	@ 0x40
 8012096:	9402      	str	r4, [sp, #8]
 8012098:	f10d 0439 	add.w	r4, sp, #57	@ 0x39
 801209c:	9401      	str	r4, [sp, #4]
 801209e:	ac0f      	add	r4, sp, #60	@ 0x3c
 80120a0:	9400      	str	r4, [sp, #0]
 80120a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80120a4:	47a0      	blx	r4
 80120a6:	b02b      	add	sp, #172	@ 0xac
 80120a8:	ecbd 8b02 	vpop	{d8}
 80120ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b0:	aa20      	add	r2, sp, #128	@ 0x80
 80120b2:	a817      	add	r0, sp, #92	@ 0x5c
 80120b4:	9308      	str	r3, [sp, #32]
 80120b6:	9218      	str	r2, [sp, #96]	@ 0x60
 80120b8:	aa25      	add	r2, sp, #148	@ 0x94
 80120ba:	f8cd 9080 	str.w	r9, [sp, #128]	@ 0x80
 80120be:	921a      	str	r2, [sp, #104]	@ 0x68
 80120c0:	f240 5202 	movw	r2, #1282	@ 0x502
 80120c4:	f8cd 9094 	str.w	r9, [sp, #148]	@ 0x94
 80120c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80120ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80120cc:	aa15      	add	r2, sp, #84	@ 0x54
 80120ce:	e9cd 9921 	strd	r9, r9, [sp, #132]	@ 0x84
 80120d2:	e9cd 9923 	strd	r9, r9, [sp, #140]	@ 0x8c
 80120d6:	e9cd 9926 	strd	r9, r9, [sp, #152]	@ 0x98
 80120da:	e9cd 9928 	strd	r9, r9, [sp, #160]	@ 0xa0
 80120de:	f004 fa29 	bl	8016534 <core_compute_offsets>
 80120e2:	9b08      	ldr	r3, [sp, #32]
 80120e4:	aa15      	add	r2, sp, #84	@ 0x54
 80120e6:	4659      	mov	r1, fp
 80120e8:	a819      	add	r0, sp, #100	@ 0x64
 80120ea:	f004 fa23 	bl	8016534 <core_compute_offsets>
 80120ee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80120f0:	68d3      	ldr	r3, [r2, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d0d7      	beq.n	80120a6 <forward_eltwise_integer_INT8+0x212>
 80120f6:	6891      	ldr	r1, [r2, #8]
 80120f8:	eddf 8a58 	vldr	s17, [pc, #352]	@ 801225c <forward_eltwise_integer_INT8+0x3c8>
 80120fc:	468c      	mov	ip, r1
 80120fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8012102:	f1bc 0f00 	cmp.w	ip, #0
 8012106:	d0ce      	beq.n	80120a6 <forward_eltwise_integer_INT8+0x212>
 8012108:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801210a:	f04f 0b00 	mov.w	fp, #0
 801210e:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8012112:	f04f 0a00 	mov.w	sl, #0
 8012116:	2804      	cmp	r0, #4
 8012118:	bf8c      	ite	hi
 801211a:	6911      	ldrhi	r1, [r2, #16]
 801211c:	2101      	movls	r1, #1
 801211e:	458a      	cmp	sl, r1
 8012120:	d26e      	bcs.n	8012200 <forward_eltwise_integer_INT8+0x36c>
 8012122:	6851      	ldr	r1, [r2, #4]
 8012124:	2900      	cmp	r1, #0
 8012126:	d054      	beq.n	80121d2 <forward_eltwise_integer_INT8+0x33e>
 8012128:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
 801212c:	f04f 0900 	mov.w	r9, #0
 8012130:	f995 2000 	ldrsb.w	r2, [r5]
 8012134:	a814      	add	r0, sp, #80	@ 0x50
 8012136:	f99d 1039 	ldrsb.w	r1, [sp, #57]	@ 0x39
 801213a:	eddd 6a0f 	vldr	s13, [sp, #60]	@ 0x3c
 801213e:	1a53      	subs	r3, r2, r1
 8012140:	f99d 103a 	ldrsb.w	r1, [sp, #58]	@ 0x3a
 8012144:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 8012148:	ee07 3a90 	vmov	s15, r3
 801214c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012154:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
 8012158:	f994 2000 	ldrsb.w	r2, [r4]
 801215c:	1a53      	subs	r3, r2, r1
 801215e:	aa13      	add	r2, sp, #76	@ 0x4c
 8012160:	a912      	add	r1, sp, #72	@ 0x48
 8012162:	ee07 3a90 	vmov	s15, r3
 8012166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801216a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801216e:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 8012172:	47b8      	blx	r7
 8012174:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 8012178:	eddd 6a11 	vldr	s13, [sp, #68]	@ 0x44
 801217c:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 8012180:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012184:	ee07 3a10 	vmov	s14, r3
 8012188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801218c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	fe38 7a28 	vselgt.f32	s14, s16, s17
 801219c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80121a4:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 80121a8:	ee17 2a10 	vmov	r2, s14
 80121ac:	f302 0207 	ssat	r2, #8, r2
 80121b0:	7032      	strb	r2, [r6, #0]
 80121b2:	f109 0901 	add.w	r9, r9, #1
 80121b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80121b8:	4446      	add	r6, r8
 80121ba:	6852      	ldr	r2, [r2, #4]
 80121bc:	4415      	add	r5, r2
 80121be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80121c0:	6852      	ldr	r2, [r2, #4]
 80121c2:	4414      	add	r4, r2
 80121c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80121c6:	6851      	ldr	r1, [r2, #4]
 80121c8:	4549      	cmp	r1, r9
 80121ca:	d8b1      	bhi.n	8012130 <forward_eltwise_integer_INT8+0x29c>
 80121cc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80121ce:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80121d2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80121d4:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 80121d8:	d302      	bcc.n	80121e0 <forward_eltwise_integer_INT8+0x34c>
 80121da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80121dc:	6909      	ldr	r1, [r1, #16]
 80121de:	440d      	add	r5, r1
 80121e0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80121e2:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 80121e6:	d302      	bcc.n	80121ee <forward_eltwise_integer_INT8+0x35a>
 80121e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80121ea:	6909      	ldr	r1, [r1, #16]
 80121ec:	440c      	add	r4, r1
 80121ee:	f10a 0a01 	add.w	sl, sl, #1
 80121f2:	e790      	b.n	8012116 <forward_eltwise_integer_INT8+0x282>
 80121f4:	4602      	mov	r2, r0
 80121f6:	e726      	b.n	8012046 <forward_eltwise_integer_INT8+0x1b2>
 80121f8:	4660      	mov	r0, ip
 80121fa:	e718      	b.n	801202e <forward_eltwise_integer_INT8+0x19a>
 80121fc:	46f4      	mov	ip, lr
 80121fe:	e707      	b.n	8012010 <forward_eltwise_integer_INT8+0x17c>
 8012200:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8012204:	f10b 0b01 	add.w	fp, fp, #1
 8012208:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801220a:	f8de 1008 	ldr.w	r1, [lr, #8]
 801220e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8012212:	440d      	add	r5, r1
 8012214:	6899      	ldr	r1, [r3, #8]
 8012216:	45dc      	cmp	ip, fp
 8012218:	440c      	add	r4, r1
 801221a:	f63f af7a 	bhi.w	8012112 <forward_eltwise_integer_INT8+0x27e>
 801221e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8012222:	9908      	ldr	r1, [sp, #32]
 8012224:	4405      	add	r5, r0
 8012226:	68d0      	ldr	r0, [r2, #12]
 8012228:	3101      	adds	r1, #1
 801222a:	68db      	ldr	r3, [r3, #12]
 801222c:	4288      	cmp	r0, r1
 801222e:	441c      	add	r4, r3
 8012230:	9108      	str	r1, [sp, #32]
 8012232:	f63f af66 	bhi.w	8012102 <forward_eltwise_integer_INT8+0x26e>
 8012236:	b02b      	add	sp, #172	@ 0xac
 8012238:	ecbd 8b02 	vpop	{d8}
 801223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012240:	f04f 0a00 	mov.w	sl, #0
 8012244:	e66c      	b.n	8011f20 <forward_eltwise_integer_INT8+0x8c>
 8012246:	2301      	movs	r3, #1
 8012248:	4670      	mov	r0, lr
 801224a:	9308      	str	r3, [sp, #32]
 801224c:	e65a      	b.n	8011f04 <forward_eltwise_integer_INT8+0x70>
 801224e:	4625      	mov	r5, r4
 8012250:	e630      	b.n	8011eb4 <forward_eltwise_integer_INT8+0x20>
 8012252:	2301      	movs	r3, #1
 8012254:	e712      	b.n	801207c <forward_eltwise_integer_INT8+0x1e8>
 8012256:	2300      	movs	r3, #0
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	deff      	udf	#255	@ 0xff
 801225c:	befffffc 	.word	0xbefffffc

08012260 <forward_upsample_bilinear_is8os8>:
 8012260:	6982      	ldr	r2, [r0, #24]
 8012262:	8811      	ldrh	r1, [r2, #0]
 8012264:	b329      	cbz	r1, 80122b2 <forward_upsample_bilinear_is8os8+0x52>
 8012266:	4603      	mov	r3, r0
 8012268:	6850      	ldr	r0, [r2, #4]
 801226a:	6842      	ldr	r2, [r0, #4]
 801226c:	b102      	cbz	r2, 8012270 <forward_upsample_bilinear_is8os8+0x10>
 801226e:	6812      	ldr	r2, [r2, #0]
 8012270:	2901      	cmp	r1, #1
 8012272:	d020      	beq.n	80122b6 <forward_upsample_bilinear_is8os8+0x56>
 8012274:	6901      	ldr	r1, [r0, #16]
 8012276:	b309      	cbz	r1, 80122bc <forward_upsample_bilinear_is8os8+0x5c>
 8012278:	b570      	push	{r4, r5, r6, lr}
 801227a:	6809      	ldr	r1, [r1, #0]
 801227c:	b084      	sub	sp, #16
 801227e:	68d4      	ldr	r4, [r2, #12]
 8012280:	6990      	ldr	r0, [r2, #24]
 8012282:	698a      	ldr	r2, [r1, #24]
 8012284:	68cd      	ldr	r5, [r1, #12]
 8012286:	6891      	ldr	r1, [r2, #8]
 8012288:	6a1a      	ldr	r2, [r3, #32]
 801228a:	7f5e      	ldrb	r6, [r3, #29]
 801228c:	6892      	ldr	r2, [r2, #8]
 801228e:	68e3      	ldr	r3, [r4, #12]
 8012290:	edd2 0a00 	vldr	s1, [r2]
 8012294:	ed92 0a01 	vldr	s0, [r2, #4]
 8012298:	6880      	ldr	r0, [r0, #8]
 801229a:	68a2      	ldr	r2, [r4, #8]
 801229c:	9603      	str	r6, [sp, #12]
 801229e:	6864      	ldr	r4, [r4, #4]
 80122a0:	9402      	str	r4, [sp, #8]
 80122a2:	68ec      	ldr	r4, [r5, #12]
 80122a4:	9401      	str	r4, [sp, #4]
 80122a6:	68ac      	ldr	r4, [r5, #8]
 80122a8:	9400      	str	r4, [sp, #0]
 80122aa:	f001 fc13 	bl	8013ad4 <forward_lite_upsample_bilinear_is8os8>
 80122ae:	b004      	add	sp, #16
 80122b0:	bd70      	pop	{r4, r5, r6, pc}
 80122b2:	684b      	ldr	r3, [r1, #4]
 80122b4:	deff      	udf	#255	@ 0xff
 80122b6:	2300      	movs	r3, #0
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	deff      	udf	#255	@ 0xff
 80122bc:	68cb      	ldr	r3, [r1, #12]
 80122be:	deff      	udf	#255	@ 0xff

080122c0 <forward_lite_node_convert_integer_is8of32>:
 80122c0:	f000 b82a 	b.w	8012318 <lite_convert_is8of32>

080122c4 <forward_lite_node_convert_integer_iu8of32>:
 80122c4:	f000 b83a 	b.w	801233c <lite_convert_iu8of32>

080122c8 <forward_lite_node_convert_integer_if32os8>:
 80122c8:	f000 b84a 	b.w	8012360 <lite_convert_if32os8>

080122cc <forward_lite_node_convert_integer_if32ou8>:
 80122cc:	f000 b87e 	b.w	80123cc <lite_convert_if32ou8>

080122d0 <forward_lite_node_convert_integer_is8os8>:
 80122d0:	b410      	push	{r4}
 80122d2:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80122d6:	9401      	str	r4, [sp, #4]
 80122d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122dc:	f000 b896 	b.w	801240c <lite_convert_is8os8>

080122e0 <forward_lite_node_convert_integer_iu8ou8>:
 80122e0:	b410      	push	{r4}
 80122e2:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80122e6:	9401      	str	r4, [sp, #4]
 80122e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122ec:	f000 b8ce 	b.w	801248c <lite_convert_iu8ou8>

080122f0 <forward_lite_node_convert_integer_iu8os8>:
 80122f0:	b410      	push	{r4}
 80122f2:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 80122f6:	9401      	str	r4, [sp, #4]
 80122f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122fc:	f000 b8f0 	b.w	80124e0 <lite_convert_iu8os8>

08012300 <forward_lite_node_convert_integer_iu8os8_fast>:
 8012300:	f000 b92e 	b.w	8012560 <lite_convert_iu8os8_fast>

08012304 <forward_lite_node_convert_integer_is8ou8>:
 8012304:	b410      	push	{r4}
 8012306:	f89d 4004 	ldrb.w	r4, [sp, #4]
 801230a:	9401      	str	r4, [sp, #4]
 801230c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012310:	f000 b95e 	b.w	80125d0 <lite_convert_is8ou8>

08012314 <forward_lite_node_convert_integer_is8ou8_fast>:
 8012314:	f000 b986 	b.w	8012624 <lite_convert_is8ou8_fast>

08012318 <lite_convert_is8of32>:
 8012318:	2a00      	cmp	r2, #0
 801231a:	dd0e      	ble.n	801233a <lite_convert_is8of32+0x22>
 801231c:	4402      	add	r2, r0
 801231e:	f910 cb01 	ldrsb.w	ip, [r0], #1
 8012322:	ebac 0c03 	sub.w	ip, ip, r3
 8012326:	4290      	cmp	r0, r2
 8012328:	ee07 ca90 	vmov	s15, ip
 801232c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012330:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012334:	ece1 7a01 	vstmia	r1!, {s15}
 8012338:	d1f1      	bne.n	801231e <lite_convert_is8of32+0x6>
 801233a:	4770      	bx	lr

0801233c <lite_convert_iu8of32>:
 801233c:	2a00      	cmp	r2, #0
 801233e:	dd0e      	ble.n	801235e <lite_convert_iu8of32+0x22>
 8012340:	4402      	add	r2, r0
 8012342:	f810 cb01 	ldrb.w	ip, [r0], #1
 8012346:	ebac 0c03 	sub.w	ip, ip, r3
 801234a:	4290      	cmp	r0, r2
 801234c:	ee07 ca90 	vmov	s15, ip
 8012350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012354:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012358:	ece1 7a01 	vstmia	r1!, {s15}
 801235c:	d1f1      	bne.n	8012342 <lite_convert_iu8of32+0x6>
 801235e:	4770      	bx	lr

08012360 <lite_convert_if32os8>:
 8012360:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012364:	2a00      	cmp	r2, #0
 8012366:	ee87 6a80 	vdiv.f32	s12, s15, s0
 801236a:	ee07 3a90 	vmov	s15, r3
 801236e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012372:	dd28      	ble.n	80123c6 <lite_convert_if32os8+0x66>
 8012374:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8012378:	440a      	add	r2, r1
 801237a:	eddf 5a13 	vldr	s11, [pc, #76]	@ 80123c8 <lite_convert_if32os8+0x68>
 801237e:	eef0 7a66 	vmov.f32	s15, s13
 8012382:	ecb0 7a01 	vldmia	r0!, {s14}
 8012386:	eee7 7a06 	vfma.f32	s15, s14, s12
 801238a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801238e:	ee37 7a85 	vadd.f32	s14, s15, s10
 8012392:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801239a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801239e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123a2:	db08      	blt.n	80123b6 <lite_convert_if32os8+0x56>
 80123a4:	ee17 3a10 	vmov	r3, s14
 80123a8:	f303 0307 	ssat	r3, #8, r3
 80123ac:	f801 3b01 	strb.w	r3, [r1], #1
 80123b0:	4291      	cmp	r1, r2
 80123b2:	d1e4      	bne.n	801237e <lite_convert_if32os8+0x1e>
 80123b4:	4770      	bx	lr
 80123b6:	ee17 3a90 	vmov	r3, s15
 80123ba:	f303 0307 	ssat	r3, #8, r3
 80123be:	f801 3b01 	strb.w	r3, [r1], #1
 80123c2:	4291      	cmp	r1, r2
 80123c4:	d1db      	bne.n	801237e <lite_convert_if32os8+0x1e>
 80123c6:	4770      	bx	lr
 80123c8:	3efffffc 	.word	0x3efffffc

080123cc <lite_convert_if32ou8>:
 80123cc:	ee07 3a10 	vmov	s14, r3
 80123d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80123d4:	2a00      	cmp	r2, #0
 80123d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80123da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80123de:	dd14      	ble.n	801240a <lite_convert_if32ou8+0x3e>
 80123e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80123e4:	440a      	add	r2, r1
 80123e6:	ee87 6a80 	vdiv.f32	s12, s15, s0
 80123ea:	ecb0 7a01 	vldmia	r0!, {s14}
 80123ee:	eef0 7a66 	vmov.f32	s15, s13
 80123f2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80123f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123fa:	ee17 3a90 	vmov	r3, s15
 80123fe:	f383 0308 	usat	r3, #8, r3
 8012402:	f801 3b01 	strb.w	r3, [r1], #1
 8012406:	4291      	cmp	r1, r2
 8012408:	d1ef      	bne.n	80123ea <lite_convert_if32ou8+0x1e>
 801240a:	4770      	bx	lr

0801240c <lite_convert_is8os8>:
 801240c:	b500      	push	{lr}
 801240e:	eb00 0e02 	add.w	lr, r0, r2
 8012412:	f9bd c004 	ldrsh.w	ip, [sp, #4]
 8012416:	4570      	cmp	r0, lr
 8012418:	d22a      	bcs.n	8012470 <lite_convert_is8os8+0x64>
 801241a:	ee07 ca90 	vmov	s15, ip
 801241e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8012422:	3801      	subs	r0, #1
 8012424:	440a      	add	r2, r1
 8012426:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801242a:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8012488 <lite_convert_is8os8+0x7c>
 801242e:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
 8012432:	ebac 0c03 	sub.w	ip, ip, r3
 8012436:	ee07 ca90 	vmov	s15, ip
 801243a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801243e:	eef0 7a66 	vmov.f32	s15, s13
 8012442:	eee7 7a00 	vfma.f32	s15, s14, s0
 8012446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801244a:	ee37 7aa5 	vadd.f32	s14, s15, s11
 801244e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012456:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801245a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801245e:	dd09      	ble.n	8012474 <lite_convert_is8os8+0x68>
 8012460:	ee17 ca10 	vmov	ip, s14
 8012464:	f30c 0c07 	ssat	ip, #8, ip
 8012468:	f801 cb01 	strb.w	ip, [r1], #1
 801246c:	4291      	cmp	r1, r2
 801246e:	d1de      	bne.n	801242e <lite_convert_is8os8+0x22>
 8012470:	f85d fb04 	ldr.w	pc, [sp], #4
 8012474:	ee17 ca90 	vmov	ip, s15
 8012478:	f30c 0c07 	ssat	ip, #8, ip
 801247c:	f801 cb01 	strb.w	ip, [r1], #1
 8012480:	4291      	cmp	r1, r2
 8012482:	d1d4      	bne.n	801242e <lite_convert_is8os8+0x22>
 8012484:	f85d fb04 	ldr.w	pc, [sp], #4
 8012488:	3efffffc 	.word	0x3efffffc

0801248c <lite_convert_iu8ou8>:
 801248c:	ee07 3a90 	vmov	s15, r3
 8012490:	f89d 3000 	ldrb.w	r3, [sp]
 8012494:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012498:	ee06 3a90 	vmov	s13, r3
 801249c:	1883      	adds	r3, r0, r2
 801249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124a2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80124a6:	4298      	cmp	r0, r3
 80124a8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80124ac:	eee7 6ac0 	vfms.f32	s13, s15, s0
 80124b0:	d215      	bcs.n	80124de <lite_convert_iu8ou8+0x52>
 80124b2:	3801      	subs	r0, #1
 80124b4:	440a      	add	r2, r1
 80124b6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80124ba:	eef0 7a66 	vmov.f32	s15, s13
 80124be:	ee07 3a10 	vmov	s14, r3
 80124c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80124c6:	eee7 7a00 	vfma.f32	s15, s14, s0
 80124ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124ce:	ee17 3a90 	vmov	r3, s15
 80124d2:	f383 0308 	usat	r3, #8, r3
 80124d6:	f801 3b01 	strb.w	r3, [r1], #1
 80124da:	4291      	cmp	r1, r2
 80124dc:	d1eb      	bne.n	80124b6 <lite_convert_iu8ou8+0x2a>
 80124de:	4770      	bx	lr

080124e0 <lite_convert_iu8os8>:
 80124e0:	ee07 3a90 	vmov	s15, r3
 80124e4:	f99d 3000 	ldrsb.w	r3, [sp]
 80124e8:	ee06 3a90 	vmov	s13, r3
 80124ec:	1883      	adds	r3, r0, r2
 80124ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80124f6:	4298      	cmp	r0, r3
 80124f8:	eee7 6ac0 	vfms.f32	s13, s15, s0
 80124fc:	d22d      	bcs.n	801255a <lite_convert_iu8os8+0x7a>
 80124fe:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8012502:	3801      	subs	r0, #1
 8012504:	440a      	add	r2, r1
 8012506:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801255c <lite_convert_iu8os8+0x7c>
 801250a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801250e:	eef0 7a66 	vmov.f32	s15, s13
 8012512:	ee07 3a10 	vmov	s14, r3
 8012516:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801251a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801251e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012522:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8012526:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012536:	dd08      	ble.n	801254a <lite_convert_iu8os8+0x6a>
 8012538:	ee17 3a10 	vmov	r3, s14
 801253c:	f303 0307 	ssat	r3, #8, r3
 8012540:	f801 3b01 	strb.w	r3, [r1], #1
 8012544:	4291      	cmp	r1, r2
 8012546:	d1e0      	bne.n	801250a <lite_convert_iu8os8+0x2a>
 8012548:	4770      	bx	lr
 801254a:	ee17 3a90 	vmov	r3, s15
 801254e:	f303 0307 	ssat	r3, #8, r3
 8012552:	f801 3b01 	strb.w	r3, [r1], #1
 8012556:	4291      	cmp	r1, r2
 8012558:	d1d7      	bne.n	801250a <lite_convert_iu8os8+0x2a>
 801255a:	4770      	bx	lr
 801255c:	3efffffc 	.word	0x3efffffc

08012560 <lite_convert_iu8os8_fast>:
 8012560:	b570      	push	{r4, r5, r6, lr}
 8012562:	1095      	asrs	r5, r2, #2
 8012564:	2d00      	cmp	r5, #0
 8012566:	dd31      	ble.n	80125cc <lite_convert_iu8os8_fast+0x6c>
 8012568:	00ae      	lsls	r6, r5, #2
 801256a:	460c      	mov	r4, r1
 801256c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012570:	f04f 1e80 	mov.w	lr, #8388736	@ 0x800080
 8012574:	f850 3b04 	ldr.w	r3, [r0], #4
 8012578:	ea4f 2c33 	mov.w	ip, r3, ror #8
 801257c:	fa3f fc8c 	uxtb16	ip, ip
 8012580:	fadc fc0e 	ssub16	ip, ip, lr
 8012584:	fa3f f383 	uxtb16	r3, r3
 8012588:	fad3 f30e 	ssub16	r3, r3, lr
 801258c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8012590:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8012594:	42a8      	cmp	r0, r5
 8012596:	f00c 2cff 	and.w	ip, ip, #4278255360	@ 0xff00ff00
 801259a:	ea43 030c 	orr.w	r3, r3, ip
 801259e:	f844 3b04 	str.w	r3, [r4], #4
 80125a2:	d1e7      	bne.n	8012574 <lite_convert_iu8os8_fast+0x14>
 80125a4:	4431      	add	r1, r6
 80125a6:	f012 0203 	ands.w	r2, r2, #3
 80125aa:	d00e      	beq.n	80125ca <lite_convert_iu8os8_fast+0x6a>
 80125ac:	782b      	ldrb	r3, [r5, #0]
 80125ae:	3a01      	subs	r2, #1
 80125b0:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80125b4:	700b      	strb	r3, [r1, #0]
 80125b6:	d008      	beq.n	80125ca <lite_convert_iu8os8_fast+0x6a>
 80125b8:	786b      	ldrb	r3, [r5, #1]
 80125ba:	2a01      	cmp	r2, #1
 80125bc:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80125c0:	704b      	strb	r3, [r1, #1]
 80125c2:	d002      	beq.n	80125ca <lite_convert_iu8os8_fast+0x6a>
 80125c4:	78ab      	ldrb	r3, [r5, #2]
 80125c6:	3b80      	subs	r3, #128	@ 0x80
 80125c8:	708b      	strb	r3, [r1, #2]
 80125ca:	bd70      	pop	{r4, r5, r6, pc}
 80125cc:	4605      	mov	r5, r0
 80125ce:	e7ea      	b.n	80125a6 <lite_convert_iu8os8_fast+0x46>

080125d0 <lite_convert_is8ou8>:
 80125d0:	ee07 3a90 	vmov	s15, r3
 80125d4:	f89d 3000 	ldrb.w	r3, [sp]
 80125d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80125dc:	ee06 3a90 	vmov	s13, r3
 80125e0:	1883      	adds	r3, r0, r2
 80125e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125e6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80125ea:	4298      	cmp	r0, r3
 80125ec:	ee76 6a87 	vadd.f32	s13, s13, s14
 80125f0:	eee7 6ac0 	vfms.f32	s13, s15, s0
 80125f4:	d215      	bcs.n	8012622 <lite_convert_is8ou8+0x52>
 80125f6:	3801      	subs	r0, #1
 80125f8:	440a      	add	r2, r1
 80125fa:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 80125fe:	eef0 7a66 	vmov.f32	s15, s13
 8012602:	ee07 3a10 	vmov	s14, r3
 8012606:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801260a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801260e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012612:	ee17 3a90 	vmov	r3, s15
 8012616:	f383 0308 	usat	r3, #8, r3
 801261a:	f801 3b01 	strb.w	r3, [r1], #1
 801261e:	4291      	cmp	r1, r2
 8012620:	d1eb      	bne.n	80125fa <lite_convert_is8ou8+0x2a>
 8012622:	4770      	bx	lr

08012624 <lite_convert_is8ou8_fast>:
 8012624:	b570      	push	{r4, r5, r6, lr}
 8012626:	1095      	asrs	r5, r2, #2
 8012628:	2d00      	cmp	r5, #0
 801262a:	dd2d      	ble.n	8012688 <lite_convert_is8ou8_fast+0x64>
 801262c:	00ae      	lsls	r6, r5, #2
 801262e:	460c      	mov	r4, r1
 8012630:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012634:	f04f 1e80 	mov.w	lr, #8388736	@ 0x800080
 8012638:	f850 3b04 	ldr.w	r3, [r0], #4
 801263c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8012640:	fa2f fc8c 	sxtb16	ip, ip
 8012644:	fa9c fc0e 	sadd16	ip, ip, lr
 8012648:	fa2f f383 	sxtb16	r3, r3
 801264c:	fa93 f30e 	sadd16	r3, r3, lr
 8012650:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8012654:	42a8      	cmp	r0, r5
 8012656:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 801265a:	f844 3b04 	str.w	r3, [r4], #4
 801265e:	d1eb      	bne.n	8012638 <lite_convert_is8ou8_fast+0x14>
 8012660:	4431      	add	r1, r6
 8012662:	f012 0203 	ands.w	r2, r2, #3
 8012666:	d00e      	beq.n	8012686 <lite_convert_is8ou8_fast+0x62>
 8012668:	782b      	ldrb	r3, [r5, #0]
 801266a:	3a01      	subs	r2, #1
 801266c:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8012670:	700b      	strb	r3, [r1, #0]
 8012672:	d008      	beq.n	8012686 <lite_convert_is8ou8_fast+0x62>
 8012674:	786b      	ldrb	r3, [r5, #1]
 8012676:	2a01      	cmp	r2, #1
 8012678:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 801267c:	704b      	strb	r3, [r1, #1]
 801267e:	d002      	beq.n	8012686 <lite_convert_is8ou8_fast+0x62>
 8012680:	78ab      	ldrb	r3, [r5, #2]
 8012682:	3b80      	subs	r3, #128	@ 0x80
 8012684:	708b      	strb	r3, [r1, #2]
 8012686:	bd70      	pop	{r4, r5, r6, pc}
 8012688:	4605      	mov	r5, r0
 801268a:	e7ea      	b.n	8012662 <lite_convert_is8ou8_fast+0x3e>

0801268c <forward_lite_dw_3x3_sssa8_ch>:
 801268c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012690:	b09d      	sub	sp, #116	@ 0x74
 8012692:	461c      	mov	r4, r3
 8012694:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
 8012698:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 801269c:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 80126a0:	9206      	str	r2, [sp, #24]
 80126a2:	f99d 20a8 	ldrsb.w	r2, [sp, #168]	@ 0xa8
 80126a6:	9305      	str	r3, [sp, #20]
 80126a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80126aa:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	@ 0xb8
 80126ae:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80126b0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80126b2:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	@ 0xbc
 80126b6:	f8dd e098 	ldr.w	lr, [sp, #152]	@ 0x98
 80126ba:	f99d 70ac 	ldrsb.w	r7, [sp, #172]	@ 0xac
 80126be:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
 80126c2:	9019      	str	r0, [sp, #100]	@ 0x64
 80126c4:	9104      	str	r1, [sp, #16]
 80126c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	f000 8424 	beq.w	8012f16 <forward_lite_dw_3x3_sssa8_ch+0x88a>
 80126ce:	ea4f 0844 	mov.w	r8, r4, lsl #1
 80126d2:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80126d4:	4621      	mov	r1, r4
 80126d6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80126d8:	eb03 0209 	add.w	r2, r3, r9
 80126dc:	eb09 0304 	add.w	r3, r9, r4
 80126e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80126e4:	9210      	str	r2, [sp, #64]	@ 0x40
 80126e6:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80126e8:	461d      	mov	r5, r3
 80126ea:	9312      	str	r3, [sp, #72]	@ 0x48
 80126ec:	f001 fd62 	bl	80141b4 <align_factor_ch>
 80126f0:	f06f 0315 	mvn.w	r3, #21
 80126f4:	fb03 5304 	mla	r3, r3, r4, r5
 80126f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80126fa:	b1d4      	cbz	r4, 8012732 <forward_lite_dw_3x3_sssa8_ch+0xa6>
 80126fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80126fe:	2100      	movs	r1, #0
 8012700:	2601      	movs	r6, #1
 8012702:	f1a3 0c02 	sub.w	ip, r3, #2
 8012706:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012708:	1d18      	adds	r0, r3, #4
 801270a:	f93c 3f02 	ldrsh.w	r3, [ip, #2]!
 801270e:	3101      	adds	r1, #1
 8012710:	1e5a      	subs	r2, r3, #1
 8012712:	fa06 f503 	lsl.w	r5, r6, r3
 8012716:	fa07 f303 	lsl.w	r3, r7, r3
 801271a:	b292      	uxth	r2, r2
 801271c:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8012720:	2a14      	cmp	r2, #20
 8012722:	f200 83f0 	bhi.w	8012f06 <forward_lite_dw_3x3_sssa8_ch+0x87a>
 8012726:	428c      	cmp	r4, r1
 8012728:	f840 3c04 	str.w	r3, [r0, #-4]
 801272c:	f100 0004 	add.w	r0, r0, #4
 8012730:	dceb      	bgt.n	801270a <forward_lite_dw_3x3_sssa8_ch+0x7e>
 8012732:	9a05      	ldr	r2, [sp, #20]
 8012734:	2c03      	cmp	r4, #3
 8012736:	9b04      	ldr	r3, [sp, #16]
 8012738:	fb04 f202 	mul.w	r2, r4, r2
 801273c:	fb04 f303 	mul.w	r3, r4, r3
 8012740:	9214      	str	r2, [sp, #80]	@ 0x50
 8012742:	9a06      	ldr	r2, [sp, #24]
 8012744:	fb03 f202 	mul.w	r2, r3, r2
 8012748:	eba3 0308 	sub.w	r3, r3, r8
 801274c:	9307      	str	r3, [sp, #28]
 801274e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012750:	9218      	str	r2, [sp, #96]	@ 0x60
 8012752:	f1c3 0300 	rsb	r3, r3, #0
 8012756:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 801275a:	bf8c      	ite	hi
 801275c:	1ee3      	subhi	r3, r4, #3
 801275e:	2300      	movls	r3, #0
 8012760:	930a      	str	r3, [sp, #40]	@ 0x28
 8012762:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012764:	2b00      	cmp	r3, #0
 8012766:	f000 82b6 	beq.w	8012cd6 <forward_lite_dw_3x3_sssa8_ch+0x64a>
 801276a:	f004 0303 	and.w	r3, r4, #3
 801276e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012770:	930d      	str	r3, [sp, #52]	@ 0x34
 8012772:	2a00      	cmp	r2, #0
 8012774:	f000 82af 	beq.w	8012cd6 <forward_lite_dw_3x3_sssa8_ch+0x64a>
 8012778:	3b01      	subs	r3, #1
 801277a:	46b4      	mov	ip, r6
 801277c:	46a0      	mov	r8, r4
 801277e:	b29b      	uxth	r3, r3
 8012780:	9315      	str	r3, [sp, #84]	@ 0x54
 8012782:	2300      	movs	r3, #0
 8012784:	9316      	str	r3, [sp, #88]	@ 0x58
 8012786:	46de      	mov	lr, fp
 8012788:	46c3      	mov	fp, r8
 801278a:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801278e:	fb03 2301 	mla	r3, r3, r1, r2
 8012792:	9306      	str	r3, [sp, #24]
 8012794:	2300      	movs	r3, #0
 8012796:	930e      	str	r3, [sp, #56]	@ 0x38
 8012798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801279a:	2b00      	cmp	r3, #0
 801279c:	f000 8397 	beq.w	8012ece <forward_lite_dw_3x3_sssa8_ch+0x842>
 80127a0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80127a4:	2400      	movs	r4, #0
 80127a6:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80127a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80127aa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80127ac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80127ae:	f103 0010 	add.w	r0, r3, #16
 80127b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80127b4:	9203      	str	r2, [sp, #12]
 80127b6:	3348      	adds	r3, #72	@ 0x48
 80127b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80127ba:	f8cd e000 	str.w	lr, [sp]
 80127be:	9405      	str	r4, [sp, #20]
 80127c0:	9202      	str	r2, [sp, #8]
 80127c2:	9004      	str	r0, [sp, #16]
 80127c4:	9101      	str	r1, [sp, #4]
 80127c6:	9906      	ldr	r1, [sp, #24]
 80127c8:	9804      	ldr	r0, [sp, #16]
 80127ca:	190a      	adds	r2, r1, r4
 80127cc:	f853 5c48 	ldr.w	r5, [r3, #-72]
 80127d0:	590c      	ldr	r4, [r1, r4]
 80127d2:	f852 800b 	ldr.w	r8, [r2, fp]
 80127d6:	eb02 070b 	add.w	r7, r2, fp
 80127da:	eac4 4108 	pkhbt	r1, r4, r8, lsl #16
 80127de:	eb02 024b 	add.w	r2, r2, fp, lsl #1
 80127e2:	eac8 4824 	pkhtb	r8, r8, r4, asr #16
 80127e6:	e9cd 3008 	strd	r3, r0, [sp, #32]
 80127ea:	f850 4c10 	ldr.w	r4, [r0, #-16]
 80127ee:	fa2c f681 	sxtab16	r6, ip, r1
 80127f2:	fb25 4606 	smlad	r6, r5, r6, r4
 80127f6:	fa2c f191 	sxtab16	r1, ip, r1, ror #8
 80127fa:	f853 4c44 	ldr.w	r4, [r3, #-68]
 80127fe:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8012802:	fb24 5101 	smlad	r1, r4, r1, r5
 8012806:	f853 4c40 	ldr.w	r4, [r3, #-64]
 801280a:	f850 5c08 	ldr.w	r5, [r0, #-8]
 801280e:	fa2c fe88 	sxtab16	lr, ip, r8
 8012812:	fb24 5e0e 	smlad	lr, r4, lr, r5
 8012816:	fa2c f898 	sxtab16	r8, ip, r8, ror #8
 801281a:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 801281e:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8012822:	fb24 5508 	smlad	r5, r4, r8, r5
 8012826:	9807      	ldr	r0, [sp, #28]
 8012828:	f857 800b 	ldr.w	r8, [r7, fp]
 801282c:	1817      	adds	r7, r2, r0
 801282e:	f853 4c38 	ldr.w	r4, [r3, #-56]
 8012832:	5812      	ldr	r2, [r2, r0]
 8012834:	eac8 4902 	pkhbt	r9, r8, r2, lsl #16
 8012838:	eac2 4228 	pkhtb	r2, r2, r8, asr #16
 801283c:	fa2c fa89 	sxtab16	sl, ip, r9
 8012840:	eb07 080b 	add.w	r8, r7, fp
 8012844:	fb24 660a 	smlad	r6, r4, sl, r6
 8012848:	fa2c f999 	sxtab16	r9, ip, r9, ror #8
 801284c:	f853 4c34 	ldr.w	r4, [r3, #-52]
 8012850:	fb24 1409 	smlad	r4, r4, r9, r1
 8012854:	f853 1c30 	ldr.w	r1, [r3, #-48]
 8012858:	fa2c f982 	sxtab16	r9, ip, r2
 801285c:	fb21 ee09 	smlad	lr, r1, r9, lr
 8012860:	fa2c f292 	sxtab16	r2, ip, r2, ror #8
 8012864:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 8012868:	fb21 5202 	smlad	r2, r1, r2, r5
 801286c:	f857 a00b 	ldr.w	sl, [r7, fp]
 8012870:	eb08 070b 	add.w	r7, r8, fp
 8012874:	f858 100b 	ldr.w	r1, [r8, fp]
 8012878:	f853 5c28 	ldr.w	r5, [r3, #-40]
 801287c:	eb07 0800 	add.w	r8, r7, r0
 8012880:	eaca 4901 	pkhbt	r9, sl, r1, lsl #16
 8012884:	eac1 412a 	pkhtb	r1, r1, sl, asr #16
 8012888:	fa2c fa89 	sxtab16	sl, ip, r9
 801288c:	fb25 660a 	smlad	r6, r5, sl, r6
 8012890:	fa2c f999 	sxtab16	r9, ip, r9, ror #8
 8012894:	f853 5c24 	ldr.w	r5, [r3, #-36]
 8012898:	fb25 4509 	smlad	r5, r5, r9, r4
 801289c:	f853 4c20 	ldr.w	r4, [r3, #-32]
 80128a0:	fa2c f981 	sxtab16	r9, ip, r1
 80128a4:	fb24 ee09 	smlad	lr, r4, r9, lr
 80128a8:	fa2c f191 	sxtab16	r1, ip, r1, ror #8
 80128ac:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 80128b0:	fb24 2101 	smlad	r1, r4, r1, r2
 80128b4:	f857 9000 	ldr.w	r9, [r7, r0]
 80128b8:	f858 200b 	ldr.w	r2, [r8, fp]
 80128bc:	44d8      	add	r8, fp
 80128be:	eac9 4702 	pkhbt	r7, r9, r2, lsl #16
 80128c2:	f853 4c18 	ldr.w	r4, [r3, #-24]
 80128c6:	eac2 4229 	pkhtb	r2, r2, r9, asr #16
 80128ca:	fa2c f987 	sxtab16	r9, ip, r7
 80128ce:	fb24 6609 	smlad	r6, r4, r9, r6
 80128d2:	fa2c f797 	sxtab16	r7, ip, r7, ror #8
 80128d6:	f853 4c14 	ldr.w	r4, [r3, #-20]
 80128da:	fb24 5707 	smlad	r7, r4, r7, r5
 80128de:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80128e2:	fa2c f582 	sxtab16	r5, ip, r2
 80128e6:	fb24 e505 	smlad	r5, r4, r5, lr
 80128ea:	fa2c f292 	sxtab16	r2, ip, r2, ror #8
 80128ee:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 80128f2:	fb24 1202 	smlad	r2, r4, r2, r1
 80128f6:	f858 100b 	ldr.w	r1, [r8, fp]
 80128fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80128fc:	b24c      	sxtb	r4, r1
 80128fe:	f833 ec08 	ldrh.w	lr, [r3, #-8]
 8012902:	f833 8c06 	ldrh.w	r8, [r3, #-6]
 8012906:	1a24      	subs	r4, r4, r0
 8012908:	f833 9c04 	ldrh.w	r9, [r3, #-4]
 801290c:	fb1e 6604 	smlabb	r6, lr, r4, r6
 8012910:	f341 2407 	sbfx	r4, r1, #8, #8
 8012914:	1a24      	subs	r4, r4, r0
 8012916:	fb18 7404 	smlabb	r4, r8, r4, r7
 801291a:	f341 4707 	sbfx	r7, r1, #16, #8
 801291e:	ebc0 6121 	rsb	r1, r0, r1, asr #24
 8012922:	1a3f      	subs	r7, r7, r0
 8012924:	9801      	ldr	r0, [sp, #4]
 8012926:	fb19 5907 	smlabb	r9, r9, r7, r5
 801292a:	f833 5c02 	ldrh.w	r5, [r3, #-2]
 801292e:	fb15 2a01 	smlabb	sl, r5, r1, r2
 8012932:	f9b0 1000 	ldrsh.w	r1, [r0]
 8012936:	2915      	cmp	r1, #21
 8012938:	f340 8217 	ble.w	8012d6a <forward_lite_dw_3x3_sssa8_ch+0x6de>
 801293c:	f1a1 0802 	sub.w	r8, r1, #2
 8012940:	2201      	movs	r2, #1
 8012942:	9f03      	ldr	r7, [sp, #12]
 8012944:	3901      	subs	r1, #1
 8012946:	fa02 f808 	lsl.w	r8, r2, r8
 801294a:	9d02      	ldr	r5, [sp, #8]
 801294c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012950:	f100 0e02 	add.w	lr, r0, #2
 8012954:	fb56 8202 	smmla	r2, r6, r2, r8
 8012958:	410a      	asrs	r2, r1
 801295a:	f855 1b04 	ldr.w	r1, [r5], #4
 801295e:	440a      	add	r2, r1
 8012960:	f302 0207 	ssat	r2, #8, r2
 8012964:	9900      	ldr	r1, [sp, #0]
 8012966:	b252      	sxtb	r2, r2
 8012968:	1c4e      	adds	r6, r1, #1
 801296a:	4608      	mov	r0, r1
 801296c:	700a      	strb	r2, [r1, #0]
 801296e:	f9be 1000 	ldrsh.w	r1, [lr]
 8012972:	2915      	cmp	r1, #21
 8012974:	f340 81e3 	ble.w	8012d3e <forward_lite_dw_3x3_sssa8_ch+0x6b2>
 8012978:	f8d5 e000 	ldr.w	lr, [r5]
 801297c:	1e8d      	subs	r5, r1, #2
 801297e:	683a      	ldr	r2, [r7, #0]
 8012980:	3901      	subs	r1, #1
 8012982:	2701      	movs	r7, #1
 8012984:	fa07 f505 	lsl.w	r5, r7, r5
 8012988:	9f03      	ldr	r7, [sp, #12]
 801298a:	fb54 5202 	smmla	r2, r4, r2, r5
 801298e:	410a      	asrs	r2, r1
 8012990:	9901      	ldr	r1, [sp, #4]
 8012992:	3708      	adds	r7, #8
 8012994:	4472      	add	r2, lr
 8012996:	f101 0e04 	add.w	lr, r1, #4
 801299a:	9902      	ldr	r1, [sp, #8]
 801299c:	3108      	adds	r1, #8
 801299e:	f302 0207 	ssat	r2, #8, r2
 80129a2:	b252      	sxtb	r2, r2
 80129a4:	1c84      	adds	r4, r0, #2
 80129a6:	7032      	strb	r2, [r6, #0]
 80129a8:	f9be 5000 	ldrsh.w	r5, [lr]
 80129ac:	2d15      	cmp	r5, #21
 80129ae:	f340 8195 	ble.w	8012cdc <forward_lite_dw_3x3_sssa8_ch+0x650>
 80129b2:	680e      	ldr	r6, [r1, #0]
 80129b4:	2001      	movs	r0, #1
 80129b6:	1ea9      	subs	r1, r5, #2
 80129b8:	3d01      	subs	r5, #1
 80129ba:	683a      	ldr	r2, [r7, #0]
 80129bc:	fa00 f101 	lsl.w	r1, r0, r1
 80129c0:	9803      	ldr	r0, [sp, #12]
 80129c2:	fb59 1202 	smmla	r2, r9, r2, r1
 80129c6:	412a      	asrs	r2, r5
 80129c8:	f100 0e0c 	add.w	lr, r0, #12
 80129cc:	4416      	add	r6, r2
 80129ce:	9a01      	ldr	r2, [sp, #4]
 80129d0:	3206      	adds	r2, #6
 80129d2:	9902      	ldr	r1, [sp, #8]
 80129d4:	310c      	adds	r1, #12
 80129d6:	f306 0607 	ssat	r6, #8, r6
 80129da:	b276      	sxtb	r6, r6
 80129dc:	9800      	ldr	r0, [sp, #0]
 80129de:	7026      	strb	r6, [r4, #0]
 80129e0:	1cc5      	adds	r5, r0, #3
 80129e2:	f9b2 6000 	ldrsh.w	r6, [r2]
 80129e6:	2e15      	cmp	r6, #21
 80129e8:	f340 8194 	ble.w	8012d14 <forward_lite_dw_3x3_sssa8_ch+0x688>
 80129ec:	f8d1 9000 	ldr.w	r9, [r1]
 80129f0:	2001      	movs	r0, #1
 80129f2:	1eb1      	subs	r1, r6, #2
 80129f4:	9f01      	ldr	r7, [sp, #4]
 80129f6:	3e01      	subs	r6, #1
 80129f8:	9c03      	ldr	r4, [sp, #12]
 80129fa:	3708      	adds	r7, #8
 80129fc:	9a02      	ldr	r2, [sp, #8]
 80129fe:	f8de e000 	ldr.w	lr, [lr]
 8012a02:	fa00 f101 	lsl.w	r1, r0, r1
 8012a06:	fb5a 1e0e 	smmla	lr, sl, lr, r1
 8012a0a:	fa4e f806 	asr.w	r8, lr, r6
 8012a0e:	3410      	adds	r4, #16
 8012a10:	3210      	adds	r2, #16
 8012a12:	463e      	mov	r6, r7
 8012a14:	44c8      	add	r8, r9
 8012a16:	940c      	str	r4, [sp, #48]	@ 0x30
 8012a18:	4691      	mov	r9, r2
 8012a1a:	f308 0807 	ssat	r8, #8, r8
 8012a1e:	fa4f f888 	sxtb.w	r8, r8
 8012a22:	9804      	ldr	r0, [sp, #16]
 8012a24:	9900      	ldr	r1, [sp, #0]
 8012a26:	3348      	adds	r3, #72	@ 0x48
 8012a28:	f885 8000 	strb.w	r8, [r5]
 8012a2c:	3010      	adds	r0, #16
 8012a2e:	9d05      	ldr	r5, [sp, #20]
 8012a30:	3104      	adds	r1, #4
 8012a32:	9004      	str	r0, [sp, #16]
 8012a34:	3504      	adds	r5, #4
 8012a36:	9202      	str	r2, [sp, #8]
 8012a38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a3a:	468e      	mov	lr, r1
 8012a3c:	b2a8      	uxth	r0, r5
 8012a3e:	9403      	str	r4, [sp, #12]
 8012a40:	9701      	str	r7, [sp, #4]
 8012a42:	4290      	cmp	r0, r2
 8012a44:	4604      	mov	r4, r0
 8012a46:	9005      	str	r0, [sp, #20]
 8012a48:	9100      	str	r1, [sp, #0]
 8012a4a:	f4ff aebc 	bcc.w	80127c6 <forward_lite_dw_3x3_sssa8_ch+0x13a>
 8012a4e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012a52:	9600      	str	r6, [sp, #0]
 8012a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f000 8127 	beq.w	8012caa <forward_lite_dw_3x3_sssa8_ch+0x61e>
 8012a5c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8012a5e:	9e08      	ldr	r6, [sp, #32]
 8012a60:	9f07      	ldr	r7, [sp, #28]
 8012a62:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8012a66:	18ca      	adds	r2, r1, r3
 8012a68:	56c8      	ldrsb	r0, [r1, r3]
 8012a6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a6c:	1b40      	subs	r0, r0, r5
 8012a6e:	eb02 044b 	add.w	r4, r2, fp, lsl #1
 8012a72:	680b      	ldr	r3, [r1, #0]
 8012a74:	8831      	ldrh	r1, [r6, #0]
 8012a76:	fb11 3100 	smlabb	r1, r1, r0, r3
 8012a7a:	f912 300b 	ldrsb.w	r3, [r2, fp]
 8012a7e:	8870      	ldrh	r0, [r6, #2]
 8012a80:	1b5b      	subs	r3, r3, r5
 8012a82:	f912 201b 	ldrsb.w	r2, [r2, fp, lsl #1]
 8012a86:	fb13 1300 	smlabb	r3, r3, r0, r1
 8012a8a:	1b52      	subs	r2, r2, r5
 8012a8c:	19e0      	adds	r0, r4, r7
 8012a8e:	57e1      	ldrsb	r1, [r4, r7]
 8012a90:	88b4      	ldrh	r4, [r6, #4]
 8012a92:	1b49      	subs	r1, r1, r5
 8012a94:	fb12 3204 	smlabb	r2, r2, r4, r3
 8012a98:	88f3      	ldrh	r3, [r6, #6]
 8012a9a:	eb00 044b 	add.w	r4, r0, fp, lsl #1
 8012a9e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012aa2:	f910 200b 	ldrsb.w	r2, [r0, fp]
 8012aa6:	f910 301b 	ldrsb.w	r3, [r0, fp, lsl #1]
 8012aaa:	1b52      	subs	r2, r2, r5
 8012aac:	8930      	ldrh	r0, [r6, #8]
 8012aae:	1b5b      	subs	r3, r3, r5
 8012ab0:	fb12 1200 	smlabb	r2, r2, r0, r1
 8012ab4:	19e0      	adds	r0, r4, r7
 8012ab6:	57e1      	ldrsb	r1, [r4, r7]
 8012ab8:	8974      	ldrh	r4, [r6, #10]
 8012aba:	1b49      	subs	r1, r1, r5
 8012abc:	fb13 2304 	smlabb	r3, r3, r4, r2
 8012ac0:	89b2      	ldrh	r2, [r6, #12]
 8012ac2:	4634      	mov	r4, r6
 8012ac4:	fb11 3202 	smlabb	r2, r1, r2, r3
 8012ac8:	f910 100b 	ldrsb.w	r1, [r0, fp]
 8012acc:	89f3      	ldrh	r3, [r6, #14]
 8012ace:	1b49      	subs	r1, r1, r5
 8012ad0:	f910 001b 	ldrsb.w	r0, [r0, fp, lsl #1]
 8012ad4:	fb11 2303 	smlabb	r3, r1, r3, r2
 8012ad8:	9a05      	ldr	r2, [sp, #20]
 8012ada:	1b40      	subs	r0, r0, r5
 8012adc:	b229      	sxth	r1, r5
 8012ade:	3201      	adds	r2, #1
 8012ae0:	b296      	uxth	r6, r2
 8012ae2:	8a22      	ldrh	r2, [r4, #16]
 8012ae4:	fb10 3002 	smlabb	r0, r0, r2, r3
 8012ae8:	9b00      	ldr	r3, [sp, #0]
 8012aea:	f9b3 4000 	ldrsh.w	r4, [r3]
 8012aee:	2c15      	cmp	r4, #21
 8012af0:	f300 8199 	bgt.w	8012e26 <forward_lite_dw_3x3_sssa8_ch+0x79a>
 8012af4:	2c00      	cmp	r4, #0
 8012af6:	f340 81ca 	ble.w	8012e8e <forward_lite_dw_3x3_sssa8_ch+0x802>
 8012afa:	f8da 3000 	ldr.w	r3, [sl]
 8012afe:	0040      	lsls	r0, r0, #1
 8012b00:	f8d9 2000 	ldr.w	r2, [r9]
 8012b04:	fb50 2003 	smmla	r0, r0, r3, r2
 8012b08:	4120      	asrs	r0, r4
 8012b0a:	f300 0307 	ssat	r3, #8, r0
 8012b0e:	b25b      	sxtb	r3, r3
 8012b10:	f10e 0701 	add.w	r7, lr, #1
 8012b14:	f88e 3000 	strb.w	r3, [lr]
 8012b18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 80c3 	beq.w	8012ca6 <forward_lite_dw_3x3_sssa8_ch+0x61a>
 8012b20:	9b05      	ldr	r3, [sp, #20]
 8012b22:	3302      	adds	r3, #2
 8012b24:	fa1f f883 	uxth.w	r8, r3
 8012b28:	9b06      	ldr	r3, [sp, #24]
 8012b2a:	1998      	adds	r0, r3, r6
 8012b2c:	579a      	ldrsb	r2, [r3, r6]
 8012b2e:	9e08      	ldr	r6, [sp, #32]
 8012b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b32:	1a52      	subs	r2, r2, r1
 8012b34:	8a74      	ldrh	r4, [r6, #18]
 8012b36:	eb00 054b 	add.w	r5, r0, fp, lsl #1
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	fb12 3204 	smlabb	r2, r2, r4, r3
 8012b40:	f910 300b 	ldrsb.w	r3, [r0, fp]
 8012b44:	8ab4      	ldrh	r4, [r6, #20]
 8012b46:	1a5b      	subs	r3, r3, r1
 8012b48:	f910 001b 	ldrsb.w	r0, [r0, fp, lsl #1]
 8012b4c:	fb13 2304 	smlabb	r3, r3, r4, r2
 8012b50:	9a07      	ldr	r2, [sp, #28]
 8012b52:	1a40      	subs	r0, r0, r1
 8012b54:	18ac      	adds	r4, r5, r2
 8012b56:	56aa      	ldrsb	r2, [r5, r2]
 8012b58:	8af5      	ldrh	r5, [r6, #22]
 8012b5a:	1a52      	subs	r2, r2, r1
 8012b5c:	fb10 3005 	smlabb	r0, r0, r5, r3
 8012b60:	8b33      	ldrh	r3, [r6, #24]
 8012b62:	eb04 054b 	add.w	r5, r4, fp, lsl #1
 8012b66:	fb12 0203 	smlabb	r2, r2, r3, r0
 8012b6a:	f914 300b 	ldrsb.w	r3, [r4, fp]
 8012b6e:	f914 001b 	ldrsb.w	r0, [r4, fp, lsl #1]
 8012b72:	1a5b      	subs	r3, r3, r1
 8012b74:	8b74      	ldrh	r4, [r6, #26]
 8012b76:	1a40      	subs	r0, r0, r1
 8012b78:	fb13 2304 	smlabb	r3, r3, r4, r2
 8012b7c:	9a07      	ldr	r2, [sp, #28]
 8012b7e:	18ac      	adds	r4, r5, r2
 8012b80:	56aa      	ldrsb	r2, [r5, r2]
 8012b82:	8bb5      	ldrh	r5, [r6, #28]
 8012b84:	1a52      	subs	r2, r2, r1
 8012b86:	fb10 3005 	smlabb	r0, r0, r5, r3
 8012b8a:	8bf3      	ldrh	r3, [r6, #30]
 8012b8c:	fb12 0203 	smlabb	r2, r2, r3, r0
 8012b90:	f914 300b 	ldrsb.w	r3, [r4, fp]
 8012b94:	f914 001b 	ldrsb.w	r0, [r4, fp, lsl #1]
 8012b98:	1a5b      	subs	r3, r3, r1
 8012b9a:	8c34      	ldrh	r4, [r6, #32]
 8012b9c:	1a40      	subs	r0, r0, r1
 8012b9e:	fb13 2304 	smlabb	r3, r3, r4, r2
 8012ba2:	8c72      	ldrh	r2, [r6, #34]	@ 0x22
 8012ba4:	fb10 3002 	smlabb	r0, r0, r2, r3
 8012ba8:	9b00      	ldr	r3, [sp, #0]
 8012baa:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8012bae:	2c15      	cmp	r4, #21
 8012bb0:	f300 814c 	bgt.w	8012e4c <forward_lite_dw_3x3_sssa8_ch+0x7c0>
 8012bb4:	2c00      	cmp	r4, #0
 8012bb6:	f340 817d 	ble.w	8012eb4 <forward_lite_dw_3x3_sssa8_ch+0x828>
 8012bba:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012bbe:	0040      	lsls	r0, r0, #1
 8012bc0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8012bc4:	fb50 2003 	smmla	r0, r0, r3, r2
 8012bc8:	4120      	asrs	r0, r4
 8012bca:	f300 0307 	ssat	r3, #8, r0
 8012bce:	1c7a      	adds	r2, r7, #1
 8012bd0:	b25b      	sxtb	r3, r3
 8012bd2:	9201      	str	r2, [sp, #4]
 8012bd4:	703b      	strb	r3, [r7, #0]
 8012bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012bd8:	2b02      	cmp	r3, #2
 8012bda:	d064      	beq.n	8012ca6 <forward_lite_dw_3x3_sssa8_ch+0x61a>
 8012bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bde:	9f08      	ldr	r7, [sp, #32]
 8012be0:	6898      	ldr	r0, [r3, #8]
 8012be2:	9b00      	ldr	r3, [sp, #0]
 8012be4:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8012be8:	9b06      	ldr	r3, [sp, #24]
 8012bea:	2e15      	cmp	r6, #21
 8012bec:	f913 2008 	ldrsb.w	r2, [r3, r8]
 8012bf0:	eb03 0408 	add.w	r4, r3, r8
 8012bf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bf6:	eba2 0201 	sub.w	r2, r2, r1
 8012bfa:	f914 501b 	ldrsb.w	r5, [r4, fp, lsl #1]
 8012bfe:	fb13 0302 	smlabb	r3, r3, r2, r0
 8012c02:	f914 000b 	ldrsb.w	r0, [r4, fp]
 8012c06:	eb04 024b 	add.w	r2, r4, fp, lsl #1
 8012c0a:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8012c0c:	eba0 0001 	sub.w	r0, r0, r1
 8012c10:	eba5 0501 	sub.w	r5, r5, r1
 8012c14:	fb14 3400 	smlabb	r4, r4, r0, r3
 8012c18:	9b07      	ldr	r3, [sp, #28]
 8012c1a:	eb02 0003 	add.w	r0, r2, r3
 8012c1e:	56d2      	ldrsb	r2, [r2, r3]
 8012c20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012c22:	eba2 0201 	sub.w	r2, r2, r1
 8012c26:	fb13 4305 	smlabb	r3, r3, r5, r4
 8012c2a:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8012c2c:	f910 500b 	ldrsb.w	r5, [r0, fp]
 8012c30:	fb14 3302 	smlabb	r3, r4, r2, r3
 8012c34:	eb00 024b 	add.w	r2, r0, fp, lsl #1
 8012c38:	eba5 0501 	sub.w	r5, r5, r1
 8012c3c:	f910 401b 	ldrsb.w	r4, [r0, fp, lsl #1]
 8012c40:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8012c42:	eba4 0401 	sub.w	r4, r4, r1
 8012c46:	fb10 3005 	smlabb	r0, r0, r5, r3
 8012c4a:	9b07      	ldr	r3, [sp, #28]
 8012c4c:	eb02 0503 	add.w	r5, r2, r3
 8012c50:	56d2      	ldrsb	r2, [r2, r3]
 8012c52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012c54:	eba2 0201 	sub.w	r2, r2, r1
 8012c58:	fb13 0304 	smlabb	r3, r3, r4, r0
 8012c5c:	8e38      	ldrh	r0, [r7, #48]	@ 0x30
 8012c5e:	fb10 3302 	smlabb	r3, r0, r2, r3
 8012c62:	f915 200b 	ldrsb.w	r2, [r5, fp]
 8012c66:	f915 001b 	ldrsb.w	r0, [r5, fp, lsl #1]
 8012c6a:	eba2 0201 	sub.w	r2, r2, r1
 8012c6e:	eba0 0001 	sub.w	r0, r0, r1
 8012c72:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8012c74:	fb11 3102 	smlabb	r1, r1, r2, r3
 8012c78:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012c7a:	fb13 1300 	smlabb	r3, r3, r0, r1
 8012c7e:	f340 80f8 	ble.w	8012e72 <forward_lite_dw_3x3_sssa8_ch+0x7e6>
 8012c82:	1eb1      	subs	r1, r6, #2
 8012c84:	1e74      	subs	r4, r6, #1
 8012c86:	2501      	movs	r5, #1
 8012c88:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8012c8c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8012c90:	fa05 f101 	lsl.w	r1, r5, r1
 8012c94:	fb53 1202 	smmla	r2, r3, r2, r1
 8012c98:	4122      	asrs	r2, r4
 8012c9a:	4402      	add	r2, r0
 8012c9c:	f302 0307 	ssat	r3, #8, r2
 8012ca0:	b25b      	sxtb	r3, r3
 8012ca2:	9a01      	ldr	r2, [sp, #4]
 8012ca4:	7013      	strb	r3, [r2, #0]
 8012ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ca8:	449e      	add	lr, r3
 8012caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cac:	9a06      	ldr	r2, [sp, #24]
 8012cae:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	440a      	add	r2, r1
 8012cb4:	b21b      	sxth	r3, r3
 8012cb6:	9206      	str	r2, [sp, #24]
 8012cb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012cba:	930e      	str	r3, [sp, #56]	@ 0x38
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	f73f ad6b 	bgt.w	8012798 <forward_lite_dw_3x3_sssa8_ch+0x10c>
 8012cc2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012cc4:	46d8      	mov	r8, fp
 8012cc6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8012cc8:	46f3      	mov	fp, lr
 8012cca:	3301      	adds	r3, #1
 8012ccc:	b21b      	sxth	r3, r3
 8012cce:	428b      	cmp	r3, r1
 8012cd0:	9316      	str	r3, [sp, #88]	@ 0x58
 8012cd2:	f6ff ad58 	blt.w	8012786 <forward_lite_dw_3x3_sssa8_ch+0xfa>
 8012cd6:	b01d      	add	sp, #116	@ 0x74
 8012cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cdc:	2d00      	cmp	r5, #0
 8012cde:	dd53      	ble.n	8012d88 <forward_lite_dw_3x3_sssa8_ch+0x6fc>
 8012ce0:	683a      	ldr	r2, [r7, #0]
 8012ce2:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8012ce6:	6809      	ldr	r1, [r1, #0]
 8012ce8:	fb56 1602 	smmla	r6, r6, r2, r1
 8012cec:	9a02      	ldr	r2, [sp, #8]
 8012cee:	412e      	asrs	r6, r5
 8012cf0:	9803      	ldr	r0, [sp, #12]
 8012cf2:	f102 010c 	add.w	r1, r2, #12
 8012cf6:	9a01      	ldr	r2, [sp, #4]
 8012cf8:	f100 0e0c 	add.w	lr, r0, #12
 8012cfc:	3206      	adds	r2, #6
 8012cfe:	f306 0607 	ssat	r6, #8, r6
 8012d02:	b276      	sxtb	r6, r6
 8012d04:	9800      	ldr	r0, [sp, #0]
 8012d06:	7026      	strb	r6, [r4, #0]
 8012d08:	1cc5      	adds	r5, r0, #3
 8012d0a:	f9b2 6000 	ldrsh.w	r6, [r2]
 8012d0e:	2e15      	cmp	r6, #21
 8012d10:	f73f ae6c 	bgt.w	80129ec <forward_lite_dw_3x3_sssa8_ch+0x360>
 8012d14:	2e00      	cmp	r6, #0
 8012d16:	dd70      	ble.n	8012dfa <forward_lite_dw_3x3_sssa8_ch+0x76e>
 8012d18:	9c03      	ldr	r4, [sp, #12]
 8012d1a:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8012d1e:	9a02      	ldr	r2, [sp, #8]
 8012d20:	9f01      	ldr	r7, [sp, #4]
 8012d22:	3410      	adds	r4, #16
 8012d24:	3210      	adds	r2, #16
 8012d26:	f8de e000 	ldr.w	lr, [lr]
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	6809      	ldr	r1, [r1, #0]
 8012d2e:	4691      	mov	r9, r2
 8012d30:	940c      	str	r4, [sp, #48]	@ 0x30
 8012d32:	fb58 180e 	smmla	r8, r8, lr, r1
 8012d36:	fa48 f806 	asr.w	r8, r8, r6
 8012d3a:	463e      	mov	r6, r7
 8012d3c:	e66d      	b.n	8012a1a <forward_lite_dw_3x3_sssa8_ch+0x38e>
 8012d3e:	2900      	cmp	r1, #0
 8012d40:	dd42      	ble.n	8012dc8 <forward_lite_dw_3x3_sssa8_ch+0x73c>
 8012d42:	9803      	ldr	r0, [sp, #12]
 8012d44:	0062      	lsls	r2, r4, #1
 8012d46:	682d      	ldr	r5, [r5, #0]
 8012d48:	683c      	ldr	r4, [r7, #0]
 8012d4a:	f100 0708 	add.w	r7, r0, #8
 8012d4e:	fb52 5204 	smmla	r2, r2, r4, r5
 8012d52:	9801      	ldr	r0, [sp, #4]
 8012d54:	410a      	asrs	r2, r1
 8012d56:	9902      	ldr	r1, [sp, #8]
 8012d58:	f100 0e04 	add.w	lr, r0, #4
 8012d5c:	3108      	adds	r1, #8
 8012d5e:	f302 0207 	ssat	r2, #8, r2
 8012d62:	9800      	ldr	r0, [sp, #0]
 8012d64:	b252      	sxtb	r2, r2
 8012d66:	1c84      	adds	r4, r0, #2
 8012d68:	e61d      	b.n	80129a6 <forward_lite_dw_3x3_sssa8_ch+0x31a>
 8012d6a:	2900      	cmp	r1, #0
 8012d6c:	dd1d      	ble.n	8012daa <forward_lite_dw_3x3_sssa8_ch+0x71e>
 8012d6e:	0072      	lsls	r2, r6, #1
 8012d70:	f100 0e02 	add.w	lr, r0, #2
 8012d74:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 8012d78:	f857 6b04 	ldr.w	r6, [r7], #4
 8012d7c:	f855 8b04 	ldr.w	r8, [r5], #4
 8012d80:	fb52 8206 	smmla	r2, r2, r6, r8
 8012d84:	410a      	asrs	r2, r1
 8012d86:	e5eb      	b.n	8012960 <forward_lite_dw_3x3_sssa8_ch+0x2d4>
 8012d88:	9a01      	ldr	r2, [sp, #4]
 8012d8a:	f1c5 0501 	rsb	r5, r5, #1
 8012d8e:	3206      	adds	r2, #6
 8012d90:	fa09 f505 	lsl.w	r5, r9, r5
 8012d94:	f305 051f 	ssat	r5, #32, r5
 8012d98:	9803      	ldr	r0, [sp, #12]
 8012d9a:	683e      	ldr	r6, [r7, #0]
 8012d9c:	f100 0e0c 	add.w	lr, r0, #12
 8012da0:	fb55 f516 	smmulr	r5, r5, r6
 8012da4:	680e      	ldr	r6, [r1, #0]
 8012da6:	442e      	add	r6, r5
 8012da8:	e613      	b.n	80129d2 <forward_lite_dw_3x3_sssa8_ch+0x346>
 8012daa:	f1c1 0101 	rsb	r1, r1, #1
 8012dae:	f100 0e02 	add.w	lr, r0, #2
 8012db2:	fa06 f101 	lsl.w	r1, r6, r1
 8012db6:	f301 011f 	ssat	r1, #32, r1
 8012dba:	9f03      	ldr	r7, [sp, #12]
 8012dbc:	f857 2b04 	ldr.w	r2, [r7], #4
 8012dc0:	fb51 f212 	smmulr	r2, r1, r2
 8012dc4:	9d02      	ldr	r5, [sp, #8]
 8012dc6:	e5c8      	b.n	801295a <forward_lite_dw_3x3_sssa8_ch+0x2ce>
 8012dc8:	9a01      	ldr	r2, [sp, #4]
 8012dca:	f1c1 0101 	rsb	r1, r1, #1
 8012dce:	f102 0e04 	add.w	lr, r2, #4
 8012dd2:	fa04 f101 	lsl.w	r1, r4, r1
 8012dd6:	f301 011f 	ssat	r1, #32, r1
 8012dda:	9803      	ldr	r0, [sp, #12]
 8012ddc:	683a      	ldr	r2, [r7, #0]
 8012dde:	f100 0708 	add.w	r7, r0, #8
 8012de2:	fb51 f112 	smmulr	r1, r1, r2
 8012de6:	682a      	ldr	r2, [r5, #0]
 8012de8:	440a      	add	r2, r1
 8012dea:	9902      	ldr	r1, [sp, #8]
 8012dec:	3108      	adds	r1, #8
 8012dee:	f302 0207 	ssat	r2, #8, r2
 8012df2:	9800      	ldr	r0, [sp, #0]
 8012df4:	b252      	sxtb	r2, r2
 8012df6:	1c84      	adds	r4, r0, #2
 8012df8:	e5d5      	b.n	80129a6 <forward_lite_dw_3x3_sssa8_ch+0x31a>
 8012dfa:	9f01      	ldr	r7, [sp, #4]
 8012dfc:	f1c6 0201 	rsb	r2, r6, #1
 8012e00:	3708      	adds	r7, #8
 8012e02:	fa0a f202 	lsl.w	r2, sl, r2
 8012e06:	463e      	mov	r6, r7
 8012e08:	f302 021f 	ssat	r2, #32, r2
 8012e0c:	9c03      	ldr	r4, [sp, #12]
 8012e0e:	f8de e000 	ldr.w	lr, [lr]
 8012e12:	3410      	adds	r4, #16
 8012e14:	940c      	str	r4, [sp, #48]	@ 0x30
 8012e16:	fb52 fe1e 	smmulr	lr, r2, lr
 8012e1a:	9a02      	ldr	r2, [sp, #8]
 8012e1c:	6809      	ldr	r1, [r1, #0]
 8012e1e:	3210      	adds	r2, #16
 8012e20:	eb0e 0801 	add.w	r8, lr, r1
 8012e24:	e5f8      	b.n	8012a18 <forward_lite_dw_3x3_sssa8_ch+0x38c>
 8012e26:	1ea5      	subs	r5, r4, #2
 8012e28:	2301      	movs	r3, #1
 8012e2a:	3c01      	subs	r4, #1
 8012e2c:	f8d9 2000 	ldr.w	r2, [r9]
 8012e30:	fa03 f505 	lsl.w	r5, r3, r5
 8012e34:	f8da 3000 	ldr.w	r3, [sl]
 8012e38:	fb50 5303 	smmla	r3, r0, r3, r5
 8012e3c:	4123      	asrs	r3, r4
 8012e3e:	4413      	add	r3, r2
 8012e40:	f303 0307 	ssat	r3, #8, r3
 8012e44:	b25b      	sxtb	r3, r3
 8012e46:	f10e 0701 	add.w	r7, lr, #1
 8012e4a:	e663      	b.n	8012b14 <forward_lite_dw_3x3_sssa8_ch+0x488>
 8012e4c:	1ea5      	subs	r5, r4, #2
 8012e4e:	2301      	movs	r3, #1
 8012e50:	3c01      	subs	r4, #1
 8012e52:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8012e56:	fa03 f505 	lsl.w	r5, r3, r5
 8012e5a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012e5e:	fb50 5303 	smmla	r3, r0, r3, r5
 8012e62:	4123      	asrs	r3, r4
 8012e64:	4413      	add	r3, r2
 8012e66:	f303 0307 	ssat	r3, #8, r3
 8012e6a:	1c7a      	adds	r2, r7, #1
 8012e6c:	b25b      	sxtb	r3, r3
 8012e6e:	9201      	str	r2, [sp, #4]
 8012e70:	e6b0      	b.n	8012bd4 <forward_lite_dw_3x3_sssa8_ch+0x548>
 8012e72:	2e00      	cmp	r6, #0
 8012e74:	dd37      	ble.n	8012ee6 <forward_lite_dw_3x3_sssa8_ch+0x85a>
 8012e76:	f8da 2008 	ldr.w	r2, [sl, #8]
 8012e7a:	005b      	lsls	r3, r3, #1
 8012e7c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8012e80:	fb53 1302 	smmla	r3, r3, r2, r1
 8012e84:	4133      	asrs	r3, r6
 8012e86:	f303 0307 	ssat	r3, #8, r3
 8012e8a:	b25b      	sxtb	r3, r3
 8012e8c:	e709      	b.n	8012ca2 <forward_lite_dw_3x3_sssa8_ch+0x616>
 8012e8e:	f1c4 0201 	rsb	r2, r4, #1
 8012e92:	fa00 f202 	lsl.w	r2, r0, r2
 8012e96:	f302 021f 	ssat	r2, #32, r2
 8012e9a:	f8da 3000 	ldr.w	r3, [sl]
 8012e9e:	fb52 f213 	smmulr	r2, r2, r3
 8012ea2:	f8d9 3000 	ldr.w	r3, [r9]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	f303 0307 	ssat	r3, #8, r3
 8012eac:	b25b      	sxtb	r3, r3
 8012eae:	f10e 0701 	add.w	r7, lr, #1
 8012eb2:	e62f      	b.n	8012b14 <forward_lite_dw_3x3_sssa8_ch+0x488>
 8012eb4:	f1c4 0301 	rsb	r3, r4, #1
 8012eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8012ebc:	f302 021f 	ssat	r2, #32, r2
 8012ec0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012ec4:	fb52 f213 	smmulr	r2, r2, r3
 8012ec8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012ecc:	e7ca      	b.n	8012e64 <forward_lite_dw_3x3_sssa8_ch+0x7d8>
 8012ece:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8012ed0:	f8dd a0c8 	ldr.w	sl, [sp, #200]	@ 0xc8
 8012ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ed6:	e9dd 3910 	ldrd	r3, r9, [sp, #64]	@ 0x40
 8012eda:	9308      	str	r3, [sp, #32]
 8012edc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012ede:	9300      	str	r3, [sp, #0]
 8012ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ee2:	9305      	str	r3, [sp, #20]
 8012ee4:	e5b6      	b.n	8012a54 <forward_lite_dw_3x3_sssa8_ch+0x3c8>
 8012ee6:	f1c6 0601 	rsb	r6, r6, #1
 8012eea:	40b3      	lsls	r3, r6
 8012eec:	f303 031f 	ssat	r3, #32, r3
 8012ef0:	f8da 2008 	ldr.w	r2, [sl, #8]
 8012ef4:	fb53 f212 	smmulr	r2, r3, r2
 8012ef8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012efc:	4413      	add	r3, r2
 8012efe:	f303 0307 	ssat	r3, #8, r3
 8012f02:	b25b      	sxtb	r3, r3
 8012f04:	e6cd      	b.n	8012ca2 <forward_lite_dw_3x3_sssa8_ch+0x616>
 8012f06:	42a1      	cmp	r1, r4
 8012f08:	f840 7c04 	str.w	r7, [r0, #-4]
 8012f0c:	f100 0004 	add.w	r0, r0, #4
 8012f10:	f6ff abfb 	blt.w	801270a <forward_lite_dw_3x3_sssa8_ch+0x7e>
 8012f14:	e40d      	b.n	8012732 <forward_lite_dw_3x3_sssa8_ch+0xa6>
 8012f16:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8012f18:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 8012f1c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 8012f20:	9010      	str	r0, [sp, #64]	@ 0x40
 8012f22:	f000 8145 	beq.w	80131b0 <forward_lite_dw_3x3_sssa8_ch+0xb24>
 8012f26:	f10c 33ff 	add.w	r3, ip, #4294967295
 8012f2a:	f10e 0204 	add.w	r2, lr, #4
 8012f2e:	4671      	mov	r1, lr
 8012f30:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	eba9 0604 	sub.w	r6, r9, r4
 8012f3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012f3e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	eb0e 0304 	add.w	r3, lr, r4
 8012f48:	9203      	str	r2, [sp, #12]
 8012f4a:	00a2      	lsls	r2, r4, #2
 8012f4c:	9202      	str	r2, [sp, #8]
 8012f4e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8012f52:	9201      	str	r2, [sp, #4]
 8012f54:	901b      	str	r0, [sp, #108]	@ 0x6c
 8012f56:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012f58:	f8d1 a000 	ldr.w	sl, [r1]
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8012f62:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8012f66:	f105 0a04 	add.w	sl, r5, #4
 8012f6a:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8012f6e:	fa2f fa80 	sxtb16	sl, r0
 8012f72:	f8c5 a000 	str.w	sl, [r5]
 8012f76:	fa2f f090 	sxtb16	r0, r0, ror #8
 8012f7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012f7c:	6028      	str	r0, [r5, #0]
 8012f7e:	3504      	adds	r5, #4
 8012f80:	951b      	str	r5, [sp, #108]	@ 0x6c
 8012f82:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8012f84:	fa2f f582 	sxtb16	r5, r2
 8012f88:	3004      	adds	r0, #4
 8012f8a:	f840 5c04 	str.w	r5, [r0, #-4]
 8012f8e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8012f90:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012f94:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8012f96:	6002      	str	r2, [r0, #0]
 8012f98:	3004      	adds	r0, #4
 8012f9a:	f858 a001 	ldr.w	sl, [r8, r1]
 8012f9e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8012fa0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012fa2:	f858 2003 	ldr.w	r2, [r8, r3]
 8012fa6:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8012faa:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8012fae:	f105 0a04 	add.w	sl, r5, #4
 8012fb2:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8012fb6:	fa2f fa80 	sxtb16	sl, r0
 8012fba:	f8c5 a000 	str.w	sl, [r5]
 8012fbe:	fa2f f090 	sxtb16	r0, r0, ror #8
 8012fc2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012fc4:	6028      	str	r0, [r5, #0]
 8012fc6:	3504      	adds	r5, #4
 8012fc8:	951b      	str	r5, [sp, #108]	@ 0x6c
 8012fca:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8012fcc:	fa2f f582 	sxtb16	r5, r2
 8012fd0:	3004      	adds	r0, #4
 8012fd2:	f840 5c04 	str.w	r5, [r0, #-4]
 8012fd6:	901b      	str	r0, [sp, #108]	@ 0x6c
 8012fd8:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012fdc:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8012fde:	6002      	str	r2, [r0, #0]
 8012fe0:	3004      	adds	r0, #4
 8012fe2:	9a03      	ldr	r2, [sp, #12]
 8012fe4:	901b      	str	r0, [sp, #108]	@ 0x6c
 8012fe6:	f852 a003 	ldr.w	sl, [r2, r3]
 8012fea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012fec:	9a02      	ldr	r2, [sp, #8]
 8012fee:	58d2      	ldr	r2, [r2, r3]
 8012ff0:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8012ff4:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8012ff8:	f105 0a04 	add.w	sl, r5, #4
 8012ffc:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8013000:	fa2f fa80 	sxtb16	sl, r0
 8013004:	f8c5 a000 	str.w	sl, [r5]
 8013008:	fa2f f090 	sxtb16	r0, r0, ror #8
 801300c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801300e:	6028      	str	r0, [r5, #0]
 8013010:	3504      	adds	r5, #4
 8013012:	951b      	str	r5, [sp, #108]	@ 0x6c
 8013014:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8013016:	fa2f f582 	sxtb16	r5, r2
 801301a:	3004      	adds	r0, #4
 801301c:	f840 5c04 	str.w	r5, [r0, #-4]
 8013020:	901b      	str	r0, [sp, #108]	@ 0x6c
 8013022:	fa2f f292 	sxtb16	r2, r2, ror #8
 8013026:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8013028:	6002      	str	r2, [r0, #0]
 801302a:	3004      	adds	r0, #4
 801302c:	9a01      	ldr	r2, [sp, #4]
 801302e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8013030:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013032:	f852 a003 	ldr.w	sl, [r2, r3]
 8013036:	5872      	ldr	r2, [r6, r1]
 8013038:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 801303c:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8013040:	f105 0a04 	add.w	sl, r5, #4
 8013044:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8013048:	fa2f fa80 	sxtb16	sl, r0
 801304c:	f8c5 a000 	str.w	sl, [r5]
 8013050:	fa2f f090 	sxtb16	r0, r0, ror #8
 8013054:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013056:	6028      	str	r0, [r5, #0]
 8013058:	3504      	adds	r5, #4
 801305a:	951b      	str	r5, [sp, #108]	@ 0x6c
 801305c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801305e:	fa2f f582 	sxtb16	r5, r2
 8013062:	3004      	adds	r0, #4
 8013064:	f840 5c04 	str.w	r5, [r0, #-4]
 8013068:	901b      	str	r0, [sp, #108]	@ 0x6c
 801306a:	fa2f f292 	sxtb16	r2, r2, ror #8
 801306e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8013070:	6002      	str	r2, [r0, #0]
 8013072:	3004      	adds	r0, #4
 8013074:	58f2      	ldr	r2, [r6, r3]
 8013076:	901b      	str	r0, [sp, #108]	@ 0x6c
 8013078:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801307a:	eac2 2502 	pkhbt	r5, r2, r2, lsl #8
 801307e:	fa2f f585 	sxtb16	r5, r5
 8013082:	8005      	strh	r5, [r0, #0]
 8013084:	0c2d      	lsrs	r5, r5, #16
 8013086:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 801308a:	8045      	strh	r5, [r0, #2]
 801308c:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 8013090:	8082      	strh	r2, [r0, #4]
 8013092:	0c12      	lsrs	r2, r2, #16
 8013094:	3104      	adds	r1, #4
 8013096:	3008      	adds	r0, #8
 8013098:	f820 2c02 	strh.w	r2, [r0, #-2]
 801309c:	3304      	adds	r3, #4
 801309e:	9a00      	ldr	r2, [sp, #0]
 80130a0:	428a      	cmp	r2, r1
 80130a2:	f47f af57 	bne.w	8012f54 <forward_lite_dw_3x3_sssa8_ch+0x8c8>
 80130a6:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80130aa:	4602      	mov	r2, r0
 80130ac:	fa1f fc83 	uxth.w	ip, r3
 80130b0:	f014 0303 	ands.w	r3, r4, #3
 80130b4:	f43f ab0d 	beq.w	80126d2 <forward_lite_dw_3x3_sssa8_ch+0x46>
 80130b8:	3b01      	subs	r3, #1
 80130ba:	f10c 0101 	add.w	r1, ip, #1
 80130be:	b29e      	uxth	r6, r3
 80130c0:	f91e 300c 	ldrsb.w	r3, [lr, ip]
 80130c4:	b288      	uxth	r0, r1
 80130c6:	8013      	strh	r3, [r2, #0]
 80130c8:	eb0e 030c 	add.w	r3, lr, ip
 80130cc:	5719      	ldrsb	r1, [r3, r4]
 80130ce:	8051      	strh	r1, [r2, #2]
 80130d0:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80130d4:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 80130d8:	8093      	strh	r3, [r2, #4]
 80130da:	570b      	ldrsb	r3, [r1, r4]
 80130dc:	80d3      	strh	r3, [r2, #6]
 80130de:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 80130e2:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80130e6:	8111      	strh	r1, [r2, #8]
 80130e8:	5719      	ldrsb	r1, [r3, r4]
 80130ea:	8151      	strh	r1, [r2, #10]
 80130ec:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80130f0:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 80130f4:	8193      	strh	r3, [r2, #12]
 80130f6:	570b      	ldrsb	r3, [r1, r4]
 80130f8:	81d3      	strh	r3, [r2, #14]
 80130fa:	f911 3014 	ldrsb.w	r3, [r1, r4, lsl #1]
 80130fe:	8213      	strh	r3, [r2, #16]
 8013100:	2e00      	cmp	r6, #0
 8013102:	d043      	beq.n	801318c <forward_lite_dw_3x3_sssa8_ch+0xb00>
 8013104:	f91e 3000 	ldrsb.w	r3, [lr, r0]
 8013108:	f10c 0c02 	add.w	ip, ip, #2
 801310c:	2e01      	cmp	r6, #1
 801310e:	8253      	strh	r3, [r2, #18]
 8013110:	eb0e 0300 	add.w	r3, lr, r0
 8013114:	fa1f f58c 	uxth.w	r5, ip
 8013118:	5719      	ldrsb	r1, [r3, r4]
 801311a:	8291      	strh	r1, [r2, #20]
 801311c:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8013120:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8013124:	82d3      	strh	r3, [r2, #22]
 8013126:	570b      	ldrsb	r3, [r1, r4]
 8013128:	8313      	strh	r3, [r2, #24]
 801312a:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 801312e:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8013132:	8351      	strh	r1, [r2, #26]
 8013134:	5719      	ldrsb	r1, [r3, r4]
 8013136:	8391      	strh	r1, [r2, #28]
 8013138:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 801313c:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8013140:	83d3      	strh	r3, [r2, #30]
 8013142:	570b      	ldrsb	r3, [r1, r4]
 8013144:	8413      	strh	r3, [r2, #32]
 8013146:	f911 3014 	ldrsb.w	r3, [r1, r4, lsl #1]
 801314a:	8453      	strh	r3, [r2, #34]	@ 0x22
 801314c:	d01e      	beq.n	801318c <forward_lite_dw_3x3_sssa8_ch+0xb00>
 801314e:	f91e 3005 	ldrsb.w	r3, [lr, r5]
 8013152:	eb0e 0105 	add.w	r1, lr, r5
 8013156:	8493      	strh	r3, [r2, #36]	@ 0x24
 8013158:	570b      	ldrsb	r3, [r1, r4]
 801315a:	84d3      	strh	r3, [r2, #38]	@ 0x26
 801315c:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8013160:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8013164:	8511      	strh	r1, [r2, #40]	@ 0x28
 8013166:	5719      	ldrsb	r1, [r3, r4]
 8013168:	8551      	strh	r1, [r2, #42]	@ 0x2a
 801316a:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 801316e:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8013172:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8013174:	570b      	ldrsb	r3, [r1, r4]
 8013176:	85d3      	strh	r3, [r2, #46]	@ 0x2e
 8013178:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 801317c:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8013180:	8611      	strh	r1, [r2, #48]	@ 0x30
 8013182:	5719      	ldrsb	r1, [r3, r4]
 8013184:	8651      	strh	r1, [r2, #50]	@ 0x32
 8013186:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 801318a:	8693      	strh	r3, [r2, #52]	@ 0x34
 801318c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801318e:	44a1      	add	r9, r4
 8013190:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8013192:	4621      	mov	r1, r4
 8013194:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8013198:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801319a:	461d      	mov	r5, r3
 801319c:	9312      	str	r3, [sp, #72]	@ 0x48
 801319e:	f001 f809 	bl	80141b4 <align_factor_ch>
 80131a2:	f06f 0315 	mvn.w	r3, #21
 80131a6:	fb03 5304 	mla	r3, r3, r4, r5
 80131aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80131ac:	f7ff baa6 	b.w	80126fc <forward_lite_dw_3x3_sssa8_ch+0x70>
 80131b0:	4602      	mov	r2, r0
 80131b2:	ea4f 0844 	mov.w	r8, r4, lsl #1
 80131b6:	e77b      	b.n	80130b0 <forward_lite_dw_3x3_sssa8_ch+0xa24>

080131b8 <forward_lite_pw_sssa8_ch>:
 80131b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131bc:	b09b      	sub	sp, #108	@ 0x6c
 80131be:	460c      	mov	r4, r1
 80131c0:	2b02      	cmp	r3, #2
 80131c2:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 80131c6:	9215      	str	r2, [sp, #84]	@ 0x54
 80131c8:	9110      	str	r1, [sp, #64]	@ 0x40
 80131ca:	f99d 10a4 	ldrsb.w	r1, [sp, #164]	@ 0xa4
 80131ce:	f8bd 2090 	ldrh.w	r2, [sp, #144]	@ 0x90
 80131d2:	9111      	str	r1, [sp, #68]	@ 0x44
 80131d4:	f99d 10a8 	ldrsb.w	r1, [sp, #168]	@ 0xa8
 80131d8:	f8bd a094 	ldrh.w	sl, [sp, #148]	@ 0x94
 80131dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80131de:	f89d 10b0 	ldrb.w	r1, [sp, #176]	@ 0xb0
 80131e2:	9017      	str	r0, [sp, #92]	@ 0x5c
 80131e4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80131e6:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	@ 0xb8
 80131ea:	9118      	str	r1, [sp, #96]	@ 0x60
 80131ec:	f040 8097 	bne.w	801331e <forward_lite_pw_sssa8_ch+0x166>
 80131f0:	2a02      	cmp	r2, #2
 80131f2:	f040 8094 	bne.w	801331e <forward_lite_pw_sssa8_ch+0x166>
 80131f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	f000 81c3 	beq.w	8013584 <forward_lite_pw_sssa8_ch+0x3cc>
 80131fe:	1e63      	subs	r3, r4, #1
 8013200:	ea4f 079a 	mov.w	r7, sl, lsr #2
 8013204:	ea4f 09da 	mov.w	r9, sl, lsr #3
 8013208:	f00a 0503 	and.w	r5, sl, #3
 801320c:	085b      	lsrs	r3, r3, #1
 801320e:	f107 38ff 	add.w	r8, r7, #4294967295
 8013212:	00b9      	lsls	r1, r7, #2
 8013214:	900e      	str	r0, [sp, #56]	@ 0x38
 8013216:	fb0a f303 	mul.w	r3, sl, r3
 801321a:	9316      	str	r3, [sp, #88]	@ 0x58
 801321c:	fb04 f30a 	mul.w	r3, r4, sl
 8013220:	005b      	lsls	r3, r3, #1
 8013222:	9314      	str	r3, [sp, #80]	@ 0x50
 8013224:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013228:	f027 0901 	bic.w	r9, r7, #1
 801322c:	930d      	str	r3, [sp, #52]	@ 0x34
 801322e:	2300      	movs	r3, #0
 8013230:	ea4f 0e89 	mov.w	lr, r9, lsl #2
 8013234:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013236:	9312      	str	r3, [sp, #72]	@ 0x48
 8013238:	2c00      	cmp	r4, #0
 801323a:	d047      	beq.n	80132cc <forward_lite_pw_sssa8_ch+0x114>
 801323c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801323e:	f04f 0c00 	mov.w	ip, #0
 8013242:	b34f      	cbz	r7, 8013298 <forward_lite_pw_sssa8_ch+0xe0>
 8013244:	ea43 0200 	orr.w	r2, r3, r0
 8013248:	f1b8 0f08 	cmp.w	r8, #8
 801324c:	f3c2 0202 	ubfx	r2, r2, #0, #3
 8013250:	bf94      	ite	ls
 8013252:	2600      	movls	r6, #0
 8013254:	2601      	movhi	r6, #1
 8013256:	2a00      	cmp	r2, #0
 8013258:	bf18      	it	ne
 801325a:	2600      	movne	r6, #0
 801325c:	2e00      	cmp	r6, #0
 801325e:	f000 8145 	beq.w	80134ec <forward_lite_pw_sssa8_ch+0x334>
 8013262:	43da      	mvns	r2, r3
 8013264:	4402      	add	r2, r0
 8013266:	2a06      	cmp	r2, #6
 8013268:	f240 8140 	bls.w	80134ec <forward_lite_pw_sssa8_ch+0x334>
 801326c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801326e:	f1a3 0608 	sub.w	r6, r3, #8
 8013272:	eb00 0b02 	add.w	fp, r0, r2
 8013276:	4602      	mov	r2, r0
 8013278:	3608      	adds	r6, #8
 801327a:	ed96 7b00 	vldr	d7, [r6]
 801327e:	eca2 7b02 	vstmia	r2!, {d7}
 8013282:	4593      	cmp	fp, r2
 8013284:	d1f8      	bne.n	8013278 <forward_lite_pw_sssa8_ch+0xc0>
 8013286:	454f      	cmp	r7, r9
 8013288:	bf1c      	itt	ne
 801328a:	f853 200e 	ldrne.w	r2, [r3, lr]
 801328e:	f840 200e 	strne.w	r2, [r0, lr]
 8013292:	185a      	adds	r2, r3, r1
 8013294:	4613      	mov	r3, r2
 8013296:	4408      	add	r0, r1
 8013298:	b175      	cbz	r5, 80132b8 <forward_lite_pw_sssa8_ch+0x100>
 801329a:	f993 2000 	ldrsb.w	r2, [r3]
 801329e:	2d01      	cmp	r5, #1
 80132a0:	7002      	strb	r2, [r0, #0]
 80132a2:	d007      	beq.n	80132b4 <forward_lite_pw_sssa8_ch+0xfc>
 80132a4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80132a8:	2d03      	cmp	r5, #3
 80132aa:	7042      	strb	r2, [r0, #1]
 80132ac:	d102      	bne.n	80132b4 <forward_lite_pw_sssa8_ch+0xfc>
 80132ae:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80132b2:	7082      	strb	r2, [r0, #2]
 80132b4:	442b      	add	r3, r5
 80132b6:	4428      	add	r0, r5
 80132b8:	f10c 0c02 	add.w	ip, ip, #2
 80132bc:	4453      	add	r3, sl
 80132be:	45a4      	cmp	ip, r4
 80132c0:	dbbf      	blt.n	8013242 <forward_lite_pw_sssa8_ch+0x8a>
 80132c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80132c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80132c6:	4453      	add	r3, sl
 80132c8:	18d3      	adds	r3, r2, r3
 80132ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80132cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132ce:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80132d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80132d2:	4432      	add	r2, r6
 80132d4:	3302      	adds	r3, #2
 80132d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80132d8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80132da:	9312      	str	r3, [sp, #72]	@ 0x48
 80132dc:	4293      	cmp	r3, r2
 80132de:	dbab      	blt.n	8013238 <forward_lite_pw_sssa8_ch+0x80>
 80132e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80132e2:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80132e4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80132e6:	fb06 f304 	mul.w	r3, r6, r4
 80132ea:	3401      	adds	r4, #1
 80132ec:	1a85      	subs	r5, r0, r2
 80132ee:	edcd 0a0e 	vstr	s1, [sp, #56]	@ 0x38
 80132f2:	ed8d 0a0d 	vstr	s0, [sp, #52]	@ 0x34
 80132f6:	ea4f 0864 	mov.w	r8, r4, asr #1
 80132fa:	fb0a 5503 	mla	r5, sl, r3, r5
 80132fe:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8013302:	4629      	mov	r1, r5
 8013304:	f001 fbb4 	bl	8014a70 <st_int8_copy>
 8013308:	1c73      	adds	r3, r6, #1
 801330a:	eddd 0a0e 	vldr	s1, [sp, #56]	@ 0x38
 801330e:	ea4f 0b63 	mov.w	fp, r3, asr #1
 8013312:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8013316:	ed9d 0a0d 	vldr	s0, [sp, #52]	@ 0x34
 801331a:	9315      	str	r3, [sp, #84]	@ 0x54
 801331c:	e003      	b.n	8013326 <forward_lite_pw_sssa8_ch+0x16e>
 801331e:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 8013322:	46a0      	mov	r8, r4
 8013324:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8013326:	fb08 f20b 	mul.w	r2, r8, fp
 801332a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801332c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801332e:	920d      	str	r2, [sp, #52]	@ 0x34
 8013330:	fb01 3302 	mla	r3, r1, r2, r3
 8013334:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013336:	4299      	cmp	r1, r3
 8013338:	d205      	bcs.n	8013346 <forward_lite_pw_sssa8_ch+0x18e>
 801333a:	fb02 130a 	mla	r3, r2, sl, r1
 801333e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8013340:	429a      	cmp	r2, r3
 8013342:	f0c0 80cb 	bcc.w	80134dc <forward_lite_pw_sssa8_ch+0x324>
 8013346:	2301      	movs	r3, #1
 8013348:	930e      	str	r3, [sp, #56]	@ 0x38
 801334a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801334c:	2701      	movs	r7, #1
 801334e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8013350:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8013352:	4631      	mov	r1, r6
 8013354:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
 8013358:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801335a:	eb02 0903 	add.w	r9, r2, r3
 801335e:	464b      	mov	r3, r9
 8013360:	f000 ff28 	bl	80141b4 <align_factor_ch>
 8013364:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8013366:	4633      	mov	r3, r6
 8013368:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801336a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801336e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8013372:	9213      	str	r2, [sp, #76]	@ 0x4c
 8013374:	b1eb      	cbz	r3, 80133b2 <forward_lite_pw_sssa8_ch+0x1fa>
 8013376:	46a4      	mov	ip, r4
 8013378:	f1a9 0002 	sub.w	r0, r9, #2
 801337c:	46be      	mov	lr, r7
 801337e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013380:	9512      	str	r5, [sp, #72]	@ 0x48
 8013382:	e003      	b.n	801338c <forward_lite_pw_sssa8_ch+0x1d4>
 8013384:	6013      	str	r3, [r2, #0]
 8013386:	3204      	adds	r2, #4
 8013388:	42b2      	cmp	r2, r6
 801338a:	d010      	beq.n	80133ae <forward_lite_pw_sssa8_ch+0x1f6>
 801338c:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 8013390:	1e59      	subs	r1, r3, #1
 8013392:	fa0e f503 	lsl.w	r5, lr, r3
 8013396:	fa04 f303 	lsl.w	r3, r4, r3
 801339a:	b289      	uxth	r1, r1
 801339c:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 80133a0:	2914      	cmp	r1, #20
 80133a2:	d9ef      	bls.n	8013384 <forward_lite_pw_sssa8_ch+0x1cc>
 80133a4:	6014      	str	r4, [r2, #0]
 80133a6:	3204      	adds	r2, #4
 80133a8:	2700      	movs	r7, #0
 80133aa:	42b2      	cmp	r2, r6
 80133ac:	d1ee      	bne.n	801338c <forward_lite_pw_sssa8_ch+0x1d4>
 80133ae:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80133b0:	4664      	mov	r4, ip
 80133b2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80133b4:	2b01      	cmp	r3, #1
 80133b6:	f000 80a2 	beq.w	80134fe <forward_lite_pw_sssa8_ch+0x346>
 80133ba:	2300      	movs	r3, #0
 80133bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80133be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133c0:	07db      	lsls	r3, r3, #31
 80133c2:	d55b      	bpl.n	801347c <forward_lite_pw_sssa8_ch+0x2c4>
 80133c4:	eb08 030b 	add.w	r3, r8, fp
 80133c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80133ca:	3302      	adds	r3, #2
 80133cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80133d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80133d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d04e      	beq.n	8013476 <forward_lite_pw_sssa8_ch+0x2be>
 80133d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133da:	fb08 fb0a 	mul.w	fp, r8, sl
 80133de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80133e0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80133e2:	2b03      	cmp	r3, #3
 80133e4:	bf08      	it	eq
 80133e6:	f112 0f80 	cmneq.w	r2, #128	@ 0x80
 80133ea:	bf0c      	ite	eq
 80133ec:	2301      	moveq	r3, #1
 80133ee:	2300      	movne	r3, #0
 80133f0:	2940      	cmp	r1, #64	@ 0x40
 80133f2:	bf08      	it	eq
 80133f4:	f1ba 0f40 	cmpeq.w	sl, #64	@ 0x40
 80133f8:	ea07 0203 	and.w	r2, r7, r3
 80133fc:	fb01 f708 	mul.w	r7, r1, r8
 8013400:	bf0c      	ite	eq
 8013402:	2301      	moveq	r3, #1
 8013404:	2300      	movne	r3, #0
 8013406:	2c05      	cmp	r4, #5
 8013408:	f040 808f 	bne.w	801352a <forward_lite_pw_sssa8_ch+0x372>
 801340c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801340e:	2919      	cmp	r1, #25
 8013410:	f040 808b 	bne.w	801352a <forward_lite_pw_sssa8_ch+0x372>
 8013414:	2b00      	cmp	r3, #0
 8013416:	d034      	beq.n	8013482 <forward_lite_pw_sssa8_ch+0x2ca>
 8013418:	2a00      	cmp	r2, #0
 801341a:	f040 80b5 	bne.w	8013588 <forward_lite_pw_sssa8_ch+0x3d0>
 801341e:	4614      	mov	r4, r2
 8013420:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8013424:	f04f 0a40 	mov.w	sl, #64	@ 0x40
 8013428:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801342a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801342c:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 8013430:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013432:	4628      	mov	r0, r5
 8013434:	f8cd a010 	str.w	sl, [sp, #16]
 8013438:	3401      	adds	r4, #1
 801343a:	9228      	str	r2, [sp, #160]	@ 0xa0
 801343c:	445d      	add	r5, fp
 801343e:	9126      	str	r1, [sp, #152]	@ 0x98
 8013440:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 8013444:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013446:	9309      	str	r3, [sp, #36]	@ 0x24
 8013448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801344a:	9308      	str	r3, [sp, #32]
 801344c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801344e:	9307      	str	r3, [sp, #28]
 8013450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013452:	e9cd a305 	strd	sl, r3, [sp, #20]
 8013456:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013458:	9303      	str	r3, [sp, #12]
 801345a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801345c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013460:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8013462:	9300      	str	r3, [sp, #0]
 8013464:	4643      	mov	r3, r8
 8013466:	f002 f893 	bl	8015590 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 801346a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801346c:	44b8      	add	r8, r7
 801346e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8013470:	42a3      	cmp	r3, r4
 8013472:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8013474:	d1dc      	bne.n	8013430 <forward_lite_pw_sssa8_ch+0x278>
 8013476:	b01b      	add	sp, #108	@ 0x6c
 8013478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801347e:	9314      	str	r3, [sp, #80]	@ 0x50
 8013480:	e7a7      	b.n	80133d2 <forward_lite_pw_sssa8_ch+0x21a>
 8013482:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 8013486:	461c      	mov	r4, r3
 8013488:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801348a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801348c:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 8013490:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013492:	4628      	mov	r0, r5
 8013494:	9228      	str	r2, [sp, #160]	@ 0xa0
 8013496:	3401      	adds	r4, #1
 8013498:	9126      	str	r1, [sp, #152]	@ 0x98
 801349a:	445d      	add	r5, fp
 801349c:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 80134a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80134a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80134a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80134a6:	9308      	str	r3, [sp, #32]
 80134a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134aa:	9307      	str	r3, [sp, #28]
 80134ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80134ae:	e9cd a305 	strd	sl, r3, [sp, #20]
 80134b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80134b4:	9304      	str	r3, [sp, #16]
 80134b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80134b8:	9303      	str	r3, [sp, #12]
 80134ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80134bc:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80134c0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80134c2:	9300      	str	r3, [sp, #0]
 80134c4:	4643      	mov	r3, r8
 80134c6:	f002 f863 	bl	8015590 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 80134ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80134cc:	44b8      	add	r8, r7
 80134ce:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80134d0:	42a3      	cmp	r3, r4
 80134d2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80134d4:	d1dc      	bne.n	8013490 <forward_lite_pw_sssa8_ch+0x2d8>
 80134d6:	b01b      	add	sp, #108	@ 0x6c
 80134d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80134de:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 80134e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80134e4:	2301      	movs	r3, #1
 80134e6:	469b      	mov	fp, r3
 80134e8:	9315      	str	r3, [sp, #84]	@ 0x54
 80134ea:	e72e      	b.n	801334a <forward_lite_pw_sssa8_ch+0x192>
 80134ec:	185a      	adds	r2, r3, r1
 80134ee:	4606      	mov	r6, r0
 80134f0:	f853 bb04 	ldr.w	fp, [r3], #4
 80134f4:	429a      	cmp	r2, r3
 80134f6:	f846 bb04 	str.w	fp, [r6], #4
 80134fa:	d1f9      	bne.n	80134f0 <forward_lite_pw_sssa8_ch+0x338>
 80134fc:	e6ca      	b.n	8013294 <forward_lite_pw_sssa8_ch+0xdc>
 80134fe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013500:	f06f 0309 	mvn.w	r3, #9
 8013504:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8013506:	fb03 1302 	mla	r3, r3, r2, r1
 801350a:	fb02 f20a 	mul.w	r2, r2, sl
 801350e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8013512:	f6ff af52 	blt.w	80133ba <forward_lite_pw_sssa8_ch+0x202>
 8013516:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013518:	4653      	mov	r3, sl
 801351a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801351c:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801351e:	e9cd a600 	strd	sl, r6, [sp]
 8013522:	f001 fdef 	bl	8015104 <st_sssa8_ch_fullW_prefetch>
 8013526:	9612      	str	r6, [sp, #72]	@ 0x48
 8013528:	e749      	b.n	80133be <forward_lite_pw_sssa8_ch+0x206>
 801352a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801352e:	2400      	movs	r4, #0
 8013530:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8013532:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8013534:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 8013538:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801353a:	4628      	mov	r0, r5
 801353c:	9228      	str	r2, [sp, #160]	@ 0xa0
 801353e:	3401      	adds	r4, #1
 8013540:	9126      	str	r1, [sp, #152]	@ 0x98
 8013542:	445d      	add	r5, fp
 8013544:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 8013548:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801354a:	9309      	str	r3, [sp, #36]	@ 0x24
 801354c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801354e:	9308      	str	r3, [sp, #32]
 8013550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013552:	9307      	str	r3, [sp, #28]
 8013554:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013556:	e9cd a305 	strd	sl, r3, [sp, #20]
 801355a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801355c:	9304      	str	r3, [sp, #16]
 801355e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013560:	9303      	str	r3, [sp, #12]
 8013562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013564:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013568:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801356a:	9300      	str	r3, [sp, #0]
 801356c:	4643      	mov	r3, r8
 801356e:	f002 f80f 	bl	8015590 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 8013572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013574:	44b8      	add	r8, r7
 8013576:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8013578:	42a3      	cmp	r3, r4
 801357a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801357c:	d1dc      	bne.n	8013538 <forward_lite_pw_sssa8_ch+0x380>
 801357e:	b01b      	add	sp, #108	@ 0x6c
 8013580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013584:	461a      	mov	r2, r3
 8013586:	e6ac      	b.n	80132e2 <forward_lite_pw_sssa8_ch+0x12a>
 8013588:	2400      	movs	r4, #0
 801358a:	f04f 0a05 	mov.w	sl, #5
 801358e:	f04f 0803 	mov.w	r8, #3
 8013592:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013594:	4628      	mov	r0, r5
 8013596:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8013598:	3401      	adds	r4, #1
 801359a:	f8cd 801c 	str.w	r8, [sp, #28]
 801359e:	445d      	add	r5, fp
 80135a0:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 80135a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80135a6:	e9cd a308 	strd	sl, r3, [sp, #32]
 80135aa:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80135ae:	9306      	str	r3, [sp, #24]
 80135b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80135b2:	9303      	str	r3, [sp, #12]
 80135b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135b6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80135ba:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80135bc:	9300      	str	r3, [sp, #0]
 80135be:	2340      	movs	r3, #64	@ 0x40
 80135c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80135c4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80135c6:	461a      	mov	r2, r3
 80135c8:	443a      	add	r2, r7
 80135ca:	922d      	str	r2, [sp, #180]	@ 0xb4
 80135cc:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80135ce:	f002 fb8f 	bl	8015cf0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>
 80135d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135d4:	42a3      	cmp	r3, r4
 80135d6:	d1dc      	bne.n	8013592 <forward_lite_pw_sssa8_ch+0x3da>
 80135d8:	e74d      	b.n	8013476 <forward_lite_pw_sssa8_ch+0x2be>
 80135da:	bf00      	nop

080135dc <forward_lite_conv2d_rgb_sssa8_ch>:
 80135dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e0:	461e      	mov	r6, r3
 80135e2:	460f      	mov	r7, r1
 80135e4:	005d      	lsls	r5, r3, #1
 80135e6:	4680      	mov	r8, r0
 80135e8:	4631      	mov	r1, r6
 80135ea:	ed2d 8b02 	vpush	{d8}
 80135ee:	b0d7      	sub	sp, #348	@ 0x15c
 80135f0:	ee08 2a10 	vmov	s16, r2
 80135f4:	ee08 2a90 	vmov	s17, r2
 80135f8:	9614      	str	r6, [sp, #80]	@ 0x50
 80135fa:	f8bd 618c 	ldrh.w	r6, [sp, #396]	@ 0x18c
 80135fe:	f8dd 91b0 	ldr.w	r9, [sp, #432]	@ 0x1b0
 8013602:	9626      	str	r6, [sp, #152]	@ 0x98
 8013604:	f8bd 6190 	ldrh.w	r6, [sp, #400]	@ 0x190
 8013608:	eba9 0343 	sub.w	r3, r9, r3, lsl #1
 801360c:	f8bd 4188 	ldrh.w	r4, [sp, #392]	@ 0x188
 8013610:	960f      	str	r6, [sp, #60]	@ 0x3c
 8013612:	f99d 619c 	ldrsb.w	r6, [sp, #412]	@ 0x19c
 8013616:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013618:	960b      	str	r6, [sp, #44]	@ 0x2c
 801361a:	f89d 61a4 	ldrb.w	r6, [sp, #420]	@ 0x1a4
 801361e:	941c      	str	r4, [sp, #112]	@ 0x70
 8013620:	18d4      	adds	r4, r2, r3
 8013622:	9627      	str	r6, [sp, #156]	@ 0x9c
 8013624:	f8bd 61ac 	ldrh.w	r6, [sp, #428]	@ 0x1ac
 8013628:	4623      	mov	r3, r4
 801362a:	9868      	ldr	r0, [sp, #416]	@ 0x1a0
 801362c:	f99d b198 	ldrsb.w	fp, [sp, #408]	@ 0x198
 8013630:	960e      	str	r6, [sp, #56]	@ 0x38
 8013632:	f8dd a1a8 	ldr.w	sl, [sp, #424]	@ 0x1a8
 8013636:	f000 fdbd 	bl	80141b4 <align_factor_ch>
 801363a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 801363c:	ee18 1a10 	vmov	r1, s16
 8013640:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013642:	9301      	str	r3, [sp, #4]
 8013644:	9b6d      	ldr	r3, [sp, #436]	@ 0x1b4
 8013646:	9e6d      	ldr	r6, [sp, #436]	@ 0x1b4
 8013648:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801364a:	e9cd b302 	strd	fp, r3, [sp, #8]
 801364e:	18ab      	adds	r3, r5, r2
 8013650:	9000      	str	r0, [sp, #0]
 8013652:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013656:	4616      	mov	r6, r2
 8013658:	9313      	str	r3, [sp, #76]	@ 0x4c
 801365a:	4603      	mov	r3, r0
 801365c:	2003      	movs	r0, #3
 801365e:	f001 f91f 	bl	80148a0 <st_sssa8_ch_convolve_rank1upd>
 8013662:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013664:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013666:	fb10 f300 	smulbb	r3, r0, r0
 801366a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801366e:	b298      	uxth	r0, r3
 8013670:	ebc6 7346 	rsb	r3, r6, r6, lsl #29
 8013674:	9015      	str	r0, [sp, #84]	@ 0x54
 8013676:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801367a:	932f      	str	r3, [sp, #188]	@ 0xbc
 801367c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8013680:	9330      	str	r3, [sp, #192]	@ 0xc0
 8013682:	b1de      	cbz	r6, 80136bc <forward_lite_conv2d_rgb_sssa8_ch+0xe0>
 8013684:	4621      	mov	r1, r4
 8013686:	1d1a      	adds	r2, r3, #4
 8013688:	f04f 0e01 	mov.w	lr, #1
 801368c:	442c      	add	r4, r5
 801368e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013690:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8013694:	1e58      	subs	r0, r3, #1
 8013696:	fa0e fc03 	lsl.w	ip, lr, r3
 801369a:	fa06 f303 	lsl.w	r3, r6, r3
 801369e:	b280      	uxth	r0, r0
 80136a0:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 80136a4:	2814      	cmp	r0, #20
 80136a6:	f200 8116 	bhi.w	80138d6 <forward_lite_conv2d_rgb_sssa8_ch+0x2fa>
 80136aa:	42a1      	cmp	r1, r4
 80136ac:	f842 3c04 	str.w	r3, [r2, #-4]
 80136b0:	f102 0204 	add.w	r2, r2, #4
 80136b4:	d1ec      	bne.n	8013690 <forward_lite_conv2d_rgb_sssa8_ch+0xb4>
 80136b6:	9b6d      	ldr	r3, [sp, #436]	@ 0x1b4
 80136b8:	eb03 0409 	add.w	r4, r3, r9
 80136bc:	1b63      	subs	r3, r4, r5
 80136be:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80136c0:	aa36      	add	r2, sp, #216	@ 0xd8
 80136c2:	a94c      	add	r1, sp, #304	@ 0x130
 80136c4:	9331      	str	r3, [sp, #196]	@ 0xc4
 80136c6:	a842      	add	r0, sp, #264	@ 0x108
 80136c8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80136ca:	f013 0f01 	tst.w	r3, #1
 80136ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136d0:	bf18      	it	ne
 80136d2:	3302      	addne	r3, #2
 80136d4:	fb03 f303 	mul.w	r3, r3, r3
 80136d8:	931d      	str	r3, [sp, #116]	@ 0x74
 80136da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136dc:	e9cd 333b 	strd	r3, r3, [sp, #236]	@ 0xec
 80136e0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80136e2:	e9cd 3350 	strd	r3, r3, [sp, #320]	@ 0x140
 80136e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136e8:	e9cd 334e 	strd	r3, r3, [sp, #312]	@ 0x138
 80136ec:	ab3e      	add	r3, sp, #248	@ 0xf8
 80136ee:	9300      	str	r3, [sp, #0]
 80136f0:	ab3a      	add	r3, sp, #232	@ 0xe8
 80136f2:	e9cd 443f 	strd	r4, r4, [sp, #252]	@ 0xfc
 80136f6:	e9cd 7737 	strd	r7, r7, [sp, #220]	@ 0xdc
 80136fa:	f000 fe75 	bl	80143e8 <ai_padding_opt_init>
 80136fe:	fb04 f304 	mul.w	r3, r4, r4
 8013702:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8013704:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	@ 0x50
 8013708:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801370c:	fb01 f403 	mul.w	r4, r1, r3
 8013710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013714:	fb01 f202 	mul.w	r2, r1, r2
 8013718:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801371a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801371e:	901e      	str	r0, [sp, #120]	@ 0x78
 8013720:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013724:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 8013728:	930d      	str	r3, [sp, #52]	@ 0x34
 801372a:	bfa8      	it	ge
 801372c:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 8013730:	42a2      	cmp	r2, r4
 8013732:	f340 81c4 	ble.w	8013abe <forward_lite_conv2d_rgb_sssa8_ch+0x4e2>
 8013736:	2300      	movs	r3, #0
 8013738:	932b      	str	r3, [sp, #172]	@ 0xac
 801373a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801373c:	fbb4 f3f3 	udiv	r3, r4, r3
 8013740:	b29b      	uxth	r3, r3
 8013742:	4619      	mov	r1, r3
 8013744:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013746:	4299      	cmp	r1, r3
 8013748:	bf28      	it	cs
 801374a:	4619      	movcs	r1, r3
 801374c:	fbb3 f2f1 	udiv	r2, r3, r1
 8013750:	fb01 3312 	mls	r3, r1, r2, r3
 8013754:	b292      	uxth	r2, r2
 8013756:	912c      	str	r1, [sp, #176]	@ 0xb0
 8013758:	b29b      	uxth	r3, r3
 801375a:	9222      	str	r2, [sp, #136]	@ 0x88
 801375c:	b11b      	cbz	r3, 8013766 <forward_lite_conv2d_rgb_sssa8_ch+0x18a>
 801375e:	4613      	mov	r3, r2
 8013760:	3301      	adds	r3, #1
 8013762:	b29b      	uxth	r3, r3
 8013764:	9322      	str	r3, [sp, #136]	@ 0x88
 8013766:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013768:	2900      	cmp	r1, #0
 801376a:	f000 8196 	beq.w	8013a9a <forward_lite_conv2d_rgb_sssa8_ch+0x4be>
 801376e:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8013770:	fa0f fb8b 	sxth.w	fp, fp
 8013774:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8013776:	eba0 0280 	sub.w	r2, r0, r0, lsl #2
 801377a:	1b03      	subs	r3, r0, r4
 801377c:	1a26      	subs	r6, r4, r0
 801377e:	4490      	add	r8, r2
 8013780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013784:	962e      	str	r6, [sp, #184]	@ 0xb8
 8013786:	9628      	str	r6, [sp, #160]	@ 0xa0
 8013788:	4443      	add	r3, r8
 801378a:	46d8      	mov	r8, fp
 801378c:	46bb      	mov	fp, r7
 801378e:	9311      	str	r3, [sp, #68]	@ 0x44
 8013790:	1ccb      	adds	r3, r1, #3
 8013792:	4453      	add	r3, sl
 8013794:	e9cd 3a23 	strd	r3, sl, [sp, #140]	@ 0x8c
 8013798:	1c8b      	adds	r3, r1, #2
 801379a:	9333      	str	r3, [sp, #204]	@ 0xcc
 801379c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801379e:	fb01 f303 	mul.w	r3, r1, r3
 80137a2:	9334      	str	r3, [sp, #208]	@ 0xd0
 80137a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137a6:	fb07 f303 	mul.w	r3, r7, r3
 80137aa:	9335      	str	r3, [sp, #212]	@ 0xd4
 80137ac:	fb07 f300 	mul.w	r3, r7, r0
 80137b0:	9332      	str	r3, [sp, #200]	@ 0xc8
 80137b2:	2300      	movs	r3, #0
 80137b4:	9325      	str	r3, [sp, #148]	@ 0x94
 80137b6:	2301      	movs	r3, #1
 80137b8:	9321      	str	r3, [sp, #132]	@ 0x84
 80137ba:	a842      	add	r0, sp, #264	@ 0x108
 80137bc:	f000 fe6e 	bl	801449c <ai_padding_opt_phase1>
 80137c0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80137c2:	2b03      	cmp	r3, #3
 80137c4:	f000 8176 	beq.w	8013ab4 <forward_lite_conv2d_rgb_sssa8_ch+0x4d8>
 80137c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80137ca:	9318      	str	r3, [sp, #96]	@ 0x60
 80137cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80137ce:	932a      	str	r3, [sp, #168]	@ 0xa8
 80137d0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	f000 8166 	beq.w	8013aa4 <forward_lite_conv2d_rgb_sssa8_ch+0x4c8>
 80137d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f000 8145 	beq.w	8013a6a <forward_lite_conv2d_rgb_sssa8_ch+0x48e>
 80137e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80137e2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80137e4:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80137e6:	469a      	mov	sl, r3
 80137e8:	1a9a      	subs	r2, r3, r2
 80137ea:	edcd 8a29 	vstr	s17, [sp, #164]	@ 0xa4
 80137ee:	9210      	str	r2, [sp, #64]	@ 0x40
 80137f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80137f2:	9220      	str	r2, [sp, #128]	@ 0x80
 80137f4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80137f6:	1a52      	subs	r2, r2, r1
 80137f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80137fa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80137fc:	921f      	str	r2, [sp, #124]	@ 0x7c
 80137fe:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8013800:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013802:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8013804:	9219      	str	r2, [sp, #100]	@ 0x64
 8013806:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8013808:	ee08 2a10 	vmov	s16, r2
 801380c:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 801380e:	921a      	str	r2, [sp, #104]	@ 0x68
 8013810:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013812:	921b      	str	r2, [sp, #108]	@ 0x6c
 8013814:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013816:	4252      	negs	r2, r2
 8013818:	922d      	str	r2, [sp, #180]	@ 0xb4
 801381a:	9b46      	ldr	r3, [sp, #280]	@ 0x118
 801381c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801381e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013820:	9343      	str	r3, [sp, #268]	@ 0x10c
 8013822:	9116      	str	r1, [sp, #88]	@ 0x58
 8013824:	2100      	movs	r1, #0
 8013826:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8013828:	9242      	str	r2, [sp, #264]	@ 0x108
 801382a:	9344      	str	r3, [sp, #272]	@ 0x110
 801382c:	910c      	str	r1, [sp, #48]	@ 0x30
 801382e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013830:	e9dd 542d 	ldrd	r5, r4, [sp, #180]	@ 0xb4
 8013834:	2a00      	cmp	r2, #0
 8013836:	d045      	beq.n	80138c4 <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 8013838:	3a01      	subs	r2, #1
 801383a:	9242      	str	r2, [sp, #264]	@ 0x108
 801383c:	2201      	movs	r2, #1
 801383e:	f8ad 212e 	strh.w	r2, [sp, #302]	@ 0x12e
 8013842:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013844:	458a      	cmp	sl, r1
 8013846:	dd2d      	ble.n	80138a4 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 8013848:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801384c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801384e:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 8013852:	468c      	mov	ip, r1
 8013854:	4402      	add	r2, r0
 8013856:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013858:	42a5      	cmp	r5, r4
 801385a:	da1e      	bge.n	801389a <forward_lite_conv2d_rgb_sssa8_ch+0x2be>
 801385c:	1d9a      	adds	r2, r3, #6
 801385e:	eb09 0649 	add.w	r6, r9, r9, lsl #1
 8013862:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013864:	4629      	mov	r1, r5
 8013866:	441e      	add	r6, r3
 8013868:	4561      	cmp	r1, ip
 801386a:	460f      	mov	r7, r1
 801386c:	f04f 0000 	mov.w	r0, #0
 8013870:	f1a2 0e06 	sub.w	lr, r2, #6
 8013874:	bf38      	it	cc
 8013876:	4667      	movcc	r7, ip
 8013878:	4613      	mov	r3, r2
 801387a:	f368 000f 	bfi	r0, r8, #0, #16
 801387e:	45bb      	cmp	fp, r7
 8013880:	f368 401f 	bfi	r0, r8, #16, #16
 8013884:	d832      	bhi.n	80138ec <forward_lite_conv2d_rgb_sssa8_ch+0x310>
 8013886:	3101      	adds	r1, #1
 8013888:	f822 8c06 	strh.w	r8, [r2, #-6]
 801388c:	f842 0c04 	str.w	r0, [r2, #-4]
 8013890:	3603      	adds	r6, #3
 8013892:	42a1      	cmp	r1, r4
 8013894:	f102 0206 	add.w	r2, r2, #6
 8013898:	d1e6      	bne.n	8013868 <forward_lite_conv2d_rgb_sssa8_ch+0x28c>
 801389a:	f10c 0c01 	add.w	ip, ip, #1
 801389e:	44d9      	add	r9, fp
 80138a0:	45d4      	cmp	ip, sl
 80138a2:	d1d9      	bne.n	8013858 <forward_lite_conv2d_rgb_sssa8_ch+0x27c>
 80138a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d071      	beq.n	801398e <forward_lite_conv2d_rgb_sssa8_ch+0x3b2>
 80138aa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80138ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80138ae:	440c      	add	r4, r1
 80138b0:	440d      	add	r5, r1
 80138b2:	3201      	adds	r2, #1
 80138b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80138b6:	428a      	cmp	r2, r1
 80138b8:	920c      	str	r2, [sp, #48]	@ 0x30
 80138ba:	f000 808e 	beq.w	80139da <forward_lite_conv2d_rgb_sssa8_ch+0x3fe>
 80138be:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 80138c0:	2a00      	cmp	r2, #0
 80138c2:	d1b9      	bne.n	8013838 <forward_lite_conv2d_rgb_sssa8_ch+0x25c>
 80138c4:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80138c6:	bb5a      	cbnz	r2, 8013920 <forward_lite_conv2d_rgb_sssa8_ch+0x344>
 80138c8:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 80138ca:	3a01      	subs	r2, #1
 80138cc:	9244      	str	r2, [sp, #272]	@ 0x110
 80138ce:	2201      	movs	r2, #1
 80138d0:	f8ad 212e 	strh.w	r2, [sp, #302]	@ 0x12e
 80138d4:	e7b5      	b.n	8013842 <forward_lite_conv2d_rgb_sssa8_ch+0x266>
 80138d6:	42a1      	cmp	r1, r4
 80138d8:	f842 6c04 	str.w	r6, [r2, #-4]
 80138dc:	f102 0204 	add.w	r2, r2, #4
 80138e0:	f47f aed6 	bne.w	8013690 <forward_lite_conv2d_rgb_sssa8_ch+0xb4>
 80138e4:	9b6d      	ldr	r3, [sp, #436]	@ 0x1b4
 80138e6:	eb03 0409 	add.w	r4, r3, r9
 80138ea:	e6e7      	b.n	80136bc <forward_lite_conv2d_rgb_sssa8_ch+0xe0>
 80138ec:	f856 3b03 	ldr.w	r3, [r6], #3
 80138f0:	3101      	adds	r1, #1
 80138f2:	fa2f f083 	sxtb16	r0, r3
 80138f6:	ea4f 2733 	mov.w	r7, r3, ror #8
 80138fa:	42a1      	cmp	r1, r4
 80138fc:	4613      	mov	r3, r2
 80138fe:	f102 0206 	add.w	r2, r2, #6
 8013902:	fa2f f787 	sxtb16	r7, r7
 8013906:	eac7 0700 	pkhbt	r7, r7, r0
 801390a:	f8ce 7002 	str.w	r7, [lr, #2]
 801390e:	f822 0c0c 	strh.w	r0, [r2, #-12]
 8013912:	d1a9      	bne.n	8013868 <forward_lite_conv2d_rgb_sssa8_ch+0x28c>
 8013914:	f10c 0c01 	add.w	ip, ip, #1
 8013918:	44d9      	add	r9, fp
 801391a:	45d4      	cmp	ip, sl
 801391c:	d19c      	bne.n	8013858 <forward_lite_conv2d_rgb_sssa8_ch+0x27c>
 801391e:	e7c1      	b.n	80138a4 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 8013920:	3a01      	subs	r2, #1
 8013922:	9243      	str	r2, [sp, #268]	@ 0x10c
 8013924:	f8bd 212c 	ldrh.w	r2, [sp, #300]	@ 0x12c
 8013928:	2a01      	cmp	r2, #1
 801392a:	f8ad 212e 	strh.w	r2, [sp, #302]	@ 0x12e
 801392e:	d088      	beq.n	8013842 <forward_lite_conv2d_rgb_sssa8_ch+0x266>
 8013930:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013932:	4592      	cmp	sl, r2
 8013934:	ddb6      	ble.n	80138a4 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 8013936:	eba4 0e05 	sub.w	lr, r4, r5
 801393a:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 801393e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013940:	4694      	mov	ip, r2
 8013942:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013946:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8013948:	4489      	add	r9, r1
 801394a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801394e:	42a5      	cmp	r5, r4
 8013950:	da15      	bge.n	801397e <forward_lite_conv2d_rgb_sssa8_ch+0x3a2>
 8013952:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8013956:	eb03 000e 	add.w	r0, r3, lr
 801395a:	4449      	add	r1, r9
 801395c:	3306      	adds	r3, #6
 801395e:	f851 2b03 	ldr.w	r2, [r1], #3
 8013962:	fa2f f682 	sxtb16	r6, r2
 8013966:	4283      	cmp	r3, r0
 8013968:	ea4f 2232 	mov.w	r2, r2, ror #8
 801396c:	f823 6c06 	strh.w	r6, [r3, #-6]
 8013970:	fa2f f282 	sxtb16	r2, r2
 8013974:	eac2 0206 	pkhbt	r2, r2, r6
 8013978:	f843 2c04 	str.w	r2, [r3, #-4]
 801397c:	d1ee      	bne.n	801395c <forward_lite_conv2d_rgb_sssa8_ch+0x380>
 801397e:	f10c 0c01 	add.w	ip, ip, #1
 8013982:	445f      	add	r7, fp
 8013984:	45d4      	cmp	ip, sl
 8013986:	d1e2      	bne.n	801394e <forward_lite_conv2d_rgb_sssa8_ch+0x372>
 8013988:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801398a:	429a      	cmp	r2, r3
 801398c:	d18d      	bne.n	80138aa <forward_lite_conv2d_rgb_sssa8_ch+0x2ce>
 801398e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013990:	4610      	mov	r0, r2
 8013992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013994:	ee18 2a10 	vmov	r2, s16
 8013998:	9308      	str	r3, [sp, #32]
 801399a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801399c:	3601      	adds	r6, #1
 801399e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80139a0:	9307      	str	r3, [sp, #28]
 80139a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139a4:	960c      	str	r6, [sp, #48]	@ 0x30
 80139a6:	9306      	str	r3, [sp, #24]
 80139a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80139aa:	9305      	str	r3, [sp, #20]
 80139ac:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80139ae:	9304      	str	r3, [sp, #16]
 80139b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80139b2:	9303      	str	r3, [sp, #12]
 80139b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139ba:	441c      	add	r4, r3
 80139bc:	441d      	add	r5, r3
 80139be:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 80139c2:	9302      	str	r3, [sp, #8]
 80139c4:	2300      	movs	r3, #0
 80139c6:	9301      	str	r3, [sp, #4]
 80139c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80139ca:	f001 fc3f 	bl	801524c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80139ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139d0:	9016      	str	r0, [sp, #88]	@ 0x58
 80139d2:	42b3      	cmp	r3, r6
 80139d4:	d01b      	beq.n	8013a0e <forward_lite_conv2d_rgb_sssa8_ch+0x432>
 80139d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80139d8:	e771      	b.n	80138be <forward_lite_conv2d_rgb_sssa8_ch+0x2e2>
 80139da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80139dc:	4299      	cmp	r1, r3
 80139de:	d016      	beq.n	8013a0e <forward_lite_conv2d_rgb_sssa8_ch+0x432>
 80139e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80139e2:	ee18 2a10 	vmov	r2, s16
 80139e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80139e8:	9307      	str	r3, [sp, #28]
 80139ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80139ec:	9306      	str	r3, [sp, #24]
 80139ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139f0:	9305      	str	r3, [sp, #20]
 80139f2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80139f4:	9304      	str	r3, [sp, #16]
 80139f6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80139f8:	9303      	str	r3, [sp, #12]
 80139fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80139fc:	9302      	str	r3, [sp, #8]
 80139fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013a00:	9300      	str	r3, [sp, #0]
 8013a02:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8013a06:	9301      	str	r3, [sp, #4]
 8013a08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013a0a:	f001 f8b9 	bl	8014b80 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8013a0e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013a10:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8013a12:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013a14:	1ad2      	subs	r2, r2, r3
 8013a16:	4419      	add	r1, r3
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	921f      	str	r2, [sp, #124]	@ 0x7c
 8013a1c:	9118      	str	r1, [sp, #96]	@ 0x60
 8013a1e:	bfa8      	it	ge
 8013a20:	461a      	movge	r2, r3
 8013a22:	2a00      	cmp	r2, #0
 8013a24:	4614      	mov	r4, r2
 8013a26:	dd1a      	ble.n	8013a5e <forward_lite_conv2d_rgb_sssa8_ch+0x482>
 8013a28:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8013a2a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013a2c:	fb03 1002 	mla	r0, r3, r2, r1
 8013a30:	ee18 1a10 	vmov	r1, s16
 8013a34:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013a38:	9029      	str	r0, [sp, #164]	@ 0xa4
 8013a3a:	ee08 1a10 	vmov	s16, r1
 8013a3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013a40:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8013a44:	911a      	str	r1, [sp, #104]	@ 0x68
 8013a46:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013a48:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013a4c:	911b      	str	r1, [sp, #108]	@ 0x6c
 8013a4e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8013a50:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013a54:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013a56:	9319      	str	r3, [sp, #100]	@ 0x64
 8013a58:	b2a3      	uxth	r3, r4
 8013a5a:	f000 fbdb 	bl	8014214 <st_int8_to16_dual>
 8013a5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013a60:	3b01      	subs	r3, #1
 8013a62:	9320      	str	r3, [sp, #128]	@ 0x80
 8013a64:	d001      	beq.n	8013a6a <forward_lite_conv2d_rgb_sssa8_ch+0x48e>
 8013a66:	9417      	str	r4, [sp, #92]	@ 0x5c
 8013a68:	e6d7      	b.n	801381a <forward_lite_conv2d_rgb_sssa8_ch+0x23e>
 8013a6a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8013a6c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013a6e:	4413      	add	r3, r2
 8013a70:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8013a72:	9328      	str	r3, [sp, #160]	@ 0xa0
 8013a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013a76:	4413      	add	r3, r2
 8013a78:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8013a7a:	9323      	str	r3, [sp, #140]	@ 0x8c
 8013a7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013a7e:	4413      	add	r3, r2
 8013a80:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8013a82:	9324      	str	r3, [sp, #144]	@ 0x90
 8013a84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013a86:	3301      	adds	r3, #1
 8013a88:	9321      	str	r3, [sp, #132]	@ 0x84
 8013a8a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8013a8c:	4413      	add	r3, r2
 8013a8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a90:	9325      	str	r3, [sp, #148]	@ 0x94
 8013a92:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8013a94:	4293      	cmp	r3, r2
 8013a96:	f6ff ae90 	blt.w	80137ba <forward_lite_conv2d_rgb_sssa8_ch+0x1de>
 8013a9a:	b057      	add	sp, #348	@ 0x15c
 8013a9c:	ecbd 8b02 	vpop	{d8}
 8013aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8013aa6:	ee18 0a90 	vmov	r0, s17
 8013aaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013aac:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013aae:	f000 fbb1 	bl	8014214 <st_int8_to16_dual>
 8013ab2:	e691      	b.n	80137d8 <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 8013ab4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013ab6:	932a      	str	r3, [sp, #168]	@ 0xa8
 8013ab8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013aba:	9318      	str	r3, [sp, #96]	@ 0x60
 8013abc:	e688      	b.n	80137d0 <forward_lite_conv2d_rgb_sssa8_ch+0x1f4>
 8013abe:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
 8013ac2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013ac4:	ee18 0a90 	vmov	r0, s17
 8013ac8:	f000 fba4 	bl	8014214 <st_int8_to16_dual>
 8013acc:	2301      	movs	r3, #1
 8013ace:	932b      	str	r3, [sp, #172]	@ 0xac
 8013ad0:	e633      	b.n	801373a <forward_lite_conv2d_rgb_sssa8_ch+0x15e>
 8013ad2:	bf00      	nop

08013ad4 <forward_lite_upsample_bilinear_is8os8>:
 8013ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad8:	ed2d 8b0a 	vpush	{d8-d12}
 8013adc:	b08f      	sub	sp, #60	@ 0x3c
 8013ade:	4682      	mov	sl, r0
 8013ae0:	9104      	str	r1, [sp, #16]
 8013ae2:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8013ae6:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8013ae8:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8013aec:	9206      	str	r2, [sp, #24]
 8013aee:	2900      	cmp	r1, #0
 8013af0:	f000 80aa 	beq.w	8013c48 <forward_lite_upsample_bilinear_is8os8+0x174>
 8013af4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013af8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013afc:	ee70 aae7 	vsub.f32	s21, s1, s15
 8013b00:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013b04:	ee6a aa87 	vmul.f32	s21, s21, s14
 8013b08:	ee27 9a87 	vmul.f32	s18, s15, s14
 8013b0c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013b10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013b12:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8013b16:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8013b1a:	2a00      	cmp	r2, #0
 8013b1c:	f000 808f 	beq.w	8013c3e <forward_lite_upsample_bilinear_is8os8+0x16a>
 8013b20:	3b01      	subs	r3, #1
 8013b22:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8013c54 <forward_lite_upsample_bilinear_is8os8+0x180>
 8013b26:	ee07 3a90 	vmov	s15, r3
 8013b2a:	9b06      	ldr	r3, [sp, #24]
 8013b2c:	1e5a      	subs	r2, r3, #1
 8013b2e:	fb0b f303 	mul.w	r3, fp, r3
 8013b32:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8013b36:	ee0c 2a90 	vmov	s25, r2
 8013b3a:	9305      	str	r3, [sp, #20]
 8013b3c:	fb07 f30b 	mul.w	r3, r7, fp
 8013b40:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8013b44:	9307      	str	r3, [sp, #28]
 8013b46:	2300      	movs	r3, #0
 8013b48:	9303      	str	r3, [sp, #12]
 8013b4a:	eddd 7a03 	vldr	s15, [sp, #12]
 8013b4e:	9b05      	ldr	r3, [sp, #20]
 8013b50:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8013b54:	ee7b baea 	vsub.f32	s23, s23, s21
 8013b58:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8013b5c:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8013b60:	fecb baca 	vminnm.f32	s23, s23, s20
 8013b64:	eef4 ba4a 	vcmp.f32	s23, s20
 8013b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6c:	bf14      	ite	ne
 8013b6e:	4698      	movne	r8, r3
 8013b70:	f04f 0800 	moveq.w	r8, #0
 8013b74:	2f00      	cmp	r7, #0
 8013b76:	d05c      	beq.n	8013c32 <forward_lite_upsample_bilinear_is8os8+0x15e>
 8013b78:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8013b7c:	9b06      	ldr	r3, [sp, #24]
 8013b7e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8013b82:	9722      	str	r7, [sp, #136]	@ 0x88
 8013b84:	9d04      	ldr	r5, [sp, #16]
 8013b86:	4647      	mov	r7, r8
 8013b88:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8013b8c:	ee17 6a10 	vmov	r6, s14
 8013b90:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8013b94:	2400      	movs	r4, #0
 8013b96:	fb03 f606 	mul.w	r6, r3, r6
 8013b9a:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8013b9e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8013ba2:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8013ba6:	ee3c ca27 	vadd.f32	s24, s24, s15
 8013baa:	ee07 4a90 	vmov	s15, r4
 8013bae:	3401      	adds	r4, #1
 8013bb0:	4629      	mov	r1, r5
 8013bb2:	465a      	mov	r2, fp
 8013bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bb8:	f8cd 9000 	str.w	r9, [sp]
 8013bbc:	9709      	str	r7, [sp, #36]	@ 0x24
 8013bbe:	445d      	add	r5, fp
 8013bc0:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013bc4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8013bc8:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8013bcc:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8013bd0:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8013bd4:	eef4 7a6c 	vcmp.f32	s15, s25
 8013bd8:	ee38 7a67 	vsub.f32	s14, s16, s15
 8013bdc:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8013be0:	ee16 0a90 	vmov	r0, s13
 8013be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be8:	4430      	add	r0, r6
 8013bea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013bee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013bf2:	bf14      	ite	ne
 8013bf4:	465b      	movne	r3, fp
 8013bf6:	2300      	moveq	r3, #0
 8013bf8:	fb0b a000 	mla	r0, fp, r0, sl
 8013bfc:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8013c00:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8013c04:	9308      	str	r3, [sp, #32]
 8013c06:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8013c0a:	ab08      	add	r3, sp, #32
 8013c0c:	ee67 7aab 	vmul.f32	s15, s15, s23
 8013c10:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8013c14:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8013c18:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8013c1c:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8013c20:	f004 fa28 	bl	8018074 <lite_bilinear_is8os8_kernel>
 8013c24:	45a0      	cmp	r8, r4
 8013c26:	d1c0      	bne.n	8013baa <forward_lite_upsample_bilinear_is8os8+0xd6>
 8013c28:	9b04      	ldr	r3, [sp, #16]
 8013c2a:	4647      	mov	r7, r8
 8013c2c:	9a07      	ldr	r2, [sp, #28]
 8013c2e:	4413      	add	r3, r2
 8013c30:	9304      	str	r3, [sp, #16]
 8013c32:	9b03      	ldr	r3, [sp, #12]
 8013c34:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013c36:	3301      	adds	r3, #1
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	9303      	str	r3, [sp, #12]
 8013c3c:	d185      	bne.n	8013b4a <forward_lite_upsample_bilinear_is8os8+0x76>
 8013c3e:	b00f      	add	sp, #60	@ 0x3c
 8013c40:	ecbd 8b0a 	vpop	{d8-d12}
 8013c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c48:	eddf aa02 	vldr	s21, [pc, #8]	@ 8013c54 <forward_lite_upsample_bilinear_is8os8+0x180>
 8013c4c:	eeb0 9a6a 	vmov.f32	s18, s21
 8013c50:	e75c      	b.n	8013b0c <forward_lite_upsample_bilinear_is8os8+0x38>
 8013c52:	bf00      	nop
 8013c54:	00000000 	.word	0x00000000

08013c58 <forward_lite_nl_softmax_is8os8>:
 8013c58:	f002 bde4 	b.w	8016824 <_lite_kernel_nl_softmax_is8os8>

08013c5c <forward_lite_nl_softmax_iu8ou8>:
 8013c5c:	f003 bde8 	b.w	8017830 <_lite_kernel_nl_softmax_iu8ou8>

08013c60 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>:
 8013c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c64:	b083      	sub	sp, #12
 8013c66:	f992 0000 	ldrsb.w	r0, [r2]
 8013c6a:	f04f 0500 	mov.w	r5, #0
 8013c6e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8013c72:	f360 0507 	bfi	r5, r0, #0, #8
 8013c76:	f1b9 0f00 	cmp.w	r9, #0
 8013c7a:	f360 250f 	bfi	r5, r0, #8, #8
 8013c7e:	dd20      	ble.n	8013cc2 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x62>
 8013c80:	461c      	mov	r4, r3
 8013c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c84:	460f      	mov	r7, r1
 8013c86:	f04f 0800 	mov.w	r8, #0
 8013c8a:	1c9e      	adds	r6, r3, #2
 8013c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c8e:	fb06 fb04 	mul.w	fp, r6, r4
 8013c92:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8013c96:	2c00      	cmp	r4, #0
 8013c98:	dd08      	ble.n	8013cac <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x4c>
 8013c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c9c:	18f9      	adds	r1, r7, r3
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	3301      	adds	r3, #1
 8013ca2:	800d      	strh	r5, [r1, #0]
 8013ca4:	4431      	add	r1, r6
 8013ca6:	429c      	cmp	r4, r3
 8013ca8:	d1fa      	bne.n	8013ca0 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x40>
 8013caa:	445f      	add	r7, fp
 8013cac:	f108 0801 	add.w	r8, r8, #1
 8013cb0:	4639      	mov	r1, r7
 8013cb2:	4652      	mov	r2, sl
 8013cb4:	9001      	str	r0, [sp, #4]
 8013cb6:	f000 fe7d 	bl	80149b4 <st_int8_fill>
 8013cba:	45c1      	cmp	r9, r8
 8013cbc:	4457      	add	r7, sl
 8013cbe:	9801      	ldr	r0, [sp, #4]
 8013cc0:	d1e9      	bne.n	8013c96 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x36>
 8013cc2:	b003      	add	sp, #12
 8013cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cc8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>:
 8013cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ccc:	461e      	mov	r6, r3
 8013cce:	b085      	sub	sp, #20
 8013cd0:	f992 8000 	ldrsb.w	r8, [r2]
 8013cd4:	f04f 0500 	mov.w	r5, #0
 8013cd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013cda:	2e06      	cmp	r6, #6
 8013cdc:	f368 0507 	bfi	r5, r8, #0, #8
 8013ce0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8013ce2:	460c      	mov	r4, r1
 8013ce4:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8013ce8:	f368 250f 	bfi	r5, r8, #8, #8
 8013cec:	9303      	str	r3, [sp, #12]
 8013cee:	d07a      	beq.n	8013de6 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x11e>
 8013cf0:	2e03      	cmp	r6, #3
 8013cf2:	d04e      	beq.n	8013d92 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xca>
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	db05      	blt.n	8013d04 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x3c>
 8013cf8:	1c5a      	adds	r2, r3, #1
 8013cfa:	4608      	mov	r0, r1
 8013cfc:	4641      	mov	r1, r8
 8013cfe:	4414      	add	r4, r2
 8013d00:	f005 fd49 	bl	8019796 <memset>
 8013d04:	1e7b      	subs	r3, r7, #1
 8013d06:	3e01      	subs	r6, #1
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	9301      	str	r3, [sp, #4]
 8013d0c:	dd27      	ble.n	8013d5e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x96>
 8013d0e:	9b03      	ldr	r3, [sp, #12]
 8013d10:	f10a 0702 	add.w	r7, sl, #2
 8013d14:	f04f 0b00 	mov.w	fp, #0
 8013d18:	1c5a      	adds	r2, r3, #1
 8013d1a:	fb07 f306 	mul.w	r3, r7, r6
 8013d1e:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8013d22:	9302      	str	r3, [sp, #8]
 8013d24:	4643      	mov	r3, r8
 8013d26:	46c8      	mov	r8, r9
 8013d28:	4699      	mov	r9, r3
 8013d2a:	2e00      	cmp	r6, #0
 8013d2c:	eb04 010a 	add.w	r1, r4, sl
 8013d30:	dd09      	ble.n	8013d46 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x7e>
 8013d32:	468c      	mov	ip, r1
 8013d34:	2300      	movs	r3, #0
 8013d36:	3301      	adds	r3, #1
 8013d38:	f8ac 5000 	strh.w	r5, [ip]
 8013d3c:	44bc      	add	ip, r7
 8013d3e:	42b3      	cmp	r3, r6
 8013d40:	d1f9      	bne.n	8013d36 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x6e>
 8013d42:	9b02      	ldr	r3, [sp, #8]
 8013d44:	4419      	add	r1, r3
 8013d46:	4642      	mov	r2, r8
 8013d48:	4648      	mov	r0, r9
 8013d4a:	f10b 0b01 	add.w	fp, fp, #1
 8013d4e:	eb01 0408 	add.w	r4, r1, r8
 8013d52:	f000 fe2f 	bl	80149b4 <st_int8_fill>
 8013d56:	9b01      	ldr	r3, [sp, #4]
 8013d58:	459b      	cmp	fp, r3
 8013d5a:	d1e6      	bne.n	8013d2a <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x62>
 8013d5c:	46c8      	mov	r8, r9
 8013d5e:	2e00      	cmp	r6, #0
 8013d60:	eb04 000a 	add.w	r0, r4, sl
 8013d64:	dd0a      	ble.n	8013d7c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xb4>
 8013d66:	f10a 0702 	add.w	r7, sl, #2
 8013d6a:	4602      	mov	r2, r0
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	3301      	adds	r3, #1
 8013d70:	8015      	strh	r5, [r2, #0]
 8013d72:	443a      	add	r2, r7
 8013d74:	429e      	cmp	r6, r3
 8013d76:	d1fa      	bne.n	8013d6e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xa6>
 8013d78:	fb07 0006 	mla	r0, r7, r6, r0
 8013d7c:	9b03      	ldr	r3, [sp, #12]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	db2e      	blt.n	8013de0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8013d82:	461a      	mov	r2, r3
 8013d84:	4641      	mov	r1, r8
 8013d86:	3201      	adds	r2, #1
 8013d88:	b005      	add	sp, #20
 8013d8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d8e:	f005 bd02 	b.w	8019796 <memset>
 8013d92:	fa5f f388 	uxtb.w	r3, r8
 8013d96:	2f00      	cmp	r7, #0
 8013d98:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8013d9c:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8013da0:	b292      	uxth	r2, r2
 8013da2:	ea43 0302 	orr.w	r3, r3, r2
 8013da6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8013daa:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013dae:	ea42 0203 	orr.w	r2, r2, r3
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	dd14      	ble.n	8013de0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8013db6:	eb07 0987 	add.w	r9, r7, r7, lsl #2
 8013dba:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8013dbe:	4449      	add	r1, r9
 8013dc0:	6022      	str	r2, [r4, #0]
 8013dc2:	3419      	adds	r4, #25
 8013dc4:	f824 3c15 	strh.w	r3, [r4, #-21]
 8013dc8:	f824 5c10 	strh.w	r5, [r4, #-16]
 8013dcc:	f824 3c0b 	strh.w	r3, [r4, #-11]
 8013dd0:	f804 8c06 	strb.w	r8, [r4, #-6]
 8013dd4:	f844 2c05 	str.w	r2, [r4, #-5]
 8013dd8:	f804 8c01 	strb.w	r8, [r4, #-1]
 8013ddc:	428c      	cmp	r4, r1
 8013dde:	d1ef      	bne.n	8013dc0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xf8>
 8013de0:	b005      	add	sp, #20
 8013de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de6:	fa5f f388 	uxtb.w	r3, r8
 8013dea:	2f00      	cmp	r7, #0
 8013dec:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8013df0:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8013df4:	b292      	uxth	r2, r2
 8013df6:	ea43 0302 	orr.w	r3, r3, r2
 8013dfa:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8013dfe:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013e02:	ea43 0302 	orr.w	r3, r3, r2
 8013e06:	ddeb      	ble.n	8013de0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8013e08:	340f      	adds	r4, #15
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	3201      	adds	r2, #1
 8013e0e:	f844 3c0f 	str.w	r3, [r4, #-15]
 8013e12:	f844 3c0b 	str.w	r3, [r4, #-11]
 8013e16:	3440      	adds	r4, #64	@ 0x40
 8013e18:	4297      	cmp	r7, r2
 8013e1a:	f804 8c47 	strb.w	r8, [r4, #-71]
 8013e1e:	f824 5c40 	strh.w	r5, [r4, #-64]
 8013e22:	f824 5c38 	strh.w	r5, [r4, #-56]
 8013e26:	f824 5c30 	strh.w	r5, [r4, #-48]
 8013e2a:	f824 5c28 	strh.w	r5, [r4, #-40]
 8013e2e:	f824 5c20 	strh.w	r5, [r4, #-32]
 8013e32:	f804 8c18 	strb.w	r8, [r4, #-24]
 8013e36:	f844 3c17 	str.w	r3, [r4, #-23]
 8013e3a:	f844 3c13 	str.w	r3, [r4, #-19]
 8013e3e:	d1e5      	bne.n	8013e0c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x144>
 8013e40:	b005      	add	sp, #20
 8013e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e46:	bf00      	nop

08013e48 <forward_lite_pad_constant>:
 8013e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e4c:	b085      	sub	sp, #20
 8013e4e:	4616      	mov	r6, r2
 8013e50:	4681      	mov	r9, r0
 8013e52:	2b08      	cmp	r3, #8
 8013e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e56:	460c      	mov	r4, r1
 8013e58:	9201      	str	r2, [sp, #4]
 8013e5a:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	@ 0x44
 8013e5e:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	@ 0x3c
 8013e62:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	@ 0x4c
 8013e66:	9002      	str	r0, [sp, #8]
 8013e68:	d051      	beq.n	8013f0e <forward_lite_pad_constant+0xc6>
 8013e6a:	2a00      	cmp	r2, #0
 8013e6c:	dd11      	ble.n	8013e92 <forward_lite_pad_constant+0x4a>
 8013e6e:	f8cd 8000 	str.w	r8, [sp]
 8013e72:	f04f 0b00 	mov.w	fp, #0
 8013e76:	46b8      	mov	r8, r7
 8013e78:	4617      	mov	r7, r2
 8013e7a:	44ab      	add	fp, r5
 8013e7c:	4621      	mov	r1, r4
 8013e7e:	462a      	mov	r2, r5
 8013e80:	4630      	mov	r0, r6
 8013e82:	f000 fdf5 	bl	8014a70 <st_int8_copy>
 8013e86:	455f      	cmp	r7, fp
 8013e88:	442c      	add	r4, r5
 8013e8a:	dcf6      	bgt.n	8013e7a <forward_lite_pad_constant+0x32>
 8013e8c:	4647      	mov	r7, r8
 8013e8e:	f8dd 8000 	ldr.w	r8, [sp]
 8013e92:	9b01      	ldr	r3, [sp, #4]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	dd29      	ble.n	8013eec <forward_lite_pad_constant+0xa4>
 8013e98:	2300      	movs	r3, #0
 8013e9a:	9300      	str	r3, [sp, #0]
 8013e9c:	2f00      	cmp	r7, #0
 8013e9e:	dd0a      	ble.n	8013eb6 <forward_lite_pad_constant+0x6e>
 8013ea0:	f04f 0b00 	mov.w	fp, #0
 8013ea4:	44ab      	add	fp, r5
 8013ea6:	4621      	mov	r1, r4
 8013ea8:	462a      	mov	r2, r5
 8013eaa:	4630      	mov	r0, r6
 8013eac:	f000 fde0 	bl	8014a70 <st_int8_copy>
 8013eb0:	455f      	cmp	r7, fp
 8013eb2:	442c      	add	r4, r5
 8013eb4:	dcf6      	bgt.n	8013ea4 <forward_lite_pad_constant+0x5c>
 8013eb6:	4621      	mov	r1, r4
 8013eb8:	4648      	mov	r0, r9
 8013eba:	4652      	mov	r2, sl
 8013ebc:	4454      	add	r4, sl
 8013ebe:	f000 fdd7 	bl	8014a70 <st_int8_copy>
 8013ec2:	f1b8 0f00 	cmp.w	r8, #0
 8013ec6:	44d1      	add	r9, sl
 8013ec8:	dd0a      	ble.n	8013ee0 <forward_lite_pad_constant+0x98>
 8013eca:	f04f 0b00 	mov.w	fp, #0
 8013ece:	44ab      	add	fp, r5
 8013ed0:	4621      	mov	r1, r4
 8013ed2:	462a      	mov	r2, r5
 8013ed4:	4630      	mov	r0, r6
 8013ed6:	f000 fdcb 	bl	8014a70 <st_int8_copy>
 8013eda:	45d8      	cmp	r8, fp
 8013edc:	442c      	add	r4, r5
 8013ede:	dcf6      	bgt.n	8013ece <forward_lite_pad_constant+0x86>
 8013ee0:	9b00      	ldr	r3, [sp, #0]
 8013ee2:	9a01      	ldr	r2, [sp, #4]
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	d1d7      	bne.n	8013e9c <forward_lite_pad_constant+0x54>
 8013eec:	9b02      	ldr	r3, [sp, #8]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	dd0a      	ble.n	8013f08 <forward_lite_pad_constant+0xc0>
 8013ef2:	2700      	movs	r7, #0
 8013ef4:	4698      	mov	r8, r3
 8013ef6:	442f      	add	r7, r5
 8013ef8:	4621      	mov	r1, r4
 8013efa:	462a      	mov	r2, r5
 8013efc:	4630      	mov	r0, r6
 8013efe:	f000 fdb7 	bl	8014a70 <st_int8_copy>
 8013f02:	45b8      	cmp	r8, r7
 8013f04:	442c      	add	r4, r5
 8013f06:	dcf6      	bgt.n	8013ef6 <forward_lite_pad_constant+0xae>
 8013f08:	b005      	add	sp, #20
 8013f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f0e:	f996 5000 	ldrsb.w	r5, [r6]
 8013f12:	4414      	add	r4, r2
 8013f14:	4628      	mov	r0, r5
 8013f16:	9403      	str	r4, [sp, #12]
 8013f18:	f000 fd4c 	bl	80149b4 <st_int8_fill>
 8013f1c:	9b01      	ldr	r3, [sp, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	dd26      	ble.n	8013f70 <forward_lite_pad_constant+0x128>
 8013f22:	eb08 030a 	add.w	r3, r8, sl
 8013f26:	2600      	movs	r6, #0
 8013f28:	eb03 0b07 	add.w	fp, r3, r7
 8013f2c:	eb07 030a 	add.w	r3, r7, sl
 8013f30:	9300      	str	r3, [sp, #0]
 8013f32:	4643      	mov	r3, r8
 8013f34:	46b0      	mov	r8, r6
 8013f36:	461e      	mov	r6, r3
 8013f38:	4621      	mov	r1, r4
 8013f3a:	4628      	mov	r0, r5
 8013f3c:	463a      	mov	r2, r7
 8013f3e:	f108 0801 	add.w	r8, r8, #1
 8013f42:	f000 fd37 	bl	80149b4 <st_int8_fill>
 8013f46:	19e1      	adds	r1, r4, r7
 8013f48:	4648      	mov	r0, r9
 8013f4a:	4652      	mov	r2, sl
 8013f4c:	f000 fd90 	bl	8014a70 <st_int8_copy>
 8013f50:	9b00      	ldr	r3, [sp, #0]
 8013f52:	4632      	mov	r2, r6
 8013f54:	4628      	mov	r0, r5
 8013f56:	18e1      	adds	r1, r4, r3
 8013f58:	44d1      	add	r9, sl
 8013f5a:	f000 fd2b 	bl	80149b4 <st_int8_fill>
 8013f5e:	9b01      	ldr	r3, [sp, #4]
 8013f60:	445c      	add	r4, fp
 8013f62:	4543      	cmp	r3, r8
 8013f64:	d1e8      	bne.n	8013f38 <forward_lite_pad_constant+0xf0>
 8013f66:	461a      	mov	r2, r3
 8013f68:	9b03      	ldr	r3, [sp, #12]
 8013f6a:	fb0b 3302 	mla	r3, fp, r2, r3
 8013f6e:	9303      	str	r3, [sp, #12]
 8013f70:	4628      	mov	r0, r5
 8013f72:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013f76:	b005      	add	sp, #20
 8013f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f7c:	f000 bd1a 	b.w	80149b4 <st_int8_fill>

08013f80 <forward_lite_pad_edge>:
 8013f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f84:	ed2d 8b02 	vpush	{d8}
 8013f88:	b087      	sub	sp, #28
 8013f8a:	9305      	str	r3, [sp, #20]
 8013f8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013f8e:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	@ 0x48
 8013f92:	18cd      	adds	r5, r1, r3
 8013f94:	1e13      	subs	r3, r2, #0
 8013f96:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 8013f9a:	9103      	str	r1, [sp, #12]
 8013f9c:	9504      	str	r5, [sp, #16]
 8013f9e:	9301      	str	r3, [sp, #4]
 8013fa0:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	@ 0x50
 8013fa4:	dd36      	ble.n	8014014 <forward_lite_pad_edge+0x94>
 8013fa6:	fb04 f308 	mul.w	r3, r4, r8
 8013faa:	4607      	mov	r7, r0
 8013fac:	ee08 aa10 	vmov	s16, sl
 8013fb0:	9302      	str	r3, [sp, #8]
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	9300      	str	r3, [sp, #0]
 8013fb6:	f1b9 0f00 	cmp.w	r9, #0
 8013fba:	dd09      	ble.n	8013fd0 <forward_lite_pad_edge+0x50>
 8013fbc:	2600      	movs	r6, #0
 8013fbe:	4426      	add	r6, r4
 8013fc0:	4629      	mov	r1, r5
 8013fc2:	4622      	mov	r2, r4
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	f000 fd53 	bl	8014a70 <st_int8_copy>
 8013fca:	45b1      	cmp	r9, r6
 8013fcc:	4425      	add	r5, r4
 8013fce:	dcf6      	bgt.n	8013fbe <forward_lite_pad_edge+0x3e>
 8013fd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013fd2:	4638      	mov	r0, r7
 8013fd4:	4629      	mov	r1, r5
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	441f      	add	r7, r3
 8013fda:	441d      	add	r5, r3
 8013fdc:	f000 fd48 	bl	8014a70 <st_int8_copy>
 8013fe0:	f1b8 0f00 	cmp.w	r8, #0
 8013fe4:	eba7 0a04 	sub.w	sl, r7, r4
 8013fe8:	dd0c      	ble.n	8014004 <forward_lite_pad_edge+0x84>
 8013fea:	46ab      	mov	fp, r5
 8013fec:	2600      	movs	r6, #0
 8013fee:	3601      	adds	r6, #1
 8013ff0:	4659      	mov	r1, fp
 8013ff2:	4622      	mov	r2, r4
 8013ff4:	4650      	mov	r0, sl
 8013ff6:	f000 fd3b 	bl	8014a70 <st_int8_copy>
 8013ffa:	4546      	cmp	r6, r8
 8013ffc:	44a3      	add	fp, r4
 8013ffe:	d1f6      	bne.n	8013fee <forward_lite_pad_edge+0x6e>
 8014000:	9b02      	ldr	r3, [sp, #8]
 8014002:	441d      	add	r5, r3
 8014004:	9b00      	ldr	r3, [sp, #0]
 8014006:	9a01      	ldr	r2, [sp, #4]
 8014008:	3301      	adds	r3, #1
 801400a:	429a      	cmp	r2, r3
 801400c:	9300      	str	r3, [sp, #0]
 801400e:	d1d2      	bne.n	8013fb6 <forward_lite_pad_edge+0x36>
 8014010:	ee18 aa10 	vmov	sl, s16
 8014014:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8014018:	4293      	cmp	r3, r2
 801401a:	d009      	beq.n	8014030 <forward_lite_pad_edge+0xb0>
 801401c:	461c      	mov	r4, r3
 801401e:	4615      	mov	r5, r2
 8014020:	4621      	mov	r1, r4
 8014022:	4454      	add	r4, sl
 8014024:	4652      	mov	r2, sl
 8014026:	4628      	mov	r0, r5
 8014028:	f000 fd22 	bl	8014a70 <st_int8_copy>
 801402c:	42a5      	cmp	r5, r4
 801402e:	d1f7      	bne.n	8014020 <forward_lite_pad_edge+0xa0>
 8014030:	9a01      	ldr	r2, [sp, #4]
 8014032:	9b05      	ldr	r3, [sp, #20]
 8014034:	4413      	add	r3, r2
 8014036:	9a03      	ldr	r2, [sp, #12]
 8014038:	3b01      	subs	r3, #1
 801403a:	fb0a 2503 	mla	r5, sl, r3, r2
 801403e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8014040:	18ec      	adds	r4, r5, r3
 8014042:	42a5      	cmp	r5, r4
 8014044:	d009      	beq.n	801405a <forward_lite_pad_edge+0xda>
 8014046:	f1ca 0600 	rsb	r6, sl, #0
 801404a:	4621      	mov	r1, r4
 801404c:	4434      	add	r4, r6
 801404e:	4652      	mov	r2, sl
 8014050:	4628      	mov	r0, r5
 8014052:	f000 fd0d 	bl	8014a70 <st_int8_copy>
 8014056:	42a5      	cmp	r5, r4
 8014058:	d1f7      	bne.n	801404a <forward_lite_pad_edge+0xca>
 801405a:	b007      	add	sp, #28
 801405c:	ecbd 8b02 	vpop	{d8}
 8014060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014064 <forward_lite_pad_reflect>:
 8014064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014068:	b08f      	sub	sp, #60	@ 0x3c
 801406a:	460e      	mov	r6, r1
 801406c:	2b00      	cmp	r3, #0
 801406e:	4684      	mov	ip, r0
 8014070:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	@ 0x80
 8014074:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8014076:	f9bd e084 	ldrsh.w	lr, [sp, #132]	@ 0x84
 801407a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801407c:	4437      	add	r7, r6
 801407e:	9002      	str	r0, [sp, #8]
 8014080:	950c      	str	r5, [sp, #48]	@ 0x30
 8014082:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014084:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8014088:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801408a:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
 801408e:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	@ 0x7c
 8014092:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 8014094:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8014098:	9307      	str	r3, [sp, #28]
 801409a:	dd58      	ble.n	801414e <forward_lite_pad_reflect+0xea>
 801409c:	4408      	add	r0, r1
 801409e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80140a0:	f1c9 0a00 	rsb	sl, r9, #0
 80140a4:	fb02 f200 	mul.w	r2, r2, r0
 80140a8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80140aa:	4403      	add	r3, r0
 80140ac:	9206      	str	r2, [sp, #24]
 80140ae:	442b      	add	r3, r5
 80140b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80140b2:	197b      	adds	r3, r7, r5
 80140b4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	1e8b      	subs	r3, r1, #2
 80140ba:	fb04 f101 	mul.w	r1, r4, r1
 80140be:	fb04 c303 	mla	r3, r4, r3, ip
 80140c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80140c4:	9304      	str	r3, [sp, #16]
 80140c6:	fb08 2305 	mla	r3, r8, r5, r2
 80140ca:	fb09 6303 	mla	r3, r9, r3, r6
 80140ce:	9303      	str	r3, [sp, #12]
 80140d0:	fb09 f308 	mul.w	r3, r9, r8
 80140d4:	9308      	str	r3, [sp, #32]
 80140d6:	2300      	movs	r3, #0
 80140d8:	9305      	str	r3, [sp, #20]
 80140da:	9b01      	ldr	r3, [sp, #4]
 80140dc:	42bb      	cmp	r3, r7
 80140de:	d00a      	beq.n	80140f6 <forward_lite_pad_reflect+0x92>
 80140e0:	461d      	mov	r5, r3
 80140e2:	9e02      	ldr	r6, [sp, #8]
 80140e4:	4455      	add	r5, sl
 80140e6:	4426      	add	r6, r4
 80140e8:	4622      	mov	r2, r4
 80140ea:	4629      	mov	r1, r5
 80140ec:	4630      	mov	r0, r6
 80140ee:	f000 fcbf 	bl	8014a70 <st_int8_copy>
 80140f2:	42bd      	cmp	r5, r7
 80140f4:	d1f6      	bne.n	80140e4 <forward_lite_pad_reflect+0x80>
 80140f6:	9b02      	ldr	r3, [sp, #8]
 80140f8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80140fa:	4618      	mov	r0, r3
 80140fc:	9901      	ldr	r1, [sp, #4]
 80140fe:	4413      	add	r3, r2
 8014100:	9302      	str	r3, [sp, #8]
 8014102:	f000 fcb5 	bl	8014a70 <st_int8_copy>
 8014106:	9b06      	ldr	r3, [sp, #24]
 8014108:	4543      	cmp	r3, r8
 801410a:	da0d      	bge.n	8014128 <forward_lite_pad_reflect+0xc4>
 801410c:	461d      	mov	r5, r3
 801410e:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 8014112:	3501      	adds	r5, #1
 8014114:	4659      	mov	r1, fp
 8014116:	4630      	mov	r0, r6
 8014118:	4622      	mov	r2, r4
 801411a:	f000 fca9 	bl	8014a70 <st_int8_copy>
 801411e:	45a8      	cmp	r8, r5
 8014120:	44cb      	add	fp, r9
 8014122:	eba6 0604 	sub.w	r6, r6, r4
 8014126:	d1f4      	bne.n	8014112 <forward_lite_pad_reflect+0xae>
 8014128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801412a:	9901      	ldr	r1, [sp, #4]
 801412c:	4417      	add	r7, r2
 801412e:	9b05      	ldr	r3, [sp, #20]
 8014130:	4411      	add	r1, r2
 8014132:	9a04      	ldr	r2, [sp, #16]
 8014134:	3301      	adds	r3, #1
 8014136:	9101      	str	r1, [sp, #4]
 8014138:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801413a:	9305      	str	r3, [sp, #20]
 801413c:	440a      	add	r2, r1
 801413e:	9908      	ldr	r1, [sp, #32]
 8014140:	9204      	str	r2, [sp, #16]
 8014142:	9a03      	ldr	r2, [sp, #12]
 8014144:	440a      	add	r2, r1
 8014146:	9203      	str	r2, [sp, #12]
 8014148:	9a07      	ldr	r2, [sp, #28]
 801414a:	429a      	cmp	r2, r3
 801414c:	d1c5      	bne.n	80140da <forward_lite_pad_reflect+0x76>
 801414e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014150:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8014152:	fb03 f404 	mul.w	r4, r3, r4
 8014156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014158:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801415c:	42a3      	cmp	r3, r4
 801415e:	d00c      	beq.n	801417a <forward_lite_pad_reflect+0x116>
 8014160:	461d      	mov	r5, r3
 8014162:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014164:	425e      	negs	r6, r3
 8014166:	461f      	mov	r7, r3
 8014168:	4629      	mov	r1, r5
 801416a:	4620      	mov	r0, r4
 801416c:	443d      	add	r5, r7
 801416e:	4434      	add	r4, r6
 8014170:	463a      	mov	r2, r7
 8014172:	f000 fc7d 	bl	8014a70 <st_int8_copy>
 8014176:	42a5      	cmp	r5, r4
 8014178:	d1f6      	bne.n	8014168 <forward_lite_pad_reflect+0x104>
 801417a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801417c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801417e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8014180:	3b01      	subs	r3, #1
 8014182:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8014184:	fb02 f505 	mul.w	r5, r2, r5
 8014188:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801418a:	fb01 2403 	mla	r4, r1, r3, r2
 801418e:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8014192:	42ac      	cmp	r4, r5
 8014194:	d00a      	beq.n	80141ac <forward_lite_pad_reflect+0x148>
 8014196:	424e      	negs	r6, r1
 8014198:	460f      	mov	r7, r1
 801419a:	4621      	mov	r1, r4
 801419c:	4628      	mov	r0, r5
 801419e:	4434      	add	r4, r6
 80141a0:	443d      	add	r5, r7
 80141a2:	463a      	mov	r2, r7
 80141a4:	f000 fc64 	bl	8014a70 <st_int8_copy>
 80141a8:	42ac      	cmp	r4, r5
 80141aa:	d1f6      	bne.n	801419a <forward_lite_pad_reflect+0x136>
 80141ac:	b00f      	add	sp, #60	@ 0x3c
 80141ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141b2:	bf00      	nop

080141b4 <align_factor_ch>:
 80141b4:	b361      	cbz	r1, 8014210 <align_factor_ch+0x5c>
 80141b6:	ee80 7a20 	vdiv.f32	s14, s0, s1
 80141ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80141be:	b570      	push	{r4, r5, r6, lr}
 80141c0:	1e9d      	subs	r5, r3, #2
 80141c2:	1f14      	subs	r4, r2, #4
 80141c4:	2600      	movs	r6, #0
 80141c6:	ecf0 7a01 	vldmia	r0!, {s15}
 80141ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141ce:	ee17 ea90 	vmov	lr, s15
 80141d2:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 80141d6:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 80141da:	f1be 0f00 	cmp.w	lr, #0
 80141de:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 80141e2:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 80141e6:	bfb8      	it	lt
 80141e8:	f1cc 0c00 	rsblt	ip, ip, #0
 80141ec:	2a1f      	cmp	r2, #31
 80141ee:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 80141f2:	dc06      	bgt.n	8014202 <align_factor_ch+0x4e>
 80141f4:	4281      	cmp	r1, r0
 80141f6:	f825 2f02 	strh.w	r2, [r5, #2]!
 80141fa:	f844 3f04 	str.w	r3, [r4, #4]!
 80141fe:	d1e2      	bne.n	80141c6 <align_factor_ch+0x12>
 8014200:	bd70      	pop	{r4, r5, r6, pc}
 8014202:	4281      	cmp	r1, r0
 8014204:	f825 6f02 	strh.w	r6, [r5, #2]!
 8014208:	f844 6f04 	str.w	r6, [r4, #4]!
 801420c:	d1db      	bne.n	80141c6 <align_factor_ch+0x12>
 801420e:	bd70      	pop	{r4, r5, r6, pc}
 8014210:	4770      	bx	lr
 8014212:	bf00      	nop

08014214 <st_int8_to16_dual>:
 8014214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014218:	4698      	mov	r8, r3
 801421a:	085b      	lsrs	r3, r3, #1
 801421c:	eb00 0c02 	add.w	ip, r0, r2
 8014220:	f000 80b9 	beq.w	8014396 <st_int8_to16_dual+0x182>
 8014224:	f1a2 0710 	sub.w	r7, r2, #16
 8014228:	1f16      	subs	r6, r2, #4
 801422a:	2f00      	cmp	r7, #0
 801422c:	f04f 0500 	mov.w	r5, #0
 8014230:	db73      	blt.n	801431a <st_int8_to16_dual+0x106>
 8014232:	f8d0 e000 	ldr.w	lr, [r0]
 8014236:	f8dc 4000 	ldr.w	r4, [ip]
 801423a:	fa2f f99e 	sxtb16	r9, lr, ror #8
 801423e:	fa2f fe8e 	sxtb16	lr, lr
 8014242:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8014246:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801424a:	fa2f f994 	sxtb16	r9, r4, ror #8
 801424e:	f8c1 e000 	str.w	lr, [r1]
 8014252:	f8c1 a008 	str.w	sl, [r1, #8]
 8014256:	fa2f f484 	sxtb16	r4, r4
 801425a:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 801425e:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8014262:	f8c1 e00c 	str.w	lr, [r1, #12]
 8014266:	604c      	str	r4, [r1, #4]
 8014268:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801426c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8014270:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8014274:	fa2f fe8e 	sxtb16	lr, lr
 8014278:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 801427c:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8014280:	fa2f f994 	sxtb16	r9, r4, ror #8
 8014284:	f8c1 e010 	str.w	lr, [r1, #16]
 8014288:	f8c1 a018 	str.w	sl, [r1, #24]
 801428c:	fa2f f484 	sxtb16	r4, r4
 8014290:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8014294:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8014298:	f8c1 e01c 	str.w	lr, [r1, #28]
 801429c:	614c      	str	r4, [r1, #20]
 801429e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80142a2:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80142a6:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80142aa:	fa2f fe8e 	sxtb16	lr, lr
 80142ae:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80142b2:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80142b6:	fa2f f994 	sxtb16	r9, r4, ror #8
 80142ba:	3010      	adds	r0, #16
 80142bc:	f10c 0c10 	add.w	ip, ip, #16
 80142c0:	f8c1 e020 	str.w	lr, [r1, #32]
 80142c4:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 80142c8:	fa2f f484 	sxtb16	r4, r4
 80142cc:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80142d0:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80142d4:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 80142d8:	624c      	str	r4, [r1, #36]	@ 0x24
 80142da:	f850 ec04 	ldr.w	lr, [r0, #-4]
 80142de:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 80142e2:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 80142e6:	fa2f fe8e 	sxtb16	lr, lr
 80142ea:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 80142ee:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 80142f2:	fa2f fa94 	sxtb16	sl, r4, ror #8
 80142f6:	3510      	adds	r5, #16
 80142f8:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 80142fc:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 8014300:	3140      	adds	r1, #64	@ 0x40
 8014302:	42bd      	cmp	r5, r7
 8014304:	fa2f f484 	sxtb16	r4, r4
 8014308:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 801430c:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8014310:	f841 ec04 	str.w	lr, [r1, #-4]
 8014314:	f841 4c0c 	str.w	r4, [r1, #-12]
 8014318:	dd8b      	ble.n	8014232 <st_int8_to16_dual+0x1e>
 801431a:	42ae      	cmp	r6, r5
 801431c:	db1e      	blt.n	801435c <st_int8_to16_dual+0x148>
 801431e:	f850 4b04 	ldr.w	r4, [r0], #4
 8014322:	f85c eb04 	ldr.w	lr, [ip], #4
 8014326:	fa2f fa94 	sxtb16	sl, r4, ror #8
 801432a:	fa2f f484 	sxtb16	r4, r4
 801432e:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 8014332:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8014336:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 801433a:	3504      	adds	r5, #4
 801433c:	600c      	str	r4, [r1, #0]
 801433e:	f8c1 9008 	str.w	r9, [r1, #8]
 8014342:	3110      	adds	r1, #16
 8014344:	42b5      	cmp	r5, r6
 8014346:	fa2f fe8e 	sxtb16	lr, lr
 801434a:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 801434e:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8014352:	f841 4c04 	str.w	r4, [r1, #-4]
 8014356:	f841 ec0c 	str.w	lr, [r1, #-12]
 801435a:	dde0      	ble.n	801431e <st_int8_to16_dual+0x10a>
 801435c:	42aa      	cmp	r2, r5
 801435e:	dd40      	ble.n	80143e2 <st_int8_to16_dual+0x1ce>
 8014360:	1b55      	subs	r5, r2, r5
 8014362:	1d0c      	adds	r4, r1, #4
 8014364:	46e6      	mov	lr, ip
 8014366:	eb00 0a05 	add.w	sl, r0, r5
 801436a:	f910 9b01 	ldrsb.w	r9, [r0], #1
 801436e:	3404      	adds	r4, #4
 8014370:	f824 9c08 	strh.w	r9, [r4, #-8]
 8014374:	4550      	cmp	r0, sl
 8014376:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 801437a:	f824 9c06 	strh.w	r9, [r4, #-6]
 801437e:	d1f4      	bne.n	801436a <st_int8_to16_dual+0x156>
 8014380:	44ac      	add	ip, r5
 8014382:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014386:	3b01      	subs	r3, #1
 8014388:	eb0a 0002 	add.w	r0, sl, r2
 801438c:	4494      	add	ip, r2
 801438e:	b29b      	uxth	r3, r3
 8014390:	2b00      	cmp	r3, #0
 8014392:	f47f af4a 	bne.w	801422a <st_int8_to16_dual+0x16>
 8014396:	f018 0f01 	tst.w	r8, #1
 801439a:	d020      	beq.n	80143de <st_int8_to16_dual+0x1ca>
 801439c:	1f17      	subs	r7, r2, #4
 801439e:	f04f 0400 	mov.w	r4, #0
 80143a2:	d411      	bmi.n	80143c8 <st_int8_to16_dual+0x1b4>
 80143a4:	f850 3b04 	ldr.w	r3, [r0], #4
 80143a8:	fa2f f593 	sxtb16	r5, r3, ror #8
 80143ac:	3404      	adds	r4, #4
 80143ae:	3108      	adds	r1, #8
 80143b0:	fa2f f383 	sxtb16	r3, r3
 80143b4:	42a7      	cmp	r7, r4
 80143b6:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 80143ba:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 80143be:	f841 6c04 	str.w	r6, [r1, #-4]
 80143c2:	f841 3c08 	str.w	r3, [r1, #-8]
 80143c6:	daed      	bge.n	80143a4 <st_int8_to16_dual+0x190>
 80143c8:	42a2      	cmp	r2, r4
 80143ca:	dd08      	ble.n	80143de <st_int8_to16_dual+0x1ca>
 80143cc:	1b13      	subs	r3, r2, r4
 80143ce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80143d2:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80143d6:	f821 2b02 	strh.w	r2, [r1], #2
 80143da:	428b      	cmp	r3, r1
 80143dc:	d1f9      	bne.n	80143d2 <st_int8_to16_dual+0x1be>
 80143de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143e2:	4682      	mov	sl, r0
 80143e4:	e7cf      	b.n	8014386 <st_int8_to16_dual+0x172>
 80143e6:	bf00      	nop

080143e8 <ai_padding_opt_init>:
 80143e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143ec:	2700      	movs	r7, #0
 80143ee:	9c07      	ldr	r4, [sp, #28]
 80143f0:	e9c0 7700 	strd	r7, r7, [r0]
 80143f4:	6087      	str	r7, [r0, #8]
 80143f6:	46b9      	mov	r9, r7
 80143f8:	690e      	ldr	r6, [r1, #16]
 80143fa:	f1c6 0c00 	rsb	ip, r6, #0
 80143fe:	689e      	ldr	r6, [r3, #8]
 8014400:	42be      	cmp	r6, r7
 8014402:	dd1c      	ble.n	801443e <ai_padding_opt_init+0x56>
 8014404:	463e      	mov	r6, r7
 8014406:	46be      	mov	lr, r7
 8014408:	e010      	b.n	801442c <ai_padding_opt_init+0x44>
 801440a:	6895      	ldr	r5, [r2, #8]
 801440c:	eba5 080c 	sub.w	r8, r5, ip
 8014410:	68a5      	ldr	r5, [r4, #8]
 8014412:	45a8      	cmp	r8, r5
 8014414:	da10      	bge.n	8014438 <ai_padding_opt_init+0x50>
 8014416:	f109 0901 	add.w	r9, r9, #1
 801441a:	f8c0 9008 	str.w	r9, [r0, #8]
 801441e:	688d      	ldr	r5, [r1, #8]
 8014420:	f10e 0e01 	add.w	lr, lr, #1
 8014424:	44ac      	add	ip, r5
 8014426:	689d      	ldr	r5, [r3, #8]
 8014428:	4575      	cmp	r5, lr
 801442a:	dd09      	ble.n	8014440 <ai_padding_opt_init+0x58>
 801442c:	f1bc 0f00 	cmp.w	ip, #0
 8014430:	daeb      	bge.n	801440a <ai_padding_opt_init+0x22>
 8014432:	3601      	adds	r6, #1
 8014434:	6006      	str	r6, [r0, #0]
 8014436:	e7f2      	b.n	801441e <ai_padding_opt_init+0x36>
 8014438:	3701      	adds	r7, #1
 801443a:	6047      	str	r7, [r0, #4]
 801443c:	e7ef      	b.n	801441e <ai_padding_opt_init+0x36>
 801443e:	463e      	mov	r6, r7
 8014440:	2500      	movs	r5, #0
 8014442:	f8c0 9014 	str.w	r9, [r0, #20]
 8014446:	e9c0 6703 	strd	r6, r7, [r0, #12]
 801444a:	e9c0 5506 	strd	r5, r5, [r0, #24]
 801444e:	6205      	str	r5, [r0, #32]
 8014450:	694e      	ldr	r6, [r1, #20]
 8014452:	f1c6 0c00 	rsb	ip, r6, #0
 8014456:	685e      	ldr	r6, [r3, #4]
 8014458:	42ae      	cmp	r6, r5
 801445a:	dd1c      	ble.n	8014496 <ai_padding_opt_init+0xae>
 801445c:	46ae      	mov	lr, r5
 801445e:	e00f      	b.n	8014480 <ai_padding_opt_init+0x98>
 8014460:	6855      	ldr	r5, [r2, #4]
 8014462:	6866      	ldr	r6, [r4, #4]
 8014464:	eba5 050c 	sub.w	r5, r5, ip
 8014468:	42b5      	cmp	r5, r6
 801446a:	da10      	bge.n	801448e <ai_padding_opt_init+0xa6>
 801446c:	6a05      	ldr	r5, [r0, #32]
 801446e:	3501      	adds	r5, #1
 8014470:	6205      	str	r5, [r0, #32]
 8014472:	68cd      	ldr	r5, [r1, #12]
 8014474:	f10e 0e01 	add.w	lr, lr, #1
 8014478:	44ac      	add	ip, r5
 801447a:	685d      	ldr	r5, [r3, #4]
 801447c:	4575      	cmp	r5, lr
 801447e:	dd0a      	ble.n	8014496 <ai_padding_opt_init+0xae>
 8014480:	f1bc 0f00 	cmp.w	ip, #0
 8014484:	daec      	bge.n	8014460 <ai_padding_opt_init+0x78>
 8014486:	6985      	ldr	r5, [r0, #24]
 8014488:	3501      	adds	r5, #1
 801448a:	6185      	str	r5, [r0, #24]
 801448c:	e7f1      	b.n	8014472 <ai_padding_opt_init+0x8a>
 801448e:	69c5      	ldr	r5, [r0, #28]
 8014490:	3501      	adds	r5, #1
 8014492:	61c5      	str	r5, [r0, #28]
 8014494:	e7ed      	b.n	8014472 <ai_padding_opt_init+0x8a>
 8014496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801449a:	bf00      	nop

0801449c <ai_padding_opt_phase1>:
 801449c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 80144a0:	b923      	cbnz	r3, 80144ac <ai_padding_opt_phase1+0x10>
 80144a2:	b17a      	cbz	r2, 80144c4 <ai_padding_opt_phase1+0x28>
 80144a4:	3a01      	subs	r2, #1
 80144a6:	8483      	strh	r3, [r0, #36]	@ 0x24
 80144a8:	61c2      	str	r2, [r0, #28]
 80144aa:	e004      	b.n	80144b6 <ai_padding_opt_phase1+0x1a>
 80144ac:	b152      	cbz	r2, 80144c4 <ai_padding_opt_phase1+0x28>
 80144ae:	2201      	movs	r2, #1
 80144b0:	3b01      	subs	r3, #1
 80144b2:	8482      	strh	r2, [r0, #36]	@ 0x24
 80144b4:	6183      	str	r3, [r0, #24]
 80144b6:	68c3      	ldr	r3, [r0, #12]
 80144b8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 80144bc:	6003      	str	r3, [r0, #0]
 80144be:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80144c2:	4770      	bx	lr
 80144c4:	6a03      	ldr	r3, [r0, #32]
 80144c6:	2201      	movs	r2, #1
 80144c8:	3b01      	subs	r3, #1
 80144ca:	8482      	strh	r2, [r0, #36]	@ 0x24
 80144cc:	6203      	str	r3, [r0, #32]
 80144ce:	e7f2      	b.n	80144b6 <ai_padding_opt_phase1+0x1a>

080144d0 <st_f32_to_int16>:
 80144d0:	b530      	push	{r4, r5, lr}
 80144d2:	0895      	lsrs	r5, r2, #2
 80144d4:	d069      	beq.n	80145aa <st_f32_to_int16+0xda>
 80144d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80144da:	f100 0c10 	add.w	ip, r0, #16
 80144de:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 80144e2:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8014638 <st_f32_to_int16+0x168>
 80144e6:	f101 0e08 	add.w	lr, r1, #8
 80144ea:	462c      	mov	r4, r5
 80144ec:	ed5c 6a04 	vldr	s13, [ip, #-16]
 80144f0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80144f4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80144f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144fc:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8014500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014508:	ee17 3a90 	vmov	r3, s15
 801450c:	f303 030f 	ssat	r3, #16, r3
 8014510:	f82e 3c08 	strh.w	r3, [lr, #-8]
 8014514:	ed5c 6a03 	vldr	s13, [ip, #-12]
 8014518:	ee66 6a86 	vmul.f32	s13, s13, s12
 801451c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014524:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8014528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801452c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014530:	ee17 3a90 	vmov	r3, s15
 8014534:	f303 030f 	ssat	r3, #16, r3
 8014538:	f82e 3c06 	strh.w	r3, [lr, #-6]
 801453c:	ed5c 6a02 	vldr	s13, [ip, #-8]
 8014540:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014544:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8014550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014558:	ee17 3a90 	vmov	r3, s15
 801455c:	f303 030f 	ssat	r3, #16, r3
 8014560:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8014564:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8014568:	ee67 7a86 	vmul.f32	s15, s15, s12
 801456c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014570:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014574:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801457c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014584:	bfcc      	ite	gt
 8014586:	ee16 3a90 	vmovgt	r3, s13
 801458a:	ee17 3a90 	vmovle	r3, s15
 801458e:	f303 030f 	ssat	r3, #16, r3
 8014592:	3c01      	subs	r4, #1
 8014594:	f82e 3c02 	strh.w	r3, [lr, #-2]
 8014598:	f10c 0c10 	add.w	ip, ip, #16
 801459c:	f10e 0e08 	add.w	lr, lr, #8
 80145a0:	d1a4      	bne.n	80144ec <st_f32_to_int16+0x1c>
 80145a2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80145a6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80145aa:	f012 0203 	ands.w	r2, r2, #3
 80145ae:	d042      	beq.n	8014636 <st_f32_to_int16+0x166>
 80145b0:	edd0 6a00 	vldr	s13, [r0]
 80145b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80145b8:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 8014638 <st_f32_to_int16+0x168>
 80145bc:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 80145c0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80145c4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80145c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145cc:	fe77 7a06 	vselgt.f32	s15, s14, s12
 80145d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145d8:	ee17 3a90 	vmov	r3, s15
 80145dc:	f303 030f 	ssat	r3, #16, r3
 80145e0:	3a01      	subs	r2, #1
 80145e2:	800b      	strh	r3, [r1, #0]
 80145e4:	d027      	beq.n	8014636 <st_f32_to_int16+0x166>
 80145e6:	edd0 7a01 	vldr	s15, [r0, #4]
 80145ea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80145ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80145f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f6:	fe77 6a06 	vselgt.f32	s13, s14, s12
 80145fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014602:	ee17 3a90 	vmov	r3, s15
 8014606:	f303 030f 	ssat	r3, #16, r3
 801460a:	2a01      	cmp	r2, #1
 801460c:	804b      	strh	r3, [r1, #2]
 801460e:	d012      	beq.n	8014636 <st_f32_to_int16+0x166>
 8014610:	edd0 7a02 	vldr	s15, [r0, #8]
 8014614:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014618:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014620:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8014624:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014628:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801462c:	ee17 3a10 	vmov	r3, s14
 8014630:	f303 030f 	ssat	r3, #16, r3
 8014634:	808b      	strh	r3, [r1, #4]
 8014636:	bd30      	pop	{r4, r5, pc}
 8014638:	47000000 	.word	0x47000000

0801463c <st_f32_to_int8>:
 801463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801463e:	0895      	lsrs	r5, r2, #2
 8014640:	d06f      	beq.n	8014722 <st_f32_to_int8+0xe6>
 8014642:	f101 0c04 	add.w	ip, r1, #4
 8014646:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801464a:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 801464e:	f100 0e10 	add.w	lr, r0, #16
 8014652:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 80147d0 <st_f32_to_int8+0x194>
 8014656:	00ae      	lsls	r6, r5, #2
 8014658:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 801465c:	ed1e 7a04 	vldr	s14, [lr, #-16]
 8014660:	ee27 7a25 	vmul.f32	s14, s14, s11
 8014664:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801466c:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8014670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014678:	ee17 3a90 	vmov	r3, s15
 801467c:	b21b      	sxth	r3, r3
 801467e:	f303 0307 	ssat	r3, #8, r3
 8014682:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8014686:	ed1e 7a03 	vldr	s14, [lr, #-12]
 801468a:	ee27 7a25 	vmul.f32	s14, s14, s11
 801468e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014696:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801469a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801469e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146a2:	ee17 3a90 	vmov	r3, s15
 80146a6:	b21b      	sxth	r3, r3
 80146a8:	f303 0307 	ssat	r3, #8, r3
 80146ac:	f80c 3c03 	strb.w	r3, [ip, #-3]
 80146b0:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80146b4:	ee27 7a25 	vmul.f32	s14, s14, s11
 80146b8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80146bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c0:	fe76 7a05 	vselgt.f32	s15, s12, s10
 80146c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146cc:	ee17 3a90 	vmov	r3, s15
 80146d0:	b21b      	sxth	r3, r3
 80146d2:	f303 0307 	ssat	r3, #8, r3
 80146d6:	f80c 3c02 	strb.w	r3, [ip, #-2]
 80146da:	ed5e 6a01 	vldr	s13, [lr, #-4]
 80146de:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80146e2:	ee76 7a86 	vadd.f32	s15, s13, s12
 80146e6:	ee36 7ac6 	vsub.f32	s14, s13, s12
 80146ea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80146ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146f2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80146f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146fa:	ee17 3a90 	vmov	r3, s15
 80146fe:	ee17 7a10 	vmov	r7, s14
 8014702:	b21b      	sxth	r3, r3
 8014704:	b23f      	sxth	r7, r7
 8014706:	dd56      	ble.n	80147b6 <st_f32_to_int8+0x17a>
 8014708:	f303 0307 	ssat	r3, #8, r3
 801470c:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8014710:	f10c 0c04 	add.w	ip, ip, #4
 8014714:	f10e 0e10 	add.w	lr, lr, #16
 8014718:	4564      	cmp	r4, ip
 801471a:	d19f      	bne.n	801465c <st_f32_to_int8+0x20>
 801471c:	4431      	add	r1, r6
 801471e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8014722:	f012 0203 	ands.w	r2, r2, #3
 8014726:	d045      	beq.n	80147b4 <st_f32_to_int8+0x178>
 8014728:	edd0 6a00 	vldr	s13, [r0]
 801472c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014730:	eddf 5a27 	vldr	s11, [pc, #156]	@ 80147d0 <st_f32_to_int8+0x194>
 8014734:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8014738:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801473c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014744:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8014748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801474c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014750:	ee17 3a90 	vmov	r3, s15
 8014754:	b21b      	sxth	r3, r3
 8014756:	f303 0307 	ssat	r3, #8, r3
 801475a:	3a01      	subs	r2, #1
 801475c:	700b      	strb	r3, [r1, #0]
 801475e:	d029      	beq.n	80147b4 <st_f32_to_int8+0x178>
 8014760:	edd0 6a01 	vldr	s13, [r0, #4]
 8014764:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014768:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014770:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8014774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801477c:	ee17 3a90 	vmov	r3, s15
 8014780:	b21b      	sxth	r3, r3
 8014782:	f303 0307 	ssat	r3, #8, r3
 8014786:	2a01      	cmp	r2, #1
 8014788:	704b      	strb	r3, [r1, #1]
 801478a:	d013      	beq.n	80147b4 <st_f32_to_int8+0x178>
 801478c:	edd0 6a02 	vldr	s13, [r0, #8]
 8014790:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014794:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 80147a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80147a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147a8:	ee17 3a90 	vmov	r3, s15
 80147ac:	b21b      	sxth	r3, r3
 80147ae:	f303 0307 	ssat	r3, #8, r3
 80147b2:	708b      	strb	r3, [r1, #2]
 80147b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147b6:	f307 0707 	ssat	r7, #8, r7
 80147ba:	f80c 7c01 	strb.w	r7, [ip, #-1]
 80147be:	f10c 0c04 	add.w	ip, ip, #4
 80147c2:	f10e 0e10 	add.w	lr, lr, #16
 80147c6:	45a4      	cmp	ip, r4
 80147c8:	f47f af48 	bne.w	801465c <st_f32_to_int8+0x20>
 80147cc:	e7a6      	b.n	801471c <st_f32_to_int8+0xe0>
 80147ce:	bf00      	nop
 80147d0:	43000000 	.word	0x43000000

080147d4 <st_int16_to_f32>:
 80147d4:	b530      	push	{r4, r5, lr}
 80147d6:	0894      	lsrs	r4, r2, #2
 80147d8:	d038      	beq.n	801484c <st_int16_to_f32+0x78>
 80147da:	f100 0c08 	add.w	ip, r0, #8
 80147de:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801489c <st_int16_to_f32+0xc8>
 80147e2:	f101 0310 	add.w	r3, r1, #16
 80147e6:	46a6      	mov	lr, r4
 80147e8:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 80147ec:	3310      	adds	r3, #16
 80147ee:	f10c 0c08 	add.w	ip, ip, #8
 80147f2:	f1be 0e01 	subs.w	lr, lr, #1
 80147f6:	ee07 5a90 	vmov	s15, r5
 80147fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014802:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 8014806:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 801480a:	ee07 5a90 	vmov	s15, r5
 801480e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014816:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 801481a:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 801481e:	ee07 5a90 	vmov	s15, r5
 8014822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014826:	ee67 7a87 	vmul.f32	s15, s15, s14
 801482a:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 801482e:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 8014832:	ee07 5a90 	vmov	s15, r5
 8014836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801483a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801483e:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8014842:	d1d1      	bne.n	80147e8 <st_int16_to_f32+0x14>
 8014844:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8014848:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801484c:	f012 0203 	ands.w	r2, r2, #3
 8014850:	d023      	beq.n	801489a <st_int16_to_f32+0xc6>
 8014852:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014856:	3a01      	subs	r2, #1
 8014858:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801489c <st_int16_to_f32+0xc8>
 801485c:	ee07 3a90 	vmov	s15, r3
 8014860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014868:	edc1 7a00 	vstr	s15, [r1]
 801486c:	d015      	beq.n	801489a <st_int16_to_f32+0xc6>
 801486e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014872:	2a01      	cmp	r2, #1
 8014874:	ee07 3a90 	vmov	s15, r3
 8014878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801487c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014880:	edc1 7a01 	vstr	s15, [r1, #4]
 8014884:	d009      	beq.n	801489a <st_int16_to_f32+0xc6>
 8014886:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801488a:	ee07 3a90 	vmov	s15, r3
 801488e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014896:	edc1 7a02 	vstr	s15, [r1, #8]
 801489a:	bd30      	pop	{r4, r5, pc}
 801489c:	38000000 	.word	0x38000000

080148a0 <st_sssa8_ch_convolve_rank1upd>:
 80148a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a4:	b085      	sub	sp, #20
 80148a6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 80148aa:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 80148ae:	fb13 f304 	smulbb	r3, r3, r4
 80148b2:	460c      	mov	r4, r1
 80148b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80148b6:	fb13 f500 	smulbb	r5, r3, r0
 80148ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80148bc:	2a00      	cmp	r2, #0
 80148be:	d070      	beq.n	80149a2 <st_sssa8_ch_convolve_rank1upd+0x102>
 80148c0:	b2ad      	uxth	r5, r5
 80148c2:	f1a1 0904 	sub.w	r9, r1, #4
 80148c6:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 80148ca:	08af      	lsrs	r7, r5, #2
 80148cc:	f005 0503 	and.w	r5, r5, #3
 80148d0:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 80148d4:	1e69      	subs	r1, r5, #1
 80148d6:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 80148da:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 80148de:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80148e2:	b289      	uxth	r1, r1
 80148e4:	9100      	str	r1, [sp, #0]
 80148e6:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 80148ea:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 80148ee:	b292      	uxth	r2, r2
 80148f0:	9202      	str	r2, [sp, #8]
 80148f2:	025a      	lsls	r2, r3, #9
 80148f4:	3301      	adds	r3, #1
 80148f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80148fa:	025b      	lsls	r3, r3, #9
 80148fc:	9203      	str	r2, [sp, #12]
 80148fe:	9301      	str	r3, [sp, #4]
 8014900:	2f80      	cmp	r7, #128	@ 0x80
 8014902:	d953      	bls.n	80149ac <st_sssa8_ch_convolve_rank1upd+0x10c>
 8014904:	9b03      	ldr	r3, [sp, #12]
 8014906:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 801490a:	2600      	movs	r6, #0
 801490c:	eb04 0c03 	add.w	ip, r4, r3
 8014910:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 8014914:	2200      	movs	r2, #0
 8014916:	f851 3b04 	ldr.w	r3, [r1], #4
 801491a:	fa2f fe83 	sxtb16	lr, r3
 801491e:	4281      	cmp	r1, r0
 8014920:	ea4f 2333 	mov.w	r3, r3, ror #8
 8014924:	fa92 f21e 	qadd16	r2, r2, lr
 8014928:	fa2f f383 	sxtb16	r3, r3
 801492c:	fa92 f213 	qadd16	r2, r2, r3
 8014930:	d1f1      	bne.n	8014916 <st_sssa8_ch_convolve_rank1upd+0x76>
 8014932:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 8014936:	b213      	sxth	r3, r2
 8014938:	4560      	cmp	r0, ip
 801493a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 801493e:	441e      	add	r6, r3
 8014940:	d1e6      	bne.n	8014910 <st_sssa8_ch_convolve_rank1upd+0x70>
 8014942:	9b01      	ldr	r3, [sp, #4]
 8014944:	18e1      	adds	r1, r4, r3
 8014946:	9c02      	ldr	r4, [sp, #8]
 8014948:	b374      	cbz	r4, 80149a8 <st_sssa8_ch_convolve_rank1upd+0x108>
 801494a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801494e:	2200      	movs	r2, #0
 8014950:	f851 3b04 	ldr.w	r3, [r1], #4
 8014954:	fa2f f083 	sxtb16	r0, r3
 8014958:	428c      	cmp	r4, r1
 801495a:	ea4f 2333 	mov.w	r3, r3, ror #8
 801495e:	fa92 f210 	qadd16	r2, r2, r0
 8014962:	fa2f f383 	sxtb16	r3, r3
 8014966:	fa92 f213 	qadd16	r2, r2, r3
 801496a:	d1f1      	bne.n	8014950 <st_sssa8_ch_convolve_rank1upd+0xb0>
 801496c:	b213      	sxth	r3, r2
 801496e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8014972:	441e      	add	r6, r3
 8014974:	b16d      	cbz	r5, 8014992 <st_sssa8_ch_convolve_rank1upd+0xf2>
 8014976:	f994 3000 	ldrsb.w	r3, [r4]
 801497a:	441e      	add	r6, r3
 801497c:	9b00      	ldr	r3, [sp, #0]
 801497e:	b13b      	cbz	r3, 8014990 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8014980:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8014984:	2d02      	cmp	r5, #2
 8014986:	441e      	add	r6, r3
 8014988:	d002      	beq.n	8014990 <st_sssa8_ch_convolve_rank1upd+0xf0>
 801498a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801498e:	441e      	add	r6, r3
 8014990:	442c      	add	r4, r5
 8014992:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8014996:	fb06 331b 	mls	r3, r6, fp, r3
 801499a:	f84a 3b04 	str.w	r3, [sl], #4
 801499e:	45c2      	cmp	sl, r8
 80149a0:	d1ae      	bne.n	8014900 <st_sssa8_ch_convolve_rank1upd+0x60>
 80149a2:	b005      	add	sp, #20
 80149a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149a8:	460c      	mov	r4, r1
 80149aa:	e7e3      	b.n	8014974 <st_sssa8_ch_convolve_rank1upd+0xd4>
 80149ac:	4621      	mov	r1, r4
 80149ae:	2600      	movs	r6, #0
 80149b0:	463c      	mov	r4, r7
 80149b2:	e7c9      	b.n	8014948 <st_sssa8_ch_convolve_rank1upd+0xa8>

080149b4 <st_int8_fill>:
 80149b4:	0203      	lsls	r3, r0, #8
 80149b6:	468c      	mov	ip, r1
 80149b8:	b510      	push	{r4, lr}
 80149ba:	b2c4      	uxtb	r4, r0
 80149bc:	b29b      	uxth	r3, r3
 80149be:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 80149c2:	431c      	orrs	r4, r3
 80149c4:	0403      	lsls	r3, r0, #16
 80149c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80149ca:	431c      	orrs	r4, r3
 80149cc:	078b      	lsls	r3, r1, #30
 80149ce:	d007      	beq.n	80149e0 <st_int8_fill+0x2c>
 80149d0:	b3a2      	cbz	r2, 8014a3c <st_int8_fill+0x88>
 80149d2:	f80c 0b01 	strb.w	r0, [ip], #1
 80149d6:	f01c 0f03 	tst.w	ip, #3
 80149da:	f102 32ff 	add.w	r2, r2, #4294967295
 80149de:	d1f7      	bne.n	80149d0 <st_int8_fill+0x1c>
 80149e0:	0911      	lsrs	r1, r2, #4
 80149e2:	d041      	beq.n	8014a68 <st_int8_fill+0xb4>
 80149e4:	1e4b      	subs	r3, r1, #1
 80149e6:	2b01      	cmp	r3, #1
 80149e8:	d929      	bls.n	8014a3e <st_int8_fill+0x8a>
 80149ea:	f01c 0f07 	tst.w	ip, #7
 80149ee:	d126      	bne.n	8014a3e <st_int8_fill+0x8a>
 80149f0:	f10c 0310 	add.w	r3, ip, #16
 80149f4:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80149f8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80149fc:	e943 4404 	strd	r4, r4, [r3, #-16]
 8014a00:	e943 4402 	strd	r4, r4, [r3, #-8]
 8014a04:	3310      	adds	r3, #16
 8014a06:	428b      	cmp	r3, r1
 8014a08:	d1f8      	bne.n	80149fc <st_int8_fill+0x48>
 8014a0a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8014a0e:	44f4      	add	ip, lr
 8014a10:	f002 0203 	and.w	r2, r2, #3
 8014a14:	b15b      	cbz	r3, 8014a2e <st_int8_fill+0x7a>
 8014a16:	1e59      	subs	r1, r3, #1
 8014a18:	f8cc 4000 	str.w	r4, [ip]
 8014a1c:	d005      	beq.n	8014a2a <st_int8_fill+0x76>
 8014a1e:	2901      	cmp	r1, #1
 8014a20:	f8cc 4004 	str.w	r4, [ip, #4]
 8014a24:	bf18      	it	ne
 8014a26:	f8cc 4008 	strne.w	r4, [ip, #8]
 8014a2a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8014a2e:	b12a      	cbz	r2, 8014a3c <st_int8_fill+0x88>
 8014a30:	4601      	mov	r1, r0
 8014a32:	4660      	mov	r0, ip
 8014a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a38:	f004 bead 	b.w	8019796 <memset>
 8014a3c:	bd10      	pop	{r4, pc}
 8014a3e:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8014a42:	4663      	mov	r3, ip
 8014a44:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8014a48:	601c      	str	r4, [r3, #0]
 8014a4a:	3310      	adds	r3, #16
 8014a4c:	f843 4c0c 	str.w	r4, [r3, #-12]
 8014a50:	f843 4c08 	str.w	r4, [r3, #-8]
 8014a54:	f843 4c04 	str.w	r4, [r3, #-4]
 8014a58:	4299      	cmp	r1, r3
 8014a5a:	d1f5      	bne.n	8014a48 <st_int8_fill+0x94>
 8014a5c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8014a60:	44f4      	add	ip, lr
 8014a62:	f002 0203 	and.w	r2, r2, #3
 8014a66:	e7d5      	b.n	8014a14 <st_int8_fill+0x60>
 8014a68:	0893      	lsrs	r3, r2, #2
 8014a6a:	f002 0203 	and.w	r2, r2, #3
 8014a6e:	e7d1      	b.n	8014a14 <st_int8_fill+0x60>

08014a70 <st_int8_copy>:
 8014a70:	4288      	cmp	r0, r1
 8014a72:	d010      	beq.n	8014a96 <st_int8_copy+0x26>
 8014a74:	b17a      	cbz	r2, 8014a96 <st_int8_copy+0x26>
 8014a76:	4288      	cmp	r0, r1
 8014a78:	eb00 0302 	add.w	r3, r0, r2
 8014a7c:	d20c      	bcs.n	8014a98 <st_int8_copy+0x28>
 8014a7e:	428b      	cmp	r3, r1
 8014a80:	d90a      	bls.n	8014a98 <st_int8_copy+0x28>
 8014a82:	4283      	cmp	r3, r0
 8014a84:	440a      	add	r2, r1
 8014a86:	d906      	bls.n	8014a96 <st_int8_copy+0x26>
 8014a88:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8014a8c:	4283      	cmp	r3, r0
 8014a8e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8014a92:	d1f9      	bne.n	8014a88 <st_int8_copy+0x18>
 8014a94:	4770      	bx	lr
 8014a96:	4770      	bx	lr
 8014a98:	078b      	lsls	r3, r1, #30
 8014a9a:	d102      	bne.n	8014aa2 <st_int8_copy+0x32>
 8014a9c:	e008      	b.n	8014ab0 <st_int8_copy+0x40>
 8014a9e:	2a00      	cmp	r2, #0
 8014aa0:	d04c      	beq.n	8014b3c <st_int8_copy+0xcc>
 8014aa2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8014aa6:	3a01      	subs	r2, #1
 8014aa8:	f801 3b01 	strb.w	r3, [r1], #1
 8014aac:	078b      	lsls	r3, r1, #30
 8014aae:	d1f6      	bne.n	8014a9e <st_int8_copy+0x2e>
 8014ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab4:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8014ab8:	d05d      	beq.n	8014b76 <st_int8_copy+0x106>
 8014aba:	ea41 0300 	orr.w	r3, r1, r0
 8014abe:	075b      	lsls	r3, r3, #29
 8014ac0:	d13d      	bne.n	8014b3e <st_int8_copy+0xce>
 8014ac2:	f1be 0f01 	cmp.w	lr, #1
 8014ac6:	d03a      	beq.n	8014b3e <st_int8_copy+0xce>
 8014ac8:	f100 0310 	add.w	r3, r0, #16
 8014acc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8014ad0:	f101 0c10 	add.w	ip, r1, #16
 8014ad4:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8014ad8:	3310      	adds	r3, #16
 8014ada:	f10c 0c10 	add.w	ip, ip, #16
 8014ade:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8014ae2:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8014ae6:	4573      	cmp	r3, lr
 8014ae8:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8014aec:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8014af0:	d1f2      	bne.n	8014ad8 <st_int8_copy+0x68>
 8014af2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8014af6:	4421      	add	r1, r4
 8014af8:	4420      	add	r0, r4
 8014afa:	f002 0203 	and.w	r2, r2, #3
 8014afe:	b16b      	cbz	r3, 8014b1c <st_int8_copy+0xac>
 8014b00:	6804      	ldr	r4, [r0, #0]
 8014b02:	600c      	str	r4, [r1, #0]
 8014b04:	1e5c      	subs	r4, r3, #1
 8014b06:	d005      	beq.n	8014b14 <st_int8_copy+0xa4>
 8014b08:	6845      	ldr	r5, [r0, #4]
 8014b0a:	2c01      	cmp	r4, #1
 8014b0c:	604d      	str	r5, [r1, #4]
 8014b0e:	d001      	beq.n	8014b14 <st_int8_copy+0xa4>
 8014b10:	6884      	ldr	r4, [r0, #8]
 8014b12:	608c      	str	r4, [r1, #8]
 8014b14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014b18:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014b1c:	b162      	cbz	r2, 8014b38 <st_int8_copy+0xc8>
 8014b1e:	f990 3000 	ldrsb.w	r3, [r0]
 8014b22:	3a01      	subs	r2, #1
 8014b24:	700b      	strb	r3, [r1, #0]
 8014b26:	d007      	beq.n	8014b38 <st_int8_copy+0xc8>
 8014b28:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8014b2c:	2a01      	cmp	r2, #1
 8014b2e:	704b      	strb	r3, [r1, #1]
 8014b30:	d002      	beq.n	8014b38 <st_int8_copy+0xc8>
 8014b32:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8014b36:	708b      	strb	r3, [r1, #2]
 8014b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b3c:	4770      	bx	lr
 8014b3e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8014b42:	460b      	mov	r3, r1
 8014b44:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8014b48:	4684      	mov	ip, r0
 8014b4a:	f8dc 8000 	ldr.w	r8, [ip]
 8014b4e:	3310      	adds	r3, #16
 8014b50:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8014b54:	f10c 0c10 	add.w	ip, ip, #16
 8014b58:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8014b5c:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8014b60:	f843 8c10 	str.w	r8, [r3, #-16]
 8014b64:	f843 7c0c 	str.w	r7, [r3, #-12]
 8014b68:	f843 6c08 	str.w	r6, [r3, #-8]
 8014b6c:	f843 5c04 	str.w	r5, [r3, #-4]
 8014b70:	459e      	cmp	lr, r3
 8014b72:	d1ea      	bne.n	8014b4a <st_int8_copy+0xda>
 8014b74:	e7bd      	b.n	8014af2 <st_int8_copy+0x82>
 8014b76:	0893      	lsrs	r3, r2, #2
 8014b78:	f002 0203 	and.w	r2, r2, #3
 8014b7c:	e7bf      	b.n	8014afe <st_int8_copy+0x8e>
 8014b7e:	bf00      	nop

08014b80 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	b093      	sub	sp, #76	@ 0x4c
 8014b86:	f8bd 4074 	ldrh.w	r4, [sp, #116]	@ 0x74
 8014b8a:	920a      	str	r2, [sp, #40]	@ 0x28
 8014b8c:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
 8014b90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014b92:	920d      	str	r2, [sp, #52]	@ 0x34
 8014b94:	0862      	lsrs	r2, r4, #1
 8014b96:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8014b9a:	940c      	str	r4, [sp, #48]	@ 0x30
 8014b9c:	9104      	str	r1, [sp, #16]
 8014b9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8014ba0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f000 8184 	beq.w	8014eb0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x330>
 8014ba8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014baa:	b299      	uxth	r1, r3
 8014bac:	4613      	mov	r3, r2
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	f000 80d7 	beq.w	8014d62 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e2>
 8014bb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014bb6:	3b01      	subs	r3, #1
 8014bb8:	0897      	lsrs	r7, r2, #2
 8014bba:	f002 0203 	and.w	r2, r2, #3
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	9201      	str	r2, [sp, #4]
 8014bc2:	1c4a      	adds	r2, r1, #1
 8014bc4:	0049      	lsls	r1, r1, #1
 8014bc6:	9703      	str	r7, [sp, #12]
 8014bc8:	9105      	str	r1, [sp, #20]
 8014bca:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8014bcc:	4411      	add	r1, r2
 8014bce:	9102      	str	r1, [sp, #8]
 8014bd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014bd2:	f101 0210 	add.w	r2, r1, #16
 8014bd6:	f101 0c08 	add.w	ip, r1, #8
 8014bda:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014bde:	9a01      	ldr	r2, [sp, #4]
 8014be0:	9306      	str	r3, [sp, #24]
 8014be2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8014be4:	f103 0e04 	add.w	lr, r3, #4
 8014be8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8014bea:	f103 0508 	add.w	r5, r3, #8
 8014bee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014bf0:	f103 0408 	add.w	r4, r3, #8
 8014bf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014bf6:	1c5e      	adds	r6, r3, #1
 8014bf8:	013b      	lsls	r3, r7, #4
 8014bfa:	9307      	str	r3, [sp, #28]
 8014bfc:	9b04      	ldr	r3, [sp, #16]
 8014bfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014c02:	9308      	str	r3, [sp, #32]
 8014c04:	0093      	lsls	r3, r2, #2
 8014c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c08:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 8014c0c:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8014c10:	9311      	str	r3, [sp, #68]	@ 0x44
 8014c12:	9903      	ldr	r1, [sp, #12]
 8014c14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014c16:	9211      	str	r2, [sp, #68]	@ 0x44
 8014c18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014c1a:	2900      	cmp	r1, #0
 8014c1c:	f000 8146 	beq.w	8014eac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 8014c20:	4688      	mov	r8, r1
 8014c22:	9f04      	ldr	r7, [sp, #16]
 8014c24:	4601      	mov	r1, r0
 8014c26:	f8d7 9000 	ldr.w	r9, [r7]
 8014c2a:	f8d1 a000 	ldr.w	sl, [r1]
 8014c2e:	fb2a 3a09 	smlad	sl, sl, r9, r3
 8014c32:	684b      	ldr	r3, [r1, #4]
 8014c34:	fb23 2909 	smlad	r9, r3, r9, r2
 8014c38:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8014c3c:	3110      	adds	r1, #16
 8014c3e:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8014c42:	3708      	adds	r7, #8
 8014c44:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014c48:	fb23 a30b 	smlad	r3, r3, fp, sl
 8014c4c:	fb22 920b 	smlad	r2, r2, fp, r9
 8014c50:	f1b8 0801 	subs.w	r8, r8, #1
 8014c54:	d1e7      	bne.n	8014c26 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 8014c56:	9907      	ldr	r1, [sp, #28]
 8014c58:	4408      	add	r0, r1
 8014c5a:	9908      	ldr	r1, [sp, #32]
 8014c5c:	9f01      	ldr	r7, [sp, #4]
 8014c5e:	b31f      	cbz	r7, 8014ca8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x128>
 8014c60:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014c64:	f8b0 8000 	ldrh.w	r8, [r0]
 8014c68:	fb17 3308 	smlabb	r3, r7, r8, r3
 8014c6c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8014c70:	fb18 2207 	smlabb	r2, r8, r7, r2
 8014c74:	9f01      	ldr	r7, [sp, #4]
 8014c76:	2f01      	cmp	r7, #1
 8014c78:	d014      	beq.n	8014ca4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 8014c7a:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8014c7e:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8014c82:	fb17 3308 	smlabb	r3, r7, r8, r3
 8014c86:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 8014c8a:	fb18 2207 	smlabb	r2, r8, r7, r2
 8014c8e:	9f01      	ldr	r7, [sp, #4]
 8014c90:	2f02      	cmp	r7, #2
 8014c92:	d007      	beq.n	8014ca4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 8014c94:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8014c98:	8907      	ldrh	r7, [r0, #8]
 8014c9a:	fb17 3301 	smlabb	r3, r7, r1, r3
 8014c9e:	8947      	ldrh	r7, [r0, #10]
 8014ca0:	fb11 2207 	smlabb	r2, r1, r7, r2
 8014ca4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014ca6:	4408      	add	r0, r1
 8014ca8:	f93e 9c04 	ldrsh.w	r9, [lr, #-4]
 8014cac:	f1b9 0f15 	cmp.w	r9, #21
 8014cb0:	f340 80af 	ble.w	8014e12 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x292>
 8014cb4:	f109 38ff 	add.w	r8, r9, #4294967295
 8014cb8:	f1a9 0702 	sub.w	r7, r9, #2
 8014cbc:	2101      	movs	r1, #1
 8014cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8014cc2:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8014cc6:	fb53 7101 	smmla	r1, r3, r1, r7
 8014cca:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8014cce:	fa41 f108 	asr.w	r1, r1, r8
 8014cd2:	1f27      	subs	r7, r4, #4
 8014cd4:	f1a5 0804 	sub.w	r8, r5, #4
 8014cd8:	440b      	add	r3, r1
 8014cda:	f1ae 0102 	sub.w	r1, lr, #2
 8014cde:	f303 0307 	ssat	r3, #8, r3
 8014ce2:	b25b      	sxtb	r3, r3
 8014ce4:	f806 3c01 	strb.w	r3, [r6, #-1]
 8014ce8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8014cec:	2915      	cmp	r1, #21
 8014cee:	f340 80ab 	ble.w	8014e48 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c8>
 8014cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8014cf6:	f04f 0901 	mov.w	r9, #1
 8014cfa:	f8d7 8000 	ldr.w	r8, [r7]
 8014cfe:	1e8f      	subs	r7, r1, #2
 8014d00:	3901      	subs	r1, #1
 8014d02:	fa09 f707 	lsl.w	r7, r9, r7
 8014d06:	fb52 7303 	smmla	r3, r2, r3, r7
 8014d0a:	410b      	asrs	r3, r1
 8014d0c:	4443      	add	r3, r8
 8014d0e:	f303 0307 	ssat	r3, #8, r3
 8014d12:	b25b      	sxtb	r3, r3
 8014d14:	9a02      	ldr	r2, [sp, #8]
 8014d16:	f10c 0c08 	add.w	ip, ip, #8
 8014d1a:	f10e 0e04 	add.w	lr, lr, #4
 8014d1e:	3508      	adds	r5, #8
 8014d20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014d24:	3408      	adds	r4, #8
 8014d26:	9b05      	ldr	r3, [sp, #20]
 8014d28:	441a      	add	r2, r3
 8014d2a:	441e      	add	r6, r3
 8014d2c:	9b06      	ldr	r3, [sp, #24]
 8014d2e:	9202      	str	r2, [sp, #8]
 8014d30:	459c      	cmp	ip, r3
 8014d32:	f47f af69 	bne.w	8014c08 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 8014d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014d38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014d3a:	9905      	ldr	r1, [sp, #20]
 8014d3c:	fb03 2201 	mla	r2, r3, r1, r2
 8014d40:	9223      	str	r2, [sp, #140]	@ 0x8c
 8014d42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014d44:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014d48:	920a      	str	r2, [sp, #40]	@ 0x28
 8014d4a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8014d4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014d50:	921f      	str	r2, [sp, #124]	@ 0x7c
 8014d52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014d54:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014d58:	9220      	str	r2, [sp, #128]	@ 0x80
 8014d5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014d5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014d60:	9321      	str	r3, [sp, #132]	@ 0x84
 8014d62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d64:	07db      	lsls	r3, r3, #31
 8014d66:	d546      	bpl.n	8014df6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8014d68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014d6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d6c:	0896      	lsrs	r6, r2, #2
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	f000 80cd 	beq.w	8014f0e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38e>
 8014d74:	00f7      	lsls	r7, r6, #3
 8014d76:	9904      	ldr	r1, [sp, #16]
 8014d78:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8014d7c:	6804      	ldr	r4, [r0, #0]
 8014d7e:	3008      	adds	r0, #8
 8014d80:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014d84:	680d      	ldr	r5, [r1, #0]
 8014d86:	fb24 3305 	smlad	r3, r4, r5, r3
 8014d8a:	684c      	ldr	r4, [r1, #4]
 8014d8c:	3108      	adds	r1, #8
 8014d8e:	fb22 3304 	smlad	r3, r2, r4, r3
 8014d92:	42b0      	cmp	r0, r6
 8014d94:	d1f2      	bne.n	8014d7c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fc>
 8014d96:	9a04      	ldr	r2, [sp, #16]
 8014d98:	443a      	add	r2, r7
 8014d9a:	9204      	str	r2, [sp, #16]
 8014d9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014d9e:	f012 0203 	ands.w	r2, r2, #3
 8014da2:	d011      	beq.n	8014dc8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8014da4:	3a01      	subs	r2, #1
 8014da6:	9c04      	ldr	r4, [sp, #16]
 8014da8:	8831      	ldrh	r1, [r6, #0]
 8014daa:	8820      	ldrh	r0, [r4, #0]
 8014dac:	b292      	uxth	r2, r2
 8014dae:	fb10 3301 	smlabb	r3, r0, r1, r3
 8014db2:	b14a      	cbz	r2, 8014dc8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8014db4:	8860      	ldrh	r0, [r4, #2]
 8014db6:	2a01      	cmp	r2, #1
 8014db8:	8871      	ldrh	r1, [r6, #2]
 8014dba:	fb10 3301 	smlabb	r3, r0, r1, r3
 8014dbe:	d003      	beq.n	8014dc8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8014dc0:	88b1      	ldrh	r1, [r6, #4]
 8014dc2:	88a2      	ldrh	r2, [r4, #4]
 8014dc4:	fb11 3302 	smlabb	r3, r1, r2, r3
 8014dc8:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8014dca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014dce:	2a15      	cmp	r2, #21
 8014dd0:	dd79      	ble.n	8014ec6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 8014dd2:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8014dd4:	1e95      	subs	r5, r2, #2
 8014dd6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8014dd8:	3a01      	subs	r2, #1
 8014dda:	6804      	ldr	r4, [r0, #0]
 8014ddc:	2001      	movs	r0, #1
 8014dde:	6809      	ldr	r1, [r1, #0]
 8014de0:	40a8      	lsls	r0, r5
 8014de2:	fb53 0301 	smmla	r3, r3, r1, r0
 8014de6:	4113      	asrs	r3, r2
 8014de8:	4423      	add	r3, r4
 8014dea:	f303 0307 	ssat	r3, #8, r3
 8014dee:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014df0:	f802 3b01 	strb.w	r3, [r2], #1
 8014df4:	9223      	str	r2, [sp, #140]	@ 0x8c
 8014df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d05c      	beq.n	8014eb6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 8014dfc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014dfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e00:	fb02 f303 	mul.w	r3, r2, r3
 8014e04:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014e06:	f1c3 0301 	rsb	r3, r3, #1
 8014e0a:	18d0      	adds	r0, r2, r3
 8014e0c:	b013      	add	sp, #76	@ 0x4c
 8014e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e12:	f1b9 0f00 	cmp.w	r9, #0
 8014e16:	dd24      	ble.n	8014e62 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 8014e18:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8014e1c:	005b      	lsls	r3, r3, #1
 8014e1e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8014e22:	f1a5 0804 	sub.w	r8, r5, #4
 8014e26:	fb53 7301 	smmla	r3, r3, r1, r7
 8014e2a:	1f27      	subs	r7, r4, #4
 8014e2c:	fa43 f309 	asr.w	r3, r3, r9
 8014e30:	f1ae 0102 	sub.w	r1, lr, #2
 8014e34:	f303 0307 	ssat	r3, #8, r3
 8014e38:	b25b      	sxtb	r3, r3
 8014e3a:	f806 3c01 	strb.w	r3, [r6, #-1]
 8014e3e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8014e42:	2915      	cmp	r1, #21
 8014e44:	f73f af55 	bgt.w	8014cf2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 8014e48:	2900      	cmp	r1, #0
 8014e4a:	dd20      	ble.n	8014e8e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30e>
 8014e4c:	0053      	lsls	r3, r2, #1
 8014e4e:	683f      	ldr	r7, [r7, #0]
 8014e50:	f8d8 2000 	ldr.w	r2, [r8]
 8014e54:	fb53 7302 	smmla	r3, r3, r2, r7
 8014e58:	410b      	asrs	r3, r1
 8014e5a:	f303 0307 	ssat	r3, #8, r3
 8014e5e:	b25b      	sxtb	r3, r3
 8014e60:	e758      	b.n	8014d14 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 8014e62:	f1c9 0701 	rsb	r7, r9, #1
 8014e66:	f1ae 0102 	sub.w	r1, lr, #2
 8014e6a:	fa03 f707 	lsl.w	r7, r3, r7
 8014e6e:	f307 071f 	ssat	r7, #32, r7
 8014e72:	f1a5 0804 	sub.w	r8, r5, #4
 8014e76:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8014e7a:	fb57 f713 	smmulr	r7, r7, r3
 8014e7e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8014e82:	443b      	add	r3, r7
 8014e84:	1f27      	subs	r7, r4, #4
 8014e86:	f303 0307 	ssat	r3, #8, r3
 8014e8a:	b25b      	sxtb	r3, r3
 8014e8c:	e72a      	b.n	8014ce4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x164>
 8014e8e:	f1c1 0101 	rsb	r1, r1, #1
 8014e92:	408a      	lsls	r2, r1
 8014e94:	f302 021f 	ssat	r2, #32, r2
 8014e98:	f8d8 3000 	ldr.w	r3, [r8]
 8014e9c:	fb52 f313 	smmulr	r3, r2, r3
 8014ea0:	683a      	ldr	r2, [r7, #0]
 8014ea2:	4413      	add	r3, r2
 8014ea4:	f303 0307 	ssat	r3, #8, r3
 8014ea8:	b25b      	sxtb	r3, r3
 8014eaa:	e733      	b.n	8014d14 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 8014eac:	9904      	ldr	r1, [sp, #16]
 8014eae:	e6d5      	b.n	8014c5c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xdc>
 8014eb0:	2101      	movs	r1, #1
 8014eb2:	4613      	mov	r3, r2
 8014eb4:	e67b      	b.n	8014bae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 8014eb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014eba:	1a9b      	subs	r3, r3, r2
 8014ebc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014ebe:	18d0      	adds	r0, r2, r3
 8014ec0:	b013      	add	sp, #76	@ 0x4c
 8014ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec6:	2a00      	cmp	r2, #0
 8014ec8:	dd0e      	ble.n	8014ee8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x368>
 8014eca:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8014ecc:	005b      	lsls	r3, r3, #1
 8014ece:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8014ed0:	6809      	ldr	r1, [r1, #0]
 8014ed2:	6800      	ldr	r0, [r0, #0]
 8014ed4:	fb53 0301 	smmla	r3, r3, r1, r0
 8014ed8:	4113      	asrs	r3, r2
 8014eda:	f303 0307 	ssat	r3, #8, r3
 8014ede:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014ee0:	f802 3b01 	strb.w	r3, [r2], #1
 8014ee4:	9223      	str	r2, [sp, #140]	@ 0x8c
 8014ee6:	e786      	b.n	8014df6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8014ee8:	f1c2 0201 	rsb	r2, r2, #1
 8014eec:	4093      	lsls	r3, r2
 8014eee:	f303 031f 	ssat	r3, #32, r3
 8014ef2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014ef4:	6812      	ldr	r2, [r2, #0]
 8014ef6:	fb53 f312 	smmulr	r3, r3, r2
 8014efa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014efc:	6812      	ldr	r2, [r2, #0]
 8014efe:	4413      	add	r3, r2
 8014f00:	f303 0307 	ssat	r3, #8, r3
 8014f04:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014f06:	f802 3b01 	strb.w	r3, [r2], #1
 8014f0a:	9223      	str	r2, [sp, #140]	@ 0x8c
 8014f0c:	e773      	b.n	8014df6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8014f0e:	4606      	mov	r6, r0
 8014f10:	e744      	b.n	8014d9c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21c>
 8014f12:	bf00      	nop

08014f14 <weights_2channels_prefetch>:
 8014f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	b087      	sub	sp, #28
 8014f1c:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014f20:	9302      	str	r3, [sp, #8]
 8014f22:	f340 80e6 	ble.w	80150f2 <weights_2channels_prefetch+0x1de>
 8014f26:	f1a8 0310 	sub.w	r3, r8, #16
 8014f2a:	f1a8 0403 	sub.w	r4, r8, #3
 8014f2e:	f04f 0b00 	mov.w	fp, #0
 8014f32:	091b      	lsrs	r3, r3, #4
 8014f34:	9403      	str	r4, [sp, #12]
 8014f36:	f1a8 0404 	sub.w	r4, r8, #4
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	9405      	str	r4, [sp, #20]
 8014f3e:	011c      	lsls	r4, r3, #4
 8014f40:	019b      	lsls	r3, r3, #6
 8014f42:	9400      	str	r4, [sp, #0]
 8014f44:	9304      	str	r3, [sp, #16]
 8014f46:	f1b8 0f0f 	cmp.w	r8, #15
 8014f4a:	f340 80d7 	ble.w	80150fc <weights_2channels_prefetch+0x1e8>
 8014f4e:	9b00      	ldr	r3, [sp, #0]
 8014f50:	460d      	mov	r5, r1
 8014f52:	18c6      	adds	r6, r0, r3
 8014f54:	4613      	mov	r3, r2
 8014f56:	6804      	ldr	r4, [r0, #0]
 8014f58:	3010      	adds	r0, #16
 8014f5a:	682f      	ldr	r7, [r5, #0]
 8014f5c:	3340      	adds	r3, #64	@ 0x40
 8014f5e:	fa2f fc84 	sxtb16	ip, r4
 8014f62:	3510      	adds	r5, #16
 8014f64:	f843 cc40 	str.w	ip, [r3, #-64]
 8014f68:	ea4f 2434 	mov.w	r4, r4, ror #8
 8014f6c:	42b0      	cmp	r0, r6
 8014f6e:	fa2f f484 	sxtb16	r4, r4
 8014f72:	f843 4c3c 	str.w	r4, [r3, #-60]
 8014f76:	ea4f 2437 	mov.w	r4, r7, ror #8
 8014f7a:	fa2f f787 	sxtb16	r7, r7
 8014f7e:	fa2f f484 	sxtb16	r4, r4
 8014f82:	f843 7c38 	str.w	r7, [r3, #-56]
 8014f86:	f843 4c34 	str.w	r4, [r3, #-52]
 8014f8a:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 8014f8e:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 8014f92:	ea4f 2c34 	mov.w	ip, r4, ror #8
 8014f96:	fa2f f484 	sxtb16	r4, r4
 8014f9a:	fa2f fc8c 	sxtb16	ip, ip
 8014f9e:	f843 4c28 	str.w	r4, [r3, #-40]
 8014fa2:	f843 cc24 	str.w	ip, [r3, #-36]
 8014fa6:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8014faa:	fa2f f787 	sxtb16	r7, r7
 8014fae:	f843 7c30 	str.w	r7, [r3, #-48]
 8014fb2:	fa2f f78c 	sxtb16	r7, ip
 8014fb6:	f843 7c2c 	str.w	r7, [r3, #-44]
 8014fba:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8014fbe:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8014fc2:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8014fc6:	fa2f f787 	sxtb16	r7, r7
 8014fca:	fa2f fc8c 	sxtb16	ip, ip
 8014fce:	f843 7c20 	str.w	r7, [r3, #-32]
 8014fd2:	ea4f 2734 	mov.w	r7, r4, ror #8
 8014fd6:	f843 cc1c 	str.w	ip, [r3, #-28]
 8014fda:	fa2f f787 	sxtb16	r7, r7
 8014fde:	fa2f f484 	sxtb16	r4, r4
 8014fe2:	f843 7c14 	str.w	r7, [r3, #-20]
 8014fe6:	f843 4c18 	str.w	r4, [r3, #-24]
 8014fea:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8014fee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014ff2:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8014ff6:	fa2f f787 	sxtb16	r7, r7
 8014ffa:	fa2f fc8c 	sxtb16	ip, ip
 8014ffe:	f843 7c10 	str.w	r7, [r3, #-16]
 8015002:	ea4f 2734 	mov.w	r7, r4, ror #8
 8015006:	f843 cc0c 	str.w	ip, [r3, #-12]
 801500a:	fa2f f787 	sxtb16	r7, r7
 801500e:	fa2f f484 	sxtb16	r4, r4
 8015012:	f843 7c04 	str.w	r7, [r3, #-4]
 8015016:	f843 4c08 	str.w	r4, [r3, #-8]
 801501a:	d19c      	bne.n	8014f56 <weights_2channels_prefetch+0x42>
 801501c:	9b04      	ldr	r3, [sp, #16]
 801501e:	441a      	add	r2, r3
 8015020:	9b00      	ldr	r3, [sp, #0]
 8015022:	4419      	add	r1, r3
 8015024:	469e      	mov	lr, r3
 8015026:	9b03      	ldr	r3, [sp, #12]
 8015028:	4573      	cmp	r3, lr
 801502a:	dd65      	ble.n	80150f8 <weights_2channels_prefetch+0x1e4>
 801502c:	9b05      	ldr	r3, [sp, #20]
 801502e:	4614      	mov	r4, r2
 8015030:	460f      	mov	r7, r1
 8015032:	eba3 090e 	sub.w	r9, r3, lr
 8015036:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801503a:	f109 0a01 	add.w	sl, r9, #1
 801503e:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8015042:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 8015046:	9301      	str	r3, [sp, #4]
 8015048:	f856 3b04 	ldr.w	r3, [r6], #4
 801504c:	3410      	adds	r4, #16
 801504e:	f857 5b04 	ldr.w	r5, [r7], #4
 8015052:	fa2f fc83 	sxtb16	ip, r3
 8015056:	4286      	cmp	r6, r0
 8015058:	ea4f 2333 	mov.w	r3, r3, ror #8
 801505c:	fa2f f383 	sxtb16	r3, r3
 8015060:	f844 3c0c 	str.w	r3, [r4, #-12]
 8015064:	ea4f 2335 	mov.w	r3, r5, ror #8
 8015068:	fa2f f585 	sxtb16	r5, r5
 801506c:	f844 cc10 	str.w	ip, [r4, #-16]
 8015070:	f844 5c08 	str.w	r5, [r4, #-8]
 8015074:	fa2f f383 	sxtb16	r3, r3
 8015078:	f844 3c04 	str.w	r3, [r4, #-4]
 801507c:	d1e4      	bne.n	8015048 <weights_2channels_prefetch+0x134>
 801507e:	9b01      	ldr	r3, [sp, #4]
 8015080:	f10e 0e04 	add.w	lr, lr, #4
 8015084:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 8015088:	4419      	add	r1, r3
 801508a:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801508e:	45f0      	cmp	r8, lr
 8015090:	dd29      	ble.n	80150e6 <weights_2channels_prefetch+0x1d2>
 8015092:	f990 3000 	ldrsb.w	r3, [r0]
 8015096:	8013      	strh	r3, [r2, #0]
 8015098:	f991 3000 	ldrsb.w	r3, [r1]
 801509c:	8053      	strh	r3, [r2, #2]
 801509e:	f10e 0301 	add.w	r3, lr, #1
 80150a2:	4598      	cmp	r8, r3
 80150a4:	dd19      	ble.n	80150da <weights_2channels_prefetch+0x1c6>
 80150a6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80150aa:	8093      	strh	r3, [r2, #4]
 80150ac:	f991 3001 	ldrsb.w	r3, [r1, #1]
 80150b0:	80d3      	strh	r3, [r2, #6]
 80150b2:	f10e 0302 	add.w	r3, lr, #2
 80150b6:	4598      	cmp	r8, r3
 80150b8:	dd0f      	ble.n	80150da <weights_2channels_prefetch+0x1c6>
 80150ba:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80150be:	8113      	strh	r3, [r2, #8]
 80150c0:	f10e 0303 	add.w	r3, lr, #3
 80150c4:	f991 4002 	ldrsb.w	r4, [r1, #2]
 80150c8:	4598      	cmp	r8, r3
 80150ca:	8154      	strh	r4, [r2, #10]
 80150cc:	dd05      	ble.n	80150da <weights_2channels_prefetch+0x1c6>
 80150ce:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80150d2:	8193      	strh	r3, [r2, #12]
 80150d4:	f991 3003 	ldrsb.w	r3, [r1, #3]
 80150d8:	81d3      	strh	r3, [r2, #14]
 80150da:	eba8 0e0e 	sub.w	lr, r8, lr
 80150de:	4470      	add	r0, lr
 80150e0:	4471      	add	r1, lr
 80150e2:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 80150e6:	f10b 0b01 	add.w	fp, fp, #1
 80150ea:	9b02      	ldr	r3, [sp, #8]
 80150ec:	455b      	cmp	r3, fp
 80150ee:	f47f af2a 	bne.w	8014f46 <weights_2channels_prefetch+0x32>
 80150f2:	b007      	add	sp, #28
 80150f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150f8:	4630      	mov	r0, r6
 80150fa:	e7c8      	b.n	801508e <weights_2channels_prefetch+0x17a>
 80150fc:	4606      	mov	r6, r0
 80150fe:	f04f 0e00 	mov.w	lr, #0
 8015102:	e790      	b.n	8015026 <weights_2channels_prefetch+0x112>

08015104 <st_sssa8_ch_fullW_prefetch>:
 8015104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015108:	b087      	sub	sp, #28
 801510a:	461c      	mov	r4, r3
 801510c:	4680      	mov	r8, r0
 801510e:	4613      	mov	r3, r2
 8015110:	104f      	asrs	r7, r1, #1
 8015112:	4620      	mov	r0, r4
 8015114:	9103      	str	r1, [sp, #12]
 8015116:	9704      	str	r7, [sp, #16]
 8015118:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	@ 0x40
 801511c:	eb08 0402 	add.w	r4, r8, r2
 8015120:	d020      	beq.n	8015164 <st_sssa8_ch_fullW_prefetch+0x60>
 8015122:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015124:	4646      	mov	r6, r8
 8015126:	4655      	mov	r5, sl
 8015128:	f8cd 8014 	str.w	r8, [sp, #20]
 801512c:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8015130:	4680      	mov	r8, r0
 8015132:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8015136:	469a      	mov	sl, r3
 8015138:	462a      	mov	r2, r5
 801513a:	4621      	mov	r1, r4
 801513c:	4630      	mov	r0, r6
 801513e:	4653      	mov	r3, sl
 8015140:	f8cd 8000 	str.w	r8, [sp]
 8015144:	445d      	add	r5, fp
 8015146:	f7ff fee5 	bl	8014f14 <weights_2channels_prefetch>
 801514a:	3f01      	subs	r7, #1
 801514c:	444c      	add	r4, r9
 801514e:	444e      	add	r6, r9
 8015150:	d1f2      	bne.n	8015138 <st_sssa8_ch_fullW_prefetch+0x34>
 8015152:	9b04      	ldr	r3, [sp, #16]
 8015154:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015158:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 801515c:	fb03 8809 	mla	r8, r3, r9, r8
 8015160:	fb03 aa0b 	mla	sl, r3, fp, sl
 8015164:	9b03      	ldr	r3, [sp, #12]
 8015166:	07db      	lsls	r3, r3, #31
 8015168:	d509      	bpl.n	801517e <st_sssa8_ch_fullW_prefetch+0x7a>
 801516a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801516c:	2b00      	cmp	r3, #0
 801516e:	dd06      	ble.n	801517e <st_sssa8_ch_fullW_prefetch+0x7a>
 8015170:	4443      	add	r3, r8
 8015172:	f918 2b01 	ldrsb.w	r2, [r8], #1
 8015176:	4543      	cmp	r3, r8
 8015178:	f82a 2b02 	strh.w	r2, [sl], #2
 801517c:	d1f9      	bne.n	8015172 <st_sssa8_ch_fullW_prefetch+0x6e>
 801517e:	b007      	add	sp, #28
 8015180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015184 <st_int8_to_f32>:
 8015184:	b530      	push	{r4, r5, lr}
 8015186:	0894      	lsrs	r4, r2, #2
 8015188:	d036      	beq.n	80151f8 <st_int8_to_f32+0x74>
 801518a:	1d03      	adds	r3, r0, #4
 801518c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8015248 <st_int8_to_f32+0xc4>
 8015190:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8015194:	f101 0c10 	add.w	ip, r1, #16
 8015198:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 801519c:	f10c 0c10 	add.w	ip, ip, #16
 80151a0:	ee07 ea90 	vmov	s15, lr
 80151a4:	469e      	mov	lr, r3
 80151a6:	3304      	adds	r3, #4
 80151a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151ac:	4586      	cmp	lr, r0
 80151ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151b2:	ed4c 7a08 	vstr	s15, [ip, #-32]	@ 0xffffffe0
 80151b6:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 80151ba:	ee07 5a90 	vmov	s15, r5
 80151be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151c6:	ed4c 7a07 	vstr	s15, [ip, #-28]	@ 0xffffffe4
 80151ca:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 80151ce:	ee07 5a90 	vmov	s15, r5
 80151d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151da:	ed4c 7a06 	vstr	s15, [ip, #-24]	@ 0xffffffe8
 80151de:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 80151e2:	ee07 5a90 	vmov	s15, r5
 80151e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151ee:	ed4c 7a05 	vstr	s15, [ip, #-20]	@ 0xffffffec
 80151f2:	d1d1      	bne.n	8015198 <st_int8_to_f32+0x14>
 80151f4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80151f8:	f012 0203 	ands.w	r2, r2, #3
 80151fc:	d023      	beq.n	8015246 <st_int8_to_f32+0xc2>
 80151fe:	f990 3000 	ldrsb.w	r3, [r0]
 8015202:	3a01      	subs	r2, #1
 8015204:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8015248 <st_int8_to_f32+0xc4>
 8015208:	ee07 3a90 	vmov	s15, r3
 801520c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015214:	edc1 7a00 	vstr	s15, [r1]
 8015218:	d015      	beq.n	8015246 <st_int8_to_f32+0xc2>
 801521a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801521e:	2a01      	cmp	r2, #1
 8015220:	ee07 3a90 	vmov	s15, r3
 8015224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015228:	ee67 7a87 	vmul.f32	s15, s15, s14
 801522c:	edc1 7a01 	vstr	s15, [r1, #4]
 8015230:	d009      	beq.n	8015246 <st_int8_to_f32+0xc2>
 8015232:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8015236:	ee07 3a90 	vmov	s15, r3
 801523a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801523e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015242:	edc1 7a02 	vstr	s15, [r1, #8]
 8015246:	bd30      	pop	{r4, r5, pc}
 8015248:	3c000000 	.word	0x3c000000

0801524c <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 801524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015250:	b086      	sub	sp, #24
 8015252:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8015256:	9100      	str	r1, [sp, #0]
 8015258:	9203      	str	r2, [sp, #12]
 801525a:	2f00      	cmp	r7, #0
 801525c:	9305      	str	r3, [sp, #20]
 801525e:	bf18      	it	ne
 8015260:	2301      	movne	r3, #1
 8015262:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8015264:	fb04 3303 	mla	r3, r4, r3, r3
 8015268:	9304      	str	r3, [sp, #16]
 801526a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801526c:	bf14      	ite	ne
 801526e:	462f      	movne	r7, r5
 8015270:	2701      	moveq	r7, #1
 8015272:	9701      	str	r7, [sp, #4]
 8015274:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015278:	085b      	lsrs	r3, r3, #1
 801527a:	f000 809f 	beq.w	80153bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 801527e:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 8015282:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015284:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015288:	9302      	str	r3, [sp, #8]
 801528a:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 801528e:	9f03      	ldr	r7, [sp, #12]
 8015290:	ea5f 089e 	movs.w	r8, lr, lsr #2
 8015294:	f8dd c000 	ldr.w	ip, [sp]
 8015298:	f857 6b04 	ldr.w	r6, [r7], #4
 801529c:	f857 3b04 	ldr.w	r3, [r7], #4
 80152a0:	9703      	str	r7, [sp, #12]
 80152a2:	461a      	mov	r2, r3
 80152a4:	4631      	mov	r1, r6
 80152a6:	d022      	beq.n	80152ee <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 80152a8:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 80152ac:	f85c 9b04 	ldr.w	r9, [ip], #4
 80152b0:	f850 ab04 	ldr.w	sl, [r0], #4
 80152b4:	fb2a 6609 	smlad	r6, sl, r9, r6
 80152b8:	f850 5b04 	ldr.w	r5, [r0], #4
 80152bc:	fb2a 1107 	smlad	r1, sl, r7, r1
 80152c0:	f850 ab04 	ldr.w	sl, [r0], #4
 80152c4:	fb25 2207 	smlad	r2, r5, r7, r2
 80152c8:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 80152cc:	fb25 3309 	smlad	r3, r5, r9, r3
 80152d0:	f85c 9b04 	ldr.w	r9, [ip], #4
 80152d4:	fb2a 6609 	smlad	r6, sl, r9, r6
 80152d8:	fb2a 1107 	smlad	r1, sl, r7, r1
 80152dc:	f850 5b04 	ldr.w	r5, [r0], #4
 80152e0:	fb25 3309 	smlad	r3, r5, r9, r3
 80152e4:	f1b8 0801 	subs.w	r8, r8, #1
 80152e8:	fb25 2207 	smlad	r2, r5, r7, r2
 80152ec:	d1dc      	bne.n	80152a8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 80152ee:	f00e 0703 	and.w	r7, lr, #3
 80152f2:	b18f      	cbz	r7, 8015318 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 80152f4:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 80152f8:	f93c ab02 	ldrsh.w	sl, [ip], #2
 80152fc:	f930 5b02 	ldrsh.w	r5, [r0], #2
 8015300:	fb0a 6605 	mla	r6, sl, r5, r6
 8015304:	f930 9b02 	ldrsh.w	r9, [r0], #2
 8015308:	fb09 330a 	mla	r3, r9, sl, r3
 801530c:	fb08 1105 	mla	r1, r8, r5, r1
 8015310:	3f01      	subs	r7, #1
 8015312:	fb09 2208 	mla	r2, r9, r8, r2
 8015316:	dced      	bgt.n	80152f4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 8015318:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801531c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801531e:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8015322:	f857 cb04 	ldr.w	ip, [r7], #4
 8015326:	f85b 5b04 	ldr.w	r5, [fp], #4
 801532a:	f1c4 0915 	rsb	r9, r4, #21
 801532e:	ea99 0904 	eors.w	r9, r9, r4
 8015332:	f340 80c8 	ble.w	80154c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 8015336:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801533a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801533e:	fb56 c605 	smmla	r6, r6, r5, ip
 8015342:	fb51 c105 	smmla	r1, r1, r5, ip
 8015346:	fa46 f604 	asr.w	r6, r6, r4
 801534a:	fa41 f104 	asr.w	r1, r1, r4
 801534e:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8015352:	f857 cb04 	ldr.w	ip, [r7], #4
 8015356:	f85b 5b04 	ldr.w	r5, [fp], #4
 801535a:	f1c4 0915 	rsb	r9, r4, #21
 801535e:	ea99 0904 	eors.w	r9, r9, r4
 8015362:	f340 8099 	ble.w	8015498 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 8015366:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801536a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801536e:	fb53 c305 	smmla	r3, r3, r5, ip
 8015372:	fb52 c205 	smmla	r2, r2, r5, ip
 8015376:	fa43 f304 	asr.w	r3, r3, r4
 801537a:	fa42 f204 	asr.w	r2, r2, r4
 801537e:	f306 0607 	ssat	r6, #8, r6
 8015382:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015386:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8015388:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801538c:	7026      	strb	r6, [r4, #0]
 801538e:	44a0      	add	r8, r4
 8015390:	f301 0107 	ssat	r1, #8, r1
 8015394:	f888 1000 	strb.w	r1, [r8]
 8015398:	f303 0307 	ssat	r3, #8, r3
 801539c:	f804 3009 	strb.w	r3, [r4, r9]
 80153a0:	f302 0207 	ssat	r2, #8, r2
 80153a4:	f808 2009 	strb.w	r2, [r8, r9]
 80153a8:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 80153ac:	9217      	str	r2, [sp, #92]	@ 0x5c
 80153ae:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 80153b2:	9c02      	ldr	r4, [sp, #8]
 80153b4:	9715      	str	r7, [sp, #84]	@ 0x54
 80153b6:	45a2      	cmp	sl, r4
 80153b8:	f47f af67 	bne.w	801528a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 80153bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80153be:	f013 0301 	ands.w	r3, r3, #1
 80153c2:	d054      	beq.n	801546e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 80153c4:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 80153c8:	9b03      	ldr	r3, [sp, #12]
 80153ca:	f8dd c000 	ldr.w	ip, [sp]
 80153ce:	6819      	ldr	r1, [r3, #0]
 80153d0:	ea5f 079e 	movs.w	r7, lr, lsr #2
 80153d4:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 80153d8:	460e      	mov	r6, r1
 80153da:	d015      	beq.n	8015408 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 80153dc:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 80153e0:	f85c 8b04 	ldr.w	r8, [ip], #4
 80153e4:	f850 ab04 	ldr.w	sl, [r0], #4
 80153e8:	f850 3b04 	ldr.w	r3, [r0], #4
 80153ec:	fb2a 6608 	smlad	r6, sl, r8, r6
 80153f0:	fb2a 1105 	smlad	r1, sl, r5, r1
 80153f4:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 80153f8:	f85c 8b04 	ldr.w	r8, [ip], #4
 80153fc:	fb23 6608 	smlad	r6, r3, r8, r6
 8015400:	fb23 110a 	smlad	r1, r3, sl, r1
 8015404:	3f01      	subs	r7, #1
 8015406:	d1e9      	bne.n	80153dc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 8015408:	f01e 0703 	ands.w	r7, lr, #3
 801540c:	d00b      	beq.n	8015426 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 801540e:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 8015412:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8015416:	f930 ab02 	ldrsh.w	sl, [r0], #2
 801541a:	fb19 660a 	smlabb	r6, r9, sl, r6
 801541e:	3f01      	subs	r7, #1
 8015420:	fb13 110a 	smlabb	r1, r3, sl, r1
 8015424:	dcf3      	bgt.n	801540e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 8015426:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801542a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801542c:	f9ba 4000 	ldrsh.w	r4, [sl]
 8015430:	f8d7 c000 	ldr.w	ip, [r7]
 8015434:	f8db 5000 	ldr.w	r5, [fp]
 8015438:	f1c4 0915 	rsb	r9, r4, #21
 801543c:	ea99 0904 	eors.w	r9, r9, r4
 8015440:	dd58      	ble.n	80154f4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 8015442:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8015446:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801544a:	fb56 c605 	smmla	r6, r6, r5, ip
 801544e:	fb51 c105 	smmla	r1, r1, r5, ip
 8015452:	fa46 f604 	asr.w	r6, r6, r4
 8015456:	fa41 f104 	asr.w	r1, r1, r4
 801545a:	f306 0607 	ssat	r6, #8, r6
 801545e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015460:	9c04      	ldr	r4, [sp, #16]
 8015462:	7016      	strb	r6, [r2, #0]
 8015464:	f301 0107 	ssat	r1, #8, r1
 8015468:	5511      	strb	r1, [r2, r4]
 801546a:	9b01      	ldr	r3, [sp, #4]
 801546c:	441a      	add	r2, r3
 801546e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015470:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015472:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8015474:	b133      	cbz	r3, 8015484 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 8015476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015478:	f104 0002 	add.w	r0, r4, #2
 801547c:	fb03 0011 	mls	r0, r3, r1, r0
 8015480:	4410      	add	r0, r2
 8015482:	e006      	b.n	8015492 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 8015484:	eba2 0001 	sub.w	r0, r2, r1
 8015488:	9a05      	ldr	r2, [sp, #20]
 801548a:	f104 0402 	add.w	r4, r4, #2
 801548e:	fb02 0004 	mla	r0, r2, r4, r0
 8015492:	b006      	add	sp, #24
 8015494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015498:	2c00      	cmp	r4, #0
 801549a:	dd42      	ble.n	8015522 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 801549c:	f04f 0901 	mov.w	r9, #1
 80154a0:	fa09 f904 	lsl.w	r9, r9, r4
 80154a4:	ea4f 09a9 	mov.w	r9, r9, asr #2
 80154a8:	fb53 9305 	smmla	r3, r3, r5, r9
 80154ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80154b0:	fa43 f304 	asr.w	r3, r3, r4
 80154b4:	4463      	add	r3, ip
 80154b6:	fb52 9205 	smmla	r2, r2, r5, r9
 80154ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80154be:	fa42 f204 	asr.w	r2, r2, r4
 80154c2:	4462      	add	r2, ip
 80154c4:	e75b      	b.n	801537e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 80154c6:	2c00      	cmp	r4, #0
 80154c8:	dd3c      	ble.n	8015544 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 80154ca:	f04f 0901 	mov.w	r9, #1
 80154ce:	fa09 f904 	lsl.w	r9, r9, r4
 80154d2:	ea4f 09a9 	mov.w	r9, r9, asr #2
 80154d6:	fb56 9605 	smmla	r6, r6, r5, r9
 80154da:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80154de:	fa46 f604 	asr.w	r6, r6, r4
 80154e2:	4466      	add	r6, ip
 80154e4:	fb51 9105 	smmla	r1, r1, r5, r9
 80154e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80154ec:	fa41 f104 	asr.w	r1, r1, r4
 80154f0:	4461      	add	r1, ip
 80154f2:	e72c      	b.n	801534e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 80154f4:	2c00      	cmp	r4, #0
 80154f6:	dd36      	ble.n	8015566 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 80154f8:	f04f 0901 	mov.w	r9, #1
 80154fc:	fa09 f904 	lsl.w	r9, r9, r4
 8015500:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8015504:	fb56 9605 	smmla	r6, r6, r5, r9
 8015508:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801550c:	fa46 f604 	asr.w	r6, r6, r4
 8015510:	4466      	add	r6, ip
 8015512:	fb51 9105 	smmla	r1, r1, r5, r9
 8015516:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801551a:	fa41 f104 	asr.w	r1, r1, r4
 801551e:	4461      	add	r1, ip
 8015520:	e79b      	b.n	801545a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 8015522:	f1c4 0901 	rsb	r9, r4, #1
 8015526:	fa03 f309 	lsl.w	r3, r3, r9
 801552a:	f303 031f 	ssat	r3, #32, r3
 801552e:	fb53 f315 	smmulr	r3, r3, r5
 8015532:	fa02 f209 	lsl.w	r2, r2, r9
 8015536:	f302 021f 	ssat	r2, #32, r2
 801553a:	fb52 f215 	smmulr	r2, r2, r5
 801553e:	4463      	add	r3, ip
 8015540:	4462      	add	r2, ip
 8015542:	e71c      	b.n	801537e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8015544:	f1c4 0901 	rsb	r9, r4, #1
 8015548:	fa06 f609 	lsl.w	r6, r6, r9
 801554c:	f306 061f 	ssat	r6, #32, r6
 8015550:	fb56 f615 	smmulr	r6, r6, r5
 8015554:	fa01 f109 	lsl.w	r1, r1, r9
 8015558:	f301 011f 	ssat	r1, #32, r1
 801555c:	fb51 f115 	smmulr	r1, r1, r5
 8015560:	4466      	add	r6, ip
 8015562:	4461      	add	r1, ip
 8015564:	e6f3      	b.n	801534e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8015566:	f1c4 0901 	rsb	r9, r4, #1
 801556a:	fa06 f609 	lsl.w	r6, r6, r9
 801556e:	f306 061f 	ssat	r6, #32, r6
 8015572:	fb56 f615 	smmulr	r6, r6, r5
 8015576:	fa01 f109 	lsl.w	r1, r1, r9
 801557a:	f301 011f 	ssat	r1, #32, r1
 801557e:	fb51 f115 	smmulr	r1, r1, r5
 8015582:	4466      	add	r6, ip
 8015584:	4461      	add	r1, ip
 8015586:	e768      	b.n	801545a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
	...

08015590 <st_sssa8_ch_nn_mat_mult_pw_nt_t>:
 8015590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015594:	b099      	sub	sp, #100	@ 0x64
 8015596:	9014      	str	r0, [sp, #80]	@ 0x50
 8015598:	9113      	str	r1, [sp, #76]	@ 0x4c
 801559a:	9216      	str	r2, [sp, #88]	@ 0x58
 801559c:	9312      	str	r3, [sp, #72]	@ 0x48
 801559e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80155a0:	f000 0303 	and.w	r3, r0, #3
 80155a4:	2b03      	cmp	r3, #3
 80155a6:	bf0c      	ite	eq
 80155a8:	2601      	moveq	r6, #1
 80155aa:	2600      	movne	r6, #0
 80155ac:	9617      	str	r6, [sp, #92]	@ 0x5c
 80155ae:	2803      	cmp	r0, #3
 80155b0:	bf0c      	ite	eq
 80155b2:	2601      	moveq	r6, #1
 80155b4:	2600      	movne	r6, #0
 80155b6:	9618      	str	r6, [sp, #96]	@ 0x60
 80155b8:	f010 0002 	ands.w	r0, r0, #2
 80155bc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80155be:	2800      	cmp	r0, #0
 80155c0:	bf14      	ite	ne
 80155c2:	4618      	movne	r0, r3
 80155c4:	2001      	moveq	r0, #1
 80155c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80155c8:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80155ca:	bf0c      	ite	eq
 80155cc:	4606      	moveq	r6, r0
 80155ce:	2601      	movne	r6, #1
 80155d0:	9611      	str	r6, [sp, #68]	@ 0x44
 80155d2:	e9dd 042c 	ldrd	r0, r4, [sp, #176]	@ 0xb0
 80155d6:	2c00      	cmp	r4, #0
 80155d8:	bf18      	it	ne
 80155da:	4620      	movne	r0, r4
 80155dc:	902c      	str	r0, [sp, #176]	@ 0xb0
 80155de:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80155e0:	2801      	cmp	r0, #1
 80155e2:	f340 81be 	ble.w	8015962 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3d2>
 80155e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80155ea:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80155ec:	f014 0f02 	tst.w	r4, #2
 80155f0:	d101      	bne.n	80155f6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x66>
 80155f2:	f04f 0302 	mov.w	r3, #2
 80155f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80155f8:	f04f 0800 	mov.w	r8, #0
 80155fc:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8015600:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015604:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015606:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 801560a:	f9b2 3000 	ldrsh.w	r3, [r2]
 801560e:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8015612:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015616:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8015618:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801561c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8015620:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015624:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8015626:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801562a:	e9d2 1200 	ldrd	r1, r2, [r2]
 801562e:	e9cd 1200 	strd	r1, r2, [sp]
 8015632:	2b00      	cmp	r3, #0
 8015634:	bfcc      	ite	gt
 8015636:	2000      	movgt	r0, #0
 8015638:	f04f 30ff 	movle.w	r0, #4294967295
 801563c:	2b15      	cmp	r3, #21
 801563e:	bfc8      	it	gt
 8015640:	2001      	movgt	r0, #1
 8015642:	2c00      	cmp	r4, #0
 8015644:	bfcc      	ite	gt
 8015646:	2100      	movgt	r1, #0
 8015648:	f04f 31ff 	movle.w	r1, #4294967295
 801564c:	2c15      	cmp	r4, #21
 801564e:	bfc8      	it	gt
 8015650:	2101      	movgt	r1, #1
 8015652:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015656:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015658:	2b00      	cmp	r3, #0
 801565a:	f000 8297 	beq.w	8015b8c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5fc>
 801565e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8015660:	2b00      	cmp	r3, #0
 8015662:	f040 82bb 	bne.w	8015bdc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x64c>
 8015666:	461a      	mov	r2, r3
 8015668:	4618      	mov	r0, r3
 801566a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801566c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8015670:	e9d1 3400 	ldrd	r3, r4, [r1]
 8015674:	4403      	add	r3, r0
 8015676:	4414      	add	r4, r2
 8015678:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
 801567c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801567e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8015680:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015682:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8015684:	2900      	cmp	r1, #0
 8015686:	bf1c      	itt	ne
 8015688:	3203      	addne	r2, #3
 801568a:	18d2      	addne	r2, r2, r3
 801568c:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 8015690:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015692:	1040      	asrs	r0, r0, #1
 8015694:	f000 8144 	beq.w	8015920 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x390>
 8015698:	930f      	str	r3, [sp, #60]	@ 0x3c
 801569a:	900e      	str	r0, [sp, #56]	@ 0x38
 801569c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801569e:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 80156a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80156a2:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 80156a4:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 80156a8:	46e2      	mov	sl, ip
 80156aa:	46f3      	mov	fp, lr
 80156ac:	4413      	add	r3, r2
 80156ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80156b0:	ea5f 1827 	movs.w	r8, r7, asr #4
 80156b4:	f000 8094 	beq.w	80157e0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x250>
 80156b8:	f859 5007 	ldr.w	r5, [r9, r7]
 80156bc:	fa2f f485 	sxtb16	r4, r5
 80156c0:	f856 0b04 	ldr.w	r0, [r6], #4
 80156c4:	fa2f f595 	sxtb16	r5, r5, ror #8
 80156c8:	f856 1b04 	ldr.w	r1, [r6], #4
 80156cc:	fb24 aa00 	smlad	sl, r4, r0, sl
 80156d0:	fb25 aa01 	smlad	sl, r5, r1, sl
 80156d4:	f856 2b04 	ldr.w	r2, [r6], #4
 80156d8:	f856 3b04 	ldr.w	r3, [r6], #4
 80156dc:	fb24 bb02 	smlad	fp, r4, r2, fp
 80156e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80156e4:	fb25 bb03 	smlad	fp, r5, r3, fp
 80156e8:	fa2f f584 	sxtb16	r5, r4
 80156ec:	fa2f f494 	sxtb16	r4, r4, ror #8
 80156f0:	fb25 cc00 	smlad	ip, r5, r0, ip
 80156f4:	f856 0b04 	ldr.w	r0, [r6], #4
 80156f8:	fb25 ee02 	smlad	lr, r5, r2, lr
 80156fc:	f859 5007 	ldr.w	r5, [r9, r7]
 8015700:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015704:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015708:	fa2f f485 	sxtb16	r4, r5
 801570c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015710:	f856 1b04 	ldr.w	r1, [r6], #4
 8015714:	fb24 aa00 	smlad	sl, r4, r0, sl
 8015718:	f856 2b04 	ldr.w	r2, [r6], #4
 801571c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8015720:	f856 3b04 	ldr.w	r3, [r6], #4
 8015724:	fb24 bb02 	smlad	fp, r4, r2, fp
 8015728:	f859 4b04 	ldr.w	r4, [r9], #4
 801572c:	fb25 bb03 	smlad	fp, r5, r3, fp
 8015730:	fa2f f584 	sxtb16	r5, r4
 8015734:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015738:	fb25 cc00 	smlad	ip, r5, r0, ip
 801573c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015740:	f859 5007 	ldr.w	r5, [r9, r7]
 8015744:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015748:	f856 0b04 	ldr.w	r0, [r6], #4
 801574c:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015750:	fa2f f485 	sxtb16	r4, r5
 8015754:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015758:	f856 1b04 	ldr.w	r1, [r6], #4
 801575c:	fb24 aa00 	smlad	sl, r4, r0, sl
 8015760:	f856 2b04 	ldr.w	r2, [r6], #4
 8015764:	fb25 aa01 	smlad	sl, r5, r1, sl
 8015768:	f856 3b04 	ldr.w	r3, [r6], #4
 801576c:	fb24 bb02 	smlad	fp, r4, r2, fp
 8015770:	f859 4b04 	ldr.w	r4, [r9], #4
 8015774:	fb25 bb03 	smlad	fp, r5, r3, fp
 8015778:	fa2f f584 	sxtb16	r5, r4
 801577c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015780:	fb25 cc00 	smlad	ip, r5, r0, ip
 8015784:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015788:	f856 0b04 	ldr.w	r0, [r6], #4
 801578c:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015790:	f859 5007 	ldr.w	r5, [r9, r7]
 8015794:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015798:	fa2f f485 	sxtb16	r4, r5
 801579c:	fa2f f595 	sxtb16	r5, r5, ror #8
 80157a0:	f856 1b04 	ldr.w	r1, [r6], #4
 80157a4:	fb24 aa00 	smlad	sl, r4, r0, sl
 80157a8:	f856 2b04 	ldr.w	r2, [r6], #4
 80157ac:	fb25 aa01 	smlad	sl, r5, r1, sl
 80157b0:	f856 3b04 	ldr.w	r3, [r6], #4
 80157b4:	fb24 bb02 	smlad	fp, r4, r2, fp
 80157b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80157bc:	fb25 bb03 	smlad	fp, r5, r3, fp
 80157c0:	fa2f f584 	sxtb16	r5, r4
 80157c4:	fa2f f494 	sxtb16	r4, r4, ror #8
 80157c8:	fb25 cc00 	smlad	ip, r5, r0, ip
 80157cc:	fb25 ee02 	smlad	lr, r5, r2, lr
 80157d0:	f1b8 0801 	subs.w	r8, r8, #1
 80157d4:	fb24 cc01 	smlad	ip, r4, r1, ip
 80157d8:	fb24 ee03 	smlad	lr, r4, r3, lr
 80157dc:	f73f af6c 	bgt.w	80156b8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x128>
 80157e0:	f017 000f 	ands.w	r0, r7, #15
 80157e4:	d046      	beq.n	8015874 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 80157e6:	f3c7 0881 	ubfx	r8, r7, #2, #2
 80157ea:	f1b8 0f00 	cmp.w	r8, #0
 80157ee:	d026      	beq.n	801583e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ae>
 80157f0:	f859 5007 	ldr.w	r5, [r9, r7]
 80157f4:	fa2f f485 	sxtb16	r4, r5
 80157f8:	fa2f f595 	sxtb16	r5, r5, ror #8
 80157fc:	f856 0b04 	ldr.w	r0, [r6], #4
 8015800:	f856 1b04 	ldr.w	r1, [r6], #4
 8015804:	fb24 aa00 	smlad	sl, r4, r0, sl
 8015808:	f856 2b04 	ldr.w	r2, [r6], #4
 801580c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8015810:	f856 3b04 	ldr.w	r3, [r6], #4
 8015814:	fb24 bb02 	smlad	fp, r4, r2, fp
 8015818:	f859 4b04 	ldr.w	r4, [r9], #4
 801581c:	fb25 bb03 	smlad	fp, r5, r3, fp
 8015820:	fa2f f584 	sxtb16	r5, r4
 8015824:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015828:	fb25 cc00 	smlad	ip, r5, r0, ip
 801582c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015830:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015834:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015838:	f1b8 0801 	subs.w	r8, r8, #1
 801583c:	dcd8      	bgt.n	80157f0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x260>
 801583e:	f017 0803 	ands.w	r8, r7, #3
 8015842:	f1b8 0f00 	cmp.w	r8, #0
 8015846:	d015      	beq.n	8015874 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 8015848:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801584a:	f936 3b02 	ldrsh.w	r3, [r6], #2
 801584e:	f936 5b02 	ldrsh.w	r5, [r6], #2
 8015852:	f999 1000 	ldrsb.w	r1, [r9]
 8015856:	fb13 cc01 	smlabb	ip, r3, r1, ip
 801585a:	fb15 ee01 	smlabb	lr, r5, r1, lr
 801585e:	f919 1000 	ldrsb.w	r1, [r9, r0]
 8015862:	fb13 aa01 	smlabb	sl, r3, r1, sl
 8015866:	fb15 bb01 	smlabb	fp, r5, r1, fp
 801586a:	f109 0901 	add.w	r9, r9, #1
 801586e:	f1b8 0801 	subs.w	r8, r8, #1
 8015872:	dcea      	bgt.n	801584a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ba>
 8015874:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015876:	462e      	mov	r6, r5
 8015878:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801587a:	b168      	cbz	r0, 8015898 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x308>
 801587c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801587e:	1e90      	subs	r0, r2, #2
 8015880:	dc09      	bgt.n	8015896 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x306>
 8015882:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015884:	f1c2 0202 	rsb	r2, r2, #2
 8015888:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801588c:	920c      	str	r2, [sp, #48]	@ 0x30
 801588e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8015890:	4410      	add	r0, r2
 8015892:	f105 0502 	add.w	r5, r5, #2
 8015896:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015898:	9800      	ldr	r0, [sp, #0]
 801589a:	9902      	ldr	r1, [sp, #8]
 801589c:	9a04      	ldr	r2, [sp, #16]
 801589e:	9b06      	ldr	r3, [sp, #24]
 80158a0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	f040 80c9 	bne.w	8015a3a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4aa>
 80158a8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80158ac:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80158b0:	fb5c 0c01 	smmla	ip, ip, r1, r0
 80158b4:	fb5a 0a01 	smmla	sl, sl, r1, r0
 80158b8:	fa4c fc02 	asr.w	ip, ip, r2
 80158bc:	fa4a fa02 	asr.w	sl, sl, r2
 80158c0:	f30c 0c07 	ssat	ip, #8, ip
 80158c4:	f30a 0a07 	ssat	sl, #8, sl
 80158c8:	f886 c000 	strb.w	ip, [r6]
 80158cc:	f887 a000 	strb.w	sl, [r7]
 80158d0:	9801      	ldr	r0, [sp, #4]
 80158d2:	9903      	ldr	r1, [sp, #12]
 80158d4:	9a05      	ldr	r2, [sp, #20]
 80158d6:	9b07      	ldr	r3, [sp, #28]
 80158d8:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80158dc:	2b00      	cmp	r3, #0
 80158de:	f040 80d4 	bne.w	8015a8a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4fa>
 80158e2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80158e6:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80158ea:	fb5e 0e01 	smmla	lr, lr, r1, r0
 80158ee:	fb5b 0b01 	smmla	fp, fp, r1, r0
 80158f2:	fa4e fe02 	asr.w	lr, lr, r2
 80158f6:	fa4b fb02 	asr.w	fp, fp, r2
 80158fa:	f30e 0e07 	ssat	lr, #8, lr
 80158fe:	f30b 0b07 	ssat	fp, #8, fp
 8015902:	f806 e008 	strb.w	lr, [r6, r8]
 8015906:	f807 b008 	strb.w	fp, [r7, r8]
 801590a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801590c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801590e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8015912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015914:	4491      	add	r9, r2
 8015916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015918:	3b01      	subs	r3, #1
 801591a:	930e      	str	r3, [sp, #56]	@ 0x38
 801591c:	f47f aebe 	bne.w	801569c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x10c>
 8015920:	f8cd 9020 	str.w	r9, [sp, #32]
 8015924:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8015926:	f013 0f01 	tst.w	r3, #1
 801592a:	f040 80d6 	bne.w	8015ada <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x54a>
 801592e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015930:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8015932:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015936:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015938:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801593a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801593c:	4413      	add	r3, r2
 801593e:	9312      	str	r3, [sp, #72]	@ 0x48
 8015940:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015942:	b123      	cbz	r3, 801594e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3be>
 8015944:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8015946:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8015948:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801594c:	932c      	str	r3, [sp, #176]	@ 0xb0
 801594e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015950:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8015952:	ea4f 0363 	mov.w	r3, r3, asr #1
 8015956:	f102 0201 	add.w	r2, r2, #1
 801595a:	920d      	str	r2, [sp, #52]	@ 0x34
 801595c:	4293      	cmp	r3, r2
 801595e:	f73f ae4f 	bgt.w	8015600 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x70>
 8015962:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8015964:	f015 0501 	ands.w	r5, r5, #1
 8015968:	d060      	beq.n	8015a2c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 801596a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 801596e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015970:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015972:	2d00      	cmp	r5, #0
 8015974:	bf1c      	itt	ne
 8015976:	3603      	addne	r6, #3
 8015978:	4446      	addne	r6, r8
 801597a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801597c:	2900      	cmp	r1, #0
 801597e:	dd55      	ble.n	8015a2c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 8015980:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
 8015984:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8015986:	9f26      	ldr	r7, [sp, #152]	@ 0x98
 8015988:	f1a7 0701 	sub.w	r7, r7, #1
 801598c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015990:	f8dc c000 	ldr.w	ip, [ip]
 8015994:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8015996:	eb03 0487 	add.w	r4, r3, r7, lsl #2
 801599a:	6824      	ldr	r4, [r4, #0]
 801599c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801599e:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 80159a2:	6800      	ldr	r0, [r0, #0]
 80159a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80159a6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80159aa:	f9b7 7000 	ldrsh.w	r7, [r7]
 80159ae:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80159b0:	2f00      	cmp	r7, #0
 80159b2:	bfcc      	ite	gt
 80159b4:	f04f 0900 	movgt.w	r9, #0
 80159b8:	f04f 39ff 	movle.w	r9, #4294967295
 80159bc:	2f15      	cmp	r7, #21
 80159be:	bfc8      	it	gt
 80159c0:	f04f 0901 	movgt.w	r9, #1
 80159c4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80159c6:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 80159ca:	f1bb 0f00 	cmp.w	fp, #0
 80159ce:	46e6      	mov	lr, ip
 80159d0:	dd0c      	ble.n	80159ec <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x45c>
 80159d2:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 80159d6:	f915 3b01 	ldrsb.w	r3, [r5], #1
 80159da:	f918 ab01 	ldrsb.w	sl, [r8], #1
 80159de:	eba3 0302 	sub.w	r3, r3, r2
 80159e2:	fb0a ee03 	mla	lr, sl, r3, lr
 80159e6:	f1bb 0b01 	subs.w	fp, fp, #1
 80159ea:	dcf4      	bgt.n	80159d6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x446>
 80159ec:	f1b9 0f00 	cmp.w	r9, #0
 80159f0:	f040 8164 	bne.w	8015cbc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x72c>
 80159f4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80159f8:	fb5e 0e04 	smmla	lr, lr, r4, r0
 80159fc:	fa4e fe07 	asr.w	lr, lr, r7
 8015a00:	f30e 0e07 	ssat	lr, #8, lr
 8015a04:	f886 e000 	strb.w	lr, [r6]
 8015a08:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015a0a:	f013 0f02 	tst.w	r3, #2
 8015a0e:	d011      	beq.n	8015a34 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4a4>
 8015a10:	f013 0f01 	tst.w	r3, #1
 8015a14:	d005      	beq.n	8015a22 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 8015a16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a18:	3b01      	subs	r3, #1
 8015a1a:	d102      	bne.n	8015a22 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 8015a1c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8015a1e:	f106 0602 	add.w	r6, r6, #2
 8015a22:	f106 0601 	add.w	r6, r6, #1
 8015a26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015a28:	3901      	subs	r1, #1
 8015a2a:	dccc      	bgt.n	80159c6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x436>
 8015a2c:	2000      	movs	r0, #0
 8015a2e:	b019      	add	sp, #100	@ 0x64
 8015a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a34:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8015a36:	441e      	add	r6, r3
 8015a38:	e7f6      	b.n	8015a28 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x498>
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	d014      	beq.n	8015a68 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4d8>
 8015a3e:	f04f 0301 	mov.w	r3, #1
 8015a42:	fa03 f302 	lsl.w	r3, r3, r2
 8015a46:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8015a4a:	fb5c 3c01 	smmla	ip, ip, r1, r3
 8015a4e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8015a52:	fa4c fc02 	asr.w	ip, ip, r2
 8015a56:	4484      	add	ip, r0
 8015a58:	fb5a 3a01 	smmla	sl, sl, r1, r3
 8015a5c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8015a60:	fa4a fa02 	asr.w	sl, sl, r2
 8015a64:	4482      	add	sl, r0
 8015a66:	e72b      	b.n	80158c0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 8015a68:	f1c2 0301 	rsb	r3, r2, #1
 8015a6c:	fa0c fc03 	lsl.w	ip, ip, r3
 8015a70:	f30c 0c1f 	ssat	ip, #32, ip
 8015a74:	fb5c fc11 	smmulr	ip, ip, r1
 8015a78:	fa0a fa03 	lsl.w	sl, sl, r3
 8015a7c:	f30a 0a1f 	ssat	sl, #32, sl
 8015a80:	fb5a fa11 	smmulr	sl, sl, r1
 8015a84:	4484      	add	ip, r0
 8015a86:	4482      	add	sl, r0
 8015a88:	e71a      	b.n	80158c0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	d014      	beq.n	8015ab8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x528>
 8015a8e:	f04f 0301 	mov.w	r3, #1
 8015a92:	fa03 f302 	lsl.w	r3, r3, r2
 8015a96:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8015a9a:	fb5e 3e01 	smmla	lr, lr, r1, r3
 8015a9e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8015aa2:	fa4e fe02 	asr.w	lr, lr, r2
 8015aa6:	4486      	add	lr, r0
 8015aa8:	fb5b 3b01 	smmla	fp, fp, r1, r3
 8015aac:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015ab0:	fa4b fb02 	asr.w	fp, fp, r2
 8015ab4:	4483      	add	fp, r0
 8015ab6:	e720      	b.n	80158fa <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 8015ab8:	f1c2 0301 	rsb	r3, r2, #1
 8015abc:	fa0e fe03 	lsl.w	lr, lr, r3
 8015ac0:	f30e 0e1f 	ssat	lr, #32, lr
 8015ac4:	fb5e fe11 	smmulr	lr, lr, r1
 8015ac8:	fa0b fb03 	lsl.w	fp, fp, r3
 8015acc:	f30b 0b1f 	ssat	fp, #32, fp
 8015ad0:	fb5b fb11 	smmulr	fp, fp, r1
 8015ad4:	4486      	add	lr, r0
 8015ad6:	4483      	add	fp, r0
 8015ad8:	e70f      	b.n	80158fa <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 8015ada:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 8015adc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015ae0:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 8015ae2:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 8015ae6:	ea5f 08a7 	movs.w	r8, r7, asr #2
 8015aea:	d018      	beq.n	8015b1e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x58e>
 8015aec:	f859 4b04 	ldr.w	r4, [r9], #4
 8015af0:	f856 0b04 	ldr.w	r0, [r6], #4
 8015af4:	f856 1b04 	ldr.w	r1, [r6], #4
 8015af8:	f856 2b04 	ldr.w	r2, [r6], #4
 8015afc:	f856 3b04 	ldr.w	r3, [r6], #4
 8015b00:	fa2f f584 	sxtb16	r5, r4
 8015b04:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015b08:	fb25 cc00 	smlad	ip, r5, r0, ip
 8015b0c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015b10:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015b14:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015b18:	f1b8 0801 	subs.w	r8, r8, #1
 8015b1c:	dce6      	bgt.n	8015aec <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x55c>
 8015b1e:	f017 0803 	ands.w	r8, r7, #3
 8015b22:	f1b8 0f00 	cmp.w	r8, #0
 8015b26:	d00c      	beq.n	8015b42 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5b2>
 8015b28:	f936 3b02 	ldrsh.w	r3, [r6], #2
 8015b2c:	f936 5b02 	ldrsh.w	r5, [r6], #2
 8015b30:	f919 1b01 	ldrsb.w	r1, [r9], #1
 8015b34:	fb13 cc01 	smlabb	ip, r3, r1, ip
 8015b38:	fb15 ee01 	smlabb	lr, r5, r1, lr
 8015b3c:	f1b8 0801 	subs.w	r8, r8, #1
 8015b40:	dcf2      	bgt.n	8015b28 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x598>
 8015b42:	9800      	ldr	r0, [sp, #0]
 8015b44:	9902      	ldr	r1, [sp, #8]
 8015b46:	9a04      	ldr	r2, [sp, #16]
 8015b48:	9b06      	ldr	r3, [sp, #24]
 8015b4a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8015b4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8015b4e:	4437      	add	r7, r6
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	f040 8099 	bne.w	8015c88 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6f8>
 8015b56:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8015b5a:	fb5c 0c01 	smmla	ip, ip, r1, r0
 8015b5e:	fa4c fc02 	asr.w	ip, ip, r2
 8015b62:	f30c 0c07 	ssat	ip, #8, ip
 8015b66:	f886 c000 	strb.w	ip, [r6]
 8015b6a:	9801      	ldr	r0, [sp, #4]
 8015b6c:	9903      	ldr	r1, [sp, #12]
 8015b6e:	9a05      	ldr	r2, [sp, #20]
 8015b70:	9b07      	ldr	r3, [sp, #28]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d166      	bne.n	8015c44 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6b4>
 8015b76:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8015b7a:	fb5e 0e01 	smmla	lr, lr, r1, r0
 8015b7e:	fa4e fe02 	asr.w	lr, lr, r2
 8015b82:	f30e 0e07 	ssat	lr, #8, lr
 8015b86:	f887 e000 	strb.w	lr, [r7]
 8015b8a:	e6d0      	b.n	801592e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 8015b8c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015b8e:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 8015b90:	eb00 0907 	add.w	r9, r0, r7
 8015b94:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8015b96:	2f03      	cmp	r7, #3
 8015b98:	dd11      	ble.n	8015bbe <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x62e>
 8015b9a:	ea4f 06a7 	mov.w	r6, r7, asr #2
 8015b9e:	f850 1b04 	ldr.w	r1, [r0], #4
 8015ba2:	f859 4b04 	ldr.w	r4, [r9], #4
 8015ba6:	fa2f f291 	sxtb16	r2, r1, ror #8
 8015baa:	fa2f f181 	sxtb16	r1, r1
 8015bae:	fa2f f894 	sxtb16	r8, r4, ror #8
 8015bb2:	fa2f f484 	sxtb16	r4, r4
 8015bb6:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 8015bba:	3e01      	subs	r6, #1
 8015bbc:	dcef      	bgt.n	8015b9e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x60e>
 8015bbe:	f017 0603 	ands.w	r6, r7, #3
 8015bc2:	f77f ad4c 	ble.w	801565e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 8015bc6:	f910 1b01 	ldrsb.w	r1, [r0], #1
 8015bca:	f823 1b02 	strh.w	r1, [r3], #2
 8015bce:	f919 1b01 	ldrsb.w	r1, [r9], #1
 8015bd2:	f823 1b02 	strh.w	r1, [r3], #2
 8015bd6:	3e01      	subs	r6, #1
 8015bd8:	dcf5      	bgt.n	8015bc6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x636>
 8015bda:	e540      	b.n	801565e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 8015bdc:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8015bde:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8015be0:	f04f 0300 	mov.w	r3, #0
 8015be4:	4618      	mov	r0, r3
 8015be6:	10b1      	asrs	r1, r6, #2
 8015be8:	d017      	beq.n	8015c1a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x68a>
 8015bea:	e8b2 1680 	ldmia.w	r2!, {r7, r9, sl, ip}
 8015bee:	fa00 f087 	sxtah	r0, r0, r7
 8015bf2:	fa00 f0a7 	sxtah	r0, r0, r7, ror #16
 8015bf6:	fa00 f089 	sxtah	r0, r0, r9
 8015bfa:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 8015bfe:	fa03 f38a 	sxtah	r3, r3, sl
 8015c02:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 8015c06:	fa03 f38c 	sxtah	r3, r3, ip
 8015c0a:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 8015c0e:	3901      	subs	r1, #1
 8015c10:	dceb      	bgt.n	8015bea <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x65a>
 8015c12:	f1c0 0000 	rsb	r0, r0, #0
 8015c16:	f1c3 0300 	rsb	r3, r3, #0
 8015c1a:	f016 0103 	ands.w	r1, r6, #3
 8015c1e:	d00b      	beq.n	8015c38 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6a8>
 8015c20:	f9b2 4000 	ldrsh.w	r4, [r2]
 8015c24:	eba0 0004 	sub.w	r0, r0, r4
 8015c28:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8015c2c:	eba3 0304 	sub.w	r3, r3, r4
 8015c30:	3901      	subs	r1, #1
 8015c32:	f102 0204 	add.w	r2, r2, #4
 8015c36:	dcf3      	bgt.n	8015c20 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x690>
 8015c38:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8015c3a:	fb02 f000 	mul.w	r0, r2, r0
 8015c3e:	fb03 f202 	mul.w	r2, r3, r2
 8015c42:	e512      	b.n	801566a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xda>
 8015c44:	3301      	adds	r3, #1
 8015c46:	d011      	beq.n	8015c6c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6dc>
 8015c48:	f04f 0301 	mov.w	r3, #1
 8015c4c:	fa03 f302 	lsl.w	r3, r3, r2
 8015c50:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8015c54:	fb5e 3e01 	smmla	lr, lr, r1, r3
 8015c58:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8015c5c:	fa4e fe02 	asr.w	lr, lr, r2
 8015c60:	4486      	add	lr, r0
 8015c62:	f30e 0e07 	ssat	lr, #8, lr
 8015c66:	f887 e000 	strb.w	lr, [r7]
 8015c6a:	e660      	b.n	801592e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 8015c6c:	f1c2 0301 	rsb	r3, r2, #1
 8015c70:	fa0e fe03 	lsl.w	lr, lr, r3
 8015c74:	f30e 0e1f 	ssat	lr, #32, lr
 8015c78:	fb5e fe11 	smmulr	lr, lr, r1
 8015c7c:	4486      	add	lr, r0
 8015c7e:	f30e 0e07 	ssat	lr, #8, lr
 8015c82:	f887 e000 	strb.w	lr, [r7]
 8015c86:	e652      	b.n	801592e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 8015c88:	3301      	adds	r3, #1
 8015c8a:	d00d      	beq.n	8015ca8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x718>
 8015c8c:	f04f 0301 	mov.w	r3, #1
 8015c90:	fa03 f302 	lsl.w	r3, r3, r2
 8015c94:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8015c98:	fb5c 3c01 	smmla	ip, ip, r1, r3
 8015c9c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8015ca0:	fa4c fc02 	asr.w	ip, ip, r2
 8015ca4:	4484      	add	ip, r0
 8015ca6:	e75c      	b.n	8015b62 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 8015ca8:	f1c2 0301 	rsb	r3, r2, #1
 8015cac:	fa0c fc03 	lsl.w	ip, ip, r3
 8015cb0:	f30c 0c1f 	ssat	ip, #32, ip
 8015cb4:	fb5c fc11 	smmulr	ip, ip, r1
 8015cb8:	4484      	add	ip, r0
 8015cba:	e752      	b.n	8015b62 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 8015cbc:	1c7b      	adds	r3, r7, #1
 8015cbe:	d00d      	beq.n	8015cdc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x74c>
 8015cc0:	f04f 0301 	mov.w	r3, #1
 8015cc4:	fa03 f307 	lsl.w	r3, r3, r7
 8015cc8:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8015ccc:	fb5e 3e04 	smmla	lr, lr, r4, r3
 8015cd0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8015cd4:	fa4e fe07 	asr.w	lr, lr, r7
 8015cd8:	4486      	add	lr, r0
 8015cda:	e691      	b.n	8015a00 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>
 8015cdc:	f1c7 0301 	rsb	r3, r7, #1
 8015ce0:	fa0e fe03 	lsl.w	lr, lr, r3
 8015ce4:	f30e 0e1f 	ssat	lr, #32, lr
 8015ce8:	fb5e fe14 	smmulr	lr, lr, r4
 8015cec:	4486      	add	lr, r0
 8015cee:	e687      	b.n	8015a00 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>

08015cf0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>:
 8015cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf4:	b099      	sub	sp, #100	@ 0x64
 8015cf6:	bf00      	nop
 8015cf8:	9014      	str	r0, [sp, #80]	@ 0x50
 8015cfa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015cfc:	9216      	str	r2, [sp, #88]	@ 0x58
 8015cfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8015d00:	f04f 0800 	mov.w	r8, #0
 8015d04:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8015d08:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015d0c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015d0e:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 8015d12:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015d16:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8015d1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015d1e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8015d20:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8015d24:	e9d2 1200 	ldrd	r1, r2, [r2]
 8015d28:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015d2c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8015d2e:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8015d32:	e9d2 1200 	ldrd	r1, r2, [r2]
 8015d36:	e9cd 1200 	strd	r1, r2, [sp]
 8015d3a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015d3c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8015d3e:	f04f 0610 	mov.w	r6, #16
 8015d42:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8015d44:	f850 1b04 	ldr.w	r1, [r0], #4
 8015d48:	fa2f f291 	sxtb16	r2, r1, ror #8
 8015d4c:	fa2f f181 	sxtb16	r1, r1
 8015d50:	fa2f f894 	sxtb16	r8, r4, ror #8
 8015d54:	fa2f f484 	sxtb16	r4, r4
 8015d58:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 8015d5c:	3e01      	subs	r6, #1
 8015d5e:	dcf0      	bgt.n	8015d42 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x52>
 8015d60:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8015d62:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8015d64:	f04f 0300 	mov.w	r3, #0
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f04f 0110 	mov.w	r1, #16
 8015d6e:	e8b2 1700 	ldmia.w	r2!, {r8, r9, sl, ip}
 8015d72:	fa00 f088 	sxtah	r0, r0, r8
 8015d76:	fa00 f0a8 	sxtah	r0, r0, r8, ror #16
 8015d7a:	fa00 f089 	sxtah	r0, r0, r9
 8015d7e:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 8015d82:	fa03 f38a 	sxtah	r3, r3, sl
 8015d86:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 8015d8a:	fa03 f38c 	sxtah	r3, r3, ip
 8015d8e:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 8015d92:	3901      	subs	r1, #1
 8015d94:	dceb      	bgt.n	8015d6e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x7e>
 8015d96:	f1c0 0000 	rsb	r0, r0, #0
 8015d9a:	f1c3 0300 	rsb	r3, r3, #0
 8015d9e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8015da0:	fb02 f000 	mul.w	r0, r2, r0
 8015da4:	fb03 f202 	mul.w	r2, r3, r2
 8015da8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8015daa:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8015dae:	e9d1 3400 	ldrd	r3, r4, [r1]
 8015db2:	4403      	add	r3, r0
 8015db4:	4414      	add	r4, r2
 8015db6:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
 8015dba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015dbc:	f04f 0305 	mov.w	r3, #5
 8015dc0:	f102 0203 	add.w	r2, r2, #3
 8015dc4:	441a      	add	r2, r3
 8015dc6:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 8015dca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015dcc:	f04f 073e 	mov.w	r7, #62	@ 0x3e
 8015dd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015dd4:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 8015dd6:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 8015dda:	46e2      	mov	sl, ip
 8015ddc:	46f3      	mov	fp, lr
 8015dde:	f103 0301 	add.w	r3, r3, #1
 8015de2:	930c      	str	r3, [sp, #48]	@ 0x30
 8015de4:	f04f 0804 	mov.w	r8, #4
 8015de8:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 8015dec:	fa2f f485 	sxtb16	r4, r5
 8015df0:	f856 0b04 	ldr.w	r0, [r6], #4
 8015df4:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015df8:	f856 1b04 	ldr.w	r1, [r6], #4
 8015dfc:	fb24 aa00 	smlad	sl, r4, r0, sl
 8015e00:	fb25 aa01 	smlad	sl, r5, r1, sl
 8015e04:	f856 2b04 	ldr.w	r2, [r6], #4
 8015e08:	f856 3b04 	ldr.w	r3, [r6], #4
 8015e0c:	fb24 bb02 	smlad	fp, r4, r2, fp
 8015e10:	f859 4b04 	ldr.w	r4, [r9], #4
 8015e14:	fb25 bb03 	smlad	fp, r5, r3, fp
 8015e18:	fa2f f584 	sxtb16	r5, r4
 8015e1c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015e20:	fb25 cc00 	smlad	ip, r5, r0, ip
 8015e24:	f856 0b04 	ldr.w	r0, [r6], #4
 8015e28:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015e2c:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 8015e30:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015e34:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015e38:	fa2f f485 	sxtb16	r4, r5
 8015e3c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015e40:	f856 1b04 	ldr.w	r1, [r6], #4
 8015e44:	fb24 aa00 	smlad	sl, r4, r0, sl
 8015e48:	f856 2b04 	ldr.w	r2, [r6], #4
 8015e4c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8015e50:	f856 3b04 	ldr.w	r3, [r6], #4
 8015e54:	fb24 bb02 	smlad	fp, r4, r2, fp
 8015e58:	f859 4b04 	ldr.w	r4, [r9], #4
 8015e5c:	fb25 bb03 	smlad	fp, r5, r3, fp
 8015e60:	fa2f f584 	sxtb16	r5, r4
 8015e64:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015e68:	fb25 cc00 	smlad	ip, r5, r0, ip
 8015e6c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015e70:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 8015e74:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015e78:	f856 0b04 	ldr.w	r0, [r6], #4
 8015e7c:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015e80:	fa2f f485 	sxtb16	r4, r5
 8015e84:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015e88:	f856 1b04 	ldr.w	r1, [r6], #4
 8015e8c:	fb24 aa00 	smlad	sl, r4, r0, sl
 8015e90:	f856 2b04 	ldr.w	r2, [r6], #4
 8015e94:	fb25 aa01 	smlad	sl, r5, r1, sl
 8015e98:	f856 3b04 	ldr.w	r3, [r6], #4
 8015e9c:	fb24 bb02 	smlad	fp, r4, r2, fp
 8015ea0:	f859 4b04 	ldr.w	r4, [r9], #4
 8015ea4:	fb25 bb03 	smlad	fp, r5, r3, fp
 8015ea8:	fa2f f584 	sxtb16	r5, r4
 8015eac:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015eb0:	fb25 cc00 	smlad	ip, r5, r0, ip
 8015eb4:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015eb8:	f856 0b04 	ldr.w	r0, [r6], #4
 8015ebc:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015ec0:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 8015ec4:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015ec8:	fa2f f485 	sxtb16	r4, r5
 8015ecc:	fa2f f595 	sxtb16	r5, r5, ror #8
 8015ed0:	f856 1b04 	ldr.w	r1, [r6], #4
 8015ed4:	fb24 aa00 	smlad	sl, r4, r0, sl
 8015ed8:	f856 2b04 	ldr.w	r2, [r6], #4
 8015edc:	fb25 aa01 	smlad	sl, r5, r1, sl
 8015ee0:	f856 3b04 	ldr.w	r3, [r6], #4
 8015ee4:	fb24 bb02 	smlad	fp, r4, r2, fp
 8015ee8:	f859 4b04 	ldr.w	r4, [r9], #4
 8015eec:	fb25 bb03 	smlad	fp, r5, r3, fp
 8015ef0:	fa2f f584 	sxtb16	r5, r4
 8015ef4:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015ef8:	fb25 cc00 	smlad	ip, r5, r0, ip
 8015efc:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015f00:	f1b8 0801 	subs.w	r8, r8, #1
 8015f04:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015f08:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015f0c:	f73f af6c 	bgt.w	8015de8 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xf8>
 8015f10:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015f12:	462e      	mov	r6, r5
 8015f14:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015f16:	1e90      	subs	r0, r2, #2
 8015f18:	dc09      	bgt.n	8015f2e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x23e>
 8015f1a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015f1c:	f1c2 0202 	rsb	r2, r2, #2
 8015f20:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8015f24:	920c      	str	r2, [sp, #48]	@ 0x30
 8015f26:	f100 0005 	add.w	r0, r0, #5
 8015f2a:	f105 0502 	add.w	r5, r5, #2
 8015f2e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015f30:	9800      	ldr	r0, [sp, #0]
 8015f32:	9902      	ldr	r1, [sp, #8]
 8015f34:	9a04      	ldr	r2, [sp, #16]
 8015f36:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015f38:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8015f3c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8015f40:	fb5c 0c01 	smmla	ip, ip, r1, r0
 8015f44:	fb5a 0a01 	smmla	sl, sl, r1, r0
 8015f48:	fa4c fc02 	asr.w	ip, ip, r2
 8015f4c:	fa4a fa02 	asr.w	sl, sl, r2
 8015f50:	f30c 0c07 	ssat	ip, #8, ip
 8015f54:	f30a 0a07 	ssat	sl, #8, sl
 8015f58:	f886 c000 	strb.w	ip, [r6]
 8015f5c:	f884 a000 	strb.w	sl, [r4]
 8015f60:	9801      	ldr	r0, [sp, #4]
 8015f62:	9903      	ldr	r1, [sp, #12]
 8015f64:	9a05      	ldr	r2, [sp, #20]
 8015f66:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8015f6a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015f6e:	fb5e 0e01 	smmla	lr, lr, r1, r0
 8015f72:	fb5b 0b01 	smmla	fp, fp, r1, r0
 8015f76:	fa4e fe02 	asr.w	lr, lr, r2
 8015f7a:	fa4b fb02 	asr.w	fp, fp, r2
 8015f7e:	f30e 0e07 	ssat	lr, #8, lr
 8015f82:	f30b 0b07 	ssat	fp, #8, fp
 8015f86:	f886 e0bd 	strb.w	lr, [r6, #189]	@ 0xbd
 8015f8a:	f884 b0bd 	strb.w	fp, [r4, #189]	@ 0xbd
 8015f8e:	f105 0302 	add.w	r3, r5, #2
 8015f92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f94:	f109 0940 	add.w	r9, r9, #64	@ 0x40
 8015f98:	3f01      	subs	r7, #1
 8015f9a:	f47f af1a 	bne.w	8015dd2 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xe2>
 8015f9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8015fa2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015fa6:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 8015fa8:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 8015fac:	f04f 0810 	mov.w	r8, #16
 8015fb0:	f859 4b04 	ldr.w	r4, [r9], #4
 8015fb4:	f856 0b04 	ldr.w	r0, [r6], #4
 8015fb8:	f856 1b04 	ldr.w	r1, [r6], #4
 8015fbc:	f856 2b04 	ldr.w	r2, [r6], #4
 8015fc0:	f856 3b04 	ldr.w	r3, [r6], #4
 8015fc4:	fa2f f584 	sxtb16	r5, r4
 8015fc8:	fa2f f494 	sxtb16	r4, r4, ror #8
 8015fcc:	fb25 cc00 	smlad	ip, r5, r0, ip
 8015fd0:	fb25 ee02 	smlad	lr, r5, r2, lr
 8015fd4:	fb24 cc01 	smlad	ip, r4, r1, ip
 8015fd8:	fb24 ee03 	smlad	lr, r4, r3, lr
 8015fdc:	f1b8 0801 	subs.w	r8, r8, #1
 8015fe0:	dce6      	bgt.n	8015fb0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x2c0>
 8015fe2:	9800      	ldr	r0, [sp, #0]
 8015fe4:	9902      	ldr	r1, [sp, #8]
 8015fe6:	9a04      	ldr	r2, [sp, #16]
 8015fe8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8015fea:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8015fee:	fb5c 0c01 	smmla	ip, ip, r1, r0
 8015ff2:	fa4c fc02 	asr.w	ip, ip, r2
 8015ff6:	f30c 0c07 	ssat	ip, #8, ip
 8015ffa:	f886 c000 	strb.w	ip, [r6]
 8015ffe:	9801      	ldr	r0, [sp, #4]
 8016000:	9903      	ldr	r1, [sp, #12]
 8016002:	9a05      	ldr	r2, [sp, #20]
 8016004:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8016008:	fb5e 0e01 	smmla	lr, lr, r1, r0
 801600c:	fa4e fe02 	asr.w	lr, lr, r2
 8016010:	f30e 0e07 	ssat	lr, #8, lr
 8016014:	f886 e0bd 	strb.w	lr, [r6, #189]	@ 0xbd
 8016018:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801601a:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 801601e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016020:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016022:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8016024:	f503 73bd 	add.w	r3, r3, #378	@ 0x17a
 8016028:	9312      	str	r3, [sp, #72]	@ 0x48
 801602a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801602c:	f102 0201 	add.w	r2, r2, #1
 8016030:	920d      	str	r2, [sp, #52]	@ 0x34
 8016032:	2a20      	cmp	r2, #32
 8016034:	f6ff ae68 	blt.w	8015d08 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x18>
 8016038:	2000      	movs	r0, #0
 801603a:	b019      	add	sp, #100	@ 0x64
 801603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016040 <ai_sum_f32>:
 8016040:	edd1 7a00 	vldr	s15, [r1]
 8016044:	ed92 7a00 	vldr	s14, [r2]
 8016048:	ee77 7a87 	vadd.f32	s15, s15, s14
 801604c:	edc0 7a00 	vstr	s15, [r0]
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop

08016054 <ai_sum_buffer_INT8>:
 8016054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016058:	9c07      	ldr	r4, [sp, #28]
 801605a:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 801605e:	ed94 0a00 	vldr	s0, [r4]
 8016062:	9c08      	ldr	r4, [sp, #32]
 8016064:	f994 e000 	ldrsb.w	lr, [r4]
 8016068:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801606a:	edd4 0a00 	vldr	s1, [r4]
 801606e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016070:	f994 9000 	ldrsb.w	r9, [r4]
 8016074:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016076:	ed94 1a00 	vldr	s2, [r4]
 801607a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801607c:	f994 5000 	ldrsb.w	r5, [r4]
 8016080:	f1b8 0f00 	cmp.w	r8, #0
 8016084:	d121      	bne.n	80160ca <ai_sum_buffer_INT8+0x76>
 8016086:	eeb4 0a41 	vcmp.f32	s0, s2
 801608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801608e:	f040 80c9 	bne.w	8016224 <ai_sum_buffer_INT8+0x1d0>
 8016092:	45ae      	cmp	lr, r5
 8016094:	f040 80c6 	bne.w	8016224 <ai_sum_buffer_INT8+0x1d0>
 8016098:	eef4 0a41 	vcmp.f32	s1, s2
 801609c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a0:	f040 80c0 	bne.w	8016224 <ai_sum_buffer_INT8+0x1d0>
 80160a4:	45a9      	cmp	r9, r5
 80160a6:	f040 80bd 	bne.w	8016224 <ai_sum_buffer_INT8+0x1d0>
 80160aa:	b163      	cbz	r3, 80160c6 <ai_sum_buffer_INT8+0x72>
 80160ac:	4403      	add	r3, r0
 80160ae:	f911 4b01 	ldrsb.w	r4, [r1], #1
 80160b2:	f912 6b01 	ldrsb.w	r6, [r2], #1
 80160b6:	4434      	add	r4, r6
 80160b8:	442c      	add	r4, r5
 80160ba:	f304 0407 	ssat	r4, #8, r4
 80160be:	f800 4b01 	strb.w	r4, [r0], #1
 80160c2:	4298      	cmp	r0, r3
 80160c4:	d1f3      	bne.n	80160ae <ai_sum_buffer_INT8+0x5a>
 80160c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160ca:	eec0 5a81 	vdiv.f32	s11, s1, s2
 80160ce:	f04f 0c01 	mov.w	ip, #1
 80160d2:	089f      	lsrs	r7, r3, #2
 80160d4:	ee80 7a01 	vdiv.f32	s14, s0, s2
 80160d8:	ee15 4a90 	vmov	r4, s11
 80160dc:	f3c4 54c7 	ubfx	r4, r4, #23, #8
 80160e0:	f1c4 047e 	rsb	r4, r4, #126	@ 0x7e
 80160e4:	ee17 6a10 	vmov	r6, s14
 80160e8:	ea04 74e4 	and.w	r4, r4, r4, asr #31
 80160ec:	f3c6 56c7 	ubfx	r6, r6, #23, #8
 80160f0:	f1c6 067e 	rsb	r6, r6, #126	@ 0x7e
 80160f4:	42b4      	cmp	r4, r6
 80160f6:	bfa8      	it	ge
 80160f8:	4634      	movge	r4, r6
 80160fa:	45e0      	cmp	r8, ip
 80160fc:	f104 061d 	add.w	r6, r4, #29
 8016100:	fa0c f606 	lsl.w	r6, ip, r6
 8016104:	ee07 6a90 	vmov	s15, r6
 8016108:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801610c:	f000 8092 	beq.w	8016234 <ai_sum_buffer_INT8+0x1e0>
 8016110:	ee07 ea90 	vmov	s15, lr
 8016114:	f992 2000 	ldrsb.w	r2, [r2]
 8016118:	f104 0616 	add.w	r6, r4, #22
 801611c:	3415      	adds	r4, #21
 801611e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8016122:	ee07 5a90 	vmov	s15, r5
 8016126:	eba2 0209 	sub.w	r2, r2, r9
 801612a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801612e:	ee05 2a10 	vmov	s10, r2
 8016132:	fa0c f204 	lsl.w	r2, ip, r4
 8016136:	fa0c f406 	lsl.w	r4, ip, r6
 801613a:	eee6 7a47 	vfms.f32	s15, s12, s14
 801613e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016142:	ee37 7a07 	vadd.f32	s14, s14, s14
 8016146:	ee67 6a26 	vmul.f32	s13, s14, s13
 801614a:	ee07 4a10 	vmov	s14, r4
 801614e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8016152:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016156:	ee67 7a27 	vmul.f32	s15, s14, s15
 801615a:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 801615e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016162:	ee17 4a10 	vmov	r4, s14
 8016166:	ee17 5a90 	vmov	r5, s15
 801616a:	4415      	add	r5, r2
 801616c:	2f00      	cmp	r7, #0
 801616e:	f000 80ee 	beq.w	801634e <ai_sum_buffer_INT8+0x2fa>
 8016172:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8016176:	f100 0e04 	add.w	lr, r0, #4
 801617a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801617e:	f851 2b04 	ldr.w	r2, [r1], #4
 8016182:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8016186:	f00c 2cff 	and.w	ip, ip, #4278255360	@ 0xff00ff00
 801618a:	fb34 590c 	smlawb	r9, r4, ip, r5
 801618e:	fa49 f906 	asr.w	r9, r9, r6
 8016192:	f309 0907 	ssat	r9, #8, r9
 8016196:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 801619a:	f80e 9c04 	strb.w	r9, [lr, #-4]
 801619e:	fb34 5902 	smlawb	r9, r4, r2, r5
 80161a2:	fa49 f906 	asr.w	r9, r9, r6
 80161a6:	f309 0907 	ssat	r9, #8, r9
 80161aa:	f80e 9c03 	strb.w	r9, [lr, #-3]
 80161ae:	fb34 5c1c 	smlawt	ip, r4, ip, r5
 80161b2:	fa4c fc06 	asr.w	ip, ip, r6
 80161b6:	f30c 0c07 	ssat	ip, #8, ip
 80161ba:	f80e cc02 	strb.w	ip, [lr, #-2]
 80161be:	fb34 5212 	smlawt	r2, r4, r2, r5
 80161c2:	4132      	asrs	r2, r6
 80161c4:	f302 0207 	ssat	r2, #8, r2
 80161c8:	42b9      	cmp	r1, r7
 80161ca:	f80e 2c01 	strb.w	r2, [lr, #-1]
 80161ce:	f10e 0e04 	add.w	lr, lr, #4
 80161d2:	d1d4      	bne.n	801617e <ai_sum_buffer_INT8+0x12a>
 80161d4:	4440      	add	r0, r8
 80161d6:	f013 0303 	ands.w	r3, r3, #3
 80161da:	f43f af74 	beq.w	80160c6 <ai_sum_buffer_INT8+0x72>
 80161de:	f997 2000 	ldrsb.w	r2, [r7]
 80161e2:	0212      	lsls	r2, r2, #8
 80161e4:	fb34 5202 	smlawb	r2, r4, r2, r5
 80161e8:	4132      	asrs	r2, r6
 80161ea:	f302 0207 	ssat	r2, #8, r2
 80161ee:	3b01      	subs	r3, #1
 80161f0:	7002      	strb	r2, [r0, #0]
 80161f2:	f43f af68 	beq.w	80160c6 <ai_sum_buffer_INT8+0x72>
 80161f6:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80161fa:	0212      	lsls	r2, r2, #8
 80161fc:	fb34 5202 	smlawb	r2, r4, r2, r5
 8016200:	4132      	asrs	r2, r6
 8016202:	f302 0207 	ssat	r2, #8, r2
 8016206:	2b01      	cmp	r3, #1
 8016208:	7042      	strb	r2, [r0, #1]
 801620a:	f43f af5c 	beq.w	80160c6 <ai_sum_buffer_INT8+0x72>
 801620e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8016212:	021b      	lsls	r3, r3, #8
 8016214:	fb34 5303 	smlawb	r3, r4, r3, r5
 8016218:	4133      	asrs	r3, r6
 801621a:	f303 0307 	ssat	r3, #8, r3
 801621e:	7083      	strb	r3, [r0, #2]
 8016220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016224:	e9cd 9508 	strd	r9, r5, [sp, #32]
 8016228:	f8cd e01c 	str.w	lr, [sp, #28]
 801622c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016230:	f000 ba0c 	b.w	801664c <ai_math_elementwise_sum_int8>
 8016234:	ee07 9a90 	vmov	s15, r9
 8016238:	f991 1000 	ldrsb.w	r1, [r1]
 801623c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016240:	ee07 5a90 	vmov	s15, r5
 8016244:	eba1 010e 	sub.w	r1, r1, lr
 8016248:	f104 0e16 	add.w	lr, r4, #22
 801624c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016250:	3415      	adds	r4, #21
 8016252:	ee06 1a10 	vmov	s12, r1
 8016256:	fa08 f10e 	lsl.w	r1, r8, lr
 801625a:	fa08 f404 	lsl.w	r4, r8, r4
 801625e:	eee5 7a65 	vfms.f32	s15, s10, s11
 8016262:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016266:	ee75 5aa5 	vadd.f32	s11, s11, s11
 801626a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 801626e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016272:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 8016276:	ee17 6a10 	vmov	r6, s14
 801627a:	eef0 6a67 	vmov.f32	s13, s15
 801627e:	ee07 1a90 	vmov	s15, r1
 8016282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016286:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801628a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801628e:	ee17 5a90 	vmov	r5, s15
 8016292:	4425      	add	r5, r4
 8016294:	2f00      	cmp	r7, #0
 8016296:	d05c      	beq.n	8016352 <ai_sum_buffer_INT8+0x2fe>
 8016298:	ea4f 0887 	mov.w	r8, r7, lsl #2
 801629c:	f100 0c04 	add.w	ip, r0, #4
 80162a0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80162a4:	f852 1b04 	ldr.w	r1, [r2], #4
 80162a8:	020c      	lsls	r4, r1, #8
 80162aa:	f004 24ff 	and.w	r4, r4, #4278255360	@ 0xff00ff00
 80162ae:	fb36 5904 	smlawb	r9, r6, r4, r5
 80162b2:	fa49 f90e 	asr.w	r9, r9, lr
 80162b6:	f309 0907 	ssat	r9, #8, r9
 80162ba:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 80162be:	f80c 9c04 	strb.w	r9, [ip, #-4]
 80162c2:	fb36 5901 	smlawb	r9, r6, r1, r5
 80162c6:	fa49 f90e 	asr.w	r9, r9, lr
 80162ca:	f309 0907 	ssat	r9, #8, r9
 80162ce:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80162d2:	fb36 5414 	smlawt	r4, r6, r4, r5
 80162d6:	fa44 f40e 	asr.w	r4, r4, lr
 80162da:	f304 0407 	ssat	r4, #8, r4
 80162de:	f80c 4c02 	strb.w	r4, [ip, #-2]
 80162e2:	fb36 5111 	smlawt	r1, r6, r1, r5
 80162e6:	fa41 f10e 	asr.w	r1, r1, lr
 80162ea:	f301 0107 	ssat	r1, #8, r1
 80162ee:	42ba      	cmp	r2, r7
 80162f0:	f80c 1c01 	strb.w	r1, [ip, #-1]
 80162f4:	f10c 0c04 	add.w	ip, ip, #4
 80162f8:	d1d4      	bne.n	80162a4 <ai_sum_buffer_INT8+0x250>
 80162fa:	4440      	add	r0, r8
 80162fc:	f013 0303 	ands.w	r3, r3, #3
 8016300:	f43f aee1 	beq.w	80160c6 <ai_sum_buffer_INT8+0x72>
 8016304:	f997 2000 	ldrsb.w	r2, [r7]
 8016308:	0212      	lsls	r2, r2, #8
 801630a:	fb36 5202 	smlawb	r2, r6, r2, r5
 801630e:	fa42 f20e 	asr.w	r2, r2, lr
 8016312:	f302 0207 	ssat	r2, #8, r2
 8016316:	3b01      	subs	r3, #1
 8016318:	7002      	strb	r2, [r0, #0]
 801631a:	f43f aed4 	beq.w	80160c6 <ai_sum_buffer_INT8+0x72>
 801631e:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8016322:	0212      	lsls	r2, r2, #8
 8016324:	fb36 5202 	smlawb	r2, r6, r2, r5
 8016328:	fa42 f20e 	asr.w	r2, r2, lr
 801632c:	f302 0207 	ssat	r2, #8, r2
 8016330:	2b01      	cmp	r3, #1
 8016332:	7042      	strb	r2, [r0, #1]
 8016334:	f43f aec7 	beq.w	80160c6 <ai_sum_buffer_INT8+0x72>
 8016338:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801633c:	021b      	lsls	r3, r3, #8
 801633e:	fb36 5303 	smlawb	r3, r6, r3, r5
 8016342:	fa43 f30e 	asr.w	r3, r3, lr
 8016346:	f303 0307 	ssat	r3, #8, r3
 801634a:	7083      	strb	r3, [r0, #2]
 801634c:	e6bb      	b.n	80160c6 <ai_sum_buffer_INT8+0x72>
 801634e:	460f      	mov	r7, r1
 8016350:	e741      	b.n	80161d6 <ai_sum_buffer_INT8+0x182>
 8016352:	4617      	mov	r7, r2
 8016354:	e7d2      	b.n	80162fc <ai_sum_buffer_INT8+0x2a8>
 8016356:	bf00      	nop

08016358 <ai_array_to_buffer_fmt>:
 8016358:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801635c:	2b02      	cmp	r3, #2
 801635e:	d053      	beq.n	8016408 <ai_array_to_buffer_fmt+0xb0>
 8016360:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8016364:	4a2b      	ldr	r2, [pc, #172]	@ (8016414 <ai_array_to_buffer_fmt+0xbc>)
 8016366:	4293      	cmp	r3, r2
 8016368:	d010      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 801636a:	dc21      	bgt.n	80163b0 <ai_array_to_buffer_fmt+0x58>
 801636c:	4a2a      	ldr	r2, [pc, #168]	@ (8016418 <ai_array_to_buffer_fmt+0xc0>)
 801636e:	4293      	cmp	r3, r2
 8016370:	d00c      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 8016372:	dd0f      	ble.n	8016394 <ai_array_to_buffer_fmt+0x3c>
 8016374:	4a29      	ldr	r2, [pc, #164]	@ (801641c <ai_array_to_buffer_fmt+0xc4>)
 8016376:	4293      	cmp	r3, r2
 8016378:	d008      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 801637a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 801637e:	4293      	cmp	r3, r2
 8016380:	d004      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 8016382:	4a27      	ldr	r2, [pc, #156]	@ (8016420 <ai_array_to_buffer_fmt+0xc8>)
 8016384:	4293      	cmp	r3, r2
 8016386:	bf0c      	ite	eq
 8016388:	4613      	moveq	r3, r2
 801638a:	2340      	movne	r3, #64	@ 0x40
 801638c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8016390:	4318      	orrs	r0, r3
 8016392:	4770      	bx	lr
 8016394:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8016398:	4293      	cmp	r3, r2
 801639a:	d0f7      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 801639c:	dd2a      	ble.n	80163f4 <ai_array_to_buffer_fmt+0x9c>
 801639e:	4a21      	ldr	r2, [pc, #132]	@ (8016424 <ai_array_to_buffer_fmt+0xcc>)
 80163a0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80163a4:	4293      	cmp	r3, r2
 80163a6:	bf0c      	ite	eq
 80163a8:	4613      	moveq	r3, r2
 80163aa:	2340      	movne	r3, #64	@ 0x40
 80163ac:	4318      	orrs	r0, r3
 80163ae:	4770      	bx	lr
 80163b0:	4a1d      	ldr	r2, [pc, #116]	@ (8016428 <ai_array_to_buffer_fmt+0xd0>)
 80163b2:	4293      	cmp	r3, r2
 80163b4:	d0ea      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 80163b6:	dd0f      	ble.n	80163d8 <ai_array_to_buffer_fmt+0x80>
 80163b8:	4a1c      	ldr	r2, [pc, #112]	@ (801642c <ai_array_to_buffer_fmt+0xd4>)
 80163ba:	4293      	cmp	r3, r2
 80163bc:	d0e6      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 80163be:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 80163c2:	4293      	cmp	r3, r2
 80163c4:	d0e2      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 80163c6:	4a1a      	ldr	r2, [pc, #104]	@ (8016430 <ai_array_to_buffer_fmt+0xd8>)
 80163c8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80163cc:	4293      	cmp	r3, r2
 80163ce:	bf0c      	ite	eq
 80163d0:	4613      	moveq	r3, r2
 80163d2:	2340      	movne	r3, #64	@ 0x40
 80163d4:	4318      	orrs	r0, r3
 80163d6:	4770      	bx	lr
 80163d8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80163dc:	4293      	cmp	r3, r2
 80163de:	d0d5      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 80163e0:	3207      	adds	r2, #7
 80163e2:	4293      	cmp	r3, r2
 80163e4:	d0d2      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 80163e6:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 80163ea:	4293      	cmp	r3, r2
 80163ec:	bf0c      	ite	eq
 80163ee:	4613      	moveq	r3, r2
 80163f0:	2340      	movne	r3, #64	@ 0x40
 80163f2:	e7cb      	b.n	801638c <ai_array_to_buffer_fmt+0x34>
 80163f4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80163f8:	4293      	cmp	r3, r2
 80163fa:	d0c7      	beq.n	801638c <ai_array_to_buffer_fmt+0x34>
 80163fc:	3280      	adds	r2, #128	@ 0x80
 80163fe:	4293      	cmp	r3, r2
 8016400:	bf0c      	ite	eq
 8016402:	4613      	moveq	r3, r2
 8016404:	2340      	movne	r3, #64	@ 0x40
 8016406:	e7c1      	b.n	801638c <ai_array_to_buffer_fmt+0x34>
 8016408:	4b0a      	ldr	r3, [pc, #40]	@ (8016434 <ai_array_to_buffer_fmt+0xdc>)
 801640a:	4003      	ands	r3, r0
 801640c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8016410:	e7bc      	b.n	801638c <ai_array_to_buffer_fmt+0x34>
 8016412:	bf00      	nop
 8016414:	00840040 	.word	0x00840040
 8016418:	00040840 	.word	0x00040840
 801641c:	00041040 	.word	0x00041040
 8016420:	0004084f 	.word	0x0004084f
 8016424:	00040447 	.word	0x00040447
 8016428:	00840840 	.word	0x00840840
 801642c:	00841040 	.word	0x00841040
 8016430:	0084084f 	.word	0x0084084f
 8016434:	00803fff 	.word	0x00803fff

08016438 <ai_array_get_byte_size>:
 8016438:	b319      	cbz	r1, 8016482 <ai_array_get_byte_size+0x4a>
 801643a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801643e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8016442:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8016446:	11c0      	asrs	r0, r0, #7
 8016448:	fb01 f303 	mul.w	r3, r1, r3
 801644c:	2a04      	cmp	r2, #4
 801644e:	f103 0307 	add.w	r3, r3, #7
 8016452:	f023 0307 	bic.w	r3, r3, #7
 8016456:	fa23 f10c 	lsr.w	r1, r3, ip
 801645a:	d00b      	beq.n	8016474 <ai_array_get_byte_size+0x3c>
 801645c:	2a08      	cmp	r2, #8
 801645e:	d002      	beq.n	8016466 <ai_array_get_byte_size+0x2e>
 8016460:	3107      	adds	r1, #7
 8016462:	08c8      	lsrs	r0, r1, #3
 8016464:	4770      	bx	lr
 8016466:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801646a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801646e:	3107      	adds	r1, #7
 8016470:	08c8      	lsrs	r0, r1, #3
 8016472:	4770      	bx	lr
 8016474:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8016478:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801647c:	3107      	adds	r1, #7
 801647e:	08c8      	lsrs	r0, r1, #3
 8016480:	4770      	bx	lr
 8016482:	4608      	mov	r0, r1
 8016484:	4770      	bx	lr
 8016486:	bf00      	nop

08016488 <ai_array_get_data_byte_size>:
 8016488:	b169      	cbz	r1, 80164a6 <ai_array_get_data_byte_size+0x1e>
 801648a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801648e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8016492:	fb03 f101 	mul.w	r1, r3, r1
 8016496:	1dcb      	adds	r3, r1, #7
 8016498:	f023 0307 	bic.w	r3, r3, #7
 801649c:	fa23 f000 	lsr.w	r0, r3, r0
 80164a0:	3007      	adds	r0, #7
 80164a2:	08c0      	lsrs	r0, r0, #3
 80164a4:	4770      	bx	lr
 80164a6:	4608      	mov	r0, r1
 80164a8:	4770      	bx	lr
 80164aa:	bf00      	nop

080164ac <ai_version_get>:
 80164ac:	0212      	lsls	r2, r2, #8
 80164ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80164b2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80164b6:	4770      	bx	lr

080164b8 <get_tensor_byte_size>:
 80164b8:	b430      	push	{r4, r5}
 80164ba:	6985      	ldr	r5, [r0, #24]
 80164bc:	68c4      	ldr	r4, [r0, #12]
 80164be:	6941      	ldr	r1, [r0, #20]
 80164c0:	4b06      	ldr	r3, [pc, #24]	@ (80164dc <get_tensor_byte_size+0x24>)
 80164c2:	6828      	ldr	r0, [r5, #0]
 80164c4:	4a06      	ldr	r2, [pc, #24]	@ (80164e0 <get_tensor_byte_size+0x28>)
 80164c6:	4003      	ands	r3, r0
 80164c8:	68c9      	ldr	r1, [r1, #12]
 80164ca:	68e0      	ldr	r0, [r4, #12]
 80164cc:	4293      	cmp	r3, r2
 80164ce:	fb01 f000 	mul.w	r0, r1, r0
 80164d2:	d101      	bne.n	80164d8 <get_tensor_byte_size+0x20>
 80164d4:	3007      	adds	r0, #7
 80164d6:	08c0      	lsrs	r0, r0, #3
 80164d8:	bc30      	pop	{r4, r5}
 80164da:	4770      	bx	lr
 80164dc:	017fffff 	.word	0x017fffff
 80164e0:	000400c0 	.word	0x000400c0

080164e4 <core_get_broadcasted_shape>:
 80164e4:	b470      	push	{r4, r5, r6}
 80164e6:	6804      	ldr	r4, [r0, #0]
 80164e8:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80164ec:	b304      	cbz	r4, 8016530 <core_get_broadcasted_shape+0x4c>
 80164ee:	4623      	mov	r3, r4
 80164f0:	3b01      	subs	r3, #1
 80164f2:	429c      	cmp	r4, r3
 80164f4:	d917      	bls.n	8016526 <core_get_broadcasted_shape+0x42>
 80164f6:	6815      	ldr	r5, [r2, #0]
 80164f8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80164fc:	2401      	movs	r4, #1
 80164fe:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8016502:	d202      	bcs.n	801650a <core_get_broadcasted_shape+0x26>
 8016504:	6854      	ldr	r4, [r2, #4]
 8016506:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801650a:	680e      	ldr	r6, [r1, #0]
 801650c:	2501      	movs	r5, #1
 801650e:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 8016512:	d202      	bcs.n	801651a <core_get_broadcasted_shape+0x36>
 8016514:	684d      	ldr	r5, [r1, #4]
 8016516:	f855 500c 	ldr.w	r5, [r5, ip]
 801651a:	42ac      	cmp	r4, r5
 801651c:	bf38      	it	cc
 801651e:	462c      	movcc	r4, r5
 8016520:	6845      	ldr	r5, [r0, #4]
 8016522:	f845 400c 	str.w	r4, [r5, ip]
 8016526:	b11b      	cbz	r3, 8016530 <core_get_broadcasted_shape+0x4c>
 8016528:	6804      	ldr	r4, [r0, #0]
 801652a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 801652e:	e7df      	b.n	80164f0 <core_get_broadcasted_shape+0xc>
 8016530:	bc70      	pop	{r4, r5, r6}
 8016532:	4770      	bx	lr

08016534 <core_compute_offsets>:
 8016534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016538:	e9d1 5c00 	ldrd	r5, ip, [r1]
 801653c:	6857      	ldr	r7, [r2, #4]
 801653e:	b085      	sub	sp, #20
 8016540:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8016544:	687e      	ldr	r6, [r7, #4]
 8016546:	1ba1      	subs	r1, r4, r6
 8016548:	bf18      	it	ne
 801654a:	2101      	movne	r1, #1
 801654c:	f5b5 6fa0 	cmp.w	r5, #1280	@ 0x500
 8016550:	9103      	str	r1, [sp, #12]
 8016552:	d376      	bcc.n	8016642 <core_compute_offsets+0x10e>
 8016554:	f8dc 9010 	ldr.w	r9, [ip, #16]
 8016558:	fb09 fe04 	mul.w	lr, r9, r4
 801655c:	6812      	ldr	r2, [r2, #0]
 801655e:	f8d0 b000 	ldr.w	fp, [r0]
 8016562:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8016566:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 801656a:	bf2c      	ite	cs
 801656c:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 8016570:	f04f 0a01 	movcc.w	sl, #1
 8016574:	9201      	str	r2, [sp, #4]
 8016576:	ebb9 0c0a 	subs.w	ip, r9, sl
 801657a:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 801657e:	bf18      	it	ne
 8016580:	f04f 0c01 	movne.w	ip, #1
 8016584:	ebb5 0708 	subs.w	r7, r5, r8
 8016588:	9202      	str	r2, [sp, #8]
 801658a:	f3cb 2217 	ubfx	r2, fp, #8, #24
 801658e:	bf18      	it	ne
 8016590:	2701      	movne	r7, #1
 8016592:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 8016596:	d321      	bcc.n	80165dc <core_compute_offsets+0xa8>
 8016598:	42b4      	cmp	r4, r6
 801659a:	bf0c      	ite	eq
 801659c:	461a      	moveq	r2, r3
 801659e:	2200      	movne	r2, #0
 80165a0:	6841      	ldr	r1, [r0, #4]
 80165a2:	604a      	str	r2, [r1, #4]
 80165a4:	f8d0 b000 	ldr.w	fp, [r0]
 80165a8:	f5bb 6fa0 	cmp.w	fp, #1280	@ 0x500
 80165ac:	f3cb 2217 	ubfx	r2, fp, #8, #24
 80165b0:	d314      	bcc.n	80165dc <core_compute_offsets+0xa8>
 80165b2:	9a03      	ldr	r2, [sp, #12]
 80165b4:	45d1      	cmp	r9, sl
 80165b6:	bf14      	ite	ne
 80165b8:	2200      	movne	r2, #0
 80165ba:	f002 0201 	andeq.w	r2, r2, #1
 80165be:	42b4      	cmp	r4, r6
 80165c0:	bf14      	ite	ne
 80165c2:	f04f 0900 	movne.w	r9, #0
 80165c6:	f00c 0901 	andeq.w	r9, ip, #1
 80165ca:	6846      	ldr	r6, [r0, #4]
 80165cc:	fb04 2219 	mls	r2, r4, r9, r2
 80165d0:	fb03 f202 	mul.w	r2, r3, r2
 80165d4:	6132      	str	r2, [r6, #16]
 80165d6:	6802      	ldr	r2, [r0, #0]
 80165d8:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80165dc:	2a02      	cmp	r2, #2
 80165de:	fb0e f607 	mul.w	r6, lr, r7
 80165e2:	d911      	bls.n	8016608 <core_compute_offsets+0xd4>
 80165e4:	9a03      	ldr	r2, [sp, #12]
 80165e6:	4545      	cmp	r5, r8
 80165e8:	bf14      	ite	ne
 80165ea:	2200      	movne	r2, #0
 80165ec:	f002 0201 	andeq.w	r2, r2, #1
 80165f0:	ea0c 0202 	and.w	r2, ip, r2
 80165f4:	1b92      	subs	r2, r2, r6
 80165f6:	fb04 240c 	mla	r4, r4, ip, r2
 80165fa:	6842      	ldr	r2, [r0, #4]
 80165fc:	fb03 f404 	mul.w	r4, r3, r4
 8016600:	6094      	str	r4, [r2, #8]
 8016602:	6802      	ldr	r2, [r0, #0]
 8016604:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8016608:	e9dd 4101 	ldrd	r4, r1, [sp, #4]
 801660c:	428c      	cmp	r4, r1
 801660e:	d116      	bne.n	801663e <core_compute_offsets+0x10a>
 8016610:	b1af      	cbz	r7, 801663e <core_compute_offsets+0x10a>
 8016612:	9903      	ldr	r1, [sp, #12]
 8016614:	ea01 010c 	and.w	r1, r1, ip
 8016618:	2a03      	cmp	r2, #3
 801661a:	d90d      	bls.n	8016638 <core_compute_offsets+0x104>
 801661c:	fb0e f505 	mul.w	r5, lr, r5
 8016620:	e9dd 2401 	ldrd	r2, r4, [sp, #4]
 8016624:	1b12      	subs	r2, r2, r4
 8016626:	bf18      	it	ne
 8016628:	2201      	movne	r2, #1
 801662a:	fb02 1115 	mls	r1, r2, r5, r1
 801662e:	6842      	ldr	r2, [r0, #4]
 8016630:	4431      	add	r1, r6
 8016632:	fb03 f101 	mul.w	r1, r3, r1
 8016636:	60d1      	str	r1, [r2, #12]
 8016638:	b005      	add	sp, #20
 801663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801663e:	2100      	movs	r1, #0
 8016640:	e7ea      	b.n	8016618 <core_compute_offsets+0xe4>
 8016642:	46a6      	mov	lr, r4
 8016644:	f04f 0901 	mov.w	r9, #1
 8016648:	e788      	b.n	801655c <core_compute_offsets+0x28>
 801664a:	bf00      	nop

0801664c <ai_math_elementwise_sum_int8>:
 801664c:	eec0 7a81 	vdiv.f32	s15, s1, s2
 8016650:	4684      	mov	ip, r0
 8016652:	eec0 6a01 	vdiv.f32	s13, s0, s2
 8016656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801665a:	b085      	sub	sp, #20
 801665c:	461d      	mov	r5, r3
 801665e:	9001      	str	r0, [sp, #4]
 8016660:	f99d 003c 	ldrsb.w	r0, [sp, #60]	@ 0x3c
 8016664:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8016668:	9302      	str	r3, [sp, #8]
 801666a:	ee17 3a90 	vmov	r3, s15
 801666e:	ee07 0a10 	vmov	s14, r0
 8016672:	f99d 0038 	ldrsb.w	r0, [sp, #56]	@ 0x38
 8016676:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801667a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801667e:	4240      	negs	r0, r0
 8016680:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8016684:	ee76 5aa6 	vadd.f32	s11, s13, s13
 8016688:	ee27 7ac7 	vnmul.f32	s14, s15, s14
 801668c:	ee07 0a90 	vmov	s15, r0
 8016690:	ee16 0a90 	vmov	r0, s13
 8016694:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 8016698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801669c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 80166a0:	f1c0 007e 	rsb	r0, r0, #126	@ 0x7e
 80166a4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80166a8:	4283      	cmp	r3, r0
 80166aa:	bfa8      	it	ge
 80166ac:	4603      	movge	r3, r0
 80166ae:	f99d 0040 	ldrsb.w	r0, [sp, #64]	@ 0x40
 80166b2:	ea5f 0b95 	movs.w	fp, r5, lsr #2
 80166b6:	ee07 0a90 	vmov	s15, r0
 80166ba:	f103 041d 	add.w	r4, r3, #29
 80166be:	f04f 0001 	mov.w	r0, #1
 80166c2:	f103 0916 	add.w	r9, r3, #22
 80166c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166ca:	f103 0315 	add.w	r3, r3, #21
 80166ce:	fa00 f404 	lsl.w	r4, r0, r4
 80166d2:	fa00 f303 	lsl.w	r3, r0, r3
 80166d6:	fa00 f009 	lsl.w	r0, r0, r9
 80166da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166de:	ee07 4a10 	vmov	s14, r4
 80166e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80166e6:	ee07 0a10 	vmov	s14, r0
 80166ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80166ee:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80166f2:	ee66 6a26 	vmul.f32	s13, s12, s13
 80166f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80166fa:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 80166fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016702:	ee17 8a10 	vmov	r8, s14
 8016706:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 801670a:	ee17 6a90 	vmov	r6, s15
 801670e:	ee17 7a10 	vmov	r7, s14
 8016712:	441e      	add	r6, r3
 8016714:	f106 36ff 	add.w	r6, r6, #4294967295
 8016718:	f000 8081 	beq.w	801681e <ai_math_elementwise_sum_int8+0x1d2>
 801671c:	4663      	mov	r3, ip
 801671e:	4692      	mov	sl, r2
 8016720:	1d1d      	adds	r5, r3, #4
 8016722:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016726:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 801672a:	9303      	str	r3, [sp, #12]
 801672c:	f851 4b04 	ldr.w	r4, [r1], #4
 8016730:	f85a 3b04 	ldr.w	r3, [sl], #4
 8016734:	ea4f 2e04 	mov.w	lr, r4, lsl #8
 8016738:	f00e 2eff 	and.w	lr, lr, #4278255360	@ 0xff00ff00
 801673c:	fb38 6c0e 	smlawb	ip, r8, lr, r6
 8016740:	0218      	lsls	r0, r3, #8
 8016742:	f000 20ff 	and.w	r0, r0, #4278255360	@ 0xff00ff00
 8016746:	fb37 cc00 	smlawb	ip, r7, r0, ip
 801674a:	fa4c fc09 	asr.w	ip, ip, r9
 801674e:	f30c 0c07 	ssat	ip, #8, ip
 8016752:	f004 24ff 	and.w	r4, r4, #4278255360	@ 0xff00ff00
 8016756:	f805 cc04 	strb.w	ip, [r5, #-4]
 801675a:	fb38 6c04 	smlawb	ip, r8, r4, r6
 801675e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8016762:	fb37 cc03 	smlawb	ip, r7, r3, ip
 8016766:	fa4c fc09 	asr.w	ip, ip, r9
 801676a:	f30c 0c07 	ssat	ip, #8, ip
 801676e:	f805 cc03 	strb.w	ip, [r5, #-3]
 8016772:	fb38 6e1e 	smlawt	lr, r8, lr, r6
 8016776:	fb37 e010 	smlawt	r0, r7, r0, lr
 801677a:	fa40 f009 	asr.w	r0, r0, r9
 801677e:	f300 0007 	ssat	r0, #8, r0
 8016782:	f805 0c02 	strb.w	r0, [r5, #-2]
 8016786:	fb38 6414 	smlawt	r4, r8, r4, r6
 801678a:	fb37 4313 	smlawt	r3, r7, r3, r4
 801678e:	fa43 f309 	asr.w	r3, r3, r9
 8016792:	f303 0307 	ssat	r3, #8, r3
 8016796:	4559      	cmp	r1, fp
 8016798:	f805 3c01 	strb.w	r3, [r5, #-1]
 801679c:	f105 0504 	add.w	r5, r5, #4
 80167a0:	d1c4      	bne.n	801672c <ai_math_elementwise_sum_int8+0xe0>
 80167a2:	9b01      	ldr	r3, [sp, #4]
 80167a4:	9903      	ldr	r1, [sp, #12]
 80167a6:	440b      	add	r3, r1
 80167a8:	440a      	add	r2, r1
 80167aa:	9301      	str	r3, [sp, #4]
 80167ac:	9b02      	ldr	r3, [sp, #8]
 80167ae:	f013 0003 	ands.w	r0, r3, #3
 80167b2:	d031      	beq.n	8016818 <ai_math_elementwise_sum_int8+0x1cc>
 80167b4:	f99b 1000 	ldrsb.w	r1, [fp]
 80167b8:	0209      	lsls	r1, r1, #8
 80167ba:	fb38 6101 	smlawb	r1, r8, r1, r6
 80167be:	f992 3000 	ldrsb.w	r3, [r2]
 80167c2:	021b      	lsls	r3, r3, #8
 80167c4:	fb37 1303 	smlawb	r3, r7, r3, r1
 80167c8:	fa43 f309 	asr.w	r3, r3, r9
 80167cc:	f303 0307 	ssat	r3, #8, r3
 80167d0:	9c01      	ldr	r4, [sp, #4]
 80167d2:	3801      	subs	r0, #1
 80167d4:	7023      	strb	r3, [r4, #0]
 80167d6:	d01f      	beq.n	8016818 <ai_math_elementwise_sum_int8+0x1cc>
 80167d8:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 80167dc:	0209      	lsls	r1, r1, #8
 80167de:	fb38 6101 	smlawb	r1, r8, r1, r6
 80167e2:	f992 3001 	ldrsb.w	r3, [r2, #1]
 80167e6:	021b      	lsls	r3, r3, #8
 80167e8:	fb37 1303 	smlawb	r3, r7, r3, r1
 80167ec:	fa43 f309 	asr.w	r3, r3, r9
 80167f0:	f303 0307 	ssat	r3, #8, r3
 80167f4:	2801      	cmp	r0, #1
 80167f6:	7063      	strb	r3, [r4, #1]
 80167f8:	d00e      	beq.n	8016818 <ai_math_elementwise_sum_int8+0x1cc>
 80167fa:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 80167fe:	021b      	lsls	r3, r3, #8
 8016800:	fb38 6803 	smlawb	r8, r8, r3, r6
 8016804:	f992 3002 	ldrsb.w	r3, [r2, #2]
 8016808:	021b      	lsls	r3, r3, #8
 801680a:	fb37 8303 	smlawb	r3, r7, r3, r8
 801680e:	fa43 f309 	asr.w	r3, r3, r9
 8016812:	f303 0307 	ssat	r3, #8, r3
 8016816:	70a3      	strb	r3, [r4, #2]
 8016818:	b005      	add	sp, #20
 801681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801681e:	468b      	mov	fp, r1
 8016820:	e7c4      	b.n	80167ac <ai_math_elementwise_sum_int8+0x160>
 8016822:	bf00      	nop

08016824 <_lite_kernel_nl_softmax_is8os8>:
 8016824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016828:	b09b      	sub	sp, #108	@ 0x6c
 801682a:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801682e:	4411      	add	r1, r2
 8016830:	fb03 f202 	mul.w	r2, r3, r2
 8016834:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8016836:	9118      	str	r1, [sp, #96]	@ 0x60
 8016838:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 801683c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801683e:	9015      	str	r0, [sp, #84]	@ 0x54
 8016840:	bfac      	ite	ge
 8016842:	425b      	negge	r3, r3
 8016844:	f44f 7380 	movlt.w	r3, #256	@ 0x100
 8016848:	fb01 f303 	mul.w	r3, r1, r3
 801684c:	429a      	cmp	r2, r3
 801684e:	f200 83ed 	bhi.w	801702c <_lite_kernel_nl_softmax_is8os8+0x808>
 8016852:	9b03      	ldr	r3, [sp, #12]
 8016854:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016856:	4293      	cmp	r3, r2
 8016858:	f080 8365 	bcs.w	8016f26 <_lite_kernel_nl_softmax_is8os8+0x702>
 801685c:	4618      	mov	r0, r3
 801685e:	9904      	ldr	r1, [sp, #16]
 8016860:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8016862:	f8df a3b4 	ldr.w	sl, [pc, #948]	@ 8016c18 <_lite_kernel_nl_softmax_is8os8+0x3f4>
 8016866:	1f1a      	subs	r2, r3, #4
 8016868:	1e4b      	subs	r3, r1, #1
 801686a:	18c3      	adds	r3, r0, r3
 801686c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801686e:	9316      	str	r3, [sp, #88]	@ 0x58
 8016870:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8016874:	9319      	str	r3, [sp, #100]	@ 0x64
 8016876:	9b03      	ldr	r3, [sp, #12]
 8016878:	9904      	ldr	r1, [sp, #16]
 801687a:	f993 2000 	ldrsb.w	r2, [r3]
 801687e:	2901      	cmp	r1, #1
 8016880:	9214      	str	r2, [sp, #80]	@ 0x50
 8016882:	f240 839d 	bls.w	8016fc0 <_lite_kernel_nl_softmax_is8os8+0x79c>
 8016886:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8016888:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 801688c:	428a      	cmp	r2, r1
 801688e:	bfb8      	it	lt
 8016890:	460a      	movlt	r2, r1
 8016892:	4298      	cmp	r0, r3
 8016894:	d1f8      	bne.n	8016888 <_lite_kernel_nl_softmax_is8os8+0x64>
 8016896:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8016898:	9214      	str	r2, [sp, #80]	@ 0x50
 801689a:	4413      	add	r3, r2
 801689c:	9306      	str	r3, [sp, #24]
 801689e:	9b03      	ldr	r3, [sp, #12]
 80168a0:	f103 3bff 	add.w	fp, r3, #4294967295
 80168a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80168a6:	9301      	str	r3, [sp, #4]
 80168a8:	2300      	movs	r3, #0
 80168aa:	46de      	mov	lr, fp
 80168ac:	9305      	str	r3, [sp, #20]
 80168ae:	e105      	b.n	8016abc <_lite_kernel_nl_softmax_is8os8+0x298>
 80168b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80168b2:	1a9b      	subs	r3, r3, r2
 80168b4:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80168b6:	4093      	lsls	r3, r2
 80168b8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80168ba:	405a      	eors	r2, r3
 80168bc:	0fd2      	lsrs	r2, r2, #31
 80168be:	2a00      	cmp	r2, #0
 80168c0:	bf0b      	itete	eq
 80168c2:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 80168c6:	4651      	movne	r1, sl
 80168c8:	2200      	moveq	r2, #0
 80168ca:	f04f 32ff 	movne.w	r2, #4294967295
 80168ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80168d2:	f040 80fd 	bne.w	8016ad0 <_lite_kernel_nl_softmax_is8os8+0x2ac>
 80168d6:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80168d8:	4298      	cmp	r0, r3
 80168da:	f040 80f9 	bne.w	8016ad0 <_lite_kernel_nl_softmax_is8os8+0x2ac>
 80168de:	4bc2      	ldr	r3, [pc, #776]	@ (8016be8 <_lite_kernel_nl_softmax_is8os8+0x3c4>)
 80168e0:	2200      	movs	r2, #0
 80168e2:	f04f 35ff 	mov.w	r5, #4294967295
 80168e6:	4fc1      	ldr	r7, [pc, #772]	@ (8016bec <_lite_kernel_nl_softmax_is8os8+0x3c8>)
 80168e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80168ea:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80168ee:	4bc0      	ldr	r3, [pc, #768]	@ (8016bf0 <_lite_kernel_nl_softmax_is8os8+0x3cc>)
 80168f0:	4694      	mov	ip, r2
 80168f2:	462e      	mov	r6, r5
 80168f4:	46ab      	mov	fp, r5
 80168f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80168f8:	46a8      	mov	r8, r5
 80168fa:	4bbe      	ldr	r3, [pc, #760]	@ (8016bf4 <_lite_kernel_nl_softmax_is8os8+0x3d0>)
 80168fc:	4691      	mov	r9, r2
 80168fe:	2001      	movs	r0, #1
 8016900:	9210      	str	r2, [sp, #64]	@ 0x40
 8016902:	e9cd 520d 	strd	r5, r2, [sp, #52]	@ 0x34
 8016906:	e9cd 550b 	strd	r5, r5, [sp, #44]	@ 0x2c
 801690a:	e9cd 5209 	strd	r5, r2, [sp, #36]	@ 0x24
 801690e:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
 8016912:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8016916:	4282      	cmp	r2, r0
 8016918:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801691a:	bfc8      	it	gt
 801691c:	3101      	addgt	r1, #1
 801691e:	f1bc 0f00 	cmp.w	ip, #0
 8016922:	bf0b      	itete	eq
 8016924:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8016928:	4652      	movne	r2, sl
 801692a:	f04f 0c00 	moveq.w	ip, #0
 801692e:	f04f 3cff 	movne.w	ip, #4294967295
 8016932:	1882      	adds	r2, r0, r2
 8016934:	eb43 0c0c 	adc.w	ip, r3, ip
 8016938:	f1bc 0f00 	cmp.w	ip, #0
 801693c:	da05      	bge.n	801694a <_lite_kernel_nl_softmax_is8os8+0x126>
 801693e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016942:	18d3      	adds	r3, r2, r3
 8016944:	461a      	mov	r2, r3
 8016946:	f14c 0c00 	adc.w	ip, ip, #0
 801694a:	0fd2      	lsrs	r2, r2, #31
 801694c:	48aa      	ldr	r0, [pc, #680]	@ (8016bf8 <_lite_kernel_nl_softmax_is8os8+0x3d4>)
 801694e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8016952:	440a      	add	r2, r1
 8016954:	0fd3      	lsrs	r3, r2, #31
 8016956:	2b00      	cmp	r3, #0
 8016958:	bf0b      	itete	eq
 801695a:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 801695e:	4653      	movne	r3, sl
 8016960:	2100      	moveq	r1, #0
 8016962:	f04f 31ff 	movne.w	r1, #4294967295
 8016966:	fbc2 3100 	smlal	r3, r1, r2, r0
 801696a:	2900      	cmp	r1, #0
 801696c:	da05      	bge.n	801697a <_lite_kernel_nl_softmax_is8os8+0x156>
 801696e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016972:	189a      	adds	r2, r3, r2
 8016974:	4613      	mov	r3, r2
 8016976:	f141 0100 	adc.w	r1, r1, #0
 801697a:	0fdb      	lsrs	r3, r3, #31
 801697c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801697e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8016982:	441a      	add	r2, r3
 8016984:	07d4      	lsls	r4, r2, #31
 8016986:	ea4f 0362 	mov.w	r3, r2, asr #1
 801698a:	d502      	bpl.n	8016992 <_lite_kernel_nl_softmax_is8os8+0x16e>
 801698c:	2b00      	cmp	r3, #0
 801698e:	bfa8      	it	ge
 8016990:	3301      	addge	r3, #1
 8016992:	443b      	add	r3, r7
 8016994:	4899      	ldr	r0, [pc, #612]	@ (8016bfc <_lite_kernel_nl_softmax_is8os8+0x3d8>)
 8016996:	0fda      	lsrs	r2, r3, #31
 8016998:	2a00      	cmp	r2, #0
 801699a:	bf0b      	itete	eq
 801699c:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 80169a0:	4652      	movne	r2, sl
 80169a2:	2100      	moveq	r1, #0
 80169a4:	f04f 31ff 	movne.w	r1, #4294967295
 80169a8:	fbc3 2100 	smlal	r2, r1, r3, r0
 80169ac:	2900      	cmp	r1, #0
 80169ae:	da05      	bge.n	80169bc <_lite_kernel_nl_softmax_is8os8+0x198>
 80169b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80169b4:	18d3      	adds	r3, r2, r3
 80169b6:	461a      	mov	r2, r3
 80169b8:	f141 0100 	adc.w	r1, r1, #0
 80169bc:	0fd2      	lsrs	r2, r2, #31
 80169be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80169c2:	488f      	ldr	r0, [pc, #572]	@ (8016c00 <_lite_kernel_nl_softmax_is8os8+0x3dc>)
 80169c4:	f04f 0cf2 	mov.w	ip, #242	@ 0xf2
 80169c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80169cc:	2100      	movs	r1, #0
 80169ce:	461f      	mov	r7, r3
 80169d0:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 80169d4:	460c      	mov	r4, r1
 80169d6:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 80169da:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 80169de:	fbc2 7400 	smlal	r7, r4, r2, r0
 80169e2:	0fff      	lsrs	r7, r7, #31
 80169e4:	ea08 0802 	and.w	r8, r8, r2
 80169e8:	4886      	ldr	r0, [pc, #536]	@ (8016c04 <_lite_kernel_nl_softmax_is8os8+0x3e0>)
 80169ea:	ea47 0744 	orr.w	r7, r7, r4, lsl #1
 80169ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80169f0:	461a      	mov	r2, r3
 80169f2:	403c      	ands	r4, r7
 80169f4:	460f      	mov	r7, r1
 80169f6:	ea88 0404 	eor.w	r4, r8, r4
 80169fa:	fbc4 2700 	smlal	r2, r7, r4, r0
 80169fe:	0fd2      	lsrs	r2, r2, #31
 8016a00:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016a02:	4026      	ands	r6, r4
 8016a04:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8016a08:	460c      	mov	r4, r1
 8016a0a:	4010      	ands	r0, r2
 8016a0c:	461a      	mov	r2, r3
 8016a0e:	4070      	eors	r0, r6
 8016a10:	4e7d      	ldr	r6, [pc, #500]	@ (8016c08 <_lite_kernel_nl_softmax_is8os8+0x3e4>)
 8016a12:	fbc0 2406 	smlal	r2, r4, r0, r6
 8016a16:	0fd2      	lsrs	r2, r2, #31
 8016a18:	ea0b 0b00 	and.w	fp, fp, r0
 8016a1c:	4e7b      	ldr	r6, [pc, #492]	@ (8016c0c <_lite_kernel_nl_softmax_is8os8+0x3e8>)
 8016a1e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8016a22:	460c      	mov	r4, r1
 8016a24:	ea09 0902 	and.w	r9, r9, r2
 8016a28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016a2a:	ea8b 0909 	eor.w	r9, fp, r9
 8016a2e:	ea02 0009 	and.w	r0, r2, r9
 8016a32:	461a      	mov	r2, r3
 8016a34:	fbc9 2406 	smlal	r2, r4, r9, r6
 8016a38:	0fd2      	lsrs	r2, r2, #31
 8016a3a:	4e75      	ldr	r6, [pc, #468]	@ (8016c10 <_lite_kernel_nl_softmax_is8os8+0x3ec>)
 8016a3c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8016a40:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8016a42:	4014      	ands	r4, r2
 8016a44:	4622      	mov	r2, r4
 8016a46:	460c      	mov	r4, r1
 8016a48:	4042      	eors	r2, r0
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	fbc2 0406 	smlal	r0, r4, r2, r6
 8016a50:	0fc0      	lsrs	r0, r0, #31
 8016a52:	4015      	ands	r5, r2
 8016a54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016a56:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
 8016a5a:	4e6e      	ldr	r6, [pc, #440]	@ (8016c14 <_lite_kernel_nl_softmax_is8os8+0x3f0>)
 8016a5c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016a5e:	4002      	ands	r2, r0
 8016a60:	4618      	mov	r0, r3
 8016a62:	406a      	eors	r2, r5
 8016a64:	460d      	mov	r5, r1
 8016a66:	fbc2 0506 	smlal	r0, r5, r2, r6
 8016a6a:	0fc0      	lsrs	r0, r0, #31
 8016a6c:	4014      	ands	r4, r2
 8016a6e:	9a08      	ldr	r2, [sp, #32]
 8016a70:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8016a74:	4002      	ands	r2, r0
 8016a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016a78:	4062      	eors	r2, r4
 8016a7a:	fbc2 310c 	smlal	r3, r1, r2, ip
 8016a7e:	0fdb      	lsrs	r3, r3, #31
 8016a80:	4010      	ands	r0, r2
 8016a82:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8016a86:	9907      	ldr	r1, [sp, #28]
 8016a88:	4602      	mov	r2, r0
 8016a8a:	4019      	ands	r1, r3
 8016a8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016a8e:	404a      	eors	r2, r1
 8016a90:	9905      	ldr	r1, [sp, #20]
 8016a92:	401a      	ands	r2, r3
 8016a94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016a96:	405a      	eors	r2, r3
 8016a98:	1313      	asrs	r3, r2, #12
 8016a9a:	0510      	lsls	r0, r2, #20
 8016a9c:	bf48      	it	mi
 8016a9e:	3301      	addmi	r3, #1
 8016aa0:	4419      	add	r1, r3
 8016aa2:	9105      	str	r1, [sp, #20]
 8016aa4:	9b01      	ldr	r3, [sp, #4]
 8016aa6:	f843 2f04 	str.w	r2, [r3, #4]!
 8016aaa:	9301      	str	r3, [sp, #4]
 8016aac:	9b02      	ldr	r3, [sp, #8]
 8016aae:	9a03      	ldr	r2, [sp, #12]
 8016ab0:	3302      	adds	r3, #2
 8016ab2:	1a9b      	subs	r3, r3, r2
 8016ab4:	9a04      	ldr	r2, [sp, #16]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	f240 80b0 	bls.w	8016c1c <_lite_kernel_nl_softmax_is8os8+0x3f8>
 8016abc:	9a06      	ldr	r2, [sp, #24]
 8016abe:	f8cd e008 	str.w	lr, [sp, #8]
 8016ac2:	f91e 3f01 	ldrsb.w	r3, [lr, #1]!
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	f77f aef2 	ble.w	80168b0 <_lite_kernel_nl_softmax_is8os8+0x8c>
 8016acc:	2200      	movs	r2, #0
 8016ace:	e7e9      	b.n	8016aa4 <_lite_kernel_nl_softmax_is8os8+0x280>
 8016ad0:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8016ad2:	fbc3 1200 	smlal	r1, r2, r3, r0
 8016ad6:	2a00      	cmp	r2, #0
 8016ad8:	da05      	bge.n	8016ae6 <_lite_kernel_nl_softmax_is8os8+0x2c2>
 8016ada:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016ade:	18cb      	adds	r3, r1, r3
 8016ae0:	4619      	mov	r1, r3
 8016ae2:	f142 0200 	adc.w	r2, r2, #0
 8016ae6:	0fc9      	lsrs	r1, r1, #31
 8016ae8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016aec:	2500      	movs	r5, #0
 8016aee:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8016af2:	f041 467f 	orr.w	r6, r1, #4278190080	@ 0xff000000
 8016af6:	0172      	lsls	r2, r6, #5
 8016af8:	1a76      	subs	r6, r6, r1
 8016afa:	f102 5780 	add.w	r7, r2, #268435456	@ 0x10000000
 8016afe:	fbc7 3507 	smlal	r3, r5, r7, r7
 8016b02:	2d00      	cmp	r5, #0
 8016b04:	da05      	bge.n	8016b12 <_lite_kernel_nl_softmax_is8os8+0x2ee>
 8016b06:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016b0a:	189a      	adds	r2, r3, r2
 8016b0c:	4613      	mov	r3, r2
 8016b0e:	f145 0500 	adc.w	r5, r5, #0
 8016b12:	0fdb      	lsrs	r3, r3, #31
 8016b14:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8016b18:	17ed      	asrs	r5, r5, #31
 8016b1a:	fba3 2003 	umull	r2, r0, r3, r3
 8016b1e:	fb03 f405 	mul.w	r4, r3, r5
 8016b22:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8016b26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016b28:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	da05      	bge.n	8016b3c <_lite_kernel_nl_softmax_is8os8+0x318>
 8016b30:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8016b34:	1914      	adds	r4, r2, r4
 8016b36:	4622      	mov	r2, r4
 8016b38:	f140 0000 	adc.w	r0, r0, #0
 8016b3c:	0fd2      	lsrs	r2, r2, #31
 8016b3e:	fb07 f505 	mul.w	r5, r7, r5
 8016b42:	ea83 0c07 	eor.w	ip, r3, r7
 8016b46:	fab1 f181 	clz	r1, r1
 8016b4a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8016b4e:	f3c6 7b00 	ubfx	fp, r6, #28, #1
 8016b52:	17f8      	asrs	r0, r7, #31
 8016b54:	f3c6 7940 	ubfx	r9, r6, #29, #1
 8016b58:	0949      	lsrs	r1, r1, #5
 8016b5a:	f3c6 6880 	ubfx	r8, r6, #26, #1
 8016b5e:	fb03 5500 	mla	r5, r3, r0, r5
 8016b62:	f3c6 6400 	ubfx	r4, r6, #24, #1
 8016b66:	f3c6 6040 	ubfx	r0, r6, #25, #1
 8016b6a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8016b6e:	9507      	str	r5, [sp, #28]
 8016b70:	f3c6 7580 	ubfx	r5, r6, #30, #1
 8016b74:	9509      	str	r5, [sp, #36]	@ 0x24
 8016b76:	fba7 5303 	umull	r5, r3, r7, r3
 8016b7a:	9513      	str	r5, [sp, #76]	@ 0x4c
 8016b7c:	9d07      	ldr	r5, [sp, #28]
 8016b7e:	442b      	add	r3, r5
 8016b80:	424d      	negs	r5, r1
 8016b82:	3901      	subs	r1, #1
 8016b84:	910d      	str	r1, [sp, #52]	@ 0x34
 8016b86:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
 8016b8a:	f10b 35ff 	add.w	r5, fp, #4294967295
 8016b8e:	9110      	str	r1, [sp, #64]	@ 0x40
 8016b90:	f3c6 61c0 	ubfx	r1, r6, #27, #1
 8016b94:	f346 66c0 	sbfx	r6, r6, #27, #1
 8016b98:	3901      	subs	r1, #1
 8016b9a:	960e      	str	r6, [sp, #56]	@ 0x38
 8016b9c:	f1cb 0600 	rsb	r6, fp, #0
 8016ba0:	f108 3bff 	add.w	fp, r8, #4294967295
 8016ba4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016ba6:	9611      	str	r6, [sp, #68]	@ 0x44
 8016ba8:	f109 36ff 	add.w	r6, r9, #4294967295
 8016bac:	1091      	asrs	r1, r2, #2
 8016bae:	f002 0203 	and.w	r2, r2, #3
 8016bb2:	960c      	str	r6, [sp, #48]	@ 0x30
 8016bb4:	f1c9 0600 	rsb	r6, r9, #0
 8016bb8:	f1c8 0900 	rsb	r9, r8, #0
 8016bbc:	f104 38ff 	add.w	r8, r4, #4294967295
 8016bc0:	9608      	str	r6, [sp, #32]
 8016bc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8016bc6:	f1c0 0000 	rsb	r0, r0, #0
 8016bca:	9012      	str	r0, [sp, #72]	@ 0x48
 8016bcc:	f1c4 0000 	rsb	r0, r4, #0
 8016bd0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016bd2:	900a      	str	r0, [sp, #40]	@ 0x28
 8016bd4:	f104 30ff 	add.w	r0, r4, #4294967295
 8016bd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8016bda:	f1c4 0000 	rsb	r0, r4, #0
 8016bde:	9007      	str	r0, [sp, #28]
 8016be0:	bf54      	ite	pl
 8016be2:	2001      	movpl	r0, #1
 8016be4:	2002      	movmi	r0, #2
 8016be6:	e696      	b.n	8016916 <_lite_kernel_nl_softmax_is8os8+0xf2>
 8016be8:	01fffff8 	.word	0x01fffff8
 8016bec:	0fffffe0 	.word	0x0fffffe0
 8016bf0:	40000100 	.word	0x40000100
 8016bf4:	001fffff 	.word	0x001fffff
 8016bf8:	2aaaaaab 	.word	0x2aaaaaab
 8016bfc:	70f5a894 	.word	0x70f5a894
 8016c00:	63afbe7b 	.word	0x63afbe7b
 8016c04:	4da2cbf2 	.word	0x4da2cbf2
 8016c08:	2f16ac6c 	.word	0x2f16ac6c
 8016c0c:	1152aaa4 	.word	0x1152aaa4
 8016c10:	02582ab7 	.word	0x02582ab7
 8016c14:	000afe11 	.word	0x000afe11
 8016c18:	c0000001 	.word	0xc0000001
 8016c1c:	9b05      	ldr	r3, [sp, #20]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	f000 81d1 	beq.w	8016fc6 <_lite_kernel_nl_softmax_is8os8+0x7a2>
 8016c24:	fab3 f983 	clz	r9, r3
 8016c28:	fa03 f309 	lsl.w	r3, r3, r9
 8016c2c:	f1c9 0823 	rsb	r8, r9, #35	@ 0x23
 8016c30:	f103 4200 	add.w	r2, r3, #2147483648	@ 0x80000000
 8016c34:	17d4      	asrs	r4, r2, #31
 8016c36:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016c3a:	bf08      	it	eq
 8016c3c:	2b00      	cmpeq	r3, #0
 8016c3e:	f000 81c6 	beq.w	8016fce <_lite_kernel_nl_softmax_is8os8+0x7aa>
 8016c42:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8016c46:	4bc2      	ldr	r3, [pc, #776]	@ (8016f50 <_lite_kernel_nl_softmax_is8os8+0x72c>)
 8016c48:	f144 0400 	adc.w	r4, r4, #0
 8016c4c:	0852      	lsrs	r2, r2, #1
 8016c4e:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 8016c52:	1064      	asrs	r4, r4, #1
 8016c54:	4251      	negs	r1, r2
 8016c56:	4616      	mov	r6, r2
 8016c58:	fb03 1104 	mla	r1, r3, r4, r1
 8016c5c:	fba2 5303 	umull	r5, r3, r2, r3
 8016c60:	eb15 050a 	adds.w	r5, r5, sl
 8016c64:	440b      	add	r3, r1
 8016c66:	f163 0300 	sbc.w	r3, r3, #0
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	da05      	bge.n	8016c7a <_lite_kernel_nl_softmax_is8os8+0x456>
 8016c6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016c72:	1869      	adds	r1, r5, r1
 8016c74:	460d      	mov	r5, r1
 8016c76:	f143 0300 	adc.w	r3, r3, #0
 8016c7a:	0fed      	lsrs	r5, r5, #31
 8016c7c:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 8016c80:	f105 375a 	add.w	r7, r5, #1515870810	@ 0x5a5a5a5a
 8016c84:	17f8      	asrs	r0, r7, #31
 8016c86:	fba2 1c07 	umull	r1, ip, r2, r7
 8016c8a:	463b      	mov	r3, r7
 8016c8c:	fb02 fe00 	mul.w	lr, r2, r0
 8016c90:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 8016c94:	fb07 ee04 	mla	lr, r7, r4, lr
 8016c98:	eb4e 0c0c 	adc.w	ip, lr, ip
 8016c9c:	f1bc 0f00 	cmp.w	ip, #0
 8016ca0:	da06      	bge.n	8016cb0 <_lite_kernel_nl_softmax_is8os8+0x48c>
 8016ca2:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8016ca6:	eb11 0e0e 	adds.w	lr, r1, lr
 8016caa:	4671      	mov	r1, lr
 8016cac:	f14c 0c00 	adc.w	ip, ip, #0
 8016cb0:	0fc9      	lsrs	r1, r1, #31
 8016cb2:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 8016cb6:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
 8016cba:	ea81 0c07 	eor.w	ip, r1, r7
 8016cbe:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8016cc2:	f1bc 0f00 	cmp.w	ip, #0
 8016cc6:	bf0b      	itete	eq
 8016cc8:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8016ccc:	46d4      	movne	ip, sl
 8016cce:	f04f 0b00 	moveq.w	fp, #0
 8016cd2:	f04f 3bff 	movne.w	fp, #4294967295
 8016cd6:	fb01 f000 	mul.w	r0, r1, r0
 8016cda:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 8016cde:	fb03 000e 	mla	r0, r3, lr, r0
 8016ce2:	fba1 3103 	umull	r3, r1, r1, r3
 8016ce6:	eb13 030c 	adds.w	r3, r3, ip
 8016cea:	4408      	add	r0, r1
 8016cec:	eb40 000b 	adc.w	r0, r0, fp
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	da05      	bge.n	8016d00 <_lite_kernel_nl_softmax_is8os8+0x4dc>
 8016cf4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016cf8:	1859      	adds	r1, r3, r1
 8016cfa:	460b      	mov	r3, r1
 8016cfc:	f140 0000 	adc.w	r0, r0, #0
 8016d00:	0fdb      	lsrs	r3, r3, #31
 8016d02:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8016d06:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8016d0a:	f340 8123 	ble.w	8016f54 <_lite_kernel_nl_softmax_is8os8+0x730>
 8016d0e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8016d12:	ea86 0301 	eor.w	r3, r6, r1
 8016d16:	17c8      	asrs	r0, r1, #31
 8016d18:	0fdb      	lsrs	r3, r3, #31
 8016d1a:	fb02 f500 	mul.w	r5, r2, r0
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	fb01 5504 	mla	r5, r1, r4, r5
 8016d24:	fba2 3e01 	umull	r3, lr, r2, r1
 8016d28:	bf0b      	itete	eq
 8016d2a:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8016d2e:	4657      	movne	r7, sl
 8016d30:	f04f 0c00 	moveq.w	ip, #0
 8016d34:	f04f 3cff 	movne.w	ip, #4294967295
 8016d38:	4475      	add	r5, lr
 8016d3a:	19db      	adds	r3, r3, r7
 8016d3c:	eb45 050c 	adc.w	r5, r5, ip
 8016d40:	2d00      	cmp	r5, #0
 8016d42:	da05      	bge.n	8016d50 <_lite_kernel_nl_softmax_is8os8+0x52c>
 8016d44:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016d48:	19df      	adds	r7, r3, r7
 8016d4a:	463b      	mov	r3, r7
 8016d4c:	f145 0500 	adc.w	r5, r5, #0
 8016d50:	0fdb      	lsrs	r3, r3, #31
 8016d52:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8016d56:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8016d5a:	ea81 0503 	eor.w	r5, r1, r3
 8016d5e:	0fed      	lsrs	r5, r5, #31
 8016d60:	2d00      	cmp	r5, #0
 8016d62:	bf0b      	itete	eq
 8016d64:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 8016d68:	4655      	movne	r5, sl
 8016d6a:	2700      	moveq	r7, #0
 8016d6c:	f04f 37ff 	movne.w	r7, #4294967295
 8016d70:	fb03 f000 	mul.w	r0, r3, r0
 8016d74:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8016d78:	fb01 000c 	mla	r0, r1, ip, r0
 8016d7c:	fba3 3c01 	umull	r3, ip, r3, r1
 8016d80:	195b      	adds	r3, r3, r5
 8016d82:	4460      	add	r0, ip
 8016d84:	eb40 0007 	adc.w	r0, r0, r7
 8016d88:	2800      	cmp	r0, #0
 8016d8a:	da05      	bge.n	8016d98 <_lite_kernel_nl_softmax_is8os8+0x574>
 8016d8c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8016d90:	195d      	adds	r5, r3, r5
 8016d92:	462b      	mov	r3, r5
 8016d94:	f140 0000 	adc.w	r0, r0, #0
 8016d98:	0fdb      	lsrs	r3, r3, #31
 8016d9a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8016d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016da2:	f2c0 8105 	blt.w	8016fb0 <_lite_kernel_nl_softmax_is8os8+0x78c>
 8016da6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016daa:	440b      	add	r3, r1
 8016dac:	405e      	eors	r6, r3
 8016dae:	fb03 f404 	mul.w	r4, r3, r4
 8016db2:	17d8      	asrs	r0, r3, #31
 8016db4:	0ff6      	lsrs	r6, r6, #31
 8016db6:	fb02 4000 	mla	r0, r2, r0, r4
 8016dba:	2e00      	cmp	r6, #0
 8016dbc:	fba3 2102 	umull	r2, r1, r3, r2
 8016dc0:	4408      	add	r0, r1
 8016dc2:	bf0b      	itete	eq
 8016dc4:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8016dc8:	4651      	movne	r1, sl
 8016dca:	2400      	moveq	r4, #0
 8016dcc:	f04f 34ff 	movne.w	r4, #4294967295
 8016dd0:	1851      	adds	r1, r2, r1
 8016dd2:	eb40 0404 	adc.w	r4, r0, r4
 8016dd6:	2c00      	cmp	r4, #0
 8016dd8:	da05      	bge.n	8016de6 <_lite_kernel_nl_softmax_is8os8+0x5c2>
 8016dda:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016dde:	188a      	adds	r2, r1, r2
 8016de0:	4611      	mov	r1, r2
 8016de2:	f144 0400 	adc.w	r4, r4, #0
 8016de6:	0fc9      	lsrs	r1, r1, #31
 8016de8:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8016dec:	f1c1 5200 	rsb	r2, r1, #536870912	@ 0x20000000
 8016df0:	ea83 0102 	eor.w	r1, r3, r2
 8016df4:	0fc9      	lsrs	r1, r1, #31
 8016df6:	2900      	cmp	r1, #0
 8016df8:	bf0b      	itete	eq
 8016dfa:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8016dfe:	4651      	movne	r1, sl
 8016e00:	2000      	moveq	r0, #0
 8016e02:	f04f 30ff 	movne.w	r0, #4294967295
 8016e06:	4293      	cmp	r3, r2
 8016e08:	d107      	bne.n	8016e1a <_lite_kernel_nl_softmax_is8os8+0x5f6>
 8016e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016e0e:	d104      	bne.n	8016e1a <_lite_kernel_nl_softmax_is8os8+0x5f6>
 8016e10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016e14:	4419      	add	r1, r3
 8016e16:	0049      	lsls	r1, r1, #1
 8016e18:	e016      	b.n	8016e48 <_lite_kernel_nl_softmax_is8os8+0x624>
 8016e1a:	fbc3 1002 	smlal	r1, r0, r3, r2
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	da05      	bge.n	8016e2e <_lite_kernel_nl_softmax_is8os8+0x60a>
 8016e22:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016e26:	188a      	adds	r2, r1, r2
 8016e28:	4611      	mov	r1, r2
 8016e2a:	f140 0000 	adc.w	r0, r0, #0
 8016e2e:	0fc9      	lsrs	r1, r1, #31
 8016e30:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
 8016e34:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8016e38:	db7d      	blt.n	8016f36 <_lite_kernel_nl_softmax_is8os8+0x712>
 8016e3a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016e3e:	1899      	adds	r1, r3, r2
 8016e40:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8016e44:	dbe7      	blt.n	8016e16 <_lite_kernel_nl_softmax_is8os8+0x5f2>
 8016e46:	4611      	mov	r1, r2
 8016e48:	f1b8 0f1f 	cmp.w	r8, #31
 8016e4c:	dd04      	ble.n	8016e58 <_lite_kernel_nl_softmax_is8os8+0x634>
 8016e4e:	f1c9 0304 	rsb	r3, r9, #4
 8016e52:	f04f 081f 	mov.w	r8, #31
 8016e56:	4119      	asrs	r1, r3
 8016e58:	9b04      	ldr	r3, [sp, #16]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d053      	beq.n	8016f06 <_lite_kernel_nl_softmax_is8os8+0x6e2>
 8016e5e:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8016e62:	2501      	movs	r5, #1
 8016e64:	f1a1 4c00 	sub.w	ip, r1, #2147483648	@ 0x80000000
 8016e68:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8016e6a:	fa46 f308 	asr.w	r3, r6, r8
 8016e6e:	fa05 f508 	lsl.w	r5, r5, r8
 8016e72:	fabc fc8c 	clz	ip, ip
 8016e76:	3d01      	subs	r5, #1
 8016e78:	9301      	str	r3, [sp, #4]
 8016e7a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016e7e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e80:	ea05 0906 	and.w	r9, r5, r6
 8016e84:	106f      	asrs	r7, r5, #1
 8016e86:	1e5c      	subs	r4, r3, #1
 8016e88:	4663      	mov	r3, ip
 8016e8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e8e:	46ac      	mov	ip, r5
 8016e90:	f107 0e01 	add.w	lr, r7, #1
 8016e94:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
 8016e98:	461d      	mov	r5, r3
 8016e9a:	e00c      	b.n	8016eb6 <_lite_kernel_nl_softmax_is8os8+0x692>
 8016e9c:	b1dd      	cbz	r5, 8016ed6 <_lite_kernel_nl_softmax_is8os8+0x6b2>
 8016e9e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8016ea2:	4297      	cmp	r7, r2
 8016ea4:	da00      	bge.n	8016ea8 <_lite_kernel_nl_softmax_is8os8+0x684>
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	2bfe      	cmp	r3, #254	@ 0xfe
 8016eaa:	dd3f      	ble.n	8016f2c <_lite_kernel_nl_softmax_is8os8+0x708>
 8016eac:	237f      	movs	r3, #127	@ 0x7f
 8016eae:	4548      	cmp	r0, r9
 8016eb0:	f804 3f01 	strb.w	r3, [r4, #1]!
 8016eb4:	d027      	beq.n	8016f06 <_lite_kernel_nl_softmax_is8os8+0x6e2>
 8016eb6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8016eba:	ea81 0302 	eor.w	r3, r1, r2
 8016ebe:	0fdb      	lsrs	r3, r3, #31
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	bf0b      	itete	eq
 8016ec4:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8016ec8:	4653      	movne	r3, sl
 8016eca:	f04f 0b00 	moveq.w	fp, #0
 8016ece:	f04f 3bff 	movne.w	fp, #4294967295
 8016ed2:	4291      	cmp	r1, r2
 8016ed4:	d0e2      	beq.n	8016e9c <_lite_kernel_nl_softmax_is8os8+0x678>
 8016ed6:	fbc1 3b02 	smlal	r3, fp, r1, r2
 8016eda:	f1bb 0f00 	cmp.w	fp, #0
 8016ede:	da02      	bge.n	8016ee6 <_lite_kernel_nl_softmax_is8os8+0x6c2>
 8016ee0:	199b      	adds	r3, r3, r6
 8016ee2:	f14b 0b00 	adc.w	fp, fp, #0
 8016ee6:	0fdb      	lsrs	r3, r3, #31
 8016ee8:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 8016eec:	ea0c 0203 	and.w	r2, ip, r3
 8016ef0:	fa53 f308 	asrs.w	r3, r3, r8
 8016ef4:	d5d5      	bpl.n	8016ea2 <_lite_kernel_nl_softmax_is8os8+0x67e>
 8016ef6:	4596      	cmp	lr, r2
 8016ef8:	dbd5      	blt.n	8016ea6 <_lite_kernel_nl_softmax_is8os8+0x682>
 8016efa:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8016efe:	4548      	cmp	r0, r9
 8016f00:	f804 3f01 	strb.w	r3, [r4, #1]!
 8016f04:	d1d7      	bne.n	8016eb6 <_lite_kernel_nl_softmax_is8os8+0x692>
 8016f06:	9b03      	ldr	r3, [sp, #12]
 8016f08:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016f0a:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8016f0c:	4413      	add	r3, r2
 8016f0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8016f10:	440a      	add	r2, r1
 8016f12:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8016f14:	9303      	str	r3, [sp, #12]
 8016f16:	9215      	str	r2, [sp, #84]	@ 0x54
 8016f18:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016f1a:	440a      	add	r2, r1
 8016f1c:	9216      	str	r2, [sp, #88]	@ 0x58
 8016f1e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016f20:	429a      	cmp	r2, r3
 8016f22:	f63f aca8 	bhi.w	8016876 <_lite_kernel_nl_softmax_is8os8+0x52>
 8016f26:	b01b      	add	sp, #108	@ 0x6c
 8016f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	dde4      	ble.n	8016efa <_lite_kernel_nl_softmax_is8os8+0x6d6>
 8016f30:	3b80      	subs	r3, #128	@ 0x80
 8016f32:	b25b      	sxtb	r3, r3
 8016f34:	e7bb      	b.n	8016eae <_lite_kernel_nl_softmax_is8os8+0x68a>
 8016f36:	f1b1 4f60 	cmp.w	r1, #3758096384	@ 0xe0000000
 8016f3a:	f300 8457 	bgt.w	80177ec <_lite_kernel_nl_softmax_is8os8+0xfc8>
 8016f3e:	f103 4200 	add.w	r2, r3, #2147483648	@ 0x80000000
 8016f42:	0059      	lsls	r1, r3, #1
 8016f44:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8016f48:	bfd8      	it	le
 8016f4a:	f04f 4100 	movle.w	r1, #2147483648	@ 0x80000000
 8016f4e:	e77b      	b.n	8016e48 <_lite_kernel_nl_softmax_is8os8+0x624>
 8016f50:	c3c3c3c4 	.word	0xc3c3c3c4
 8016f54:	4933      	ldr	r1, [pc, #204]	@ (8017024 <_lite_kernel_nl_softmax_is8os8+0x800>)
 8016f56:	4429      	add	r1, r5
 8016f58:	ea96 0f01 	teq	r6, r1
 8016f5c:	d545      	bpl.n	8016fea <_lite_kernel_nl_softmax_is8os8+0x7c6>
 8016f5e:	17cb      	asrs	r3, r1, #31
 8016f60:	fb01 f004 	mul.w	r0, r1, r4
 8016f64:	fb02 0003 	mla	r0, r2, r3, r0
 8016f68:	fba1 3502 	umull	r3, r5, r1, r2
 8016f6c:	eb13 030a 	adds.w	r3, r3, sl
 8016f70:	4405      	add	r5, r0
 8016f72:	f165 0500 	sbc.w	r5, r5, #0
 8016f76:	2d00      	cmp	r5, #0
 8016f78:	da05      	bge.n	8016f86 <_lite_kernel_nl_softmax_is8os8+0x762>
 8016f7a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016f7e:	1818      	adds	r0, r3, r0
 8016f80:	4603      	mov	r3, r0
 8016f82:	f145 0500 	adc.w	r5, r5, #0
 8016f86:	0fdb      	lsrs	r3, r3, #31
 8016f88:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8016f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8016f90:	f1c3 5000 	rsb	r0, r3, #536870912	@ 0x20000000
 8016f94:	4653      	mov	r3, sl
 8016f96:	fbc1 3500 	smlal	r3, r5, r1, r0
 8016f9a:	2d00      	cmp	r5, #0
 8016f9c:	da05      	bge.n	8016faa <_lite_kernel_nl_softmax_is8os8+0x786>
 8016f9e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016fa2:	1818      	adds	r0, r3, r0
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	f145 0500 	adc.w	r5, r5, #0
 8016faa:	0fdb      	lsrs	r3, r3, #31
 8016fac:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8016fb0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8016fb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016fb8:	bfd8      	it	le
 8016fba:	f04f 4300 	movle.w	r3, #2147483648	@ 0x80000000
 8016fbe:	e6f4      	b.n	8016daa <_lite_kernel_nl_softmax_is8os8+0x586>
 8016fc0:	2900      	cmp	r1, #0
 8016fc2:	f040 8427 	bne.w	8017814 <_lite_kernel_nl_softmax_is8os8+0xff0>
 8016fc6:	f04f 0803 	mov.w	r8, #3
 8016fca:	f04f 0920 	mov.w	r9, #32
 8016fce:	f04f 36ff 	mov.w	r6, #4294967295
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	f04f 335a 	mov.w	r3, #1515870810	@ 0x5a5a5a5a
 8016fd8:	4913      	ldr	r1, [pc, #76]	@ (8017028 <_lite_kernel_nl_softmax_is8os8+0x804>)
 8016fda:	4605      	mov	r5, r0
 8016fdc:	4632      	mov	r2, r6
 8016fde:	461f      	mov	r7, r3
 8016fe0:	4634      	mov	r4, r6
 8016fe2:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8016fe6:	4683      	mov	fp, r0
 8016fe8:	e675      	b.n	8016cd6 <_lite_kernel_nl_softmax_is8os8+0x4b2>
 8016fea:	17c8      	asrs	r0, r1, #31
 8016fec:	fba2 3501 	umull	r3, r5, r2, r1
 8016ff0:	fb02 f700 	mul.w	r7, r2, r0
 8016ff4:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 8016ff8:	fb01 7704 	mla	r7, r1, r4, r7
 8016ffc:	eb47 0505 	adc.w	r5, r7, r5
 8017000:	2d00      	cmp	r5, #0
 8017002:	da05      	bge.n	8017010 <_lite_kernel_nl_softmax_is8os8+0x7ec>
 8017004:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017008:	19df      	adds	r7, r3, r7
 801700a:	463b      	mov	r3, r7
 801700c:	f145 0500 	adc.w	r5, r5, #0
 8017010:	0fdb      	lsrs	r3, r3, #31
 8017012:	f04f 37ff 	mov.w	r7, #4294967295
 8017016:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 801701a:	4655      	mov	r5, sl
 801701c:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8017020:	e6a6      	b.n	8016d70 <_lite_kernel_nl_softmax_is8os8+0x54c>
 8017022:	bf00      	nop
 8017024:	da5a5a5a 	.word	0xda5a5a5a
 8017028:	20000001 	.word	0x20000001
 801702c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801702e:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 8017032:	f1c3 0300 	rsb	r3, r3, #0
 8017036:	bfb4      	ite	lt
 8017038:	f44f 7880 	movlt.w	r8, #256	@ 0x100
 801703c:	4698      	movge	r8, r3
 801703e:	f1b8 0f00 	cmp.w	r8, #0
 8017042:	f340 8148 	ble.w	80172d6 <_lite_kernel_nl_softmax_is8os8+0xab2>
 8017046:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017048:	f04f 0a00 	mov.w	sl, #0
 801704c:	f8df 9478 	ldr.w	r9, [pc, #1144]	@ 80174c8 <_lite_kernel_nl_softmax_is8os8+0xca4>
 8017050:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8017054:	f1a3 0b04 	sub.w	fp, r3, #4
 8017058:	f8cd 8008 	str.w	r8, [sp, #8]
 801705c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801705e:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8017060:	fa0a f203 	lsl.w	r2, sl, r3
 8017064:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8017066:	4252      	negs	r2, r2
 8017068:	4053      	eors	r3, r2
 801706a:	0fdb      	lsrs	r3, r3, #31
 801706c:	2b00      	cmp	r3, #0
 801706e:	bf0b      	itete	eq
 8017070:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8017074:	464b      	movne	r3, r9
 8017076:	2100      	moveq	r1, #0
 8017078:	f04f 31ff 	movne.w	r1, #4294967295
 801707c:	fbc0 3102 	smlal	r3, r1, r0, r2
 8017080:	2900      	cmp	r1, #0
 8017082:	da04      	bge.n	801708e <_lite_kernel_nl_softmax_is8os8+0x86a>
 8017084:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017088:	189b      	adds	r3, r3, r2
 801708a:	f141 0100 	adc.w	r1, r1, #0
 801708e:	0fdb      	lsrs	r3, r3, #31
 8017090:	f04f 0c00 	mov.w	ip, #0
 8017094:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8017098:	4621      	mov	r1, r4
 801709a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801709e:	9301      	str	r3, [sp, #4]
 80170a0:	0155      	lsls	r5, r2, #5
 80170a2:	1ad2      	subs	r2, r2, r3
 80170a4:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80170a8:	fbc5 1c05 	smlal	r1, ip, r5, r5
 80170ac:	f1bc 0f00 	cmp.w	ip, #0
 80170b0:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80170b4:	da04      	bge.n	80170c0 <_lite_kernel_nl_softmax_is8os8+0x89c>
 80170b6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80170ba:	1809      	adds	r1, r1, r0
 80170bc:	f14c 0c00 	adc.w	ip, ip, #0
 80170c0:	0fc9      	lsrs	r1, r1, #31
 80170c2:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 80170c6:	ea4f 7cec 	mov.w	ip, ip, asr #31
 80170ca:	fba1 0701 	umull	r0, r7, r1, r1
 80170ce:	fb01 fe0c 	mul.w	lr, r1, ip
 80170d2:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 80170d6:	eb47 074e 	adc.w	r7, r7, lr, lsl #1
 80170da:	2f00      	cmp	r7, #0
 80170dc:	da06      	bge.n	80170ec <_lite_kernel_nl_softmax_is8os8+0x8c8>
 80170de:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 80170e2:	eb10 0e0e 	adds.w	lr, r0, lr
 80170e6:	4670      	mov	r0, lr
 80170e8:	f147 0700 	adc.w	r7, r7, #0
 80170ec:	0fc0      	lsrs	r0, r0, #31
 80170ee:	fb01 f606 	mul.w	r6, r1, r6
 80170f2:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 80170f6:	fb05 660c 	mla	r6, r5, ip, r6
 80170fa:	1087      	asrs	r7, r0, #2
 80170fc:	f000 0003 	and.w	r0, r0, #3
 8017100:	bf54      	ite	pl
 8017102:	f04f 0e01 	movpl.w	lr, #1
 8017106:	f04f 0e02 	movmi.w	lr, #2
 801710a:	4586      	cmp	lr, r0
 801710c:	ea81 0005 	eor.w	r0, r1, r5
 8017110:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017114:	bfb8      	it	lt
 8017116:	3701      	addlt	r7, #1
 8017118:	2800      	cmp	r0, #0
 801711a:	fba1 0805 	umull	r0, r8, r1, r5
 801711e:	bf0b      	itete	eq
 8017120:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8017124:	46cc      	movne	ip, r9
 8017126:	f04f 0e00 	moveq.w	lr, #0
 801712a:	f04f 3eff 	movne.w	lr, #4294967295
 801712e:	4446      	add	r6, r8
 8017130:	eb10 000c 	adds.w	r0, r0, ip
 8017134:	eb46 060e 	adc.w	r6, r6, lr
 8017138:	2e00      	cmp	r6, #0
 801713a:	da06      	bge.n	801714a <_lite_kernel_nl_softmax_is8os8+0x926>
 801713c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8017140:	eb10 0c0c 	adds.w	ip, r0, ip
 8017144:	4660      	mov	r0, ip
 8017146:	f146 0600 	adc.w	r6, r6, #0
 801714a:	0fc0      	lsrs	r0, r0, #31
 801714c:	4bd5      	ldr	r3, [pc, #852]	@ (80174a4 <_lite_kernel_nl_softmax_is8os8+0xc80>)
 801714e:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 8017152:	4438      	add	r0, r7
 8017154:	0fc6      	lsrs	r6, r0, #31
 8017156:	2e00      	cmp	r6, #0
 8017158:	bf0b      	itete	eq
 801715a:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 801715e:	464f      	movne	r7, r9
 8017160:	2600      	moveq	r6, #0
 8017162:	f04f 36ff 	movne.w	r6, #4294967295
 8017166:	fbc0 7603 	smlal	r7, r6, r0, r3
 801716a:	2e00      	cmp	r6, #0
 801716c:	da05      	bge.n	801717a <_lite_kernel_nl_softmax_is8os8+0x956>
 801716e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017172:	1838      	adds	r0, r7, r0
 8017174:	4607      	mov	r7, r0
 8017176:	f146 0600 	adc.w	r6, r6, #0
 801717a:	0ff8      	lsrs	r0, r7, #31
 801717c:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 8017180:	4401      	add	r1, r0
 8017182:	07ce      	lsls	r6, r1, #31
 8017184:	ea4f 0061 	mov.w	r0, r1, asr #1
 8017188:	d502      	bpl.n	8017190 <_lite_kernel_nl_softmax_is8os8+0x96c>
 801718a:	2800      	cmp	r0, #0
 801718c:	bfa8      	it	ge
 801718e:	3001      	addge	r0, #1
 8017190:	1941      	adds	r1, r0, r5
 8017192:	4bc5      	ldr	r3, [pc, #788]	@ (80174a8 <_lite_kernel_nl_softmax_is8os8+0xc84>)
 8017194:	0fc8      	lsrs	r0, r1, #31
 8017196:	2800      	cmp	r0, #0
 8017198:	bf0b      	itete	eq
 801719a:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 801719e:	4648      	movne	r0, r9
 80171a0:	2500      	moveq	r5, #0
 80171a2:	f04f 35ff 	movne.w	r5, #4294967295
 80171a6:	fbc1 0503 	smlal	r0, r5, r1, r3
 80171aa:	2d00      	cmp	r5, #0
 80171ac:	da04      	bge.n	80171b8 <_lite_kernel_nl_softmax_is8os8+0x994>
 80171ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80171b2:	1840      	adds	r0, r0, r1
 80171b4:	f145 0500 	adc.w	r5, r5, #0
 80171b8:	0fc0      	lsrs	r0, r0, #31
 80171ba:	2100      	movs	r1, #0
 80171bc:	4ebb      	ldr	r6, [pc, #748]	@ (80174ac <_lite_kernel_nl_softmax_is8os8+0xc88>)
 80171be:	46a4      	mov	ip, r4
 80171c0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 80171c4:	460f      	mov	r7, r1
 80171c6:	f3c2 6500 	ubfx	r5, r2, #24, #1
 80171ca:	9b01      	ldr	r3, [sp, #4]
 80171cc:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 80171d0:	f10a 0a01 	add.w	sl, sl, #1
 80171d4:	3d01      	subs	r5, #1
 80171d6:	fab3 f383 	clz	r3, r3
 80171da:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 80171de:	095b      	lsrs	r3, r3, #5
 80171e0:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 80171e4:	fbc0 c706 	smlal	ip, r7, r0, r6
 80171e8:	4666      	mov	r6, ip
 80171ea:	4005      	ands	r5, r0
 80171ec:	f342 6000 	sbfx	r0, r2, #24, #1
 80171f0:	0ff6      	lsrs	r6, r6, #31
 80171f2:	46a4      	mov	ip, r4
 80171f4:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 80171f8:	460f      	mov	r7, r1
 80171fa:	4030      	ands	r0, r6
 80171fc:	4eac      	ldr	r6, [pc, #688]	@ (80174b0 <_lite_kernel_nl_softmax_is8os8+0xc8c>)
 80171fe:	4068      	eors	r0, r5
 8017200:	f3c2 6540 	ubfx	r5, r2, #25, #1
 8017204:	fbc0 c706 	smlal	ip, r7, r0, r6
 8017208:	4666      	mov	r6, ip
 801720a:	3d01      	subs	r5, #1
 801720c:	46a4      	mov	ip, r4
 801720e:	0ff6      	lsrs	r6, r6, #31
 8017210:	4005      	ands	r5, r0
 8017212:	f342 6040 	sbfx	r0, r2, #25, #1
 8017216:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 801721a:	460f      	mov	r7, r1
 801721c:	4030      	ands	r0, r6
 801721e:	4ea5      	ldr	r6, [pc, #660]	@ (80174b4 <_lite_kernel_nl_softmax_is8os8+0xc90>)
 8017220:	4068      	eors	r0, r5
 8017222:	f3c2 6580 	ubfx	r5, r2, #26, #1
 8017226:	fbc0 c706 	smlal	ip, r7, r0, r6
 801722a:	4666      	mov	r6, ip
 801722c:	3d01      	subs	r5, #1
 801722e:	468c      	mov	ip, r1
 8017230:	0ff6      	lsrs	r6, r6, #31
 8017232:	4005      	ands	r5, r0
 8017234:	f342 6080 	sbfx	r0, r2, #26, #1
 8017238:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 801723c:	4627      	mov	r7, r4
 801723e:	4030      	ands	r0, r6
 8017240:	f3c2 66c0 	ubfx	r6, r2, #27, #1
 8017244:	4068      	eors	r0, r5
 8017246:	3e01      	subs	r6, #1
 8017248:	4d9b      	ldr	r5, [pc, #620]	@ (80174b8 <_lite_kernel_nl_softmax_is8os8+0xc94>)
 801724a:	4006      	ands	r6, r0
 801724c:	fbc0 7c05 	smlal	r7, ip, r0, r5
 8017250:	0ff8      	lsrs	r0, r7, #31
 8017252:	f342 65c0 	sbfx	r5, r2, #27, #1
 8017256:	4627      	mov	r7, r4
 8017258:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 801725c:	468c      	mov	ip, r1
 801725e:	4005      	ands	r5, r0
 8017260:	f3c2 7000 	ubfx	r0, r2, #28, #1
 8017264:	4075      	eors	r5, r6
 8017266:	3801      	subs	r0, #1
 8017268:	4e94      	ldr	r6, [pc, #592]	@ (80174bc <_lite_kernel_nl_softmax_is8os8+0xc98>)
 801726a:	4028      	ands	r0, r5
 801726c:	fbc5 7c06 	smlal	r7, ip, r5, r6
 8017270:	0ffd      	lsrs	r5, r7, #31
 8017272:	f342 7600 	sbfx	r6, r2, #28, #1
 8017276:	4f92      	ldr	r7, [pc, #584]	@ (80174c0 <_lite_kernel_nl_softmax_is8os8+0xc9c>)
 8017278:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 801727c:	468c      	mov	ip, r1
 801727e:	4035      	ands	r5, r6
 8017280:	4626      	mov	r6, r4
 8017282:	4068      	eors	r0, r5
 8017284:	f3c2 7540 	ubfx	r5, r2, #29, #1
 8017288:	fbc0 6c07 	smlal	r6, ip, r0, r7
 801728c:	3d01      	subs	r5, #1
 801728e:	0ff6      	lsrs	r6, r6, #31
 8017290:	4005      	ands	r5, r0
 8017292:	f342 7040 	sbfx	r0, r2, #29, #1
 8017296:	ea46 064c 	orr.w	r6, r6, ip, lsl #1
 801729a:	4030      	ands	r0, r6
 801729c:	26f2      	movs	r6, #242	@ 0xf2
 801729e:	4068      	eors	r0, r5
 80172a0:	4625      	mov	r5, r4
 80172a2:	fbc0 5106 	smlal	r5, r1, r0, r6
 80172a6:	0fed      	lsrs	r5, r5, #31
 80172a8:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 80172ac:	f3c2 7180 	ubfx	r1, r2, #30, #1
 80172b0:	f342 7280 	sbfx	r2, r2, #30, #1
 80172b4:	3901      	subs	r1, #1
 80172b6:	402a      	ands	r2, r5
 80172b8:	4001      	ands	r1, r0
 80172ba:	404a      	eors	r2, r1
 80172bc:	1e59      	subs	r1, r3, #1
 80172be:	425b      	negs	r3, r3
 80172c0:	400a      	ands	r2, r1
 80172c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80172c6:	4053      	eors	r3, r2
 80172c8:	f84b 3f04 	str.w	r3, [fp, #4]!
 80172cc:	9b02      	ldr	r3, [sp, #8]
 80172ce:	4553      	cmp	r3, sl
 80172d0:	f47f aec4 	bne.w	801705c <_lite_kernel_nl_softmax_is8os8+0x838>
 80172d4:	4698      	mov	r8, r3
 80172d6:	9a03      	ldr	r2, [sp, #12]
 80172d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80172da:	429a      	cmp	r2, r3
 80172dc:	f4bf ae23 	bcs.w	8016f26 <_lite_kernel_nl_softmax_is8os8+0x702>
 80172e0:	9904      	ldr	r1, [sp, #16]
 80172e2:	1e4b      	subs	r3, r1, #1
 80172e4:	468a      	mov	sl, r1
 80172e6:	eb02 0e03 	add.w	lr, r2, r3
 80172ea:	4613      	mov	r3, r2
 80172ec:	3a01      	subs	r2, #1
 80172ee:	f1ba 0f01 	cmp.w	sl, #1
 80172f2:	4699      	mov	r9, r3
 80172f4:	9202      	str	r2, [sp, #8]
 80172f6:	9b02      	ldr	r3, [sp, #8]
 80172f8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80172fc:	f240 819c 	bls.w	8017638 <_lite_kernel_nl_softmax_is8os8+0xe14>
 8017300:	464b      	mov	r3, r9
 8017302:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 8017306:	428a      	cmp	r2, r1
 8017308:	bfb8      	it	lt
 801730a:	460a      	movlt	r2, r1
 801730c:	4573      	cmp	r3, lr
 801730e:	d1f8      	bne.n	8017302 <_lite_kernel_nl_softmax_is8os8+0xade>
 8017310:	9902      	ldr	r1, [sp, #8]
 8017312:	2400      	movs	r4, #0
 8017314:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8017318:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 801731a:	460b      	mov	r3, r1
 801731c:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
 8017320:	1a10      	subs	r0, r2, r0
 8017322:	3302      	adds	r3, #2
 8017324:	4580      	cmp	r8, r0
 8017326:	eba3 0309 	sub.w	r3, r3, r9
 801732a:	dd0c      	ble.n	8017346 <_lite_kernel_nl_softmax_is8os8+0xb22>
 801732c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8017330:	1306      	asrs	r6, r0, #12
 8017332:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8017336:	bf54      	ite	pl
 8017338:	46bc      	movpl	ip, r7
 801733a:	f44f 6c00 	movmi.w	ip, #2048	@ 0x800
 801733e:	4560      	cmp	r0, ip
 8017340:	bfc8      	it	gt
 8017342:	3601      	addgt	r6, #1
 8017344:	4434      	add	r4, r6
 8017346:	459a      	cmp	sl, r3
 8017348:	d8e7      	bhi.n	801731a <_lite_kernel_nl_softmax_is8os8+0xaf6>
 801734a:	2c00      	cmp	r4, #0
 801734c:	f000 8178 	beq.w	8017640 <_lite_kernel_nl_softmax_is8os8+0xe1c>
 8017350:	fab4 f384 	clz	r3, r4
 8017354:	409c      	lsls	r4, r3
 8017356:	9306      	str	r3, [sp, #24]
 8017358:	f1c3 0323 	rsb	r3, r3, #35	@ 0x23
 801735c:	9301      	str	r3, [sp, #4]
 801735e:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 8017362:	17d9      	asrs	r1, r3, #31
 8017364:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017368:	bf08      	it	eq
 801736a:	2c00      	cmpeq	r4, #0
 801736c:	f000 816c 	beq.w	8017648 <_lite_kernel_nl_softmax_is8os8+0xe24>
 8017370:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 8017374:	f141 0100 	adc.w	r1, r1, #0
 8017378:	085b      	lsrs	r3, r3, #1
 801737a:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801737e:	ea4f 0b61 	mov.w	fp, r1, asr #1
 8017382:	4950      	ldr	r1, [pc, #320]	@ (80174c4 <_lite_kernel_nl_softmax_is8os8+0xca0>)
 8017384:	425c      	negs	r4, r3
 8017386:	9303      	str	r3, [sp, #12]
 8017388:	fb01 440b 	mla	r4, r1, fp, r4
 801738c:	fba3 1001 	umull	r1, r0, r3, r1
 8017390:	4420      	add	r0, r4
 8017392:	4c4d      	ldr	r4, [pc, #308]	@ (80174c8 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 8017394:	1909      	adds	r1, r1, r4
 8017396:	f160 0000 	sbc.w	r0, r0, #0
 801739a:	2800      	cmp	r0, #0
 801739c:	da05      	bge.n	80173aa <_lite_kernel_nl_softmax_is8os8+0xb86>
 801739e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80173a2:	190c      	adds	r4, r1, r4
 80173a4:	4621      	mov	r1, r4
 80173a6:	f140 0000 	adc.w	r0, r0, #0
 80173aa:	0fc9      	lsrs	r1, r1, #31
 80173ac:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
 80173b0:	f104 365a 	add.w	r6, r4, #1515870810	@ 0x5a5a5a5a
 80173b4:	17f0      	asrs	r0, r6, #31
 80173b6:	fba3 1706 	umull	r1, r7, r3, r6
 80173ba:	4635      	mov	r5, r6
 80173bc:	fb03 fc00 	mul.w	ip, r3, r0
 80173c0:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 80173c4:	fb06 cc0b 	mla	ip, r6, fp, ip
 80173c8:	eb4c 0707 	adc.w	r7, ip, r7
 80173cc:	2f00      	cmp	r7, #0
 80173ce:	da06      	bge.n	80173de <_lite_kernel_nl_softmax_is8os8+0xbba>
 80173d0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80173d4:	eb11 0c0c 	adds.w	ip, r1, ip
 80173d8:	4661      	mov	r1, ip
 80173da:	f147 0700 	adc.w	r7, r7, #0
 80173de:	0fc9      	lsrs	r1, r1, #31
 80173e0:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 80173e4:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
 80173e8:	ea81 0706 	eor.w	r7, r1, r6
 80173ec:	0fff      	lsrs	r7, r7, #31
 80173ee:	2f00      	cmp	r7, #0
 80173f0:	4f35      	ldr	r7, [pc, #212]	@ (80174c8 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 80173f2:	bf08      	it	eq
 80173f4:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 80173f8:	9704      	str	r7, [sp, #16]
 80173fa:	bf0c      	ite	eq
 80173fc:	2700      	moveq	r7, #0
 80173fe:	f04f 37ff 	movne.w	r7, #4294967295
 8017402:	9705      	str	r7, [sp, #20]
 8017404:	fb01 f000 	mul.w	r0, r1, r0
 8017408:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 801740c:	9f04      	ldr	r7, [sp, #16]
 801740e:	fb05 000c 	mla	r0, r5, ip, r0
 8017412:	fba1 1505 	umull	r1, r5, r1, r5
 8017416:	19c9      	adds	r1, r1, r7
 8017418:	4428      	add	r0, r5
 801741a:	9d05      	ldr	r5, [sp, #20]
 801741c:	eb40 0505 	adc.w	r5, r0, r5
 8017420:	2d00      	cmp	r5, #0
 8017422:	da05      	bge.n	8017430 <_lite_kernel_nl_softmax_is8os8+0xc0c>
 8017424:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017428:	1808      	adds	r0, r1, r0
 801742a:	4601      	mov	r1, r0
 801742c:	f145 0500 	adc.w	r5, r5, #0
 8017430:	0fc9      	lsrs	r1, r1, #31
 8017432:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 8017436:	f1b1 4f60 	cmp.w	r1, #3758096384	@ 0xe0000000
 801743a:	f340 8132 	ble.w	80176a2 <_lite_kernel_nl_softmax_is8os8+0xe7e>
 801743e:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 8017442:	9903      	ldr	r1, [sp, #12]
 8017444:	4041      	eors	r1, r0
 8017446:	17c4      	asrs	r4, r0, #31
 8017448:	fb00 f50b 	mul.w	r5, r0, fp
 801744c:	0fc9      	lsrs	r1, r1, #31
 801744e:	fb03 5504 	mla	r5, r3, r4, r5
 8017452:	2900      	cmp	r1, #0
 8017454:	491c      	ldr	r1, [pc, #112]	@ (80174c8 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 8017456:	bf0c      	ite	eq
 8017458:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 801745c:	460e      	movne	r6, r1
 801745e:	fba0 1c03 	umull	r1, ip, r0, r3
 8017462:	bf0c      	ite	eq
 8017464:	2700      	moveq	r7, #0
 8017466:	f04f 37ff 	movne.w	r7, #4294967295
 801746a:	4465      	add	r5, ip
 801746c:	1989      	adds	r1, r1, r6
 801746e:	eb45 0507 	adc.w	r5, r5, r7
 8017472:	2d00      	cmp	r5, #0
 8017474:	da05      	bge.n	8017482 <_lite_kernel_nl_softmax_is8os8+0xc5e>
 8017476:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801747a:	198e      	adds	r6, r1, r6
 801747c:	4631      	mov	r1, r6
 801747e:	f145 0500 	adc.w	r5, r5, #0
 8017482:	0fc9      	lsrs	r1, r1, #31
 8017484:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 8017488:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
 801748c:	ea80 0501 	eor.w	r5, r0, r1
 8017490:	0fed      	lsrs	r5, r5, #31
 8017492:	2d00      	cmp	r5, #0
 8017494:	4d0c      	ldr	r5, [pc, #48]	@ (80174c8 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 8017496:	bf06      	itte	eq
 8017498:	2600      	moveq	r6, #0
 801749a:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 801749e:	f04f 36ff 	movne.w	r6, #4294967295
 80174a2:	e013      	b.n	80174cc <_lite_kernel_nl_softmax_is8os8+0xca8>
 80174a4:	2aaaaaab 	.word	0x2aaaaaab
 80174a8:	70f5a894 	.word	0x70f5a894
 80174ac:	63afbe7b 	.word	0x63afbe7b
 80174b0:	4da2cbf2 	.word	0x4da2cbf2
 80174b4:	2f16ac6c 	.word	0x2f16ac6c
 80174b8:	1152aaa4 	.word	0x1152aaa4
 80174bc:	02582ab7 	.word	0x02582ab7
 80174c0:	000afe11 	.word	0x000afe11
 80174c4:	c3c3c3c4 	.word	0xc3c3c3c4
 80174c8:	c0000001 	.word	0xc0000001
 80174cc:	fb01 f404 	mul.w	r4, r1, r4
 80174d0:	17cf      	asrs	r7, r1, #31
 80174d2:	fb00 4407 	mla	r4, r0, r7, r4
 80174d6:	fba1 1700 	umull	r1, r7, r1, r0
 80174da:	1949      	adds	r1, r1, r5
 80174dc:	443c      	add	r4, r7
 80174de:	eb44 0406 	adc.w	r4, r4, r6
 80174e2:	2c00      	cmp	r4, #0
 80174e4:	da05      	bge.n	80174f2 <_lite_kernel_nl_softmax_is8os8+0xcce>
 80174e6:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80174ea:	194d      	adds	r5, r1, r5
 80174ec:	4629      	mov	r1, r5
 80174ee:	f144 0400 	adc.w	r4, r4, #0
 80174f2:	0fc9      	lsrs	r1, r1, #31
 80174f4:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
 80174f8:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 80174fc:	f2c0 8101 	blt.w	8017702 <_lite_kernel_nl_softmax_is8os8+0xede>
 8017500:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017504:	4401      	add	r1, r0
 8017506:	9803      	ldr	r0, [sp, #12]
 8017508:	ea91 0f00 	teq	r1, r0
 801750c:	f140 814e 	bpl.w	80177ac <_lite_kernel_nl_softmax_is8os8+0xf88>
 8017510:	4cc4      	ldr	r4, [pc, #784]	@ (8017824 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 8017512:	f04f 35ff 	mov.w	r5, #4294967295
 8017516:	fb01 f60b 	mul.w	r6, r1, fp
 801751a:	17c8      	asrs	r0, r1, #31
 801751c:	fb03 6600 	mla	r6, r3, r0, r6
 8017520:	fba1 3703 	umull	r3, r7, r1, r3
 8017524:	191b      	adds	r3, r3, r4
 8017526:	443e      	add	r6, r7
 8017528:	eb46 0605 	adc.w	r6, r6, r5
 801752c:	2e00      	cmp	r6, #0
 801752e:	da05      	bge.n	801753c <_lite_kernel_nl_softmax_is8os8+0xd18>
 8017530:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017534:	191c      	adds	r4, r3, r4
 8017536:	4623      	mov	r3, r4
 8017538:	f146 0600 	adc.w	r6, r6, #0
 801753c:	0fdb      	lsrs	r3, r3, #31
 801753e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8017542:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8017546:	ea83 0401 	eor.w	r4, r3, r1
 801754a:	0fe4      	lsrs	r4, r4, #31
 801754c:	2c00      	cmp	r4, #0
 801754e:	4cb5      	ldr	r4, [pc, #724]	@ (8017824 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 8017550:	bf06      	itte	eq
 8017552:	2500      	moveq	r5, #0
 8017554:	f04f 4480 	moveq.w	r4, #1073741824	@ 0x40000000
 8017558:	f04f 35ff 	movne.w	r5, #4294967295
 801755c:	428b      	cmp	r3, r1
 801755e:	f040 80f8 	bne.w	8017752 <_lite_kernel_nl_softmax_is8os8+0xf2e>
 8017562:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8017566:	f040 80f4 	bne.w	8017752 <_lite_kernel_nl_softmax_is8os8+0xf2e>
 801756a:	f04f 31ff 	mov.w	r1, #4294967295
 801756e:	004c      	lsls	r4, r1, #1
 8017570:	9b01      	ldr	r3, [sp, #4]
 8017572:	2b1f      	cmp	r3, #31
 8017574:	dd05      	ble.n	8017582 <_lite_kernel_nl_softmax_is8os8+0xd5e>
 8017576:	9b06      	ldr	r3, [sp, #24]
 8017578:	f1c3 0304 	rsb	r3, r3, #4
 801757c:	411c      	asrs	r4, r3
 801757e:	231f      	movs	r3, #31
 8017580:	9301      	str	r3, [sp, #4]
 8017582:	f1ba 0f00 	cmp.w	sl, #0
 8017586:	d040      	beq.n	801760a <_lite_kernel_nl_softmax_is8os8+0xde6>
 8017588:	9d01      	ldr	r5, [sp, #4]
 801758a:	2601      	movs	r6, #1
 801758c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017590:	f8cd 9020 	str.w	r9, [sp, #32]
 8017594:	40ae      	lsls	r6, r5
 8017596:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8017598:	fa43 f505 	asr.w	r5, r3, r5
 801759c:	9902      	ldr	r1, [sp, #8]
 801759e:	3e01      	subs	r6, #1
 80175a0:	f8dd 90a4 	ldr.w	r9, [sp, #164]	@ 0xa4
 80175a4:	ea06 0703 	and.w	r7, r6, r3
 80175a8:	ea4f 0c66 	mov.w	ip, r6, asr #1
 80175ac:	9603      	str	r6, [sp, #12]
 80175ae:	9705      	str	r7, [sp, #20]
 80175b0:	2780      	movs	r7, #128	@ 0x80
 80175b2:	e9cd 5306 	strd	r5, r3, [sp, #24]
 80175b6:	f10c 0301 	add.w	r3, ip, #1
 80175ba:	9304      	str	r3, [sp, #16]
 80175bc:	f911 3f01 	ldrsb.w	r3, [r1, #1]!
 80175c0:	1ad3      	subs	r3, r2, r3
 80175c2:	4598      	cmp	r8, r3
 80175c4:	dd4f      	ble.n	8017666 <_lite_kernel_nl_softmax_is8os8+0xe42>
 80175c6:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80175ca:	ea85 0304 	eor.w	r3, r5, r4
 80175ce:	0fdb      	lsrs	r3, r3, #31
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	4b94      	ldr	r3, [pc, #592]	@ (8017824 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 80175d4:	bf06      	itte	eq
 80175d6:	f04f 0b00 	moveq.w	fp, #0
 80175da:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80175de:	f04f 3bff 	movne.w	fp, #4294967295
 80175e2:	42a5      	cmp	r5, r4
 80175e4:	d141      	bne.n	801766a <_lite_kernel_nl_softmax_is8os8+0xe46>
 80175e6:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 80175ea:	d13e      	bne.n	801766a <_lite_kernel_nl_softmax_is8os8+0xe46>
 80175ec:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 80175f0:	45ac      	cmp	ip, r5
 80175f2:	da00      	bge.n	80175f6 <_lite_kernel_nl_softmax_is8os8+0xdd2>
 80175f4:	3301      	adds	r3, #1
 80175f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80175f8:	dd4e      	ble.n	8017698 <_lite_kernel_nl_softmax_is8os8+0xe74>
 80175fa:	237f      	movs	r3, #127	@ 0x7f
 80175fc:	7003      	strb	r3, [r0, #0]
 80175fe:	4571      	cmp	r1, lr
 8017600:	f100 0001 	add.w	r0, r0, #1
 8017604:	d1da      	bne.n	80175bc <_lite_kernel_nl_softmax_is8os8+0xd98>
 8017606:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801760a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801760c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801760e:	4499      	add	r9, r3
 8017610:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017612:	4413      	add	r3, r2
 8017614:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8017616:	9315      	str	r3, [sp, #84]	@ 0x54
 8017618:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801761a:	449e      	add	lr, r3
 801761c:	9b02      	ldr	r3, [sp, #8]
 801761e:	4413      	add	r3, r2
 8017620:	9302      	str	r3, [sp, #8]
 8017622:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017624:	454b      	cmp	r3, r9
 8017626:	f67f ac7e 	bls.w	8016f26 <_lite_kernel_nl_softmax_is8os8+0x702>
 801762a:	9b02      	ldr	r3, [sp, #8]
 801762c:	f1ba 0f01 	cmp.w	sl, #1
 8017630:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017634:	f63f ae64 	bhi.w	8017300 <_lite_kernel_nl_softmax_is8os8+0xadc>
 8017638:	f1ba 0f00 	cmp.w	sl, #0
 801763c:	f47f ae68 	bne.w	8017310 <_lite_kernel_nl_softmax_is8os8+0xaec>
 8017640:	2303      	movs	r3, #3
 8017642:	9301      	str	r3, [sp, #4]
 8017644:	2320      	movs	r3, #32
 8017646:	9306      	str	r3, [sp, #24]
 8017648:	f04f 33ff 	mov.w	r3, #4294967295
 801764c:	2000      	movs	r0, #0
 801764e:	f04f 365a 	mov.w	r6, #1515870810	@ 0x5a5a5a5a
 8017652:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 8017656:	4974      	ldr	r1, [pc, #464]	@ (8017828 <_lite_kernel_nl_softmax_is8os8+0x1004>)
 8017658:	469b      	mov	fp, r3
 801765a:	4635      	mov	r5, r6
 801765c:	4604      	mov	r4, r0
 801765e:	9303      	str	r3, [sp, #12]
 8017660:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8017664:	e6ce      	b.n	8017404 <_lite_kernel_nl_softmax_is8os8+0xbe0>
 8017666:	7007      	strb	r7, [r0, #0]
 8017668:	e7c9      	b.n	80175fe <_lite_kernel_nl_softmax_is8os8+0xdda>
 801766a:	fbc4 3b05 	smlal	r3, fp, r4, r5
 801766e:	f1bb 0f00 	cmp.w	fp, #0
 8017672:	da03      	bge.n	801767c <_lite_kernel_nl_softmax_is8os8+0xe58>
 8017674:	9d07      	ldr	r5, [sp, #28]
 8017676:	195b      	adds	r3, r3, r5
 8017678:	f14b 0b00 	adc.w	fp, fp, #0
 801767c:	0fdb      	lsrs	r3, r3, #31
 801767e:	9d03      	ldr	r5, [sp, #12]
 8017680:	9e01      	ldr	r6, [sp, #4]
 8017682:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 8017686:	401d      	ands	r5, r3
 8017688:	4133      	asrs	r3, r6
 801768a:	d5b1      	bpl.n	80175f0 <_lite_kernel_nl_softmax_is8os8+0xdcc>
 801768c:	9e04      	ldr	r6, [sp, #16]
 801768e:	42b5      	cmp	r5, r6
 8017690:	dcb0      	bgt.n	80175f4 <_lite_kernel_nl_softmax_is8os8+0xdd0>
 8017692:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8017696:	e7b1      	b.n	80175fc <_lite_kernel_nl_softmax_is8os8+0xdd8>
 8017698:	2b00      	cmp	r3, #0
 801769a:	ddfa      	ble.n	8017692 <_lite_kernel_nl_softmax_is8os8+0xe6e>
 801769c:	3b80      	subs	r3, #128	@ 0x80
 801769e:	b25b      	sxtb	r3, r3
 80176a0:	e7ac      	b.n	80175fc <_lite_kernel_nl_softmax_is8os8+0xdd8>
 80176a2:	4862      	ldr	r0, [pc, #392]	@ (801782c <_lite_kernel_nl_softmax_is8os8+0x1008>)
 80176a4:	9903      	ldr	r1, [sp, #12]
 80176a6:	4420      	add	r0, r4
 80176a8:	ea91 0f00 	teq	r1, r0
 80176ac:	f140 8082 	bpl.w	80177b4 <_lite_kernel_nl_softmax_is8os8+0xf90>
 80176b0:	17c1      	asrs	r1, r0, #31
 80176b2:	fb00 f40b 	mul.w	r4, r0, fp
 80176b6:	fb03 4401 	mla	r4, r3, r1, r4
 80176ba:	fba0 1503 	umull	r1, r5, r0, r3
 80176be:	4425      	add	r5, r4
 80176c0:	4c58      	ldr	r4, [pc, #352]	@ (8017824 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 80176c2:	1909      	adds	r1, r1, r4
 80176c4:	f165 0500 	sbc.w	r5, r5, #0
 80176c8:	2d00      	cmp	r5, #0
 80176ca:	da05      	bge.n	80176d8 <_lite_kernel_nl_softmax_is8os8+0xeb4>
 80176cc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80176d0:	190c      	adds	r4, r1, r4
 80176d2:	4621      	mov	r1, r4
 80176d4:	f145 0500 	adc.w	r5, r5, #0
 80176d8:	0fc9      	lsrs	r1, r1, #31
 80176da:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 80176de:	f04f 35ff 	mov.w	r5, #4294967295
 80176e2:	f1c1 5400 	rsb	r4, r1, #536870912	@ 0x20000000
 80176e6:	494f      	ldr	r1, [pc, #316]	@ (8017824 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 80176e8:	fbc0 1504 	smlal	r1, r5, r0, r4
 80176ec:	2d00      	cmp	r5, #0
 80176ee:	da05      	bge.n	80176fc <_lite_kernel_nl_softmax_is8os8+0xed8>
 80176f0:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80176f4:	190c      	adds	r4, r1, r4
 80176f6:	4621      	mov	r1, r4
 80176f8:	f145 0500 	adc.w	r5, r5, #0
 80176fc:	0fc9      	lsrs	r1, r1, #31
 80176fe:	ea41 0445 	orr.w	r4, r1, r5, lsl #1
 8017702:	f1b4 4f60 	cmp.w	r4, #3758096384	@ 0xe0000000
 8017706:	ea4f 0184 	mov.w	r1, r4, lsl #2
 801770a:	f73f aefb 	bgt.w	8017504 <_lite_kernel_nl_softmax_is8os8+0xce0>
 801770e:	f100 4100 	add.w	r1, r0, #2147483648	@ 0x80000000
 8017712:	9803      	ldr	r0, [sp, #12]
 8017714:	ea91 0f00 	teq	r1, r0
 8017718:	d548      	bpl.n	80177ac <_lite_kernel_nl_softmax_is8os8+0xf88>
 801771a:	17c8      	asrs	r0, r1, #31
 801771c:	fb03 f500 	mul.w	r5, r3, r0
 8017720:	fba3 3401 	umull	r3, r4, r3, r1
 8017724:	fb01 550b 	mla	r5, r1, fp, r5
 8017728:	442c      	add	r4, r5
 801772a:	4d3e      	ldr	r5, [pc, #248]	@ (8017824 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 801772c:	195b      	adds	r3, r3, r5
 801772e:	f164 0400 	sbc.w	r4, r4, #0
 8017732:	2c00      	cmp	r4, #0
 8017734:	da05      	bge.n	8017742 <_lite_kernel_nl_softmax_is8os8+0xf1e>
 8017736:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801773a:	195d      	adds	r5, r3, r5
 801773c:	462b      	mov	r3, r5
 801773e:	f144 0400 	adc.w	r4, r4, #0
 8017742:	0fdb      	lsrs	r3, r3, #31
 8017744:	f04f 35ff 	mov.w	r5, #4294967295
 8017748:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 801774c:	4c35      	ldr	r4, [pc, #212]	@ (8017824 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 801774e:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8017752:	fb03 f000 	mul.w	r0, r3, r0
 8017756:	17de      	asrs	r6, r3, #31
 8017758:	fb01 0006 	mla	r0, r1, r6, r0
 801775c:	fba3 3601 	umull	r3, r6, r3, r1
 8017760:	191b      	adds	r3, r3, r4
 8017762:	4430      	add	r0, r6
 8017764:	eb40 0005 	adc.w	r0, r0, r5
 8017768:	2800      	cmp	r0, #0
 801776a:	da05      	bge.n	8017778 <_lite_kernel_nl_softmax_is8os8+0xf54>
 801776c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017770:	191c      	adds	r4, r3, r4
 8017772:	4623      	mov	r3, r4
 8017774:	f140 0000 	adc.w	r0, r0, #0
 8017778:	0fdb      	lsrs	r3, r3, #31
 801777a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 801777e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017782:	db07      	blt.n	8017794 <_lite_kernel_nl_softmax_is8os8+0xf70>
 8017784:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017788:	4421      	add	r1, r4
 801778a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 801778e:	f6bf aeef 	bge.w	8017570 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 8017792:	e6ec      	b.n	801756e <_lite_kernel_nl_softmax_is8os8+0xd4a>
 8017794:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8017798:	dc31      	bgt.n	80177fe <_lite_kernel_nl_softmax_is8os8+0xfda>
 801779a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801779e:	004c      	lsls	r4, r1, #1
 80177a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80177a4:	bfd8      	it	le
 80177a6:	f04f 4400 	movle.w	r4, #2147483648	@ 0x80000000
 80177aa:	e6e1      	b.n	8017570 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 80177ac:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80177b0:	2500      	movs	r5, #0
 80177b2:	e6b0      	b.n	8017516 <_lite_kernel_nl_softmax_is8os8+0xcf2>
 80177b4:	fba0 1503 	umull	r1, r5, r0, r3
 80177b8:	17c4      	asrs	r4, r0, #31
 80177ba:	fb00 f60b 	mul.w	r6, r0, fp
 80177be:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 80177c2:	fb03 6604 	mla	r6, r3, r4, r6
 80177c6:	eb46 0505 	adc.w	r5, r6, r5
 80177ca:	2d00      	cmp	r5, #0
 80177cc:	da05      	bge.n	80177da <_lite_kernel_nl_softmax_is8os8+0xfb6>
 80177ce:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80177d2:	198e      	adds	r6, r1, r6
 80177d4:	4631      	mov	r1, r6
 80177d6:	f145 0500 	adc.w	r5, r5, #0
 80177da:	0fc9      	lsrs	r1, r1, #31
 80177dc:	f04f 36ff 	mov.w	r6, #4294967295
 80177e0:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 80177e4:	4d0f      	ldr	r5, [pc, #60]	@ (8017824 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 80177e6:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
 80177ea:	e66f      	b.n	80174cc <_lite_kernel_nl_softmax_is8os8+0xca8>
 80177ec:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 80177f0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80177f4:	db0b      	blt.n	801780e <_lite_kernel_nl_softmax_is8os8+0xfea>
 80177f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80177fa:	f7ff bb25 	b.w	8016e48 <_lite_kernel_nl_softmax_is8os8+0x624>
 80177fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017806:	db0b      	blt.n	8017820 <_lite_kernel_nl_softmax_is8os8+0xffc>
 8017808:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801780c:	e6b0      	b.n	8017570 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 801780e:	0051      	lsls	r1, r2, #1
 8017810:	f7ff bb98 	b.w	8016f44 <_lite_kernel_nl_softmax_is8os8+0x720>
 8017814:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8017816:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017818:	4413      	add	r3, r2
 801781a:	9306      	str	r3, [sp, #24]
 801781c:	f7ff b83f 	b.w	801689e <_lite_kernel_nl_softmax_is8os8+0x7a>
 8017820:	005c      	lsls	r4, r3, #1
 8017822:	e7bd      	b.n	80177a0 <_lite_kernel_nl_softmax_is8os8+0xf7c>
 8017824:	c0000001 	.word	0xc0000001
 8017828:	20000001 	.word	0x20000001
 801782c:	da5a5a5a 	.word	0xda5a5a5a

08017830 <_lite_kernel_nl_softmax_iu8ou8>:
 8017830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017834:	b099      	sub	sp, #100	@ 0x64
 8017836:	9013      	str	r0, [sp, #76]	@ 0x4c
 8017838:	1888      	adds	r0, r1, r2
 801783a:	9102      	str	r1, [sp, #8]
 801783c:	4281      	cmp	r1, r0
 801783e:	9303      	str	r3, [sp, #12]
 8017840:	9016      	str	r0, [sp, #88]	@ 0x58
 8017842:	f080 83bd 	bcs.w	8017fc0 <_lite_kernel_nl_softmax_iu8ou8+0x790>
 8017846:	460a      	mov	r2, r1
 8017848:	4619      	mov	r1, r3
 801784a:	3b01      	subs	r3, #1
 801784c:	18d3      	adds	r3, r2, r3
 801784e:	9314      	str	r3, [sp, #80]	@ 0x50
 8017850:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8017852:	3b04      	subs	r3, #4
 8017854:	9315      	str	r3, [sp, #84]	@ 0x54
 8017856:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801785a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801785c:	9b02      	ldr	r3, [sp, #8]
 801785e:	9903      	ldr	r1, [sp, #12]
 8017860:	781a      	ldrb	r2, [r3, #0]
 8017862:	2901      	cmp	r1, #1
 8017864:	9212      	str	r2, [sp, #72]	@ 0x48
 8017866:	f240 83c2 	bls.w	8017fee <_lite_kernel_nl_softmax_iu8ou8+0x7be>
 801786a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801786c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017870:	428a      	cmp	r2, r1
 8017872:	bfb8      	it	lt
 8017874:	460a      	movlt	r2, r1
 8017876:	4283      	cmp	r3, r0
 8017878:	d1f8      	bne.n	801786c <_lite_kernel_nl_softmax_iu8ou8+0x3c>
 801787a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801787c:	9212      	str	r2, [sp, #72]	@ 0x48
 801787e:	4413      	add	r3, r2
 8017880:	9305      	str	r3, [sp, #20]
 8017882:	9b02      	ldr	r3, [sp, #8]
 8017884:	f103 3bff 	add.w	fp, r3, #4294967295
 8017888:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801788a:	9301      	str	r3, [sp, #4]
 801788c:	2300      	movs	r3, #0
 801788e:	46dc      	mov	ip, fp
 8017890:	9304      	str	r3, [sp, #16]
 8017892:	e104      	b.n	8017a9e <_lite_kernel_nl_softmax_iu8ou8+0x26e>
 8017894:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017896:	1a9b      	subs	r3, r3, r2
 8017898:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801789a:	4093      	lsls	r3, r2
 801789c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801789e:	405a      	eors	r2, r3
 80178a0:	0fd2      	lsrs	r2, r2, #31
 80178a2:	2a00      	cmp	r2, #0
 80178a4:	4ac7      	ldr	r2, [pc, #796]	@ (8017bc4 <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 80178a6:	bf0b      	itete	eq
 80178a8:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 80178ac:	4611      	movne	r1, r2
 80178ae:	2200      	moveq	r2, #0
 80178b0:	f04f 32ff 	movne.w	r2, #4294967295
 80178b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80178b8:	f040 80fa 	bne.w	8017ab0 <_lite_kernel_nl_softmax_iu8ou8+0x280>
 80178bc:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80178be:	4298      	cmp	r0, r3
 80178c0:	f040 80f6 	bne.w	8017ab0 <_lite_kernel_nl_softmax_iu8ou8+0x280>
 80178c4:	4bc0      	ldr	r3, [pc, #768]	@ (8017bc8 <_lite_kernel_nl_softmax_iu8ou8+0x398>)
 80178c6:	2200      	movs	r2, #0
 80178c8:	f04f 31ff 	mov.w	r1, #4294967295
 80178cc:	4dbf      	ldr	r5, [pc, #764]	@ (8017bcc <_lite_kernel_nl_softmax_iu8ou8+0x39c>)
 80178ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80178d0:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 80178d4:	4bbe      	ldr	r3, [pc, #760]	@ (8017bd0 <_lite_kernel_nl_softmax_iu8ou8+0x3a0>)
 80178d6:	4696      	mov	lr, r2
 80178d8:	460f      	mov	r7, r1
 80178da:	4689      	mov	r9, r1
 80178dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80178de:	468a      	mov	sl, r1
 80178e0:	4bbc      	ldr	r3, [pc, #752]	@ (8017bd4 <_lite_kernel_nl_softmax_iu8ou8+0x3a4>)
 80178e2:	4614      	mov	r4, r2
 80178e4:	4693      	mov	fp, r2
 80178e6:	2001      	movs	r0, #1
 80178e8:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 80178ec:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 80178f0:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 80178f4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80178f8:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80178fc:	4282      	cmp	r2, r0
 80178fe:	4ab1      	ldr	r2, [pc, #708]	@ (8017bc4 <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 8017900:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017902:	bfc8      	it	gt
 8017904:	3601      	addgt	r6, #1
 8017906:	f1be 0f00 	cmp.w	lr, #0
 801790a:	bf06      	itte	eq
 801790c:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8017910:	f04f 0e00 	moveq.w	lr, #0
 8017914:	f04f 3eff 	movne.w	lr, #4294967295
 8017918:	1882      	adds	r2, r0, r2
 801791a:	eb43 0e0e 	adc.w	lr, r3, lr
 801791e:	f1be 0f00 	cmp.w	lr, #0
 8017922:	da05      	bge.n	8017930 <_lite_kernel_nl_softmax_iu8ou8+0x100>
 8017924:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017928:	18d3      	adds	r3, r2, r3
 801792a:	461a      	mov	r2, r3
 801792c:	f14e 0e00 	adc.w	lr, lr, #0
 8017930:	0fd2      	lsrs	r2, r2, #31
 8017932:	48a9      	ldr	r0, [pc, #676]	@ (8017bd8 <_lite_kernel_nl_softmax_iu8ou8+0x3a8>)
 8017934:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 8017938:	4432      	add	r2, r6
 801793a:	0fd3      	lsrs	r3, r2, #31
 801793c:	2b00      	cmp	r3, #0
 801793e:	4ba1      	ldr	r3, [pc, #644]	@ (8017bc4 <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 8017940:	bf06      	itte	eq
 8017942:	2600      	moveq	r6, #0
 8017944:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8017948:	f04f 36ff 	movne.w	r6, #4294967295
 801794c:	fbc2 3600 	smlal	r3, r6, r2, r0
 8017950:	2e00      	cmp	r6, #0
 8017952:	da05      	bge.n	8017960 <_lite_kernel_nl_softmax_iu8ou8+0x130>
 8017954:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017958:	189a      	adds	r2, r3, r2
 801795a:	4613      	mov	r3, r2
 801795c:	f146 0600 	adc.w	r6, r6, #0
 8017960:	0fdb      	lsrs	r3, r3, #31
 8017962:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017964:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8017968:	441a      	add	r2, r3
 801796a:	07d0      	lsls	r0, r2, #31
 801796c:	ea4f 0362 	mov.w	r3, r2, asr #1
 8017970:	d502      	bpl.n	8017978 <_lite_kernel_nl_softmax_iu8ou8+0x148>
 8017972:	2b00      	cmp	r3, #0
 8017974:	bfa8      	it	ge
 8017976:	3301      	addge	r3, #1
 8017978:	442b      	add	r3, r5
 801797a:	4898      	ldr	r0, [pc, #608]	@ (8017bdc <_lite_kernel_nl_softmax_iu8ou8+0x3ac>)
 801797c:	0fda      	lsrs	r2, r3, #31
 801797e:	2a00      	cmp	r2, #0
 8017980:	4a90      	ldr	r2, [pc, #576]	@ (8017bc4 <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 8017982:	bf06      	itte	eq
 8017984:	2500      	moveq	r5, #0
 8017986:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 801798a:	f04f 35ff 	movne.w	r5, #4294967295
 801798e:	fbc3 2500 	smlal	r2, r5, r3, r0
 8017992:	2d00      	cmp	r5, #0
 8017994:	da05      	bge.n	80179a2 <_lite_kernel_nl_softmax_iu8ou8+0x172>
 8017996:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801799a:	18d3      	adds	r3, r2, r3
 801799c:	461a      	mov	r2, r3
 801799e:	f145 0500 	adc.w	r5, r5, #0
 80179a2:	0fd2      	lsrs	r2, r2, #31
 80179a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80179a8:	488d      	ldr	r0, [pc, #564]	@ (8017be0 <_lite_kernel_nl_softmax_iu8ou8+0x3b0>)
 80179aa:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80179ae:	2500      	movs	r5, #0
 80179b0:	461e      	mov	r6, r3
 80179b2:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 80179b6:	46ae      	mov	lr, r5
 80179b8:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 80179bc:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 80179c0:	fbc2 6e00 	smlal	r6, lr, r2, r0
 80179c4:	0ff6      	lsrs	r6, r6, #31
 80179c6:	4017      	ands	r7, r2
 80179c8:	4886      	ldr	r0, [pc, #536]	@ (8017be4 <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 80179ca:	ea46 064e 	orr.w	r6, r6, lr, lsl #1
 80179ce:	461a      	mov	r2, r3
 80179d0:	4034      	ands	r4, r6
 80179d2:	462e      	mov	r6, r5
 80179d4:	407c      	eors	r4, r7
 80179d6:	fbc4 2600 	smlal	r2, r6, r4, r0
 80179da:	0fd2      	lsrs	r2, r2, #31
 80179dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179de:	ea09 0904 	and.w	r9, r9, r4
 80179e2:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 80179e6:	462c      	mov	r4, r5
 80179e8:	4e7f      	ldr	r6, [pc, #508]	@ (8017be8 <_lite_kernel_nl_softmax_iu8ou8+0x3b8>)
 80179ea:	4010      	ands	r0, r2
 80179ec:	461a      	mov	r2, r3
 80179ee:	ea89 0000 	eor.w	r0, r9, r0
 80179f2:	fbc0 2406 	smlal	r2, r4, r0, r6
 80179f6:	0fd2      	lsrs	r2, r2, #31
 80179f8:	ea0a 0a00 	and.w	sl, sl, r0
 80179fc:	4e7b      	ldr	r6, [pc, #492]	@ (8017bec <_lite_kernel_nl_softmax_iu8ou8+0x3bc>)
 80179fe:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8017a02:	462c      	mov	r4, r5
 8017a04:	ea0b 0b02 	and.w	fp, fp, r2
 8017a08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017a0a:	ea8a 0b0b 	eor.w	fp, sl, fp
 8017a0e:	ea02 000b 	and.w	r0, r2, fp
 8017a12:	461a      	mov	r2, r3
 8017a14:	fbcb 2406 	smlal	r2, r4, fp, r6
 8017a18:	0fd2      	lsrs	r2, r2, #31
 8017a1a:	4e75      	ldr	r6, [pc, #468]	@ (8017bf0 <_lite_kernel_nl_softmax_iu8ou8+0x3c0>)
 8017a1c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8017a20:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017a22:	4014      	ands	r4, r2
 8017a24:	4622      	mov	r2, r4
 8017a26:	462c      	mov	r4, r5
 8017a28:	4042      	eors	r2, r0
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	fbc2 0406 	smlal	r0, r4, r2, r6
 8017a30:	0fc0      	lsrs	r0, r0, #31
 8017a32:	4011      	ands	r1, r2
 8017a34:	9a08      	ldr	r2, [sp, #32]
 8017a36:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
 8017a3a:	4e6e      	ldr	r6, [pc, #440]	@ (8017bf4 <_lite_kernel_nl_softmax_iu8ou8+0x3c4>)
 8017a3c:	462c      	mov	r4, r5
 8017a3e:	4002      	ands	r2, r0
 8017a40:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017a42:	404a      	eors	r2, r1
 8017a44:	4619      	mov	r1, r3
 8017a46:	fbc2 1406 	smlal	r1, r4, r2, r6
 8017a4a:	0fc9      	lsrs	r1, r1, #31
 8017a4c:	4010      	ands	r0, r2
 8017a4e:	9a07      	ldr	r2, [sp, #28]
 8017a50:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8017a54:	400a      	ands	r2, r1
 8017a56:	21f2      	movs	r1, #242	@ 0xf2
 8017a58:	4042      	eors	r2, r0
 8017a5a:	fbc2 3501 	smlal	r3, r5, r2, r1
 8017a5e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017a60:	0fdb      	lsrs	r3, r3, #31
 8017a62:	4011      	ands	r1, r2
 8017a64:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8017a68:	460a      	mov	r2, r1
 8017a6a:	9906      	ldr	r1, [sp, #24]
 8017a6c:	4019      	ands	r1, r3
 8017a6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a70:	404a      	eors	r2, r1
 8017a72:	401a      	ands	r2, r3
 8017a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a76:	405a      	eors	r2, r3
 8017a78:	1313      	asrs	r3, r2, #12
 8017a7a:	0511      	lsls	r1, r2, #20
 8017a7c:	9904      	ldr	r1, [sp, #16]
 8017a7e:	bf48      	it	mi
 8017a80:	3301      	addmi	r3, #1
 8017a82:	4419      	add	r1, r3
 8017a84:	9104      	str	r1, [sp, #16]
 8017a86:	9b01      	ldr	r3, [sp, #4]
 8017a88:	f843 2f04 	str.w	r2, [r3, #4]!
 8017a8c:	9a02      	ldr	r2, [sp, #8]
 8017a8e:	9301      	str	r3, [sp, #4]
 8017a90:	f108 0302 	add.w	r3, r8, #2
 8017a94:	1a9b      	subs	r3, r3, r2
 8017a96:	9a03      	ldr	r2, [sp, #12]
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	f240 80ad 	bls.w	8017bf8 <_lite_kernel_nl_softmax_iu8ou8+0x3c8>
 8017a9e:	46e0      	mov	r8, ip
 8017aa0:	9a05      	ldr	r2, [sp, #20]
 8017aa2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8017aa6:	429a      	cmp	r2, r3
 8017aa8:	f77f aef4 	ble.w	8017894 <_lite_kernel_nl_softmax_iu8ou8+0x64>
 8017aac:	2200      	movs	r2, #0
 8017aae:	e7ea      	b.n	8017a86 <_lite_kernel_nl_softmax_iu8ou8+0x256>
 8017ab0:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8017ab2:	fbc3 1200 	smlal	r1, r2, r3, r0
 8017ab6:	2a00      	cmp	r2, #0
 8017ab8:	da04      	bge.n	8017ac4 <_lite_kernel_nl_softmax_iu8ou8+0x294>
 8017aba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017abe:	18c9      	adds	r1, r1, r3
 8017ac0:	f142 0200 	adc.w	r2, r2, #0
 8017ac4:	0fc9      	lsrs	r1, r1, #31
 8017ac6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017aca:	2600      	movs	r6, #0
 8017acc:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8017ad0:	f041 477f 	orr.w	r7, r1, #4278190080	@ 0xff000000
 8017ad4:	017d      	lsls	r5, r7, #5
 8017ad6:	1a7f      	subs	r7, r7, r1
 8017ad8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8017adc:	fbc5 3605 	smlal	r3, r6, r5, r5
 8017ae0:	2e00      	cmp	r6, #0
 8017ae2:	da05      	bge.n	8017af0 <_lite_kernel_nl_softmax_iu8ou8+0x2c0>
 8017ae4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017ae8:	189a      	adds	r2, r3, r2
 8017aea:	4613      	mov	r3, r2
 8017aec:	f146 0600 	adc.w	r6, r6, #0
 8017af0:	0fdb      	lsrs	r3, r3, #31
 8017af2:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8017af6:	17f6      	asrs	r6, r6, #31
 8017af8:	fba3 2003 	umull	r2, r0, r3, r3
 8017afc:	fb03 f406 	mul.w	r4, r3, r6
 8017b00:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8017b04:	9310      	str	r3, [sp, #64]	@ 0x40
 8017b06:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 8017b0a:	2800      	cmp	r0, #0
 8017b0c:	da05      	bge.n	8017b1a <_lite_kernel_nl_softmax_iu8ou8+0x2ea>
 8017b0e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017b12:	1914      	adds	r4, r2, r4
 8017b14:	4622      	mov	r2, r4
 8017b16:	f140 0000 	adc.w	r0, r0, #0
 8017b1a:	0fd2      	lsrs	r2, r2, #31
 8017b1c:	fb05 f606 	mul.w	r6, r5, r6
 8017b20:	ea83 0e05 	eor.w	lr, r3, r5
 8017b24:	fab1 f181 	clz	r1, r1
 8017b28:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8017b2c:	f3c7 7940 	ubfx	r9, r7, #29, #1
 8017b30:	17e8      	asrs	r0, r5, #31
 8017b32:	f3c7 7a80 	ubfx	sl, r7, #30, #1
 8017b36:	0949      	lsrs	r1, r1, #5
 8017b38:	f3c7 6400 	ubfx	r4, r7, #24, #1
 8017b3c:	fb03 6600 	mla	r6, r3, r0, r6
 8017b40:	f3c7 7000 	ubfx	r0, r7, #28, #1
 8017b44:	f3c7 6b80 	ubfx	fp, r7, #26, #1
 8017b48:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8017b4c:	9606      	str	r6, [sp, #24]
 8017b4e:	fba5 6303 	umull	r6, r3, r5, r3
 8017b52:	9007      	str	r0, [sp, #28]
 8017b54:	f3c7 6040 	ubfx	r0, r7, #25, #1
 8017b58:	9611      	str	r6, [sp, #68]	@ 0x44
 8017b5a:	9e06      	ldr	r6, [sp, #24]
 8017b5c:	4433      	add	r3, r6
 8017b5e:	424e      	negs	r6, r1
 8017b60:	3901      	subs	r1, #1
 8017b62:	910a      	str	r1, [sp, #40]	@ 0x28
 8017b64:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8017b68:	f347 66c0 	sbfx	r6, r7, #27, #1
 8017b6c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017b6e:	f3c7 61c0 	ubfx	r1, r7, #27, #1
 8017b72:	9f07      	ldr	r7, [sp, #28]
 8017b74:	3901      	subs	r1, #1
 8017b76:	960e      	str	r6, [sp, #56]	@ 0x38
 8017b78:	1096      	asrs	r6, r2, #2
 8017b7a:	f002 0203 	and.w	r2, r2, #3
 8017b7e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017b80:	f107 31ff 	add.w	r1, r7, #4294967295
 8017b84:	f1c7 0700 	rsb	r7, r7, #0
 8017b88:	9708      	str	r7, [sp, #32]
 8017b8a:	f10a 37ff 	add.w	r7, sl, #4294967295
 8017b8e:	970d      	str	r7, [sp, #52]	@ 0x34
 8017b90:	f1ca 0700 	rsb	r7, sl, #0
 8017b94:	f10b 3aff 	add.w	sl, fp, #4294967295
 8017b98:	f1cb 0b00 	rsb	fp, fp, #0
 8017b9c:	9706      	str	r7, [sp, #24]
 8017b9e:	f109 37ff 	add.w	r7, r9, #4294967295
 8017ba2:	970c      	str	r7, [sp, #48]	@ 0x30
 8017ba4:	f1c9 0700 	rsb	r7, r9, #0
 8017ba8:	f100 39ff 	add.w	r9, r0, #4294967295
 8017bac:	f1c0 0000 	rsb	r0, r0, #0
 8017bb0:	9707      	str	r7, [sp, #28]
 8017bb2:	f104 37ff 	add.w	r7, r4, #4294967295
 8017bb6:	9009      	str	r0, [sp, #36]	@ 0x24
 8017bb8:	f1c4 0400 	rsb	r4, r4, #0
 8017bbc:	bf54      	ite	pl
 8017bbe:	2001      	movpl	r0, #1
 8017bc0:	2002      	movmi	r0, #2
 8017bc2:	e69b      	b.n	80178fc <_lite_kernel_nl_softmax_iu8ou8+0xcc>
 8017bc4:	c0000001 	.word	0xc0000001
 8017bc8:	01fffff8 	.word	0x01fffff8
 8017bcc:	0fffffe0 	.word	0x0fffffe0
 8017bd0:	40000100 	.word	0x40000100
 8017bd4:	001fffff 	.word	0x001fffff
 8017bd8:	2aaaaaab 	.word	0x2aaaaaab
 8017bdc:	70f5a894 	.word	0x70f5a894
 8017be0:	63afbe7b 	.word	0x63afbe7b
 8017be4:	4da2cbf2 	.word	0x4da2cbf2
 8017be8:	2f16ac6c 	.word	0x2f16ac6c
 8017bec:	1152aaa4 	.word	0x1152aaa4
 8017bf0:	02582ab7 	.word	0x02582ab7
 8017bf4:	000afe11 	.word	0x000afe11
 8017bf8:	9b04      	ldr	r3, [sp, #16]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	f000 81f8 	beq.w	8017ff0 <_lite_kernel_nl_softmax_iu8ou8+0x7c0>
 8017c00:	fab3 f983 	clz	r9, r3
 8017c04:	fa03 f209 	lsl.w	r2, r3, r9
 8017c08:	f1c9 0a23 	rsb	sl, r9, #35	@ 0x23
 8017c0c:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8017c10:	17d9      	asrs	r1, r3, #31
 8017c12:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017c16:	bf08      	it	eq
 8017c18:	2a00      	cmpeq	r2, #0
 8017c1a:	f000 81ed 	beq.w	8017ff8 <_lite_kernel_nl_softmax_iu8ou8+0x7c8>
 8017c1e:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 8017c22:	4ac2      	ldr	r2, [pc, #776]	@ (8017f2c <_lite_kernel_nl_softmax_iu8ou8+0x6fc>)
 8017c24:	4dc2      	ldr	r5, [pc, #776]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017c26:	f141 0100 	adc.w	r1, r1, #0
 8017c2a:	085b      	lsrs	r3, r3, #1
 8017c2c:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8017c30:	1049      	asrs	r1, r1, #1
 8017c32:	4258      	negs	r0, r3
 8017c34:	469c      	mov	ip, r3
 8017c36:	fb02 0001 	mla	r0, r2, r1, r0
 8017c3a:	fba3 2402 	umull	r2, r4, r3, r2
 8017c3e:	1952      	adds	r2, r2, r5
 8017c40:	4420      	add	r0, r4
 8017c42:	f160 0000 	sbc.w	r0, r0, #0
 8017c46:	2800      	cmp	r0, #0
 8017c48:	da05      	bge.n	8017c56 <_lite_kernel_nl_softmax_iu8ou8+0x426>
 8017c4a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017c4e:	1914      	adds	r4, r2, r4
 8017c50:	4622      	mov	r2, r4
 8017c52:	f140 0000 	adc.w	r0, r0, #0
 8017c56:	0fd2      	lsrs	r2, r2, #31
 8017c58:	ea42 0440 	orr.w	r4, r2, r0, lsl #1
 8017c5c:	f104 365a 	add.w	r6, r4, #1515870810	@ 0x5a5a5a5a
 8017c60:	17f0      	asrs	r0, r6, #31
 8017c62:	fba3 2706 	umull	r2, r7, r3, r6
 8017c66:	4635      	mov	r5, r6
 8017c68:	fb03 fe00 	mul.w	lr, r3, r0
 8017c6c:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8017c70:	fb06 ee01 	mla	lr, r6, r1, lr
 8017c74:	eb4e 0707 	adc.w	r7, lr, r7
 8017c78:	2f00      	cmp	r7, #0
 8017c7a:	da06      	bge.n	8017c8a <_lite_kernel_nl_softmax_iu8ou8+0x45a>
 8017c7c:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8017c80:	eb12 0e0e 	adds.w	lr, r2, lr
 8017c84:	4672      	mov	r2, lr
 8017c86:	f147 0700 	adc.w	r7, r7, #0
 8017c8a:	0fd2      	lsrs	r2, r2, #31
 8017c8c:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8017c90:	4fa7      	ldr	r7, [pc, #668]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017c92:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8017c96:	ea82 0e06 	eor.w	lr, r2, r6
 8017c9a:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8017c9e:	f1be 0f00 	cmp.w	lr, #0
 8017ca2:	bf06      	itte	eq
 8017ca4:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8017ca8:	f04f 0800 	moveq.w	r8, #0
 8017cac:	f04f 38ff 	movne.w	r8, #4294967295
 8017cb0:	fb02 f000 	mul.w	r0, r2, r0
 8017cb4:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8017cb8:	fb05 000e 	mla	r0, r5, lr, r0
 8017cbc:	fba2 2505 	umull	r2, r5, r2, r5
 8017cc0:	19d2      	adds	r2, r2, r7
 8017cc2:	4428      	add	r0, r5
 8017cc4:	eb40 0508 	adc.w	r5, r0, r8
 8017cc8:	2d00      	cmp	r5, #0
 8017cca:	da05      	bge.n	8017cd8 <_lite_kernel_nl_softmax_iu8ou8+0x4a8>
 8017ccc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017cd0:	1810      	adds	r0, r2, r0
 8017cd2:	4602      	mov	r2, r0
 8017cd4:	f145 0500 	adc.w	r5, r5, #0
 8017cd8:	0fd2      	lsrs	r2, r2, #31
 8017cda:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8017cde:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 8017ce2:	dd7f      	ble.n	8017de4 <_lite_kernel_nl_softmax_iu8ou8+0x5b4>
 8017ce4:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 8017ce8:	4e91      	ldr	r6, [pc, #580]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017cea:	ea80 020c 	eor.w	r2, r0, ip
 8017cee:	17c4      	asrs	r4, r0, #31
 8017cf0:	fb00 f501 	mul.w	r5, r0, r1
 8017cf4:	0fd2      	lsrs	r2, r2, #31
 8017cf6:	fb03 5504 	mla	r5, r3, r4, r5
 8017cfa:	2a00      	cmp	r2, #0
 8017cfc:	fba0 2e03 	umull	r2, lr, r0, r3
 8017d00:	bf06      	itte	eq
 8017d02:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 8017d06:	2700      	moveq	r7, #0
 8017d08:	f04f 37ff 	movne.w	r7, #4294967295
 8017d0c:	4475      	add	r5, lr
 8017d0e:	1992      	adds	r2, r2, r6
 8017d10:	eb45 0507 	adc.w	r5, r5, r7
 8017d14:	2d00      	cmp	r5, #0
 8017d16:	da05      	bge.n	8017d24 <_lite_kernel_nl_softmax_iu8ou8+0x4f4>
 8017d18:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8017d1c:	1996      	adds	r6, r2, r6
 8017d1e:	4632      	mov	r2, r6
 8017d20:	f145 0500 	adc.w	r5, r5, #0
 8017d24:	0fd2      	lsrs	r2, r2, #31
 8017d26:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8017d2a:	4d81      	ldr	r5, [pc, #516]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017d2c:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8017d30:	ea80 0602 	eor.w	r6, r0, r2
 8017d34:	0ff6      	lsrs	r6, r6, #31
 8017d36:	2e00      	cmp	r6, #0
 8017d38:	bf06      	itte	eq
 8017d3a:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 8017d3e:	2600      	moveq	r6, #0
 8017d40:	f04f 36ff 	movne.w	r6, #4294967295
 8017d44:	fb02 f404 	mul.w	r4, r2, r4
 8017d48:	17d7      	asrs	r7, r2, #31
 8017d4a:	fb00 4407 	mla	r4, r0, r7, r4
 8017d4e:	fba2 2700 	umull	r2, r7, r2, r0
 8017d52:	1952      	adds	r2, r2, r5
 8017d54:	443c      	add	r4, r7
 8017d56:	eb44 0406 	adc.w	r4, r4, r6
 8017d5a:	2c00      	cmp	r4, #0
 8017d5c:	da05      	bge.n	8017d6a <_lite_kernel_nl_softmax_iu8ou8+0x53a>
 8017d5e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8017d62:	1955      	adds	r5, r2, r5
 8017d64:	462a      	mov	r2, r5
 8017d66:	f144 0400 	adc.w	r4, r4, #0
 8017d6a:	0fd2      	lsrs	r2, r2, #31
 8017d6c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8017d70:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8017d74:	db65      	blt.n	8017e42 <_lite_kernel_nl_softmax_iu8ou8+0x612>
 8017d76:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017d7a:	1902      	adds	r2, r0, r4
 8017d7c:	ea92 0f0c 	teq	r2, ip
 8017d80:	f140 8131 	bpl.w	8017fe6 <_lite_kernel_nl_softmax_iu8ou8+0x7b6>
 8017d84:	4c6a      	ldr	r4, [pc, #424]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017d86:	f04f 35ff 	mov.w	r5, #4294967295
 8017d8a:	fb02 f101 	mul.w	r1, r2, r1
 8017d8e:	17d0      	asrs	r0, r2, #31
 8017d90:	fb03 1100 	mla	r1, r3, r0, r1
 8017d94:	fba2 3603 	umull	r3, r6, r2, r3
 8017d98:	191b      	adds	r3, r3, r4
 8017d9a:	4431      	add	r1, r6
 8017d9c:	eb41 0105 	adc.w	r1, r1, r5
 8017da0:	2900      	cmp	r1, #0
 8017da2:	da05      	bge.n	8017db0 <_lite_kernel_nl_softmax_iu8ou8+0x580>
 8017da4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017da8:	191c      	adds	r4, r3, r4
 8017daa:	4623      	mov	r3, r4
 8017dac:	f141 0100 	adc.w	r1, r1, #0
 8017db0:	0fdb      	lsrs	r3, r3, #31
 8017db2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8017db6:	495e      	ldr	r1, [pc, #376]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017db8:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8017dbc:	ea83 0402 	eor.w	r4, r3, r2
 8017dc0:	0fe4      	lsrs	r4, r4, #31
 8017dc2:	2c00      	cmp	r4, #0
 8017dc4:	bf06      	itte	eq
 8017dc6:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8017dca:	2400      	moveq	r4, #0
 8017dcc:	f04f 34ff 	movne.w	r4, #4294967295
 8017dd0:	4293      	cmp	r3, r2
 8017dd2:	d15d      	bne.n	8017e90 <_lite_kernel_nl_softmax_iu8ou8+0x660>
 8017dd4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8017dd8:	d15a      	bne.n	8017e90 <_lite_kernel_nl_softmax_iu8ou8+0x660>
 8017dda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017dde:	4411      	add	r1, r2
 8017de0:	0049      	lsls	r1, r1, #1
 8017de2:	e076      	b.n	8017ed2 <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 8017de4:	4853      	ldr	r0, [pc, #332]	@ (8017f34 <_lite_kernel_nl_softmax_iu8ou8+0x704>)
 8017de6:	4420      	add	r0, r4
 8017de8:	ea90 0f0c 	teq	r0, ip
 8017dec:	f140 8112 	bpl.w	8018014 <_lite_kernel_nl_softmax_iu8ou8+0x7e4>
 8017df0:	17c2      	asrs	r2, r0, #31
 8017df2:	fb00 f401 	mul.w	r4, r0, r1
 8017df6:	4d4e      	ldr	r5, [pc, #312]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017df8:	fb03 4402 	mla	r4, r3, r2, r4
 8017dfc:	fba0 2603 	umull	r2, r6, r0, r3
 8017e00:	1952      	adds	r2, r2, r5
 8017e02:	4434      	add	r4, r6
 8017e04:	f164 0500 	sbc.w	r5, r4, #0
 8017e08:	2d00      	cmp	r5, #0
 8017e0a:	da05      	bge.n	8017e18 <_lite_kernel_nl_softmax_iu8ou8+0x5e8>
 8017e0c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017e10:	1914      	adds	r4, r2, r4
 8017e12:	4622      	mov	r2, r4
 8017e14:	f145 0500 	adc.w	r5, r5, #0
 8017e18:	0fd2      	lsrs	r2, r2, #31
 8017e1a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8017e1e:	f04f 35ff 	mov.w	r5, #4294967295
 8017e22:	f1c2 5400 	rsb	r4, r2, #536870912	@ 0x20000000
 8017e26:	4a42      	ldr	r2, [pc, #264]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017e28:	fbc0 2504 	smlal	r2, r5, r0, r4
 8017e2c:	2d00      	cmp	r5, #0
 8017e2e:	da05      	bge.n	8017e3c <_lite_kernel_nl_softmax_iu8ou8+0x60c>
 8017e30:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017e34:	1914      	adds	r4, r2, r4
 8017e36:	4622      	mov	r2, r4
 8017e38:	f145 0500 	adc.w	r5, r5, #0
 8017e3c:	0fd2      	lsrs	r2, r2, #31
 8017e3e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8017e42:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 8017e46:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8017e4a:	dc96      	bgt.n	8017d7a <_lite_kernel_nl_softmax_iu8ou8+0x54a>
 8017e4c:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8017e50:	ea92 0f0c 	teq	r2, ip
 8017e54:	f140 80c7 	bpl.w	8017fe6 <_lite_kernel_nl_softmax_iu8ou8+0x7b6>
 8017e58:	17d0      	asrs	r0, r2, #31
 8017e5a:	4c35      	ldr	r4, [pc, #212]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017e5c:	fb03 f500 	mul.w	r5, r3, r0
 8017e60:	fb02 5101 	mla	r1, r2, r1, r5
 8017e64:	fba3 3502 	umull	r3, r5, r3, r2
 8017e68:	191b      	adds	r3, r3, r4
 8017e6a:	4429      	add	r1, r5
 8017e6c:	f161 0100 	sbc.w	r1, r1, #0
 8017e70:	2900      	cmp	r1, #0
 8017e72:	da05      	bge.n	8017e80 <_lite_kernel_nl_softmax_iu8ou8+0x650>
 8017e74:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017e78:	191c      	adds	r4, r3, r4
 8017e7a:	4623      	mov	r3, r4
 8017e7c:	f141 0100 	adc.w	r1, r1, #0
 8017e80:	0fdb      	lsrs	r3, r3, #31
 8017e82:	f04f 34ff 	mov.w	r4, #4294967295
 8017e86:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8017e8a:	4929      	ldr	r1, [pc, #164]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017e8c:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8017e90:	fb03 f000 	mul.w	r0, r3, r0
 8017e94:	17dd      	asrs	r5, r3, #31
 8017e96:	fb02 0005 	mla	r0, r2, r5, r0
 8017e9a:	fba3 3502 	umull	r3, r5, r3, r2
 8017e9e:	185b      	adds	r3, r3, r1
 8017ea0:	4428      	add	r0, r5
 8017ea2:	eb40 0004 	adc.w	r0, r0, r4
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	da05      	bge.n	8017eb6 <_lite_kernel_nl_softmax_iu8ou8+0x686>
 8017eaa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017eae:	1859      	adds	r1, r3, r1
 8017eb0:	460b      	mov	r3, r1
 8017eb2:	f140 0000 	adc.w	r0, r0, #0
 8017eb6:	0fdb      	lsrs	r3, r3, #31
 8017eb8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8017ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017ec0:	f2c0 8085 	blt.w	8017fce <_lite_kernel_nl_softmax_iu8ou8+0x79e>
 8017ec4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017ec8:	18d1      	adds	r1, r2, r3
 8017eca:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8017ece:	db87      	blt.n	8017de0 <_lite_kernel_nl_softmax_iu8ou8+0x5b0>
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	f1ba 0f1f 	cmp.w	sl, #31
 8017ed6:	dd04      	ble.n	8017ee2 <_lite_kernel_nl_softmax_iu8ou8+0x6b2>
 8017ed8:	f1c9 0304 	rsb	r3, r9, #4
 8017edc:	f04f 0a1f 	mov.w	sl, #31
 8017ee0:	4119      	asrs	r1, r3
 8017ee2:	9b03      	ldr	r3, [sp, #12]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d05b      	beq.n	8017fa0 <_lite_kernel_nl_softmax_iu8ou8+0x770>
 8017ee8:	2501      	movs	r5, #1
 8017eea:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017eee:	f1a1 4e00 	sub.w	lr, r1, #2147483648	@ 0x80000000
 8017ef2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8017ef4:	fa05 f50a 	lsl.w	r5, r5, sl
 8017ef8:	fa47 f90a 	asr.w	r9, r7, sl
 8017efc:	fabe fe8e 	clz	lr, lr
 8017f00:	4e0b      	ldr	r6, [pc, #44]	@ (8017f30 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 8017f02:	3d01      	subs	r5, #1
 8017f04:	f8cd 9010 	str.w	r9, [sp, #16]
 8017f08:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8017f0c:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 8017f10:	ea05 0307 	and.w	r3, r5, r7
 8017f14:	ea4f 0c65 	mov.w	ip, r5, asr #1
 8017f18:	9301      	str	r3, [sp, #4]
 8017f1a:	f10c 0801 	add.w	r8, ip, #1
 8017f1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017f20:	1e5c      	subs	r4, r3, #1
 8017f22:	4673      	mov	r3, lr
 8017f24:	46ae      	mov	lr, r5
 8017f26:	461d      	mov	r5, r3
 8017f28:	e013      	b.n	8017f52 <_lite_kernel_nl_softmax_iu8ou8+0x722>
 8017f2a:	bf00      	nop
 8017f2c:	c3c3c3c4 	.word	0xc3c3c3c4
 8017f30:	c0000001 	.word	0xc0000001
 8017f34:	da5a5a5a 	.word	0xda5a5a5a
 8017f38:	b1dd      	cbz	r5, 8017f72 <_lite_kernel_nl_softmax_iu8ou8+0x742>
 8017f3a:	9b04      	ldr	r3, [sp, #16]
 8017f3c:	9a01      	ldr	r2, [sp, #4]
 8017f3e:	4594      	cmp	ip, r2
 8017f40:	da00      	bge.n	8017f44 <_lite_kernel_nl_softmax_iu8ou8+0x714>
 8017f42:	3301      	adds	r3, #1
 8017f44:	2bfe      	cmp	r3, #254	@ 0xfe
 8017f46:	dd3e      	ble.n	8017fc6 <_lite_kernel_nl_softmax_iu8ou8+0x796>
 8017f48:	23ff      	movs	r3, #255	@ 0xff
 8017f4a:	4581      	cmp	r9, r0
 8017f4c:	f804 3f01 	strb.w	r3, [r4, #1]!
 8017f50:	d026      	beq.n	8017fa0 <_lite_kernel_nl_softmax_iu8ou8+0x770>
 8017f52:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8017f56:	ea81 0302 	eor.w	r3, r1, r2
 8017f5a:	0fdb      	lsrs	r3, r3, #31
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	bf0b      	itete	eq
 8017f60:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8017f64:	4633      	movne	r3, r6
 8017f66:	f04f 0b00 	moveq.w	fp, #0
 8017f6a:	f04f 3bff 	movne.w	fp, #4294967295
 8017f6e:	4291      	cmp	r1, r2
 8017f70:	d0e2      	beq.n	8017f38 <_lite_kernel_nl_softmax_iu8ou8+0x708>
 8017f72:	fbc2 3b01 	smlal	r3, fp, r2, r1
 8017f76:	f1bb 0f00 	cmp.w	fp, #0
 8017f7a:	da02      	bge.n	8017f82 <_lite_kernel_nl_softmax_iu8ou8+0x752>
 8017f7c:	19db      	adds	r3, r3, r7
 8017f7e:	f14b 0b00 	adc.w	fp, fp, #0
 8017f82:	0fdb      	lsrs	r3, r3, #31
 8017f84:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 8017f88:	ea0e 0203 	and.w	r2, lr, r3
 8017f8c:	fa53 f30a 	asrs.w	r3, r3, sl
 8017f90:	d5d5      	bpl.n	8017f3e <_lite_kernel_nl_softmax_iu8ou8+0x70e>
 8017f92:	4590      	cmp	r8, r2
 8017f94:	dbd5      	blt.n	8017f42 <_lite_kernel_nl_softmax_iu8ou8+0x712>
 8017f96:	2300      	movs	r3, #0
 8017f98:	4581      	cmp	r9, r0
 8017f9a:	f804 3f01 	strb.w	r3, [r4, #1]!
 8017f9e:	d1d8      	bne.n	8017f52 <_lite_kernel_nl_softmax_iu8ou8+0x722>
 8017fa0:	9b02      	ldr	r3, [sp, #8]
 8017fa2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8017fa4:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8017fa6:	4413      	add	r3, r2
 8017fa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017faa:	440a      	add	r2, r1
 8017fac:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8017fae:	9302      	str	r3, [sp, #8]
 8017fb0:	9213      	str	r2, [sp, #76]	@ 0x4c
 8017fb2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017fb4:	440a      	add	r2, r1
 8017fb6:	9214      	str	r2, [sp, #80]	@ 0x50
 8017fb8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	f63f ac4e 	bhi.w	801785c <_lite_kernel_nl_softmax_iu8ou8+0x2c>
 8017fc0:	b019      	add	sp, #100	@ 0x64
 8017fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	dde5      	ble.n	8017f96 <_lite_kernel_nl_softmax_iu8ou8+0x766>
 8017fca:	b2db      	uxtb	r3, r3
 8017fcc:	e7bd      	b.n	8017f4a <_lite_kernel_nl_softmax_iu8ou8+0x71a>
 8017fce:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8017fd2:	dc3b      	bgt.n	801804c <_lite_kernel_nl_softmax_iu8ou8+0x81c>
 8017fd4:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8017fd8:	0051      	lsls	r1, r2, #1
 8017fda:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8017fde:	bfd8      	it	le
 8017fe0:	f04f 4100 	movle.w	r1, #2147483648	@ 0x80000000
 8017fe4:	e775      	b.n	8017ed2 <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 8017fe6:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8017fea:	2500      	movs	r5, #0
 8017fec:	e6cd      	b.n	8017d8a <_lite_kernel_nl_softmax_iu8ou8+0x55a>
 8017fee:	bbb9      	cbnz	r1, 8018060 <_lite_kernel_nl_softmax_iu8ou8+0x830>
 8017ff0:	f04f 0a03 	mov.w	sl, #3
 8017ff4:	f04f 0920 	mov.w	r9, #32
 8017ff8:	2000      	movs	r0, #0
 8017ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8017ffe:	f04f 355a 	mov.w	r5, #1515870810	@ 0x5a5a5a5a
 8018002:	4a1a      	ldr	r2, [pc, #104]	@ (801806c <_lite_kernel_nl_softmax_iu8ou8+0x83c>)
 8018004:	4604      	mov	r4, r0
 8018006:	4619      	mov	r1, r3
 8018008:	462e      	mov	r6, r5
 801800a:	469c      	mov	ip, r3
 801800c:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 8018010:	4680      	mov	r8, r0
 8018012:	e64d      	b.n	8017cb0 <_lite_kernel_nl_softmax_iu8ou8+0x480>
 8018014:	17c4      	asrs	r4, r0, #31
 8018016:	fba3 2500 	umull	r2, r5, r3, r0
 801801a:	fb03 f604 	mul.w	r6, r3, r4
 801801e:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8018022:	fb00 6601 	mla	r6, r0, r1, r6
 8018026:	eb46 0505 	adc.w	r5, r6, r5
 801802a:	2d00      	cmp	r5, #0
 801802c:	da05      	bge.n	801803a <_lite_kernel_nl_softmax_iu8ou8+0x80a>
 801802e:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8018032:	1996      	adds	r6, r2, r6
 8018034:	4632      	mov	r2, r6
 8018036:	f145 0500 	adc.w	r5, r5, #0
 801803a:	0fd2      	lsrs	r2, r2, #31
 801803c:	f04f 36ff 	mov.w	r6, #4294967295
 8018040:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8018044:	4d0a      	ldr	r5, [pc, #40]	@ (8018070 <_lite_kernel_nl_softmax_iu8ou8+0x840>)
 8018046:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 801804a:	e67b      	b.n	8017d44 <_lite_kernel_nl_softmax_iu8ou8+0x514>
 801804c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018054:	db02      	blt.n	801805c <_lite_kernel_nl_softmax_iu8ou8+0x82c>
 8018056:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801805a:	e73a      	b.n	8017ed2 <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 801805c:	0059      	lsls	r1, r3, #1
 801805e:	e7bc      	b.n	8017fda <_lite_kernel_nl_softmax_iu8ou8+0x7aa>
 8018060:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018062:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018064:	4413      	add	r3, r2
 8018066:	9305      	str	r3, [sp, #20]
 8018068:	e40b      	b.n	8017882 <_lite_kernel_nl_softmax_iu8ou8+0x52>
 801806a:	bf00      	nop
 801806c:	20000001 	.word	0x20000001
 8018070:	c0000001 	.word	0xc0000001

08018074 <lite_bilinear_is8os8_kernel>:
 8018074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018078:	9c07      	ldr	r4, [sp, #28]
 801807a:	2a00      	cmp	r2, #0
 801807c:	d04b      	beq.n	8018116 <lite_bilinear_is8os8_kernel+0xa2>
 801807e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8018082:	eb01 0e02 	add.w	lr, r1, r2
 8018086:	f100 3cff 	add.w	ip, r0, #4294967295
 801808a:	f1c0 0501 	rsb	r5, r0, #1
 801808e:	685f      	ldr	r7, [r3, #4]
 8018090:	eb05 060c 	add.w	r6, r5, ip
 8018094:	681a      	ldr	r2, [r3, #0]
 8018096:	eb00 0807 	add.w	r8, r0, r7
 801809a:	edd4 3a02 	vldr	s7, [r4, #8]
 801809e:	4402      	add	r2, r0
 80180a0:	ed94 4a01 	vldr	s8, [r4, #4]
 80180a4:	f918 8006 	ldrsb.w	r8, [r8, r6]
 80180a8:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 80180ac:	ee07 8a90 	vmov	s15, r8
 80180b0:	f912 8006 	ldrsb.w	r8, [r2, r6]
 80180b4:	ee06 9a90 	vmov	s13, r9
 80180b8:	443a      	add	r2, r7
 80180ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180be:	ee06 8a10 	vmov	s12, r8
 80180c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80180c6:	edd4 4a00 	vldr	s9, [r4]
 80180ca:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80180ce:	5792      	ldrsb	r2, [r2, r6]
 80180d0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80180d4:	ed94 5a03 	vldr	s10, [r4, #12]
 80180d8:	ee07 2a10 	vmov	s14, r2
 80180dc:	eee4 7a06 	vfma.f32	s15, s8, s12
 80180e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80180e4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80180e8:	eee5 7a07 	vfma.f32	s15, s10, s14
 80180ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180f0:	ee37 7aa5 	vadd.f32	s14, s15, s11
 80180f4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80180f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018104:	dd09      	ble.n	801811a <lite_bilinear_is8os8_kernel+0xa6>
 8018106:	ee17 2a10 	vmov	r2, s14
 801810a:	f302 0207 	ssat	r2, #8, r2
 801810e:	f801 2b01 	strb.w	r2, [r1], #1
 8018112:	4571      	cmp	r1, lr
 8018114:	d1bb      	bne.n	801808e <lite_bilinear_is8os8_kernel+0x1a>
 8018116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801811a:	ee17 2a90 	vmov	r2, s15
 801811e:	f302 0207 	ssat	r2, #8, r2
 8018122:	f801 2b01 	strb.w	r2, [r1], #1
 8018126:	4571      	cmp	r1, lr
 8018128:	d1b1      	bne.n	801808e <lite_bilinear_is8os8_kernel+0x1a>
 801812a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801812e:	bf00      	nop

08018130 <SSD_quick_sort_partition.constprop.0>:
 8018130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018134:	ed2d 8b02 	vpush	{d8}
 8018138:	b087      	sub	sp, #28
 801813a:	461f      	mov	r7, r3
 801813c:	f102 3cff 	add.w	ip, r2, #4294967295
 8018140:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8018144:	1c7e      	adds	r6, r7, #1
 8018146:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018148:	45b4      	cmp	ip, r6
 801814a:	9104      	str	r1, [sp, #16]
 801814c:	fb08 3202 	mla	r2, r8, r2, r3
 8018150:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018154:	ed92 8a00 	vldr	s16, [r2]
 8018158:	da35      	bge.n	80181c6 <SSD_quick_sort_partition.constprop.0+0x96>
 801815a:	469a      	mov	sl, r3
 801815c:	ebc8 7388 	rsb	r3, r8, r8, lsl #30
 8018160:	f1b8 0f01 	cmp.w	r8, #1
 8018164:	4681      	mov	r9, r0
 8018166:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801816a:	f10c 0401 	add.w	r4, ip, #1
 801816e:	9701      	str	r7, [sp, #4]
 8018170:	9305      	str	r3, [sp, #20]
 8018172:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8018176:	ee08 3a90 	vmov	s17, r3
 801817a:	d174      	bne.n	8018266 <SSD_quick_sort_partition.constprop.0+0x136>
 801817c:	eb04 030a 	add.w	r3, r4, sl
 8018180:	9f01      	ldr	r7, [sp, #4]
 8018182:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8018186:	e002      	b.n	801818e <SSD_quick_sort_partition.constprop.0+0x5e>
 8018188:	42a7      	cmp	r7, r4
 801818a:	dd08      	ble.n	801819e <SSD_quick_sort_partition.constprop.0+0x6e>
 801818c:	3401      	adds	r4, #1
 801818e:	ecf3 7a01 	vldmia	r3!, {s15}
 8018192:	46a4      	mov	ip, r4
 8018194:	eeb4 8a67 	vcmp.f32	s16, s15
 8018198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801819c:	d4f4      	bmi.n	8018188 <SSD_quick_sort_partition.constprop.0+0x58>
 801819e:	eb06 030a 	add.w	r3, r6, sl
 80181a2:	1e75      	subs	r5, r6, #1
 80181a4:	9701      	str	r7, [sp, #4]
 80181a6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80181aa:	e000      	b.n	80181ae <SSD_quick_sort_partition.constprop.0+0x7e>
 80181ac:	3d01      	subs	r5, #1
 80181ae:	ed73 7a01 	vldmdb	r3!, {s15}
 80181b2:	462e      	mov	r6, r5
 80181b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80181b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181bc:	dcf6      	bgt.n	80181ac <SSD_quick_sort_partition.constprop.0+0x7c>
 80181be:	46ab      	mov	fp, r5
 80181c0:	9701      	str	r7, [sp, #4]
 80181c2:	42ac      	cmp	r4, r5
 80181c4:	db05      	blt.n	80181d2 <SSD_quick_sort_partition.constprop.0+0xa2>
 80181c6:	4630      	mov	r0, r6
 80181c8:	b007      	add	sp, #28
 80181ca:	ecbd 8b02 	vpop	{d8}
 80181ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d2:	eb09 018c 	add.w	r1, r9, ip, lsl #2
 80181d6:	ee18 2a90 	vmov	r2, s17
 80181da:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80181dc:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 80181e0:	9102      	str	r1, [sp, #8]
 80181e2:	f001 fb62 	bl	80198aa <memcpy>
 80181e6:	9902      	ldr	r1, [sp, #8]
 80181e8:	ee18 2a90 	vmov	r2, s17
 80181ec:	4608      	mov	r0, r1
 80181ee:	4659      	mov	r1, fp
 80181f0:	f001 fb5b 	bl	80198aa <memcpy>
 80181f4:	ee18 2a90 	vmov	r2, s17
 80181f8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80181fa:	4658      	mov	r0, fp
 80181fc:	f001 fb55 	bl	80198aa <memcpy>
 8018200:	9b04      	ldr	r3, [sp, #16]
 8018202:	ea4f 1b04 	mov.w	fp, r4, lsl #4
 8018206:	46a4      	mov	ip, r4
 8018208:	eb03 1e04 	add.w	lr, r3, r4, lsl #4
 801820c:	461c      	mov	r4, r3
 801820e:	f853 000b 	ldr.w	r0, [r3, fp]
 8018212:	f1b8 0f01 	cmp.w	r8, #1
 8018216:	eb04 1705 	add.w	r7, r4, r5, lsl #4
 801821a:	f8de 1004 	ldr.w	r1, [lr, #4]
 801821e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8018222:	f8de 2008 	ldr.w	r2, [lr, #8]
 8018226:	f8de 300c 	ldr.w	r3, [lr, #12]
 801822a:	9503      	str	r5, [sp, #12]
 801822c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801822e:	9702      	str	r7, [sp, #8]
 8018230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018232:	4625      	mov	r5, r4
 8018234:	9b02      	ldr	r3, [sp, #8]
 8018236:	9c03      	ldr	r4, [sp, #12]
 8018238:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801823a:	5928      	ldr	r0, [r5, r4]
 801823c:	6859      	ldr	r1, [r3, #4]
 801823e:	4617      	mov	r7, r2
 8018240:	689a      	ldr	r2, [r3, #8]
 8018242:	68db      	ldr	r3, [r3, #12]
 8018244:	f845 000b 	str.w	r0, [r5, fp]
 8018248:	f8ce 1004 	str.w	r1, [lr, #4]
 801824c:	f8ce 2008 	str.w	r2, [lr, #8]
 8018250:	f8ce 300c 	str.w	r3, [lr, #12]
 8018254:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018256:	5128      	str	r0, [r5, r4]
 8018258:	f10c 0401 	add.w	r4, ip, #1
 801825c:	9802      	ldr	r0, [sp, #8]
 801825e:	6041      	str	r1, [r0, #4]
 8018260:	6082      	str	r2, [r0, #8]
 8018262:	60c3      	str	r3, [r0, #12]
 8018264:	d08a      	beq.n	801817c <SSD_quick_sort_partition.constprop.0+0x4c>
 8018266:	fb0c 8108 	mla	r1, ip, r8, r8
 801826a:	9f01      	ldr	r7, [sp, #4]
 801826c:	e000      	b.n	8018270 <SSD_quick_sort_partition.constprop.0+0x140>
 801826e:	3401      	adds	r4, #1
 8018270:	eb0a 0301 	add.w	r3, sl, r1
 8018274:	468c      	mov	ip, r1
 8018276:	4441      	add	r1, r8
 8018278:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801827c:	edd3 7a00 	vldr	s15, [r3]
 8018280:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018288:	bf4c      	ite	mi
 801828a:	2301      	movmi	r3, #1
 801828c:	2300      	movpl	r3, #0
 801828e:	42a7      	cmp	r7, r4
 8018290:	bfd4      	ite	le
 8018292:	2300      	movle	r3, #0
 8018294:	f003 0301 	andgt.w	r3, r3, #1
 8018298:	2b00      	cmp	r3, #0
 801829a:	d1e8      	bne.n	801826e <SSD_quick_sort_partition.constprop.0+0x13e>
 801829c:	1e75      	subs	r5, r6, #1
 801829e:	9905      	ldr	r1, [sp, #20]
 80182a0:	9701      	str	r7, [sp, #4]
 80182a2:	fb08 f205 	mul.w	r2, r8, r5
 80182a6:	eb0a 0302 	add.w	r3, sl, r2
 80182aa:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80182ae:	e000      	b.n	80182b2 <SSD_quick_sort_partition.constprop.0+0x182>
 80182b0:	3d01      	subs	r5, #1
 80182b2:	edd3 7a00 	vldr	s15, [r3]
 80182b6:	4693      	mov	fp, r2
 80182b8:	462e      	mov	r6, r5
 80182ba:	440b      	add	r3, r1
 80182bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80182c0:	eba2 0208 	sub.w	r2, r2, r8
 80182c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c8:	dcf2      	bgt.n	80182b0 <SSD_quick_sort_partition.constprop.0+0x180>
 80182ca:	9701      	str	r7, [sp, #4]
 80182cc:	e779      	b.n	80181c2 <SSD_quick_sort_partition.constprop.0+0x92>
 80182ce:	bf00      	nop

080182d0 <SSD_quick_sort_core.constprop.1>:
 80182d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d4:	4293      	cmp	r3, r2
 80182d6:	b08b      	sub	sp, #44	@ 0x2c
 80182d8:	e9dd ba15 	ldrd	fp, sl, [sp, #84]	@ 0x54
 80182dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80182de:	f340 80c6 	ble.w	801846e <SSD_quick_sort_core.constprop.1+0x19e>
 80182e2:	465e      	mov	r6, fp
 80182e4:	4657      	mov	r7, sl
 80182e6:	4691      	mov	r9, r2
 80182e8:	468b      	mov	fp, r1
 80182ea:	4682      	mov	sl, r0
 80182ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80182ee:	464a      	mov	r2, r9
 80182f0:	4659      	mov	r1, fp
 80182f2:	4650      	mov	r0, sl
 80182f4:	9300      	str	r3, [sp, #0]
 80182f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182f8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80182fc:	f7ff ff18 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 8018300:	4548      	cmp	r0, r9
 8018302:	9006      	str	r0, [sp, #24]
 8018304:	f340 80ac 	ble.w	8018460 <SSD_quick_sort_core.constprop.1+0x190>
 8018308:	46b0      	mov	r8, r6
 801830a:	463e      	mov	r6, r7
 801830c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801830e:	464a      	mov	r2, r9
 8018310:	9b06      	ldr	r3, [sp, #24]
 8018312:	4659      	mov	r1, fp
 8018314:	4650      	mov	r0, sl
 8018316:	9400      	str	r4, [sp, #0]
 8018318:	e9cd 8601 	strd	r8, r6, [sp, #4]
 801831c:	f7ff ff08 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 8018320:	4548      	cmp	r0, r9
 8018322:	9007      	str	r0, [sp, #28]
 8018324:	f340 8093 	ble.w	801844e <SSD_quick_sort_core.constprop.1+0x17e>
 8018328:	4659      	mov	r1, fp
 801832a:	46c3      	mov	fp, r8
 801832c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801832e:	464a      	mov	r2, r9
 8018330:	9b07      	ldr	r3, [sp, #28]
 8018332:	4650      	mov	r0, sl
 8018334:	9400      	str	r4, [sp, #0]
 8018336:	9104      	str	r1, [sp, #16]
 8018338:	e9cd b601 	strd	fp, r6, [sp, #4]
 801833c:	f7ff fef8 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 8018340:	4548      	cmp	r0, r9
 8018342:	9904      	ldr	r1, [sp, #16]
 8018344:	9008      	str	r0, [sp, #32]
 8018346:	dd79      	ble.n	801843c <SSD_quick_sort_core.constprop.1+0x16c>
 8018348:	465f      	mov	r7, fp
 801834a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801834c:	464a      	mov	r2, r9
 801834e:	9b08      	ldr	r3, [sp, #32]
 8018350:	9000      	str	r0, [sp, #0]
 8018352:	4650      	mov	r0, sl
 8018354:	9104      	str	r1, [sp, #16]
 8018356:	e9cd 7601 	strd	r7, r6, [sp, #4]
 801835a:	f7ff fee9 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 801835e:	4548      	cmp	r0, r9
 8018360:	4683      	mov	fp, r0
 8018362:	9904      	ldr	r1, [sp, #16]
 8018364:	dd64      	ble.n	8018430 <SSD_quick_sort_core.constprop.1+0x160>
 8018366:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8018368:	465b      	mov	r3, fp
 801836a:	464a      	mov	r2, r9
 801836c:	9104      	str	r1, [sp, #16]
 801836e:	9000      	str	r0, [sp, #0]
 8018370:	4650      	mov	r0, sl
 8018372:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8018376:	f7ff fedb 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 801837a:	4548      	cmp	r0, r9
 801837c:	4604      	mov	r4, r0
 801837e:	9904      	ldr	r1, [sp, #16]
 8018380:	dd52      	ble.n	8018428 <SSD_quick_sort_core.constprop.1+0x158>
 8018382:	f8cd b014 	str.w	fp, [sp, #20]
 8018386:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018388:	4623      	mov	r3, r4
 801838a:	4650      	mov	r0, sl
 801838c:	9104      	str	r1, [sp, #16]
 801838e:	9200      	str	r2, [sp, #0]
 8018390:	464a      	mov	r2, r9
 8018392:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8018396:	f7ff fecb 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 801839a:	4581      	cmp	r9, r0
 801839c:	4683      	mov	fp, r0
 801839e:	9904      	ldr	r1, [sp, #16]
 80183a0:	da3c      	bge.n	801841c <SSD_quick_sort_core.constprop.1+0x14c>
 80183a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80183a4:	464a      	mov	r2, r9
 80183a6:	4650      	mov	r0, sl
 80183a8:	9104      	str	r1, [sp, #16]
 80183aa:	9300      	str	r3, [sp, #0]
 80183ac:	465b      	mov	r3, fp
 80183ae:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80183b2:	f7ff febd 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 80183b6:	4548      	cmp	r0, r9
 80183b8:	4680      	mov	r8, r0
 80183ba:	9904      	ldr	r1, [sp, #16]
 80183bc:	dd2a      	ble.n	8018414 <SSD_quick_sort_core.constprop.1+0x144>
 80183be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80183c0:	464a      	mov	r2, r9
 80183c2:	4650      	mov	r0, sl
 80183c4:	9104      	str	r1, [sp, #16]
 80183c6:	9300      	str	r3, [sp, #0]
 80183c8:	4643      	mov	r3, r8
 80183ca:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80183ce:	f7ff feaf 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 80183d2:	4548      	cmp	r0, r9
 80183d4:	4605      	mov	r5, r0
 80183d6:	9904      	ldr	r1, [sp, #16]
 80183d8:	dd18      	ble.n	801840c <SSD_quick_sort_core.constprop.1+0x13c>
 80183da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80183dc:	464a      	mov	r2, r9
 80183de:	4650      	mov	r0, sl
 80183e0:	9104      	str	r1, [sp, #16]
 80183e2:	9300      	str	r3, [sp, #0]
 80183e4:	462b      	mov	r3, r5
 80183e6:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80183ea:	f7ff fea1 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 80183ee:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80183f0:	464a      	mov	r2, r9
 80183f2:	f100 0901 	add.w	r9, r0, #1
 80183f6:	4603      	mov	r3, r0
 80183f8:	9100      	str	r1, [sp, #0]
 80183fa:	4650      	mov	r0, sl
 80183fc:	9904      	ldr	r1, [sp, #16]
 80183fe:	9602      	str	r6, [sp, #8]
 8018400:	9701      	str	r7, [sp, #4]
 8018402:	f7ff ff65 	bl	80182d0 <SSD_quick_sort_core.constprop.1>
 8018406:	454d      	cmp	r5, r9
 8018408:	9904      	ldr	r1, [sp, #16]
 801840a:	dce6      	bgt.n	80183da <SSD_quick_sort_core.constprop.1+0x10a>
 801840c:	f105 0901 	add.w	r9, r5, #1
 8018410:	45c8      	cmp	r8, r9
 8018412:	dcd4      	bgt.n	80183be <SSD_quick_sort_core.constprop.1+0xee>
 8018414:	f108 0901 	add.w	r9, r8, #1
 8018418:	45cb      	cmp	fp, r9
 801841a:	dcc2      	bgt.n	80183a2 <SSD_quick_sort_core.constprop.1+0xd2>
 801841c:	f10b 0901 	add.w	r9, fp, #1
 8018420:	454c      	cmp	r4, r9
 8018422:	dcb0      	bgt.n	8018386 <SSD_quick_sort_core.constprop.1+0xb6>
 8018424:	f8dd b014 	ldr.w	fp, [sp, #20]
 8018428:	f104 0901 	add.w	r9, r4, #1
 801842c:	45cb      	cmp	fp, r9
 801842e:	dc9a      	bgt.n	8018366 <SSD_quick_sort_core.constprop.1+0x96>
 8018430:	f10b 0901 	add.w	r9, fp, #1
 8018434:	9b08      	ldr	r3, [sp, #32]
 8018436:	454b      	cmp	r3, r9
 8018438:	dc87      	bgt.n	801834a <SSD_quick_sort_core.constprop.1+0x7a>
 801843a:	46bb      	mov	fp, r7
 801843c:	9b08      	ldr	r3, [sp, #32]
 801843e:	f103 0901 	add.w	r9, r3, #1
 8018442:	9b07      	ldr	r3, [sp, #28]
 8018444:	454b      	cmp	r3, r9
 8018446:	f73f af71 	bgt.w	801832c <SSD_quick_sort_core.constprop.1+0x5c>
 801844a:	46d8      	mov	r8, fp
 801844c:	468b      	mov	fp, r1
 801844e:	9b07      	ldr	r3, [sp, #28]
 8018450:	f103 0901 	add.w	r9, r3, #1
 8018454:	9b06      	ldr	r3, [sp, #24]
 8018456:	454b      	cmp	r3, r9
 8018458:	f73f af58 	bgt.w	801830c <SSD_quick_sort_core.constprop.1+0x3c>
 801845c:	4637      	mov	r7, r6
 801845e:	4646      	mov	r6, r8
 8018460:	9b06      	ldr	r3, [sp, #24]
 8018462:	f103 0901 	add.w	r9, r3, #1
 8018466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018468:	454b      	cmp	r3, r9
 801846a:	f73f af3f 	bgt.w	80182ec <SSD_quick_sort_core.constprop.1+0x1c>
 801846e:	b00b      	add	sp, #44	@ 0x2c
 8018470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018474 <ssd_st_pp_getNNBoxes>:
 8018474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018478:	f04f 33ff 	mov.w	r3, #4294967295
 801847c:	2700      	movs	r7, #0
 801847e:	f04f 0800 	mov.w	r8, #0
 8018482:	ed2d 8b02 	vpush	{d8}
 8018486:	b082      	sub	sp, #8
 8018488:	614f      	str	r7, [r1, #20]
 801848a:	9301      	str	r3, [sp, #4]
 801848c:	684b      	ldr	r3, [r1, #4]
 801848e:	f8cd 8000 	str.w	r8, [sp]
 8018492:	42bb      	cmp	r3, r7
 8018494:	f340 8101 	ble.w	801869a <ssd_st_pp_getNNBoxes+0x226>
 8018498:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
 801849c:	460c      	mov	r4, r1
 801849e:	4605      	mov	r5, r0
 80184a0:	463e      	mov	r6, r7
 80184a2:	e005      	b.n	80184b0 <ssd_st_pp_getNNBoxes+0x3c>
 80184a4:	3601      	adds	r6, #1
 80184a6:	6863      	ldr	r3, [r4, #4]
 80184a8:	3710      	adds	r7, #16
 80184aa:	42b3      	cmp	r3, r6
 80184ac:	f340 80f5 	ble.w	801869a <ssd_st_pp_getNNBoxes+0x226>
 80184b0:	6820      	ldr	r0, [r4, #0]
 80184b2:	ab01      	add	r3, sp, #4
 80184b4:	68a9      	ldr	r1, [r5, #8]
 80184b6:	466a      	mov	r2, sp
 80184b8:	fb06 f000 	mul.w	r0, r6, r0
 80184bc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80184c0:	f8c1 8000 	str.w	r8, [r1]
 80184c4:	6821      	ldr	r1, [r4, #0]
 80184c6:	68a8      	ldr	r0, [r5, #8]
 80184c8:	fb06 fc01 	mul.w	ip, r6, r1
 80184cc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80184d0:	f000 fa54 	bl	801897c <objdetect_maxi>
 80184d4:	ed94 7a03 	vldr	s14, [r4, #12]
 80184d8:	eddd 7a00 	vldr	s15, [sp]
 80184dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184e4:	d8de      	bhi.n	80184a4 <ssd_st_pp_getNNBoxes+0x30>
 80184e6:	6823      	ldr	r3, [r4, #0]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	dd11      	ble.n	8018510 <ssd_st_pp_getNNBoxes+0x9c>
 80184ec:	2200      	movs	r2, #0
 80184ee:	68a9      	ldr	r1, [r5, #8]
 80184f0:	fb06 2c03 	mla	ip, r6, r3, r2
 80184f4:	6960      	ldr	r0, [r4, #20]
 80184f6:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80184fa:	fb00 2303 	mla	r3, r0, r3, r2
 80184fe:	3201      	adds	r2, #1
 8018500:	f8dc 0000 	ldr.w	r0, [ip]
 8018504:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018508:	6018      	str	r0, [r3, #0]
 801850a:	6823      	ldr	r3, [r4, #0]
 801850c:	4293      	cmp	r3, r2
 801850e:	dcee      	bgt.n	80184ee <ssd_st_pp_getNNBoxes+0x7a>
 8018510:	6829      	ldr	r1, [r5, #0]
 8018512:	f107 0208 	add.w	r2, r7, #8
 8018516:	6960      	ldr	r0, [r4, #20]
 8018518:	f107 0c04 	add.w	ip, r7, #4
 801851c:	686b      	ldr	r3, [r5, #4]
 801851e:	3601      	adds	r6, #1
 8018520:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8018524:	4439      	add	r1, r7
 8018526:	ed91 7a00 	vldr	s14, [r1]
 801852a:	1899      	adds	r1, r3, r2
 801852c:	443b      	add	r3, r7
 801852e:	edd1 7a00 	vldr	s15, [r1]
 8018532:	edd3 6a00 	vldr	s13, [r3]
 8018536:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801853a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801853e:	edc0 7a00 	vstr	s15, [r0]
 8018542:	6961      	ldr	r1, [r4, #20]
 8018544:	e9d5 0300 	ldrd	r0, r3, [r5]
 8018548:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801854c:	4410      	add	r0, r2
 801854e:	ed90 7a00 	vldr	s14, [r0]
 8018552:	1898      	adds	r0, r3, r2
 8018554:	443b      	add	r3, r7
 8018556:	edd0 7a00 	vldr	s15, [r0]
 801855a:	edd3 6a00 	vldr	s13, [r3]
 801855e:	f107 030c 	add.w	r3, r7, #12
 8018562:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018566:	ee67 7a87 	vmul.f32	s15, s15, s14
 801856a:	edc1 7a02 	vstr	s15, [r1, #8]
 801856e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018572:	eb00 0e0c 	add.w	lr, r0, ip
 8018576:	ed9e 7a00 	vldr	s14, [lr]
 801857a:	eb01 0e03 	add.w	lr, r1, r3
 801857e:	4461      	add	r1, ip
 8018580:	edde 7a00 	vldr	s15, [lr]
 8018584:	edd1 6a00 	vldr	s13, [r1]
 8018588:	6961      	ldr	r1, [r4, #20]
 801858a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801858e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8018592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018596:	edc1 7a01 	vstr	s15, [r1, #4]
 801859a:	6961      	ldr	r1, [r4, #20]
 801859c:	e9d5 e000 	ldrd	lr, r0, [r5]
 80185a0:	eb0e 1101 	add.w	r1, lr, r1, lsl #4
 80185a4:	449e      	add	lr, r3
 80185a6:	ed9e 7a00 	vldr	s14, [lr]
 80185aa:	eb00 0e03 	add.w	lr, r0, r3
 80185ae:	4460      	add	r0, ip
 80185b0:	edde 7a00 	vldr	s15, [lr]
 80185b4:	edd0 6a00 	vldr	s13, [r0]
 80185b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80185bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80185c0:	edc1 7a03 	vstr	s15, [r1, #12]
 80185c4:	6960      	ldr	r0, [r4, #20]
 80185c6:	6829      	ldr	r1, [r5, #0]
 80185c8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80185cc:	6868      	ldr	r0, [r5, #4]
 80185ce:	4438      	add	r0, r7
 80185d0:	edd1 7a00 	vldr	s15, [r1]
 80185d4:	3710      	adds	r7, #16
 80185d6:	ed90 7a00 	vldr	s14, [r0]
 80185da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80185de:	edc1 7a00 	vstr	s15, [r1]
 80185e2:	6961      	ldr	r1, [r4, #20]
 80185e4:	6828      	ldr	r0, [r5, #0]
 80185e6:	0109      	lsls	r1, r1, #4
 80185e8:	3104      	adds	r1, #4
 80185ea:	4401      	add	r1, r0
 80185ec:	6868      	ldr	r0, [r5, #4]
 80185ee:	4484      	add	ip, r0
 80185f0:	edd1 7a00 	vldr	s15, [r1]
 80185f4:	ed9c 7a00 	vldr	s14, [ip]
 80185f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80185fc:	edc1 7a00 	vstr	s15, [r1]
 8018600:	6961      	ldr	r1, [r4, #20]
 8018602:	6828      	ldr	r0, [r5, #0]
 8018604:	0109      	lsls	r1, r1, #4
 8018606:	3108      	adds	r1, #8
 8018608:	4401      	add	r1, r0
 801860a:	6868      	ldr	r0, [r5, #4]
 801860c:	4402      	add	r2, r0
 801860e:	edd1 7a00 	vldr	s15, [r1]
 8018612:	ed92 7a00 	vldr	s14, [r2]
 8018616:	ee77 7a87 	vadd.f32	s15, s15, s14
 801861a:	edc1 7a00 	vstr	s15, [r1]
 801861e:	6962      	ldr	r2, [r4, #20]
 8018620:	6829      	ldr	r1, [r5, #0]
 8018622:	0112      	lsls	r2, r2, #4
 8018624:	320c      	adds	r2, #12
 8018626:	440a      	add	r2, r1
 8018628:	6869      	ldr	r1, [r5, #4]
 801862a:	440b      	add	r3, r1
 801862c:	edd2 7a00 	vldr	s15, [r2]
 8018630:	ed93 7a00 	vldr	s14, [r3]
 8018634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018638:	edc2 7a00 	vstr	s15, [r2]
 801863c:	6962      	ldr	r2, [r4, #20]
 801863e:	682b      	ldr	r3, [r5, #0]
 8018640:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8018644:	ed93 6a01 	vldr	s12, [r3, #4]
 8018648:	ed93 7a03 	vldr	s14, [r3, #12]
 801864c:	edd3 6a00 	vldr	s13, [r3]
 8018650:	ee37 7a46 	vsub.f32	s14, s14, s12
 8018654:	edd3 7a02 	vldr	s15, [r3, #8]
 8018658:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801865c:	eea7 6a08 	vfma.f32	s12, s14, s16
 8018660:	eee7 6a88 	vfma.f32	s13, s15, s16
 8018664:	ed83 6a00 	vstr	s12, [r3]
 8018668:	6962      	ldr	r2, [r4, #20]
 801866a:	682b      	ldr	r3, [r5, #0]
 801866c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8018670:	edc3 6a01 	vstr	s13, [r3, #4]
 8018674:	6962      	ldr	r2, [r4, #20]
 8018676:	682b      	ldr	r3, [r5, #0]
 8018678:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801867c:	ed83 7a02 	vstr	s14, [r3, #8]
 8018680:	6962      	ldr	r2, [r4, #20]
 8018682:	682b      	ldr	r3, [r5, #0]
 8018684:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8018688:	edc3 7a03 	vstr	s15, [r3, #12]
 801868c:	6963      	ldr	r3, [r4, #20]
 801868e:	3301      	adds	r3, #1
 8018690:	6163      	str	r3, [r4, #20]
 8018692:	6863      	ldr	r3, [r4, #4]
 8018694:	42b3      	cmp	r3, r6
 8018696:	f73f af0b 	bgt.w	80184b0 <ssd_st_pp_getNNBoxes+0x3c>
 801869a:	2000      	movs	r0, #0
 801869c:	b002      	add	sp, #8
 801869e:	ecbd 8b02 	vpop	{d8}
 80186a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186a6:	bf00      	nop

080186a8 <ssd_st_pp_nms_filtering>:
 80186a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ac:	ed2d 8b02 	vpush	{d8}
 80186b0:	b089      	sub	sp, #36	@ 0x24
 80186b2:	680a      	ldr	r2, [r1, #0]
 80186b4:	af04      	add	r7, sp, #16
 80186b6:	2a04      	cmp	r2, #4
 80186b8:	4613      	mov	r3, r2
 80186ba:	bfb8      	it	lt
 80186bc:	2304      	movlt	r3, #4
 80186be:	2a00      	cmp	r2, #0
 80186c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80186c4:	f103 0307 	add.w	r3, r3, #7
 80186c8:	f023 0307 	bic.w	r3, r3, #7
 80186cc:	ebad 0d03 	sub.w	sp, sp, r3
 80186d0:	ab04      	add	r3, sp, #16
 80186d2:	603b      	str	r3, [r7, #0]
 80186d4:	f340 80b9 	ble.w	801884a <ssd_st_pp_nms_filtering+0x1a2>
 80186d8:	460c      	mov	r4, r1
 80186da:	4680      	mov	r8, r0
 80186dc:	694b      	ldr	r3, [r1, #20]
 80186de:	2600      	movs	r6, #0
 80186e0:	ed9f 8a5e 	vldr	s16, [pc, #376]	@ 801885c <ssd_st_pp_nms_filtering+0x1b4>
 80186e4:	4691      	mov	r9, r2
 80186e6:	1e5a      	subs	r2, r3, #1
 80186e8:	2a00      	cmp	r2, #0
 80186ea:	60fa      	str	r2, [r7, #12]
 80186ec:	dd3b      	ble.n	8018766 <ssd_st_pp_nms_filtering+0xbe>
 80186ee:	f8d8 1000 	ldr.w	r1, [r8]
 80186f2:	2500      	movs	r5, #0
 80186f4:	f8d8 b008 	ldr.w	fp, [r8, #8]
 80186f8:	f8c7 8008 	str.w	r8, [r7, #8]
 80186fc:	468a      	mov	sl, r1
 80186fe:	46b0      	mov	r8, r6
 8018700:	683e      	ldr	r6, [r7, #0]
 8018702:	607c      	str	r4, [r7, #4]
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	462a      	mov	r2, r5
 8018708:	4651      	mov	r1, sl
 801870a:	4658      	mov	r0, fp
 801870c:	f8cd 8000 	str.w	r8, [sp]
 8018710:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8018714:	f7ff fd0c 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 8018718:	42a8      	cmp	r0, r5
 801871a:	4604      	mov	r4, r0
 801871c:	dd19      	ble.n	8018752 <ssd_st_pp_nms_filtering+0xaa>
 801871e:	4644      	mov	r4, r8
 8018720:	4680      	mov	r8, r0
 8018722:	462a      	mov	r2, r5
 8018724:	4643      	mov	r3, r8
 8018726:	4651      	mov	r1, sl
 8018728:	4658      	mov	r0, fp
 801872a:	9400      	str	r4, [sp, #0]
 801872c:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8018730:	f7ff fcfe 	bl	8018130 <SSD_quick_sort_partition.constprop.0>
 8018734:	4603      	mov	r3, r0
 8018736:	462a      	mov	r2, r5
 8018738:	4651      	mov	r1, sl
 801873a:	1c5d      	adds	r5, r3, #1
 801873c:	4658      	mov	r0, fp
 801873e:	9400      	str	r4, [sp, #0]
 8018740:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8018744:	f7ff fdc4 	bl	80182d0 <SSD_quick_sort_core.constprop.1>
 8018748:	45a8      	cmp	r8, r5
 801874a:	dcea      	bgt.n	8018722 <ssd_st_pp_nms_filtering+0x7a>
 801874c:	4643      	mov	r3, r8
 801874e:	46a0      	mov	r8, r4
 8018750:	461c      	mov	r4, r3
 8018752:	1c65      	adds	r5, r4, #1
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	42ab      	cmp	r3, r5
 8018758:	dcd4      	bgt.n	8018704 <ssd_st_pp_nms_filtering+0x5c>
 801875a:	4646      	mov	r6, r8
 801875c:	e9d7 4801 	ldrd	r4, r8, [r7, #4]
 8018760:	6963      	ldr	r3, [r4, #20]
 8018762:	f8d4 9000 	ldr.w	r9, [r4]
 8018766:	2b00      	cmp	r3, #0
 8018768:	dd6b      	ble.n	8018842 <ssd_st_pp_nms_filtering+0x19a>
 801876a:	2501      	movs	r5, #1
 801876c:	4648      	mov	r0, r9
 801876e:	e003      	b.n	8018778 <ssd_st_pp_nms_filtering+0xd0>
 8018770:	46aa      	mov	sl, r5
 8018772:	3501      	adds	r5, #1
 8018774:	4553      	cmp	r3, sl
 8018776:	dd3e      	ble.n	80187f6 <ssd_st_pp_nms_filtering+0x14e>
 8018778:	1e69      	subs	r1, r5, #1
 801877a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801877e:	fb00 6101 	mla	r1, r0, r1, r6
 8018782:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8018786:	edd1 7a00 	vldr	s15, [r1]
 801878a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801878e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018792:	d0ed      	beq.n	8018770 <ssd_st_pp_nms_filtering+0xc8>
 8018794:	f8d8 1000 	ldr.w	r1, [r8]
 8018798:	429d      	cmp	r5, r3
 801879a:	46aa      	mov	sl, r5
 801879c:	eb01 1b05 	add.w	fp, r1, r5, lsl #4
 80187a0:	f1ab 0b10 	sub.w	fp, fp, #16
 80187a4:	da58      	bge.n	8018858 <ssd_st_pp_nms_filtering+0x1b0>
 80187a6:	46a9      	mov	r9, r5
 80187a8:	e00f      	b.n	80187ca <ssd_st_pp_nms_filtering+0x122>
 80187aa:	6822      	ldr	r2, [r4, #0]
 80187ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80187b0:	fb02 6209 	mla	r2, r2, r9, r6
 80187b4:	f109 0901 	add.w	r9, r9, #1
 80187b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80187bc:	ed83 8a00 	vstr	s16, [r3]
 80187c0:	6963      	ldr	r3, [r4, #20]
 80187c2:	4599      	cmp	r9, r3
 80187c4:	da12      	bge.n	80187ec <ssd_st_pp_nms_filtering+0x144>
 80187c6:	f8d8 1000 	ldr.w	r1, [r8]
 80187ca:	eb01 1109 	add.w	r1, r1, r9, lsl #4
 80187ce:	4658      	mov	r0, fp
 80187d0:	f000 f8f6 	bl	80189c0 <objdetect_box_iou>
 80187d4:	edd4 7a04 	vldr	s15, [r4, #16]
 80187d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80187dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e0:	dce3      	bgt.n	80187aa <ssd_st_pp_nms_filtering+0x102>
 80187e2:	f109 0901 	add.w	r9, r9, #1
 80187e6:	6963      	ldr	r3, [r4, #20]
 80187e8:	454b      	cmp	r3, r9
 80187ea:	dcec      	bgt.n	80187c6 <ssd_st_pp_nms_filtering+0x11e>
 80187ec:	4553      	cmp	r3, sl
 80187ee:	6820      	ldr	r0, [r4, #0]
 80187f0:	f105 0501 	add.w	r5, r5, #1
 80187f4:	dcc0      	bgt.n	8018778 <ssd_st_pp_nms_filtering+0xd0>
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	4681      	mov	r9, r0
 80187fa:	dd22      	ble.n	8018842 <ssd_st_pp_nms_filtering+0x19a>
 80187fc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8018800:	2000      	movs	r0, #0
 8018802:	464d      	mov	r5, r9
 8018804:	4684      	mov	ip, r0
 8018806:	e009      	b.n	801881c <ssd_st_pp_nms_filtering+0x174>
 8018808:	68a1      	ldr	r1, [r4, #8]
 801880a:	4561      	cmp	r1, ip
 801880c:	dd11      	ble.n	8018832 <ssd_st_pp_nms_filtering+0x18a>
 801880e:	3001      	adds	r0, #1
 8018810:	f10c 0c01 	add.w	ip, ip, #1
 8018814:	4298      	cmp	r0, r3
 8018816:	da13      	bge.n	8018840 <ssd_st_pp_nms_filtering+0x198>
 8018818:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801881c:	fb05 6100 	mla	r1, r5, r0, r6
 8018820:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018824:	edd2 7a00 	vldr	s15, [r2]
 8018828:	eef5 7a40 	vcmp.f32	s15, #0.0
 801882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018830:	d1ea      	bne.n	8018808 <ssd_st_pp_nms_filtering+0x160>
 8018832:	ed82 8a00 	vstr	s16, [r2]
 8018836:	3001      	adds	r0, #1
 8018838:	6963      	ldr	r3, [r4, #20]
 801883a:	6825      	ldr	r5, [r4, #0]
 801883c:	4298      	cmp	r0, r3
 801883e:	dbeb      	blt.n	8018818 <ssd_st_pp_nms_filtering+0x170>
 8018840:	46a9      	mov	r9, r5
 8018842:	3601      	adds	r6, #1
 8018844:	454e      	cmp	r6, r9
 8018846:	f6ff af4e 	blt.w	80186e6 <ssd_st_pp_nms_filtering+0x3e>
 801884a:	2000      	movs	r0, #0
 801884c:	3714      	adds	r7, #20
 801884e:	46bd      	mov	sp, r7
 8018850:	ecbd 8b02 	vpop	{d8}
 8018854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018858:	4681      	mov	r9, r0
 801885a:	e7d1      	b.n	8018800 <ssd_st_pp_nms_filtering+0x158>
 801885c:	00000000 	.word	0x00000000

08018860 <ssd_st_pp_score_filtering>:
 8018860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018864:	f04f 33ff 	mov.w	r3, #4294967295
 8018868:	b083      	sub	sp, #12
 801886a:	2400      	movs	r4, #0
 801886c:	460e      	mov	r6, r1
 801886e:	9301      	str	r3, [sp, #4]
 8018870:	6953      	ldr	r3, [r2, #20]
 8018872:	9400      	str	r4, [sp, #0]
 8018874:	2b00      	cmp	r3, #0
 8018876:	dd5d      	ble.n	8018934 <ssd_st_pp_score_filtering+0xd4>
 8018878:	2400      	movs	r4, #0
 801887a:	4617      	mov	r7, r2
 801887c:	4680      	mov	r8, r0
 801887e:	2504      	movs	r5, #4
 8018880:	46a1      	mov	r9, r4
 8018882:	6839      	ldr	r1, [r7, #0]
 8018884:	ab01      	add	r3, sp, #4
 8018886:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801888a:	466a      	mov	r2, sp
 801888c:	fb04 fc01 	mul.w	ip, r4, r1
 8018890:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8018894:	f000 f872 	bl	801897c <objdetect_maxi>
 8018898:	ed97 7a03 	vldr	s14, [r7, #12]
 801889c:	eddd 7a00 	vldr	s15, [sp]
 80188a0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80188a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ac:	d837      	bhi.n	801891e <ssd_st_pp_score_filtering+0xbe>
 80188ae:	6832      	ldr	r2, [r6, #0]
 80188b0:	f109 0901 	add.w	r9, r9, #1
 80188b4:	9901      	ldr	r1, [sp, #4]
 80188b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80188ba:	6151      	str	r1, [r2, #20]
 80188bc:	6832      	ldr	r2, [r6, #0]
 80188be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80188c2:	edc2 7a04 	vstr	s15, [r2, #16]
 80188c6:	f8d8 1000 	ldr.w	r1, [r8]
 80188ca:	6832      	ldr	r2, [r6, #0]
 80188cc:	4429      	add	r1, r5
 80188ce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80188d2:	6809      	ldr	r1, [r1, #0]
 80188d4:	6011      	str	r1, [r2, #0]
 80188d6:	f8d8 1000 	ldr.w	r1, [r8]
 80188da:	6832      	ldr	r2, [r6, #0]
 80188dc:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80188e0:	3401      	adds	r4, #1
 80188e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80188e6:	6809      	ldr	r1, [r1, #0]
 80188e8:	6051      	str	r1, [r2, #4]
 80188ea:	f8d8 1000 	ldr.w	r1, [r8]
 80188ee:	6832      	ldr	r2, [r6, #0]
 80188f0:	4429      	add	r1, r5
 80188f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80188f6:	6889      	ldr	r1, [r1, #8]
 80188f8:	6091      	str	r1, [r2, #8]
 80188fa:	f8d8 1000 	ldr.w	r1, [r8]
 80188fe:	6832      	ldr	r2, [r6, #0]
 8018900:	4429      	add	r1, r5
 8018902:	3510      	adds	r5, #16
 8018904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018908:	684a      	ldr	r2, [r1, #4]
 801890a:	60da      	str	r2, [r3, #12]
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	42a3      	cmp	r3, r4
 8018910:	dcb7      	bgt.n	8018882 <ssd_st_pp_score_filtering+0x22>
 8018912:	2000      	movs	r0, #0
 8018914:	f8c6 9004 	str.w	r9, [r6, #4]
 8018918:	b003      	add	sp, #12
 801891a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801891e:	3401      	adds	r4, #1
 8018920:	697b      	ldr	r3, [r7, #20]
 8018922:	3510      	adds	r5, #16
 8018924:	42a3      	cmp	r3, r4
 8018926:	dcac      	bgt.n	8018882 <ssd_st_pp_score_filtering+0x22>
 8018928:	2000      	movs	r0, #0
 801892a:	f8c6 9004 	str.w	r9, [r6, #4]
 801892e:	b003      	add	sp, #12
 8018930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018934:	f04f 0900 	mov.w	r9, #0
 8018938:	2000      	movs	r0, #0
 801893a:	f8c6 9004 	str.w	r9, [r6, #4]
 801893e:	b003      	add	sp, #12
 8018940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018944 <objdetect_ssd_st_pp_reset>:
 8018944:	2200      	movs	r2, #0
 8018946:	4603      	mov	r3, r0
 8018948:	4610      	mov	r0, r2
 801894a:	615a      	str	r2, [r3, #20]
 801894c:	4770      	bx	lr
 801894e:	bf00      	nop

08018950 <objdetect_ssd_st_pp_process>:
 8018950:	b570      	push	{r4, r5, r6, lr}
 8018952:	460e      	mov	r6, r1
 8018954:	4611      	mov	r1, r2
 8018956:	4614      	mov	r4, r2
 8018958:	4605      	mov	r5, r0
 801895a:	f7ff fd8b 	bl	8018474 <ssd_st_pp_getNNBoxes>
 801895e:	b100      	cbz	r0, 8018962 <objdetect_ssd_st_pp_process+0x12>
 8018960:	bd70      	pop	{r4, r5, r6, pc}
 8018962:	4621      	mov	r1, r4
 8018964:	4628      	mov	r0, r5
 8018966:	f7ff fe9f 	bl	80186a8 <ssd_st_pp_nms_filtering>
 801896a:	2800      	cmp	r0, #0
 801896c:	d1f8      	bne.n	8018960 <objdetect_ssd_st_pp_process+0x10>
 801896e:	4622      	mov	r2, r4
 8018970:	4631      	mov	r1, r6
 8018972:	4628      	mov	r0, r5
 8018974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018978:	f7ff bf72 	b.w	8018860 <ssd_st_pp_score_filtering>

0801897c <objdetect_maxi>:
 801897c:	b410      	push	{r4}
 801897e:	2400      	movs	r4, #0
 8018980:	2901      	cmp	r1, #1
 8018982:	601c      	str	r4, [r3, #0]
 8018984:	ed90 7a00 	vldr	s14, [r0]
 8018988:	ed82 7a00 	vstr	s14, [r2]
 801898c:	dd15      	ble.n	80189ba <objdetect_maxi+0x3e>
 801898e:	f100 0c04 	add.w	ip, r0, #4
 8018992:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8018996:	2101      	movs	r1, #1
 8018998:	e001      	b.n	801899e <objdetect_maxi+0x22>
 801899a:	ed92 7a00 	vldr	s14, [r2]
 801899e:	ecfc 7a01 	vldmia	ip!, {s15}
 80189a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80189a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189aa:	dd02      	ble.n	80189b2 <objdetect_maxi+0x36>
 80189ac:	edc2 7a00 	vstr	s15, [r2]
 80189b0:	6019      	str	r1, [r3, #0]
 80189b2:	4560      	cmp	r0, ip
 80189b4:	f101 0101 	add.w	r1, r1, #1
 80189b8:	d1ef      	bne.n	801899a <objdetect_maxi+0x1e>
 80189ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189be:	4770      	bx	lr

080189c0 <objdetect_box_iou>:
 80189c0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80189c4:	edd0 7a00 	vldr	s15, [r0]
 80189c8:	ed91 7a00 	vldr	s14, [r1]
 80189cc:	ed91 6a02 	vldr	s12, [r1, #8]
 80189d0:	eeb0 4a67 	vmov.f32	s8, s15
 80189d4:	eef0 1a47 	vmov.f32	s3, s14
 80189d8:	ed90 3a02 	vldr	s6, [r0, #8]
 80189dc:	eea6 7a26 	vfma.f32	s14, s12, s13
 80189e0:	edd1 5a01 	vldr	s11, [r1, #4]
 80189e4:	eea3 4a66 	vfms.f32	s8, s6, s13
 80189e8:	edd0 3a03 	vldr	s7, [r0, #12]
 80189ec:	eee3 7a26 	vfma.f32	s15, s6, s13
 80189f0:	edd1 2a03 	vldr	s5, [r1, #12]
 80189f4:	eee6 1a66 	vfms.f32	s3, s12, s13
 80189f8:	eeb0 2a65 	vmov.f32	s4, s11
 80189fc:	eee2 5aa6 	vfma.f32	s11, s5, s13
 8018a00:	eeb0 5a47 	vmov.f32	s10, s14
 8018a04:	ed90 7a01 	vldr	s14, [r0, #4]
 8018a08:	eea2 2ae6 	vfms.f32	s4, s5, s13
 8018a0c:	eef0 4a47 	vmov.f32	s9, s14
 8018a10:	fe84 4a21 	vmaxnm.f32	s8, s8, s3
 8018a14:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 8018a18:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8018a1c:	eea3 7aa6 	vfma.f32	s14, s7, s13
 8018a20:	eee3 4ae6 	vfms.f32	s9, s7, s13
 8018a24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2c:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8018a30:	fec4 6a82 	vmaxnm.f32	s13, s9, s4
 8018a34:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018a38:	d419      	bmi.n	8018a6e <objdetect_box_iou+0xae>
 8018a3a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a42:	d414      	bmi.n	8018a6e <objdetect_box_iou+0xae>
 8018a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a48:	ee26 6a22 	vmul.f32	s12, s12, s5
 8018a4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018a50:	eea3 6a23 	vfma.f32	s12, s6, s7
 8018a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a58:	ee36 6a67 	vsub.f32	s12, s12, s15
 8018a5c:	d007      	beq.n	8018a6e <objdetect_box_iou+0xae>
 8018a5e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a66:	d002      	beq.n	8018a6e <objdetect_box_iou+0xae>
 8018a68:	ee87 0a86 	vdiv.f32	s0, s15, s12
 8018a6c:	4770      	bx	lr
 8018a6e:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018a74 <objdetect_box_iou+0xb4>
 8018a72:	4770      	bx	lr
 8018a74:	00000000 	.word	0x00000000

08018a78 <malloc>:
 8018a78:	4b02      	ldr	r3, [pc, #8]	@ (8018a84 <malloc+0xc>)
 8018a7a:	4601      	mov	r1, r0
 8018a7c:	6818      	ldr	r0, [r3, #0]
 8018a7e:	f000 b825 	b.w	8018acc <_malloc_r>
 8018a82:	bf00      	nop
 8018a84:	24013a2c 	.word	0x24013a2c

08018a88 <sbrk_aligned>:
 8018a88:	b570      	push	{r4, r5, r6, lr}
 8018a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8018ac8 <sbrk_aligned+0x40>)
 8018a8c:	460c      	mov	r4, r1
 8018a8e:	6831      	ldr	r1, [r6, #0]
 8018a90:	4605      	mov	r5, r0
 8018a92:	b911      	cbnz	r1, 8018a9a <sbrk_aligned+0x12>
 8018a94:	f000 fec0 	bl	8019818 <_sbrk_r>
 8018a98:	6030      	str	r0, [r6, #0]
 8018a9a:	4621      	mov	r1, r4
 8018a9c:	4628      	mov	r0, r5
 8018a9e:	f000 febb 	bl	8019818 <_sbrk_r>
 8018aa2:	1c43      	adds	r3, r0, #1
 8018aa4:	d103      	bne.n	8018aae <sbrk_aligned+0x26>
 8018aa6:	f04f 34ff 	mov.w	r4, #4294967295
 8018aaa:	4620      	mov	r0, r4
 8018aac:	bd70      	pop	{r4, r5, r6, pc}
 8018aae:	1cc4      	adds	r4, r0, #3
 8018ab0:	f024 0403 	bic.w	r4, r4, #3
 8018ab4:	42a0      	cmp	r0, r4
 8018ab6:	d0f8      	beq.n	8018aaa <sbrk_aligned+0x22>
 8018ab8:	1a21      	subs	r1, r4, r0
 8018aba:	4628      	mov	r0, r5
 8018abc:	f000 feac 	bl	8019818 <_sbrk_r>
 8018ac0:	3001      	adds	r0, #1
 8018ac2:	d1f2      	bne.n	8018aaa <sbrk_aligned+0x22>
 8018ac4:	e7ef      	b.n	8018aa6 <sbrk_aligned+0x1e>
 8018ac6:	bf00      	nop
 8018ac8:	24015ad0 	.word	0x24015ad0

08018acc <_malloc_r>:
 8018acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ad0:	1ccd      	adds	r5, r1, #3
 8018ad2:	f025 0503 	bic.w	r5, r5, #3
 8018ad6:	3508      	adds	r5, #8
 8018ad8:	2d0c      	cmp	r5, #12
 8018ada:	bf38      	it	cc
 8018adc:	250c      	movcc	r5, #12
 8018ade:	2d00      	cmp	r5, #0
 8018ae0:	4606      	mov	r6, r0
 8018ae2:	db01      	blt.n	8018ae8 <_malloc_r+0x1c>
 8018ae4:	42a9      	cmp	r1, r5
 8018ae6:	d904      	bls.n	8018af2 <_malloc_r+0x26>
 8018ae8:	230c      	movs	r3, #12
 8018aea:	6033      	str	r3, [r6, #0]
 8018aec:	2000      	movs	r0, #0
 8018aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018bc8 <_malloc_r+0xfc>
 8018af6:	f000 f869 	bl	8018bcc <__malloc_lock>
 8018afa:	f8d8 3000 	ldr.w	r3, [r8]
 8018afe:	461c      	mov	r4, r3
 8018b00:	bb44      	cbnz	r4, 8018b54 <_malloc_r+0x88>
 8018b02:	4629      	mov	r1, r5
 8018b04:	4630      	mov	r0, r6
 8018b06:	f7ff ffbf 	bl	8018a88 <sbrk_aligned>
 8018b0a:	1c43      	adds	r3, r0, #1
 8018b0c:	4604      	mov	r4, r0
 8018b0e:	d158      	bne.n	8018bc2 <_malloc_r+0xf6>
 8018b10:	f8d8 4000 	ldr.w	r4, [r8]
 8018b14:	4627      	mov	r7, r4
 8018b16:	2f00      	cmp	r7, #0
 8018b18:	d143      	bne.n	8018ba2 <_malloc_r+0xd6>
 8018b1a:	2c00      	cmp	r4, #0
 8018b1c:	d04b      	beq.n	8018bb6 <_malloc_r+0xea>
 8018b1e:	6823      	ldr	r3, [r4, #0]
 8018b20:	4639      	mov	r1, r7
 8018b22:	4630      	mov	r0, r6
 8018b24:	eb04 0903 	add.w	r9, r4, r3
 8018b28:	f000 fe76 	bl	8019818 <_sbrk_r>
 8018b2c:	4581      	cmp	r9, r0
 8018b2e:	d142      	bne.n	8018bb6 <_malloc_r+0xea>
 8018b30:	6821      	ldr	r1, [r4, #0]
 8018b32:	1a6d      	subs	r5, r5, r1
 8018b34:	4629      	mov	r1, r5
 8018b36:	4630      	mov	r0, r6
 8018b38:	f7ff ffa6 	bl	8018a88 <sbrk_aligned>
 8018b3c:	3001      	adds	r0, #1
 8018b3e:	d03a      	beq.n	8018bb6 <_malloc_r+0xea>
 8018b40:	6823      	ldr	r3, [r4, #0]
 8018b42:	442b      	add	r3, r5
 8018b44:	6023      	str	r3, [r4, #0]
 8018b46:	f8d8 3000 	ldr.w	r3, [r8]
 8018b4a:	685a      	ldr	r2, [r3, #4]
 8018b4c:	bb62      	cbnz	r2, 8018ba8 <_malloc_r+0xdc>
 8018b4e:	f8c8 7000 	str.w	r7, [r8]
 8018b52:	e00f      	b.n	8018b74 <_malloc_r+0xa8>
 8018b54:	6822      	ldr	r2, [r4, #0]
 8018b56:	1b52      	subs	r2, r2, r5
 8018b58:	d420      	bmi.n	8018b9c <_malloc_r+0xd0>
 8018b5a:	2a0b      	cmp	r2, #11
 8018b5c:	d917      	bls.n	8018b8e <_malloc_r+0xc2>
 8018b5e:	1961      	adds	r1, r4, r5
 8018b60:	42a3      	cmp	r3, r4
 8018b62:	6025      	str	r5, [r4, #0]
 8018b64:	bf18      	it	ne
 8018b66:	6059      	strne	r1, [r3, #4]
 8018b68:	6863      	ldr	r3, [r4, #4]
 8018b6a:	bf08      	it	eq
 8018b6c:	f8c8 1000 	streq.w	r1, [r8]
 8018b70:	5162      	str	r2, [r4, r5]
 8018b72:	604b      	str	r3, [r1, #4]
 8018b74:	4630      	mov	r0, r6
 8018b76:	f000 f82f 	bl	8018bd8 <__malloc_unlock>
 8018b7a:	f104 000b 	add.w	r0, r4, #11
 8018b7e:	1d23      	adds	r3, r4, #4
 8018b80:	f020 0007 	bic.w	r0, r0, #7
 8018b84:	1ac2      	subs	r2, r0, r3
 8018b86:	bf1c      	itt	ne
 8018b88:	1a1b      	subne	r3, r3, r0
 8018b8a:	50a3      	strne	r3, [r4, r2]
 8018b8c:	e7af      	b.n	8018aee <_malloc_r+0x22>
 8018b8e:	6862      	ldr	r2, [r4, #4]
 8018b90:	42a3      	cmp	r3, r4
 8018b92:	bf0c      	ite	eq
 8018b94:	f8c8 2000 	streq.w	r2, [r8]
 8018b98:	605a      	strne	r2, [r3, #4]
 8018b9a:	e7eb      	b.n	8018b74 <_malloc_r+0xa8>
 8018b9c:	4623      	mov	r3, r4
 8018b9e:	6864      	ldr	r4, [r4, #4]
 8018ba0:	e7ae      	b.n	8018b00 <_malloc_r+0x34>
 8018ba2:	463c      	mov	r4, r7
 8018ba4:	687f      	ldr	r7, [r7, #4]
 8018ba6:	e7b6      	b.n	8018b16 <_malloc_r+0x4a>
 8018ba8:	461a      	mov	r2, r3
 8018baa:	685b      	ldr	r3, [r3, #4]
 8018bac:	42a3      	cmp	r3, r4
 8018bae:	d1fb      	bne.n	8018ba8 <_malloc_r+0xdc>
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	6053      	str	r3, [r2, #4]
 8018bb4:	e7de      	b.n	8018b74 <_malloc_r+0xa8>
 8018bb6:	230c      	movs	r3, #12
 8018bb8:	6033      	str	r3, [r6, #0]
 8018bba:	4630      	mov	r0, r6
 8018bbc:	f000 f80c 	bl	8018bd8 <__malloc_unlock>
 8018bc0:	e794      	b.n	8018aec <_malloc_r+0x20>
 8018bc2:	6005      	str	r5, [r0, #0]
 8018bc4:	e7d6      	b.n	8018b74 <_malloc_r+0xa8>
 8018bc6:	bf00      	nop
 8018bc8:	24015ad4 	.word	0x24015ad4

08018bcc <__malloc_lock>:
 8018bcc:	4801      	ldr	r0, [pc, #4]	@ (8018bd4 <__malloc_lock+0x8>)
 8018bce:	f000 be6a 	b.w	80198a6 <__retarget_lock_acquire_recursive>
 8018bd2:	bf00      	nop
 8018bd4:	24015c18 	.word	0x24015c18

08018bd8 <__malloc_unlock>:
 8018bd8:	4801      	ldr	r0, [pc, #4]	@ (8018be0 <__malloc_unlock+0x8>)
 8018bda:	f000 be65 	b.w	80198a8 <__retarget_lock_release_recursive>
 8018bde:	bf00      	nop
 8018be0:	24015c18 	.word	0x24015c18

08018be4 <_realloc_r>:
 8018be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be8:	4680      	mov	r8, r0
 8018bea:	4615      	mov	r5, r2
 8018bec:	460c      	mov	r4, r1
 8018bee:	b921      	cbnz	r1, 8018bfa <_realloc_r+0x16>
 8018bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bf4:	4611      	mov	r1, r2
 8018bf6:	f7ff bf69 	b.w	8018acc <_malloc_r>
 8018bfa:	b92a      	cbnz	r2, 8018c08 <_realloc_r+0x24>
 8018bfc:	f001 fc42 	bl	801a484 <_free_r>
 8018c00:	2400      	movs	r4, #0
 8018c02:	4620      	mov	r0, r4
 8018c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c08:	f002 f808 	bl	801ac1c <_malloc_usable_size_r>
 8018c0c:	4285      	cmp	r5, r0
 8018c0e:	4606      	mov	r6, r0
 8018c10:	d802      	bhi.n	8018c18 <_realloc_r+0x34>
 8018c12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018c16:	d8f4      	bhi.n	8018c02 <_realloc_r+0x1e>
 8018c18:	4629      	mov	r1, r5
 8018c1a:	4640      	mov	r0, r8
 8018c1c:	f7ff ff56 	bl	8018acc <_malloc_r>
 8018c20:	4607      	mov	r7, r0
 8018c22:	2800      	cmp	r0, #0
 8018c24:	d0ec      	beq.n	8018c00 <_realloc_r+0x1c>
 8018c26:	42b5      	cmp	r5, r6
 8018c28:	462a      	mov	r2, r5
 8018c2a:	4621      	mov	r1, r4
 8018c2c:	bf28      	it	cs
 8018c2e:	4632      	movcs	r2, r6
 8018c30:	f000 fe3b 	bl	80198aa <memcpy>
 8018c34:	4621      	mov	r1, r4
 8018c36:	4640      	mov	r0, r8
 8018c38:	f001 fc24 	bl	801a484 <_free_r>
 8018c3c:	463c      	mov	r4, r7
 8018c3e:	e7e0      	b.n	8018c02 <_realloc_r+0x1e>

08018c40 <__cvt>:
 8018c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c42:	ed2d 8b02 	vpush	{d8}
 8018c46:	eeb0 8b40 	vmov.f64	d8, d0
 8018c4a:	b085      	sub	sp, #20
 8018c4c:	4617      	mov	r7, r2
 8018c4e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018c50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018c52:	ee18 2a90 	vmov	r2, s17
 8018c56:	f025 0520 	bic.w	r5, r5, #32
 8018c5a:	2a00      	cmp	r2, #0
 8018c5c:	bfb6      	itet	lt
 8018c5e:	222d      	movlt	r2, #45	@ 0x2d
 8018c60:	2200      	movge	r2, #0
 8018c62:	eeb1 8b40 	vneglt.f64	d8, d0
 8018c66:	2d46      	cmp	r5, #70	@ 0x46
 8018c68:	460c      	mov	r4, r1
 8018c6a:	701a      	strb	r2, [r3, #0]
 8018c6c:	d004      	beq.n	8018c78 <__cvt+0x38>
 8018c6e:	2d45      	cmp	r5, #69	@ 0x45
 8018c70:	d100      	bne.n	8018c74 <__cvt+0x34>
 8018c72:	3401      	adds	r4, #1
 8018c74:	2102      	movs	r1, #2
 8018c76:	e000      	b.n	8018c7a <__cvt+0x3a>
 8018c78:	2103      	movs	r1, #3
 8018c7a:	ab03      	add	r3, sp, #12
 8018c7c:	9301      	str	r3, [sp, #4]
 8018c7e:	ab02      	add	r3, sp, #8
 8018c80:	9300      	str	r3, [sp, #0]
 8018c82:	4622      	mov	r2, r4
 8018c84:	4633      	mov	r3, r6
 8018c86:	eeb0 0b48 	vmov.f64	d0, d8
 8018c8a:	f000 fea5 	bl	80199d8 <_dtoa_r>
 8018c8e:	2d47      	cmp	r5, #71	@ 0x47
 8018c90:	d114      	bne.n	8018cbc <__cvt+0x7c>
 8018c92:	07fb      	lsls	r3, r7, #31
 8018c94:	d50a      	bpl.n	8018cac <__cvt+0x6c>
 8018c96:	1902      	adds	r2, r0, r4
 8018c98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ca0:	bf08      	it	eq
 8018ca2:	9203      	streq	r2, [sp, #12]
 8018ca4:	2130      	movs	r1, #48	@ 0x30
 8018ca6:	9b03      	ldr	r3, [sp, #12]
 8018ca8:	4293      	cmp	r3, r2
 8018caa:	d319      	bcc.n	8018ce0 <__cvt+0xa0>
 8018cac:	9b03      	ldr	r3, [sp, #12]
 8018cae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018cb0:	1a1b      	subs	r3, r3, r0
 8018cb2:	6013      	str	r3, [r2, #0]
 8018cb4:	b005      	add	sp, #20
 8018cb6:	ecbd 8b02 	vpop	{d8}
 8018cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cbc:	2d46      	cmp	r5, #70	@ 0x46
 8018cbe:	eb00 0204 	add.w	r2, r0, r4
 8018cc2:	d1e9      	bne.n	8018c98 <__cvt+0x58>
 8018cc4:	7803      	ldrb	r3, [r0, #0]
 8018cc6:	2b30      	cmp	r3, #48	@ 0x30
 8018cc8:	d107      	bne.n	8018cda <__cvt+0x9a>
 8018cca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cd2:	bf1c      	itt	ne
 8018cd4:	f1c4 0401 	rsbne	r4, r4, #1
 8018cd8:	6034      	strne	r4, [r6, #0]
 8018cda:	6833      	ldr	r3, [r6, #0]
 8018cdc:	441a      	add	r2, r3
 8018cde:	e7db      	b.n	8018c98 <__cvt+0x58>
 8018ce0:	1c5c      	adds	r4, r3, #1
 8018ce2:	9403      	str	r4, [sp, #12]
 8018ce4:	7019      	strb	r1, [r3, #0]
 8018ce6:	e7de      	b.n	8018ca6 <__cvt+0x66>

08018ce8 <__exponent>:
 8018ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018cea:	2900      	cmp	r1, #0
 8018cec:	bfba      	itte	lt
 8018cee:	4249      	neglt	r1, r1
 8018cf0:	232d      	movlt	r3, #45	@ 0x2d
 8018cf2:	232b      	movge	r3, #43	@ 0x2b
 8018cf4:	2909      	cmp	r1, #9
 8018cf6:	7002      	strb	r2, [r0, #0]
 8018cf8:	7043      	strb	r3, [r0, #1]
 8018cfa:	dd29      	ble.n	8018d50 <__exponent+0x68>
 8018cfc:	f10d 0307 	add.w	r3, sp, #7
 8018d00:	461d      	mov	r5, r3
 8018d02:	270a      	movs	r7, #10
 8018d04:	461a      	mov	r2, r3
 8018d06:	fbb1 f6f7 	udiv	r6, r1, r7
 8018d0a:	fb07 1416 	mls	r4, r7, r6, r1
 8018d0e:	3430      	adds	r4, #48	@ 0x30
 8018d10:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018d14:	460c      	mov	r4, r1
 8018d16:	2c63      	cmp	r4, #99	@ 0x63
 8018d18:	f103 33ff 	add.w	r3, r3, #4294967295
 8018d1c:	4631      	mov	r1, r6
 8018d1e:	dcf1      	bgt.n	8018d04 <__exponent+0x1c>
 8018d20:	3130      	adds	r1, #48	@ 0x30
 8018d22:	1e94      	subs	r4, r2, #2
 8018d24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018d28:	1c41      	adds	r1, r0, #1
 8018d2a:	4623      	mov	r3, r4
 8018d2c:	42ab      	cmp	r3, r5
 8018d2e:	d30a      	bcc.n	8018d46 <__exponent+0x5e>
 8018d30:	f10d 0309 	add.w	r3, sp, #9
 8018d34:	1a9b      	subs	r3, r3, r2
 8018d36:	42ac      	cmp	r4, r5
 8018d38:	bf88      	it	hi
 8018d3a:	2300      	movhi	r3, #0
 8018d3c:	3302      	adds	r3, #2
 8018d3e:	4403      	add	r3, r0
 8018d40:	1a18      	subs	r0, r3, r0
 8018d42:	b003      	add	sp, #12
 8018d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d46:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018d4a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018d4e:	e7ed      	b.n	8018d2c <__exponent+0x44>
 8018d50:	2330      	movs	r3, #48	@ 0x30
 8018d52:	3130      	adds	r1, #48	@ 0x30
 8018d54:	7083      	strb	r3, [r0, #2]
 8018d56:	70c1      	strb	r1, [r0, #3]
 8018d58:	1d03      	adds	r3, r0, #4
 8018d5a:	e7f1      	b.n	8018d40 <__exponent+0x58>
 8018d5c:	0000      	movs	r0, r0
	...

08018d60 <_printf_float>:
 8018d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d64:	b08d      	sub	sp, #52	@ 0x34
 8018d66:	460c      	mov	r4, r1
 8018d68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018d6c:	4616      	mov	r6, r2
 8018d6e:	461f      	mov	r7, r3
 8018d70:	4605      	mov	r5, r0
 8018d72:	f000 fd19 	bl	80197a8 <_localeconv_r>
 8018d76:	f8d0 b000 	ldr.w	fp, [r0]
 8018d7a:	4658      	mov	r0, fp
 8018d7c:	f7e7 fb00 	bl	8000380 <strlen>
 8018d80:	2300      	movs	r3, #0
 8018d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d84:	f8d8 3000 	ldr.w	r3, [r8]
 8018d88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018d8c:	6822      	ldr	r2, [r4, #0]
 8018d8e:	9005      	str	r0, [sp, #20]
 8018d90:	3307      	adds	r3, #7
 8018d92:	f023 0307 	bic.w	r3, r3, #7
 8018d96:	f103 0108 	add.w	r1, r3, #8
 8018d9a:	f8c8 1000 	str.w	r1, [r8]
 8018d9e:	ed93 0b00 	vldr	d0, [r3]
 8018da2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8019000 <_printf_float+0x2a0>
 8018da6:	eeb0 7bc0 	vabs.f64	d7, d0
 8018daa:	eeb4 7b46 	vcmp.f64	d7, d6
 8018dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018db2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8018db6:	dd24      	ble.n	8018e02 <_printf_float+0xa2>
 8018db8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dc0:	d502      	bpl.n	8018dc8 <_printf_float+0x68>
 8018dc2:	232d      	movs	r3, #45	@ 0x2d
 8018dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018dc8:	498f      	ldr	r1, [pc, #572]	@ (8019008 <_printf_float+0x2a8>)
 8018dca:	4b90      	ldr	r3, [pc, #576]	@ (801900c <_printf_float+0x2ac>)
 8018dcc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8018dd0:	bf94      	ite	ls
 8018dd2:	4688      	movls	r8, r1
 8018dd4:	4698      	movhi	r8, r3
 8018dd6:	f022 0204 	bic.w	r2, r2, #4
 8018dda:	2303      	movs	r3, #3
 8018ddc:	6123      	str	r3, [r4, #16]
 8018dde:	6022      	str	r2, [r4, #0]
 8018de0:	f04f 0a00 	mov.w	sl, #0
 8018de4:	9700      	str	r7, [sp, #0]
 8018de6:	4633      	mov	r3, r6
 8018de8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018dea:	4621      	mov	r1, r4
 8018dec:	4628      	mov	r0, r5
 8018dee:	f000 f9d1 	bl	8019194 <_printf_common>
 8018df2:	3001      	adds	r0, #1
 8018df4:	f040 8089 	bne.w	8018f0a <_printf_float+0x1aa>
 8018df8:	f04f 30ff 	mov.w	r0, #4294967295
 8018dfc:	b00d      	add	sp, #52	@ 0x34
 8018dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e02:	eeb4 0b40 	vcmp.f64	d0, d0
 8018e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e0a:	d709      	bvc.n	8018e20 <_printf_float+0xc0>
 8018e0c:	ee10 3a90 	vmov	r3, s1
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	bfbc      	itt	lt
 8018e14:	232d      	movlt	r3, #45	@ 0x2d
 8018e16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018e1a:	497d      	ldr	r1, [pc, #500]	@ (8019010 <_printf_float+0x2b0>)
 8018e1c:	4b7d      	ldr	r3, [pc, #500]	@ (8019014 <_printf_float+0x2b4>)
 8018e1e:	e7d5      	b.n	8018dcc <_printf_float+0x6c>
 8018e20:	6863      	ldr	r3, [r4, #4]
 8018e22:	1c59      	adds	r1, r3, #1
 8018e24:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8018e28:	d139      	bne.n	8018e9e <_printf_float+0x13e>
 8018e2a:	2306      	movs	r3, #6
 8018e2c:	6063      	str	r3, [r4, #4]
 8018e2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8018e32:	2300      	movs	r3, #0
 8018e34:	6022      	str	r2, [r4, #0]
 8018e36:	9303      	str	r3, [sp, #12]
 8018e38:	ab0a      	add	r3, sp, #40	@ 0x28
 8018e3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018e3e:	ab09      	add	r3, sp, #36	@ 0x24
 8018e40:	9300      	str	r3, [sp, #0]
 8018e42:	6861      	ldr	r1, [r4, #4]
 8018e44:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018e48:	4628      	mov	r0, r5
 8018e4a:	f7ff fef9 	bl	8018c40 <__cvt>
 8018e4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018e52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e54:	4680      	mov	r8, r0
 8018e56:	d129      	bne.n	8018eac <_printf_float+0x14c>
 8018e58:	1cc8      	adds	r0, r1, #3
 8018e5a:	db02      	blt.n	8018e62 <_printf_float+0x102>
 8018e5c:	6863      	ldr	r3, [r4, #4]
 8018e5e:	4299      	cmp	r1, r3
 8018e60:	dd41      	ble.n	8018ee6 <_printf_float+0x186>
 8018e62:	f1a9 0902 	sub.w	r9, r9, #2
 8018e66:	fa5f f989 	uxtb.w	r9, r9
 8018e6a:	3901      	subs	r1, #1
 8018e6c:	464a      	mov	r2, r9
 8018e6e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8018e72:	9109      	str	r1, [sp, #36]	@ 0x24
 8018e74:	f7ff ff38 	bl	8018ce8 <__exponent>
 8018e78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e7a:	1813      	adds	r3, r2, r0
 8018e7c:	2a01      	cmp	r2, #1
 8018e7e:	4682      	mov	sl, r0
 8018e80:	6123      	str	r3, [r4, #16]
 8018e82:	dc02      	bgt.n	8018e8a <_printf_float+0x12a>
 8018e84:	6822      	ldr	r2, [r4, #0]
 8018e86:	07d2      	lsls	r2, r2, #31
 8018e88:	d501      	bpl.n	8018e8e <_printf_float+0x12e>
 8018e8a:	3301      	adds	r3, #1
 8018e8c:	6123      	str	r3, [r4, #16]
 8018e8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d0a6      	beq.n	8018de4 <_printf_float+0x84>
 8018e96:	232d      	movs	r3, #45	@ 0x2d
 8018e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e9c:	e7a2      	b.n	8018de4 <_printf_float+0x84>
 8018e9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018ea2:	d1c4      	bne.n	8018e2e <_printf_float+0xce>
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d1c2      	bne.n	8018e2e <_printf_float+0xce>
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	e7bf      	b.n	8018e2c <_printf_float+0xcc>
 8018eac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8018eb0:	d9db      	bls.n	8018e6a <_printf_float+0x10a>
 8018eb2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8018eb6:	d118      	bne.n	8018eea <_printf_float+0x18a>
 8018eb8:	2900      	cmp	r1, #0
 8018eba:	6863      	ldr	r3, [r4, #4]
 8018ebc:	dd0b      	ble.n	8018ed6 <_printf_float+0x176>
 8018ebe:	6121      	str	r1, [r4, #16]
 8018ec0:	b913      	cbnz	r3, 8018ec8 <_printf_float+0x168>
 8018ec2:	6822      	ldr	r2, [r4, #0]
 8018ec4:	07d0      	lsls	r0, r2, #31
 8018ec6:	d502      	bpl.n	8018ece <_printf_float+0x16e>
 8018ec8:	3301      	adds	r3, #1
 8018eca:	440b      	add	r3, r1
 8018ecc:	6123      	str	r3, [r4, #16]
 8018ece:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018ed0:	f04f 0a00 	mov.w	sl, #0
 8018ed4:	e7db      	b.n	8018e8e <_printf_float+0x12e>
 8018ed6:	b913      	cbnz	r3, 8018ede <_printf_float+0x17e>
 8018ed8:	6822      	ldr	r2, [r4, #0]
 8018eda:	07d2      	lsls	r2, r2, #31
 8018edc:	d501      	bpl.n	8018ee2 <_printf_float+0x182>
 8018ede:	3302      	adds	r3, #2
 8018ee0:	e7f4      	b.n	8018ecc <_printf_float+0x16c>
 8018ee2:	2301      	movs	r3, #1
 8018ee4:	e7f2      	b.n	8018ecc <_printf_float+0x16c>
 8018ee6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8018eea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018eec:	4299      	cmp	r1, r3
 8018eee:	db05      	blt.n	8018efc <_printf_float+0x19c>
 8018ef0:	6823      	ldr	r3, [r4, #0]
 8018ef2:	6121      	str	r1, [r4, #16]
 8018ef4:	07d8      	lsls	r0, r3, #31
 8018ef6:	d5ea      	bpl.n	8018ece <_printf_float+0x16e>
 8018ef8:	1c4b      	adds	r3, r1, #1
 8018efa:	e7e7      	b.n	8018ecc <_printf_float+0x16c>
 8018efc:	2900      	cmp	r1, #0
 8018efe:	bfd4      	ite	le
 8018f00:	f1c1 0202 	rsble	r2, r1, #2
 8018f04:	2201      	movgt	r2, #1
 8018f06:	4413      	add	r3, r2
 8018f08:	e7e0      	b.n	8018ecc <_printf_float+0x16c>
 8018f0a:	6823      	ldr	r3, [r4, #0]
 8018f0c:	055a      	lsls	r2, r3, #21
 8018f0e:	d407      	bmi.n	8018f20 <_printf_float+0x1c0>
 8018f10:	6923      	ldr	r3, [r4, #16]
 8018f12:	4642      	mov	r2, r8
 8018f14:	4631      	mov	r1, r6
 8018f16:	4628      	mov	r0, r5
 8018f18:	47b8      	blx	r7
 8018f1a:	3001      	adds	r0, #1
 8018f1c:	d12a      	bne.n	8018f74 <_printf_float+0x214>
 8018f1e:	e76b      	b.n	8018df8 <_printf_float+0x98>
 8018f20:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8018f24:	f240 80e0 	bls.w	80190e8 <_printf_float+0x388>
 8018f28:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018f2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f34:	d133      	bne.n	8018f9e <_printf_float+0x23e>
 8018f36:	4a38      	ldr	r2, [pc, #224]	@ (8019018 <_printf_float+0x2b8>)
 8018f38:	2301      	movs	r3, #1
 8018f3a:	4631      	mov	r1, r6
 8018f3c:	4628      	mov	r0, r5
 8018f3e:	47b8      	blx	r7
 8018f40:	3001      	adds	r0, #1
 8018f42:	f43f af59 	beq.w	8018df8 <_printf_float+0x98>
 8018f46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018f4a:	4543      	cmp	r3, r8
 8018f4c:	db02      	blt.n	8018f54 <_printf_float+0x1f4>
 8018f4e:	6823      	ldr	r3, [r4, #0]
 8018f50:	07d8      	lsls	r0, r3, #31
 8018f52:	d50f      	bpl.n	8018f74 <_printf_float+0x214>
 8018f54:	9b05      	ldr	r3, [sp, #20]
 8018f56:	465a      	mov	r2, fp
 8018f58:	4631      	mov	r1, r6
 8018f5a:	4628      	mov	r0, r5
 8018f5c:	47b8      	blx	r7
 8018f5e:	3001      	adds	r0, #1
 8018f60:	f43f af4a 	beq.w	8018df8 <_printf_float+0x98>
 8018f64:	f04f 0900 	mov.w	r9, #0
 8018f68:	f108 38ff 	add.w	r8, r8, #4294967295
 8018f6c:	f104 0a1a 	add.w	sl, r4, #26
 8018f70:	45c8      	cmp	r8, r9
 8018f72:	dc09      	bgt.n	8018f88 <_printf_float+0x228>
 8018f74:	6823      	ldr	r3, [r4, #0]
 8018f76:	079b      	lsls	r3, r3, #30
 8018f78:	f100 8107 	bmi.w	801918a <_printf_float+0x42a>
 8018f7c:	68e0      	ldr	r0, [r4, #12]
 8018f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018f80:	4298      	cmp	r0, r3
 8018f82:	bfb8      	it	lt
 8018f84:	4618      	movlt	r0, r3
 8018f86:	e739      	b.n	8018dfc <_printf_float+0x9c>
 8018f88:	2301      	movs	r3, #1
 8018f8a:	4652      	mov	r2, sl
 8018f8c:	4631      	mov	r1, r6
 8018f8e:	4628      	mov	r0, r5
 8018f90:	47b8      	blx	r7
 8018f92:	3001      	adds	r0, #1
 8018f94:	f43f af30 	beq.w	8018df8 <_printf_float+0x98>
 8018f98:	f109 0901 	add.w	r9, r9, #1
 8018f9c:	e7e8      	b.n	8018f70 <_printf_float+0x210>
 8018f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	dc3b      	bgt.n	801901c <_printf_float+0x2bc>
 8018fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8019018 <_printf_float+0x2b8>)
 8018fa6:	2301      	movs	r3, #1
 8018fa8:	4631      	mov	r1, r6
 8018faa:	4628      	mov	r0, r5
 8018fac:	47b8      	blx	r7
 8018fae:	3001      	adds	r0, #1
 8018fb0:	f43f af22 	beq.w	8018df8 <_printf_float+0x98>
 8018fb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018fb8:	ea59 0303 	orrs.w	r3, r9, r3
 8018fbc:	d102      	bne.n	8018fc4 <_printf_float+0x264>
 8018fbe:	6823      	ldr	r3, [r4, #0]
 8018fc0:	07d9      	lsls	r1, r3, #31
 8018fc2:	d5d7      	bpl.n	8018f74 <_printf_float+0x214>
 8018fc4:	9b05      	ldr	r3, [sp, #20]
 8018fc6:	465a      	mov	r2, fp
 8018fc8:	4631      	mov	r1, r6
 8018fca:	4628      	mov	r0, r5
 8018fcc:	47b8      	blx	r7
 8018fce:	3001      	adds	r0, #1
 8018fd0:	f43f af12 	beq.w	8018df8 <_printf_float+0x98>
 8018fd4:	f04f 0a00 	mov.w	sl, #0
 8018fd8:	f104 0b1a 	add.w	fp, r4, #26
 8018fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fde:	425b      	negs	r3, r3
 8018fe0:	4553      	cmp	r3, sl
 8018fe2:	dc01      	bgt.n	8018fe8 <_printf_float+0x288>
 8018fe4:	464b      	mov	r3, r9
 8018fe6:	e794      	b.n	8018f12 <_printf_float+0x1b2>
 8018fe8:	2301      	movs	r3, #1
 8018fea:	465a      	mov	r2, fp
 8018fec:	4631      	mov	r1, r6
 8018fee:	4628      	mov	r0, r5
 8018ff0:	47b8      	blx	r7
 8018ff2:	3001      	adds	r0, #1
 8018ff4:	f43f af00 	beq.w	8018df8 <_printf_float+0x98>
 8018ff8:	f10a 0a01 	add.w	sl, sl, #1
 8018ffc:	e7ee      	b.n	8018fdc <_printf_float+0x27c>
 8018ffe:	bf00      	nop
 8019000:	ffffffff 	.word	0xffffffff
 8019004:	7fefffff 	.word	0x7fefffff
 8019008:	0804b6f4 	.word	0x0804b6f4
 801900c:	0804b6f8 	.word	0x0804b6f8
 8019010:	0804b6fc 	.word	0x0804b6fc
 8019014:	0804b700 	.word	0x0804b700
 8019018:	0804b704 	.word	0x0804b704
 801901c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801901e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019022:	4553      	cmp	r3, sl
 8019024:	bfa8      	it	ge
 8019026:	4653      	movge	r3, sl
 8019028:	2b00      	cmp	r3, #0
 801902a:	4699      	mov	r9, r3
 801902c:	dc37      	bgt.n	801909e <_printf_float+0x33e>
 801902e:	2300      	movs	r3, #0
 8019030:	9307      	str	r3, [sp, #28]
 8019032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019036:	f104 021a 	add.w	r2, r4, #26
 801903a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801903c:	9907      	ldr	r1, [sp, #28]
 801903e:	9306      	str	r3, [sp, #24]
 8019040:	eba3 0309 	sub.w	r3, r3, r9
 8019044:	428b      	cmp	r3, r1
 8019046:	dc31      	bgt.n	80190ac <_printf_float+0x34c>
 8019048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801904a:	459a      	cmp	sl, r3
 801904c:	dc3b      	bgt.n	80190c6 <_printf_float+0x366>
 801904e:	6823      	ldr	r3, [r4, #0]
 8019050:	07da      	lsls	r2, r3, #31
 8019052:	d438      	bmi.n	80190c6 <_printf_float+0x366>
 8019054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019056:	ebaa 0903 	sub.w	r9, sl, r3
 801905a:	9b06      	ldr	r3, [sp, #24]
 801905c:	ebaa 0303 	sub.w	r3, sl, r3
 8019060:	4599      	cmp	r9, r3
 8019062:	bfa8      	it	ge
 8019064:	4699      	movge	r9, r3
 8019066:	f1b9 0f00 	cmp.w	r9, #0
 801906a:	dc34      	bgt.n	80190d6 <_printf_float+0x376>
 801906c:	f04f 0800 	mov.w	r8, #0
 8019070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019074:	f104 0b1a 	add.w	fp, r4, #26
 8019078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801907a:	ebaa 0303 	sub.w	r3, sl, r3
 801907e:	eba3 0309 	sub.w	r3, r3, r9
 8019082:	4543      	cmp	r3, r8
 8019084:	f77f af76 	ble.w	8018f74 <_printf_float+0x214>
 8019088:	2301      	movs	r3, #1
 801908a:	465a      	mov	r2, fp
 801908c:	4631      	mov	r1, r6
 801908e:	4628      	mov	r0, r5
 8019090:	47b8      	blx	r7
 8019092:	3001      	adds	r0, #1
 8019094:	f43f aeb0 	beq.w	8018df8 <_printf_float+0x98>
 8019098:	f108 0801 	add.w	r8, r8, #1
 801909c:	e7ec      	b.n	8019078 <_printf_float+0x318>
 801909e:	4642      	mov	r2, r8
 80190a0:	4631      	mov	r1, r6
 80190a2:	4628      	mov	r0, r5
 80190a4:	47b8      	blx	r7
 80190a6:	3001      	adds	r0, #1
 80190a8:	d1c1      	bne.n	801902e <_printf_float+0x2ce>
 80190aa:	e6a5      	b.n	8018df8 <_printf_float+0x98>
 80190ac:	2301      	movs	r3, #1
 80190ae:	4631      	mov	r1, r6
 80190b0:	4628      	mov	r0, r5
 80190b2:	9206      	str	r2, [sp, #24]
 80190b4:	47b8      	blx	r7
 80190b6:	3001      	adds	r0, #1
 80190b8:	f43f ae9e 	beq.w	8018df8 <_printf_float+0x98>
 80190bc:	9b07      	ldr	r3, [sp, #28]
 80190be:	9a06      	ldr	r2, [sp, #24]
 80190c0:	3301      	adds	r3, #1
 80190c2:	9307      	str	r3, [sp, #28]
 80190c4:	e7b9      	b.n	801903a <_printf_float+0x2da>
 80190c6:	9b05      	ldr	r3, [sp, #20]
 80190c8:	465a      	mov	r2, fp
 80190ca:	4631      	mov	r1, r6
 80190cc:	4628      	mov	r0, r5
 80190ce:	47b8      	blx	r7
 80190d0:	3001      	adds	r0, #1
 80190d2:	d1bf      	bne.n	8019054 <_printf_float+0x2f4>
 80190d4:	e690      	b.n	8018df8 <_printf_float+0x98>
 80190d6:	9a06      	ldr	r2, [sp, #24]
 80190d8:	464b      	mov	r3, r9
 80190da:	4442      	add	r2, r8
 80190dc:	4631      	mov	r1, r6
 80190de:	4628      	mov	r0, r5
 80190e0:	47b8      	blx	r7
 80190e2:	3001      	adds	r0, #1
 80190e4:	d1c2      	bne.n	801906c <_printf_float+0x30c>
 80190e6:	e687      	b.n	8018df8 <_printf_float+0x98>
 80190e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80190ec:	f1b9 0f01 	cmp.w	r9, #1
 80190f0:	dc01      	bgt.n	80190f6 <_printf_float+0x396>
 80190f2:	07db      	lsls	r3, r3, #31
 80190f4:	d536      	bpl.n	8019164 <_printf_float+0x404>
 80190f6:	2301      	movs	r3, #1
 80190f8:	4642      	mov	r2, r8
 80190fa:	4631      	mov	r1, r6
 80190fc:	4628      	mov	r0, r5
 80190fe:	47b8      	blx	r7
 8019100:	3001      	adds	r0, #1
 8019102:	f43f ae79 	beq.w	8018df8 <_printf_float+0x98>
 8019106:	9b05      	ldr	r3, [sp, #20]
 8019108:	465a      	mov	r2, fp
 801910a:	4631      	mov	r1, r6
 801910c:	4628      	mov	r0, r5
 801910e:	47b8      	blx	r7
 8019110:	3001      	adds	r0, #1
 8019112:	f43f ae71 	beq.w	8018df8 <_printf_float+0x98>
 8019116:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801911a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019122:	f109 39ff 	add.w	r9, r9, #4294967295
 8019126:	d018      	beq.n	801915a <_printf_float+0x3fa>
 8019128:	464b      	mov	r3, r9
 801912a:	f108 0201 	add.w	r2, r8, #1
 801912e:	4631      	mov	r1, r6
 8019130:	4628      	mov	r0, r5
 8019132:	47b8      	blx	r7
 8019134:	3001      	adds	r0, #1
 8019136:	d10c      	bne.n	8019152 <_printf_float+0x3f2>
 8019138:	e65e      	b.n	8018df8 <_printf_float+0x98>
 801913a:	2301      	movs	r3, #1
 801913c:	465a      	mov	r2, fp
 801913e:	4631      	mov	r1, r6
 8019140:	4628      	mov	r0, r5
 8019142:	47b8      	blx	r7
 8019144:	3001      	adds	r0, #1
 8019146:	f43f ae57 	beq.w	8018df8 <_printf_float+0x98>
 801914a:	f108 0801 	add.w	r8, r8, #1
 801914e:	45c8      	cmp	r8, r9
 8019150:	dbf3      	blt.n	801913a <_printf_float+0x3da>
 8019152:	4653      	mov	r3, sl
 8019154:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019158:	e6dc      	b.n	8018f14 <_printf_float+0x1b4>
 801915a:	f04f 0800 	mov.w	r8, #0
 801915e:	f104 0b1a 	add.w	fp, r4, #26
 8019162:	e7f4      	b.n	801914e <_printf_float+0x3ee>
 8019164:	2301      	movs	r3, #1
 8019166:	4642      	mov	r2, r8
 8019168:	e7e1      	b.n	801912e <_printf_float+0x3ce>
 801916a:	2301      	movs	r3, #1
 801916c:	464a      	mov	r2, r9
 801916e:	4631      	mov	r1, r6
 8019170:	4628      	mov	r0, r5
 8019172:	47b8      	blx	r7
 8019174:	3001      	adds	r0, #1
 8019176:	f43f ae3f 	beq.w	8018df8 <_printf_float+0x98>
 801917a:	f108 0801 	add.w	r8, r8, #1
 801917e:	68e3      	ldr	r3, [r4, #12]
 8019180:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019182:	1a5b      	subs	r3, r3, r1
 8019184:	4543      	cmp	r3, r8
 8019186:	dcf0      	bgt.n	801916a <_printf_float+0x40a>
 8019188:	e6f8      	b.n	8018f7c <_printf_float+0x21c>
 801918a:	f04f 0800 	mov.w	r8, #0
 801918e:	f104 0919 	add.w	r9, r4, #25
 8019192:	e7f4      	b.n	801917e <_printf_float+0x41e>

08019194 <_printf_common>:
 8019194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019198:	4616      	mov	r6, r2
 801919a:	4698      	mov	r8, r3
 801919c:	688a      	ldr	r2, [r1, #8]
 801919e:	690b      	ldr	r3, [r1, #16]
 80191a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80191a4:	4293      	cmp	r3, r2
 80191a6:	bfb8      	it	lt
 80191a8:	4613      	movlt	r3, r2
 80191aa:	6033      	str	r3, [r6, #0]
 80191ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80191b0:	4607      	mov	r7, r0
 80191b2:	460c      	mov	r4, r1
 80191b4:	b10a      	cbz	r2, 80191ba <_printf_common+0x26>
 80191b6:	3301      	adds	r3, #1
 80191b8:	6033      	str	r3, [r6, #0]
 80191ba:	6823      	ldr	r3, [r4, #0]
 80191bc:	0699      	lsls	r1, r3, #26
 80191be:	bf42      	ittt	mi
 80191c0:	6833      	ldrmi	r3, [r6, #0]
 80191c2:	3302      	addmi	r3, #2
 80191c4:	6033      	strmi	r3, [r6, #0]
 80191c6:	6825      	ldr	r5, [r4, #0]
 80191c8:	f015 0506 	ands.w	r5, r5, #6
 80191cc:	d106      	bne.n	80191dc <_printf_common+0x48>
 80191ce:	f104 0a19 	add.w	sl, r4, #25
 80191d2:	68e3      	ldr	r3, [r4, #12]
 80191d4:	6832      	ldr	r2, [r6, #0]
 80191d6:	1a9b      	subs	r3, r3, r2
 80191d8:	42ab      	cmp	r3, r5
 80191da:	dc26      	bgt.n	801922a <_printf_common+0x96>
 80191dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80191e0:	6822      	ldr	r2, [r4, #0]
 80191e2:	3b00      	subs	r3, #0
 80191e4:	bf18      	it	ne
 80191e6:	2301      	movne	r3, #1
 80191e8:	0692      	lsls	r2, r2, #26
 80191ea:	d42b      	bmi.n	8019244 <_printf_common+0xb0>
 80191ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80191f0:	4641      	mov	r1, r8
 80191f2:	4638      	mov	r0, r7
 80191f4:	47c8      	blx	r9
 80191f6:	3001      	adds	r0, #1
 80191f8:	d01e      	beq.n	8019238 <_printf_common+0xa4>
 80191fa:	6823      	ldr	r3, [r4, #0]
 80191fc:	6922      	ldr	r2, [r4, #16]
 80191fe:	f003 0306 	and.w	r3, r3, #6
 8019202:	2b04      	cmp	r3, #4
 8019204:	bf02      	ittt	eq
 8019206:	68e5      	ldreq	r5, [r4, #12]
 8019208:	6833      	ldreq	r3, [r6, #0]
 801920a:	1aed      	subeq	r5, r5, r3
 801920c:	68a3      	ldr	r3, [r4, #8]
 801920e:	bf0c      	ite	eq
 8019210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019214:	2500      	movne	r5, #0
 8019216:	4293      	cmp	r3, r2
 8019218:	bfc4      	itt	gt
 801921a:	1a9b      	subgt	r3, r3, r2
 801921c:	18ed      	addgt	r5, r5, r3
 801921e:	2600      	movs	r6, #0
 8019220:	341a      	adds	r4, #26
 8019222:	42b5      	cmp	r5, r6
 8019224:	d11a      	bne.n	801925c <_printf_common+0xc8>
 8019226:	2000      	movs	r0, #0
 8019228:	e008      	b.n	801923c <_printf_common+0xa8>
 801922a:	2301      	movs	r3, #1
 801922c:	4652      	mov	r2, sl
 801922e:	4641      	mov	r1, r8
 8019230:	4638      	mov	r0, r7
 8019232:	47c8      	blx	r9
 8019234:	3001      	adds	r0, #1
 8019236:	d103      	bne.n	8019240 <_printf_common+0xac>
 8019238:	f04f 30ff 	mov.w	r0, #4294967295
 801923c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019240:	3501      	adds	r5, #1
 8019242:	e7c6      	b.n	80191d2 <_printf_common+0x3e>
 8019244:	18e1      	adds	r1, r4, r3
 8019246:	1c5a      	adds	r2, r3, #1
 8019248:	2030      	movs	r0, #48	@ 0x30
 801924a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801924e:	4422      	add	r2, r4
 8019250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019258:	3302      	adds	r3, #2
 801925a:	e7c7      	b.n	80191ec <_printf_common+0x58>
 801925c:	2301      	movs	r3, #1
 801925e:	4622      	mov	r2, r4
 8019260:	4641      	mov	r1, r8
 8019262:	4638      	mov	r0, r7
 8019264:	47c8      	blx	r9
 8019266:	3001      	adds	r0, #1
 8019268:	d0e6      	beq.n	8019238 <_printf_common+0xa4>
 801926a:	3601      	adds	r6, #1
 801926c:	e7d9      	b.n	8019222 <_printf_common+0x8e>
	...

08019270 <_printf_i>:
 8019270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019274:	7e0f      	ldrb	r7, [r1, #24]
 8019276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019278:	2f78      	cmp	r7, #120	@ 0x78
 801927a:	4691      	mov	r9, r2
 801927c:	4680      	mov	r8, r0
 801927e:	460c      	mov	r4, r1
 8019280:	469a      	mov	sl, r3
 8019282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019286:	d807      	bhi.n	8019298 <_printf_i+0x28>
 8019288:	2f62      	cmp	r7, #98	@ 0x62
 801928a:	d80a      	bhi.n	80192a2 <_printf_i+0x32>
 801928c:	2f00      	cmp	r7, #0
 801928e:	f000 80d2 	beq.w	8019436 <_printf_i+0x1c6>
 8019292:	2f58      	cmp	r7, #88	@ 0x58
 8019294:	f000 80b9 	beq.w	801940a <_printf_i+0x19a>
 8019298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801929c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80192a0:	e03a      	b.n	8019318 <_printf_i+0xa8>
 80192a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80192a6:	2b15      	cmp	r3, #21
 80192a8:	d8f6      	bhi.n	8019298 <_printf_i+0x28>
 80192aa:	a101      	add	r1, pc, #4	@ (adr r1, 80192b0 <_printf_i+0x40>)
 80192ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80192b0:	08019309 	.word	0x08019309
 80192b4:	0801931d 	.word	0x0801931d
 80192b8:	08019299 	.word	0x08019299
 80192bc:	08019299 	.word	0x08019299
 80192c0:	08019299 	.word	0x08019299
 80192c4:	08019299 	.word	0x08019299
 80192c8:	0801931d 	.word	0x0801931d
 80192cc:	08019299 	.word	0x08019299
 80192d0:	08019299 	.word	0x08019299
 80192d4:	08019299 	.word	0x08019299
 80192d8:	08019299 	.word	0x08019299
 80192dc:	0801941d 	.word	0x0801941d
 80192e0:	08019347 	.word	0x08019347
 80192e4:	080193d7 	.word	0x080193d7
 80192e8:	08019299 	.word	0x08019299
 80192ec:	08019299 	.word	0x08019299
 80192f0:	0801943f 	.word	0x0801943f
 80192f4:	08019299 	.word	0x08019299
 80192f8:	08019347 	.word	0x08019347
 80192fc:	08019299 	.word	0x08019299
 8019300:	08019299 	.word	0x08019299
 8019304:	080193df 	.word	0x080193df
 8019308:	6833      	ldr	r3, [r6, #0]
 801930a:	1d1a      	adds	r2, r3, #4
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	6032      	str	r2, [r6, #0]
 8019310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019318:	2301      	movs	r3, #1
 801931a:	e09d      	b.n	8019458 <_printf_i+0x1e8>
 801931c:	6833      	ldr	r3, [r6, #0]
 801931e:	6820      	ldr	r0, [r4, #0]
 8019320:	1d19      	adds	r1, r3, #4
 8019322:	6031      	str	r1, [r6, #0]
 8019324:	0606      	lsls	r6, r0, #24
 8019326:	d501      	bpl.n	801932c <_printf_i+0xbc>
 8019328:	681d      	ldr	r5, [r3, #0]
 801932a:	e003      	b.n	8019334 <_printf_i+0xc4>
 801932c:	0645      	lsls	r5, r0, #25
 801932e:	d5fb      	bpl.n	8019328 <_printf_i+0xb8>
 8019330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019334:	2d00      	cmp	r5, #0
 8019336:	da03      	bge.n	8019340 <_printf_i+0xd0>
 8019338:	232d      	movs	r3, #45	@ 0x2d
 801933a:	426d      	negs	r5, r5
 801933c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019340:	4859      	ldr	r0, [pc, #356]	@ (80194a8 <_printf_i+0x238>)
 8019342:	230a      	movs	r3, #10
 8019344:	e011      	b.n	801936a <_printf_i+0xfa>
 8019346:	6821      	ldr	r1, [r4, #0]
 8019348:	6833      	ldr	r3, [r6, #0]
 801934a:	0608      	lsls	r0, r1, #24
 801934c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019350:	d402      	bmi.n	8019358 <_printf_i+0xe8>
 8019352:	0649      	lsls	r1, r1, #25
 8019354:	bf48      	it	mi
 8019356:	b2ad      	uxthmi	r5, r5
 8019358:	2f6f      	cmp	r7, #111	@ 0x6f
 801935a:	4853      	ldr	r0, [pc, #332]	@ (80194a8 <_printf_i+0x238>)
 801935c:	6033      	str	r3, [r6, #0]
 801935e:	bf14      	ite	ne
 8019360:	230a      	movne	r3, #10
 8019362:	2308      	moveq	r3, #8
 8019364:	2100      	movs	r1, #0
 8019366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801936a:	6866      	ldr	r6, [r4, #4]
 801936c:	60a6      	str	r6, [r4, #8]
 801936e:	2e00      	cmp	r6, #0
 8019370:	bfa2      	ittt	ge
 8019372:	6821      	ldrge	r1, [r4, #0]
 8019374:	f021 0104 	bicge.w	r1, r1, #4
 8019378:	6021      	strge	r1, [r4, #0]
 801937a:	b90d      	cbnz	r5, 8019380 <_printf_i+0x110>
 801937c:	2e00      	cmp	r6, #0
 801937e:	d04b      	beq.n	8019418 <_printf_i+0x1a8>
 8019380:	4616      	mov	r6, r2
 8019382:	fbb5 f1f3 	udiv	r1, r5, r3
 8019386:	fb03 5711 	mls	r7, r3, r1, r5
 801938a:	5dc7      	ldrb	r7, [r0, r7]
 801938c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019390:	462f      	mov	r7, r5
 8019392:	42bb      	cmp	r3, r7
 8019394:	460d      	mov	r5, r1
 8019396:	d9f4      	bls.n	8019382 <_printf_i+0x112>
 8019398:	2b08      	cmp	r3, #8
 801939a:	d10b      	bne.n	80193b4 <_printf_i+0x144>
 801939c:	6823      	ldr	r3, [r4, #0]
 801939e:	07df      	lsls	r7, r3, #31
 80193a0:	d508      	bpl.n	80193b4 <_printf_i+0x144>
 80193a2:	6923      	ldr	r3, [r4, #16]
 80193a4:	6861      	ldr	r1, [r4, #4]
 80193a6:	4299      	cmp	r1, r3
 80193a8:	bfde      	ittt	le
 80193aa:	2330      	movle	r3, #48	@ 0x30
 80193ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80193b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80193b4:	1b92      	subs	r2, r2, r6
 80193b6:	6122      	str	r2, [r4, #16]
 80193b8:	f8cd a000 	str.w	sl, [sp]
 80193bc:	464b      	mov	r3, r9
 80193be:	aa03      	add	r2, sp, #12
 80193c0:	4621      	mov	r1, r4
 80193c2:	4640      	mov	r0, r8
 80193c4:	f7ff fee6 	bl	8019194 <_printf_common>
 80193c8:	3001      	adds	r0, #1
 80193ca:	d14a      	bne.n	8019462 <_printf_i+0x1f2>
 80193cc:	f04f 30ff 	mov.w	r0, #4294967295
 80193d0:	b004      	add	sp, #16
 80193d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193d6:	6823      	ldr	r3, [r4, #0]
 80193d8:	f043 0320 	orr.w	r3, r3, #32
 80193dc:	6023      	str	r3, [r4, #0]
 80193de:	4833      	ldr	r0, [pc, #204]	@ (80194ac <_printf_i+0x23c>)
 80193e0:	2778      	movs	r7, #120	@ 0x78
 80193e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80193e6:	6823      	ldr	r3, [r4, #0]
 80193e8:	6831      	ldr	r1, [r6, #0]
 80193ea:	061f      	lsls	r7, r3, #24
 80193ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80193f0:	d402      	bmi.n	80193f8 <_printf_i+0x188>
 80193f2:	065f      	lsls	r7, r3, #25
 80193f4:	bf48      	it	mi
 80193f6:	b2ad      	uxthmi	r5, r5
 80193f8:	6031      	str	r1, [r6, #0]
 80193fa:	07d9      	lsls	r1, r3, #31
 80193fc:	bf44      	itt	mi
 80193fe:	f043 0320 	orrmi.w	r3, r3, #32
 8019402:	6023      	strmi	r3, [r4, #0]
 8019404:	b11d      	cbz	r5, 801940e <_printf_i+0x19e>
 8019406:	2310      	movs	r3, #16
 8019408:	e7ac      	b.n	8019364 <_printf_i+0xf4>
 801940a:	4827      	ldr	r0, [pc, #156]	@ (80194a8 <_printf_i+0x238>)
 801940c:	e7e9      	b.n	80193e2 <_printf_i+0x172>
 801940e:	6823      	ldr	r3, [r4, #0]
 8019410:	f023 0320 	bic.w	r3, r3, #32
 8019414:	6023      	str	r3, [r4, #0]
 8019416:	e7f6      	b.n	8019406 <_printf_i+0x196>
 8019418:	4616      	mov	r6, r2
 801941a:	e7bd      	b.n	8019398 <_printf_i+0x128>
 801941c:	6833      	ldr	r3, [r6, #0]
 801941e:	6825      	ldr	r5, [r4, #0]
 8019420:	6961      	ldr	r1, [r4, #20]
 8019422:	1d18      	adds	r0, r3, #4
 8019424:	6030      	str	r0, [r6, #0]
 8019426:	062e      	lsls	r6, r5, #24
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	d501      	bpl.n	8019430 <_printf_i+0x1c0>
 801942c:	6019      	str	r1, [r3, #0]
 801942e:	e002      	b.n	8019436 <_printf_i+0x1c6>
 8019430:	0668      	lsls	r0, r5, #25
 8019432:	d5fb      	bpl.n	801942c <_printf_i+0x1bc>
 8019434:	8019      	strh	r1, [r3, #0]
 8019436:	2300      	movs	r3, #0
 8019438:	6123      	str	r3, [r4, #16]
 801943a:	4616      	mov	r6, r2
 801943c:	e7bc      	b.n	80193b8 <_printf_i+0x148>
 801943e:	6833      	ldr	r3, [r6, #0]
 8019440:	1d1a      	adds	r2, r3, #4
 8019442:	6032      	str	r2, [r6, #0]
 8019444:	681e      	ldr	r6, [r3, #0]
 8019446:	6862      	ldr	r2, [r4, #4]
 8019448:	2100      	movs	r1, #0
 801944a:	4630      	mov	r0, r6
 801944c:	f7e6 ff48 	bl	80002e0 <memchr>
 8019450:	b108      	cbz	r0, 8019456 <_printf_i+0x1e6>
 8019452:	1b80      	subs	r0, r0, r6
 8019454:	6060      	str	r0, [r4, #4]
 8019456:	6863      	ldr	r3, [r4, #4]
 8019458:	6123      	str	r3, [r4, #16]
 801945a:	2300      	movs	r3, #0
 801945c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019460:	e7aa      	b.n	80193b8 <_printf_i+0x148>
 8019462:	6923      	ldr	r3, [r4, #16]
 8019464:	4632      	mov	r2, r6
 8019466:	4649      	mov	r1, r9
 8019468:	4640      	mov	r0, r8
 801946a:	47d0      	blx	sl
 801946c:	3001      	adds	r0, #1
 801946e:	d0ad      	beq.n	80193cc <_printf_i+0x15c>
 8019470:	6823      	ldr	r3, [r4, #0]
 8019472:	079b      	lsls	r3, r3, #30
 8019474:	d413      	bmi.n	801949e <_printf_i+0x22e>
 8019476:	68e0      	ldr	r0, [r4, #12]
 8019478:	9b03      	ldr	r3, [sp, #12]
 801947a:	4298      	cmp	r0, r3
 801947c:	bfb8      	it	lt
 801947e:	4618      	movlt	r0, r3
 8019480:	e7a6      	b.n	80193d0 <_printf_i+0x160>
 8019482:	2301      	movs	r3, #1
 8019484:	4632      	mov	r2, r6
 8019486:	4649      	mov	r1, r9
 8019488:	4640      	mov	r0, r8
 801948a:	47d0      	blx	sl
 801948c:	3001      	adds	r0, #1
 801948e:	d09d      	beq.n	80193cc <_printf_i+0x15c>
 8019490:	3501      	adds	r5, #1
 8019492:	68e3      	ldr	r3, [r4, #12]
 8019494:	9903      	ldr	r1, [sp, #12]
 8019496:	1a5b      	subs	r3, r3, r1
 8019498:	42ab      	cmp	r3, r5
 801949a:	dcf2      	bgt.n	8019482 <_printf_i+0x212>
 801949c:	e7eb      	b.n	8019476 <_printf_i+0x206>
 801949e:	2500      	movs	r5, #0
 80194a0:	f104 0619 	add.w	r6, r4, #25
 80194a4:	e7f5      	b.n	8019492 <_printf_i+0x222>
 80194a6:	bf00      	nop
 80194a8:	0804b706 	.word	0x0804b706
 80194ac:	0804b717 	.word	0x0804b717

080194b0 <std>:
 80194b0:	2300      	movs	r3, #0
 80194b2:	b510      	push	{r4, lr}
 80194b4:	4604      	mov	r4, r0
 80194b6:	e9c0 3300 	strd	r3, r3, [r0]
 80194ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80194be:	6083      	str	r3, [r0, #8]
 80194c0:	8181      	strh	r1, [r0, #12]
 80194c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80194c4:	81c2      	strh	r2, [r0, #14]
 80194c6:	6183      	str	r3, [r0, #24]
 80194c8:	4619      	mov	r1, r3
 80194ca:	2208      	movs	r2, #8
 80194cc:	305c      	adds	r0, #92	@ 0x5c
 80194ce:	f000 f962 	bl	8019796 <memset>
 80194d2:	4b0d      	ldr	r3, [pc, #52]	@ (8019508 <std+0x58>)
 80194d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80194d6:	4b0d      	ldr	r3, [pc, #52]	@ (801950c <std+0x5c>)
 80194d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80194da:	4b0d      	ldr	r3, [pc, #52]	@ (8019510 <std+0x60>)
 80194dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80194de:	4b0d      	ldr	r3, [pc, #52]	@ (8019514 <std+0x64>)
 80194e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80194e2:	4b0d      	ldr	r3, [pc, #52]	@ (8019518 <std+0x68>)
 80194e4:	6224      	str	r4, [r4, #32]
 80194e6:	429c      	cmp	r4, r3
 80194e8:	d006      	beq.n	80194f8 <std+0x48>
 80194ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80194ee:	4294      	cmp	r4, r2
 80194f0:	d002      	beq.n	80194f8 <std+0x48>
 80194f2:	33d0      	adds	r3, #208	@ 0xd0
 80194f4:	429c      	cmp	r4, r3
 80194f6:	d105      	bne.n	8019504 <std+0x54>
 80194f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80194fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019500:	f000 b9d0 	b.w	80198a4 <__retarget_lock_init_recursive>
 8019504:	bd10      	pop	{r4, pc}
 8019506:	bf00      	nop
 8019508:	080196dd 	.word	0x080196dd
 801950c:	080196ff 	.word	0x080196ff
 8019510:	08019737 	.word	0x08019737
 8019514:	0801975b 	.word	0x0801975b
 8019518:	24015ad8 	.word	0x24015ad8

0801951c <stdio_exit_handler>:
 801951c:	4a02      	ldr	r2, [pc, #8]	@ (8019528 <stdio_exit_handler+0xc>)
 801951e:	4903      	ldr	r1, [pc, #12]	@ (801952c <stdio_exit_handler+0x10>)
 8019520:	4803      	ldr	r0, [pc, #12]	@ (8019530 <stdio_exit_handler+0x14>)
 8019522:	f000 b869 	b.w	80195f8 <_fwalk_sglue>
 8019526:	bf00      	nop
 8019528:	24013a20 	.word	0x24013a20
 801952c:	0801afe5 	.word	0x0801afe5
 8019530:	24013a30 	.word	0x24013a30

08019534 <cleanup_stdio>:
 8019534:	6841      	ldr	r1, [r0, #4]
 8019536:	4b0c      	ldr	r3, [pc, #48]	@ (8019568 <cleanup_stdio+0x34>)
 8019538:	4299      	cmp	r1, r3
 801953a:	b510      	push	{r4, lr}
 801953c:	4604      	mov	r4, r0
 801953e:	d001      	beq.n	8019544 <cleanup_stdio+0x10>
 8019540:	f001 fd50 	bl	801afe4 <_fflush_r>
 8019544:	68a1      	ldr	r1, [r4, #8]
 8019546:	4b09      	ldr	r3, [pc, #36]	@ (801956c <cleanup_stdio+0x38>)
 8019548:	4299      	cmp	r1, r3
 801954a:	d002      	beq.n	8019552 <cleanup_stdio+0x1e>
 801954c:	4620      	mov	r0, r4
 801954e:	f001 fd49 	bl	801afe4 <_fflush_r>
 8019552:	68e1      	ldr	r1, [r4, #12]
 8019554:	4b06      	ldr	r3, [pc, #24]	@ (8019570 <cleanup_stdio+0x3c>)
 8019556:	4299      	cmp	r1, r3
 8019558:	d004      	beq.n	8019564 <cleanup_stdio+0x30>
 801955a:	4620      	mov	r0, r4
 801955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019560:	f001 bd40 	b.w	801afe4 <_fflush_r>
 8019564:	bd10      	pop	{r4, pc}
 8019566:	bf00      	nop
 8019568:	24015ad8 	.word	0x24015ad8
 801956c:	24015b40 	.word	0x24015b40
 8019570:	24015ba8 	.word	0x24015ba8

08019574 <global_stdio_init.part.0>:
 8019574:	b510      	push	{r4, lr}
 8019576:	4b0b      	ldr	r3, [pc, #44]	@ (80195a4 <global_stdio_init.part.0+0x30>)
 8019578:	4c0b      	ldr	r4, [pc, #44]	@ (80195a8 <global_stdio_init.part.0+0x34>)
 801957a:	4a0c      	ldr	r2, [pc, #48]	@ (80195ac <global_stdio_init.part.0+0x38>)
 801957c:	601a      	str	r2, [r3, #0]
 801957e:	4620      	mov	r0, r4
 8019580:	2200      	movs	r2, #0
 8019582:	2104      	movs	r1, #4
 8019584:	f7ff ff94 	bl	80194b0 <std>
 8019588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801958c:	2201      	movs	r2, #1
 801958e:	2109      	movs	r1, #9
 8019590:	f7ff ff8e 	bl	80194b0 <std>
 8019594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019598:	2202      	movs	r2, #2
 801959a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801959e:	2112      	movs	r1, #18
 80195a0:	f7ff bf86 	b.w	80194b0 <std>
 80195a4:	24015c10 	.word	0x24015c10
 80195a8:	24015ad8 	.word	0x24015ad8
 80195ac:	0801951d 	.word	0x0801951d

080195b0 <__sfp_lock_acquire>:
 80195b0:	4801      	ldr	r0, [pc, #4]	@ (80195b8 <__sfp_lock_acquire+0x8>)
 80195b2:	f000 b978 	b.w	80198a6 <__retarget_lock_acquire_recursive>
 80195b6:	bf00      	nop
 80195b8:	24015c19 	.word	0x24015c19

080195bc <__sfp_lock_release>:
 80195bc:	4801      	ldr	r0, [pc, #4]	@ (80195c4 <__sfp_lock_release+0x8>)
 80195be:	f000 b973 	b.w	80198a8 <__retarget_lock_release_recursive>
 80195c2:	bf00      	nop
 80195c4:	24015c19 	.word	0x24015c19

080195c8 <__sinit>:
 80195c8:	b510      	push	{r4, lr}
 80195ca:	4604      	mov	r4, r0
 80195cc:	f7ff fff0 	bl	80195b0 <__sfp_lock_acquire>
 80195d0:	6a23      	ldr	r3, [r4, #32]
 80195d2:	b11b      	cbz	r3, 80195dc <__sinit+0x14>
 80195d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195d8:	f7ff bff0 	b.w	80195bc <__sfp_lock_release>
 80195dc:	4b04      	ldr	r3, [pc, #16]	@ (80195f0 <__sinit+0x28>)
 80195de:	6223      	str	r3, [r4, #32]
 80195e0:	4b04      	ldr	r3, [pc, #16]	@ (80195f4 <__sinit+0x2c>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d1f5      	bne.n	80195d4 <__sinit+0xc>
 80195e8:	f7ff ffc4 	bl	8019574 <global_stdio_init.part.0>
 80195ec:	e7f2      	b.n	80195d4 <__sinit+0xc>
 80195ee:	bf00      	nop
 80195f0:	08019535 	.word	0x08019535
 80195f4:	24015c10 	.word	0x24015c10

080195f8 <_fwalk_sglue>:
 80195f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195fc:	4607      	mov	r7, r0
 80195fe:	4688      	mov	r8, r1
 8019600:	4614      	mov	r4, r2
 8019602:	2600      	movs	r6, #0
 8019604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019608:	f1b9 0901 	subs.w	r9, r9, #1
 801960c:	d505      	bpl.n	801961a <_fwalk_sglue+0x22>
 801960e:	6824      	ldr	r4, [r4, #0]
 8019610:	2c00      	cmp	r4, #0
 8019612:	d1f7      	bne.n	8019604 <_fwalk_sglue+0xc>
 8019614:	4630      	mov	r0, r6
 8019616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801961a:	89ab      	ldrh	r3, [r5, #12]
 801961c:	2b01      	cmp	r3, #1
 801961e:	d907      	bls.n	8019630 <_fwalk_sglue+0x38>
 8019620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019624:	3301      	adds	r3, #1
 8019626:	d003      	beq.n	8019630 <_fwalk_sglue+0x38>
 8019628:	4629      	mov	r1, r5
 801962a:	4638      	mov	r0, r7
 801962c:	47c0      	blx	r8
 801962e:	4306      	orrs	r6, r0
 8019630:	3568      	adds	r5, #104	@ 0x68
 8019632:	e7e9      	b.n	8019608 <_fwalk_sglue+0x10>

08019634 <sniprintf>:
 8019634:	b40c      	push	{r2, r3}
 8019636:	b530      	push	{r4, r5, lr}
 8019638:	4b17      	ldr	r3, [pc, #92]	@ (8019698 <sniprintf+0x64>)
 801963a:	1e0c      	subs	r4, r1, #0
 801963c:	681d      	ldr	r5, [r3, #0]
 801963e:	b09d      	sub	sp, #116	@ 0x74
 8019640:	da08      	bge.n	8019654 <sniprintf+0x20>
 8019642:	238b      	movs	r3, #139	@ 0x8b
 8019644:	602b      	str	r3, [r5, #0]
 8019646:	f04f 30ff 	mov.w	r0, #4294967295
 801964a:	b01d      	add	sp, #116	@ 0x74
 801964c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019650:	b002      	add	sp, #8
 8019652:	4770      	bx	lr
 8019654:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019658:	f8ad 3014 	strh.w	r3, [sp, #20]
 801965c:	bf14      	ite	ne
 801965e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019662:	4623      	moveq	r3, r4
 8019664:	9304      	str	r3, [sp, #16]
 8019666:	9307      	str	r3, [sp, #28]
 8019668:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801966c:	9002      	str	r0, [sp, #8]
 801966e:	9006      	str	r0, [sp, #24]
 8019670:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019674:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019676:	ab21      	add	r3, sp, #132	@ 0x84
 8019678:	a902      	add	r1, sp, #8
 801967a:	4628      	mov	r0, r5
 801967c:	9301      	str	r3, [sp, #4]
 801967e:	f001 fb31 	bl	801ace4 <_svfiprintf_r>
 8019682:	1c43      	adds	r3, r0, #1
 8019684:	bfbc      	itt	lt
 8019686:	238b      	movlt	r3, #139	@ 0x8b
 8019688:	602b      	strlt	r3, [r5, #0]
 801968a:	2c00      	cmp	r4, #0
 801968c:	d0dd      	beq.n	801964a <sniprintf+0x16>
 801968e:	9b02      	ldr	r3, [sp, #8]
 8019690:	2200      	movs	r2, #0
 8019692:	701a      	strb	r2, [r3, #0]
 8019694:	e7d9      	b.n	801964a <sniprintf+0x16>
 8019696:	bf00      	nop
 8019698:	24013a2c 	.word	0x24013a2c

0801969c <siprintf>:
 801969c:	b40e      	push	{r1, r2, r3}
 801969e:	b500      	push	{lr}
 80196a0:	b09c      	sub	sp, #112	@ 0x70
 80196a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80196a4:	9002      	str	r0, [sp, #8]
 80196a6:	9006      	str	r0, [sp, #24]
 80196a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80196ac:	4809      	ldr	r0, [pc, #36]	@ (80196d4 <siprintf+0x38>)
 80196ae:	9107      	str	r1, [sp, #28]
 80196b0:	9104      	str	r1, [sp, #16]
 80196b2:	4909      	ldr	r1, [pc, #36]	@ (80196d8 <siprintf+0x3c>)
 80196b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80196b8:	9105      	str	r1, [sp, #20]
 80196ba:	6800      	ldr	r0, [r0, #0]
 80196bc:	9301      	str	r3, [sp, #4]
 80196be:	a902      	add	r1, sp, #8
 80196c0:	f001 fb10 	bl	801ace4 <_svfiprintf_r>
 80196c4:	9b02      	ldr	r3, [sp, #8]
 80196c6:	2200      	movs	r2, #0
 80196c8:	701a      	strb	r2, [r3, #0]
 80196ca:	b01c      	add	sp, #112	@ 0x70
 80196cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80196d0:	b003      	add	sp, #12
 80196d2:	4770      	bx	lr
 80196d4:	24013a2c 	.word	0x24013a2c
 80196d8:	ffff0208 	.word	0xffff0208

080196dc <__sread>:
 80196dc:	b510      	push	{r4, lr}
 80196de:	460c      	mov	r4, r1
 80196e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196e4:	f000 f886 	bl	80197f4 <_read_r>
 80196e8:	2800      	cmp	r0, #0
 80196ea:	bfab      	itete	ge
 80196ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80196ee:	89a3      	ldrhlt	r3, [r4, #12]
 80196f0:	181b      	addge	r3, r3, r0
 80196f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80196f6:	bfac      	ite	ge
 80196f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80196fa:	81a3      	strhlt	r3, [r4, #12]
 80196fc:	bd10      	pop	{r4, pc}

080196fe <__swrite>:
 80196fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019702:	461f      	mov	r7, r3
 8019704:	898b      	ldrh	r3, [r1, #12]
 8019706:	05db      	lsls	r3, r3, #23
 8019708:	4605      	mov	r5, r0
 801970a:	460c      	mov	r4, r1
 801970c:	4616      	mov	r6, r2
 801970e:	d505      	bpl.n	801971c <__swrite+0x1e>
 8019710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019714:	2302      	movs	r3, #2
 8019716:	2200      	movs	r2, #0
 8019718:	f000 f85a 	bl	80197d0 <_lseek_r>
 801971c:	89a3      	ldrh	r3, [r4, #12]
 801971e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019722:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019726:	81a3      	strh	r3, [r4, #12]
 8019728:	4632      	mov	r2, r6
 801972a:	463b      	mov	r3, r7
 801972c:	4628      	mov	r0, r5
 801972e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019732:	f000 b881 	b.w	8019838 <_write_r>

08019736 <__sseek>:
 8019736:	b510      	push	{r4, lr}
 8019738:	460c      	mov	r4, r1
 801973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801973e:	f000 f847 	bl	80197d0 <_lseek_r>
 8019742:	1c43      	adds	r3, r0, #1
 8019744:	89a3      	ldrh	r3, [r4, #12]
 8019746:	bf15      	itete	ne
 8019748:	6560      	strne	r0, [r4, #84]	@ 0x54
 801974a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801974e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019752:	81a3      	strheq	r3, [r4, #12]
 8019754:	bf18      	it	ne
 8019756:	81a3      	strhne	r3, [r4, #12]
 8019758:	bd10      	pop	{r4, pc}

0801975a <__sclose>:
 801975a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801975e:	f000 b827 	b.w	80197b0 <_close_r>

08019762 <memmove>:
 8019762:	4288      	cmp	r0, r1
 8019764:	b510      	push	{r4, lr}
 8019766:	eb01 0402 	add.w	r4, r1, r2
 801976a:	d902      	bls.n	8019772 <memmove+0x10>
 801976c:	4284      	cmp	r4, r0
 801976e:	4623      	mov	r3, r4
 8019770:	d807      	bhi.n	8019782 <memmove+0x20>
 8019772:	1e43      	subs	r3, r0, #1
 8019774:	42a1      	cmp	r1, r4
 8019776:	d008      	beq.n	801978a <memmove+0x28>
 8019778:	f811 2b01 	ldrb.w	r2, [r1], #1
 801977c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019780:	e7f8      	b.n	8019774 <memmove+0x12>
 8019782:	4402      	add	r2, r0
 8019784:	4601      	mov	r1, r0
 8019786:	428a      	cmp	r2, r1
 8019788:	d100      	bne.n	801978c <memmove+0x2a>
 801978a:	bd10      	pop	{r4, pc}
 801978c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019790:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019794:	e7f7      	b.n	8019786 <memmove+0x24>

08019796 <memset>:
 8019796:	4402      	add	r2, r0
 8019798:	4603      	mov	r3, r0
 801979a:	4293      	cmp	r3, r2
 801979c:	d100      	bne.n	80197a0 <memset+0xa>
 801979e:	4770      	bx	lr
 80197a0:	f803 1b01 	strb.w	r1, [r3], #1
 80197a4:	e7f9      	b.n	801979a <memset+0x4>
	...

080197a8 <_localeconv_r>:
 80197a8:	4800      	ldr	r0, [pc, #0]	@ (80197ac <_localeconv_r+0x4>)
 80197aa:	4770      	bx	lr
 80197ac:	24013b6c 	.word	0x24013b6c

080197b0 <_close_r>:
 80197b0:	b538      	push	{r3, r4, r5, lr}
 80197b2:	4d06      	ldr	r5, [pc, #24]	@ (80197cc <_close_r+0x1c>)
 80197b4:	2300      	movs	r3, #0
 80197b6:	4604      	mov	r4, r0
 80197b8:	4608      	mov	r0, r1
 80197ba:	602b      	str	r3, [r5, #0]
 80197bc:	f002 f910 	bl	801b9e0 <_close>
 80197c0:	1c43      	adds	r3, r0, #1
 80197c2:	d102      	bne.n	80197ca <_close_r+0x1a>
 80197c4:	682b      	ldr	r3, [r5, #0]
 80197c6:	b103      	cbz	r3, 80197ca <_close_r+0x1a>
 80197c8:	6023      	str	r3, [r4, #0]
 80197ca:	bd38      	pop	{r3, r4, r5, pc}
 80197cc:	24015c14 	.word	0x24015c14

080197d0 <_lseek_r>:
 80197d0:	b538      	push	{r3, r4, r5, lr}
 80197d2:	4d07      	ldr	r5, [pc, #28]	@ (80197f0 <_lseek_r+0x20>)
 80197d4:	4604      	mov	r4, r0
 80197d6:	4608      	mov	r0, r1
 80197d8:	4611      	mov	r1, r2
 80197da:	2200      	movs	r2, #0
 80197dc:	602a      	str	r2, [r5, #0]
 80197de:	461a      	mov	r2, r3
 80197e0:	f002 f926 	bl	801ba30 <_lseek>
 80197e4:	1c43      	adds	r3, r0, #1
 80197e6:	d102      	bne.n	80197ee <_lseek_r+0x1e>
 80197e8:	682b      	ldr	r3, [r5, #0]
 80197ea:	b103      	cbz	r3, 80197ee <_lseek_r+0x1e>
 80197ec:	6023      	str	r3, [r4, #0]
 80197ee:	bd38      	pop	{r3, r4, r5, pc}
 80197f0:	24015c14 	.word	0x24015c14

080197f4 <_read_r>:
 80197f4:	b538      	push	{r3, r4, r5, lr}
 80197f6:	4d07      	ldr	r5, [pc, #28]	@ (8019814 <_read_r+0x20>)
 80197f8:	4604      	mov	r4, r0
 80197fa:	4608      	mov	r0, r1
 80197fc:	4611      	mov	r1, r2
 80197fe:	2200      	movs	r2, #0
 8019800:	602a      	str	r2, [r5, #0]
 8019802:	461a      	mov	r2, r3
 8019804:	f002 f91c 	bl	801ba40 <_read>
 8019808:	1c43      	adds	r3, r0, #1
 801980a:	d102      	bne.n	8019812 <_read_r+0x1e>
 801980c:	682b      	ldr	r3, [r5, #0]
 801980e:	b103      	cbz	r3, 8019812 <_read_r+0x1e>
 8019810:	6023      	str	r3, [r4, #0]
 8019812:	bd38      	pop	{r3, r4, r5, pc}
 8019814:	24015c14 	.word	0x24015c14

08019818 <_sbrk_r>:
 8019818:	b538      	push	{r3, r4, r5, lr}
 801981a:	4d06      	ldr	r5, [pc, #24]	@ (8019834 <_sbrk_r+0x1c>)
 801981c:	2300      	movs	r3, #0
 801981e:	4604      	mov	r4, r0
 8019820:	4608      	mov	r0, r1
 8019822:	602b      	str	r3, [r5, #0]
 8019824:	f002 f914 	bl	801ba50 <_sbrk>
 8019828:	1c43      	adds	r3, r0, #1
 801982a:	d102      	bne.n	8019832 <_sbrk_r+0x1a>
 801982c:	682b      	ldr	r3, [r5, #0]
 801982e:	b103      	cbz	r3, 8019832 <_sbrk_r+0x1a>
 8019830:	6023      	str	r3, [r4, #0]
 8019832:	bd38      	pop	{r3, r4, r5, pc}
 8019834:	24015c14 	.word	0x24015c14

08019838 <_write_r>:
 8019838:	b538      	push	{r3, r4, r5, lr}
 801983a:	4d07      	ldr	r5, [pc, #28]	@ (8019858 <_write_r+0x20>)
 801983c:	4604      	mov	r4, r0
 801983e:	4608      	mov	r0, r1
 8019840:	4611      	mov	r1, r2
 8019842:	2200      	movs	r2, #0
 8019844:	602a      	str	r2, [r5, #0]
 8019846:	461a      	mov	r2, r3
 8019848:	f002 f910 	bl	801ba6c <_write>
 801984c:	1c43      	adds	r3, r0, #1
 801984e:	d102      	bne.n	8019856 <_write_r+0x1e>
 8019850:	682b      	ldr	r3, [r5, #0]
 8019852:	b103      	cbz	r3, 8019856 <_write_r+0x1e>
 8019854:	6023      	str	r3, [r4, #0]
 8019856:	bd38      	pop	{r3, r4, r5, pc}
 8019858:	24015c14 	.word	0x24015c14

0801985c <__libc_init_array>:
 801985c:	b570      	push	{r4, r5, r6, lr}
 801985e:	4d0d      	ldr	r5, [pc, #52]	@ (8019894 <__libc_init_array+0x38>)
 8019860:	4c0d      	ldr	r4, [pc, #52]	@ (8019898 <__libc_init_array+0x3c>)
 8019862:	1b64      	subs	r4, r4, r5
 8019864:	10a4      	asrs	r4, r4, #2
 8019866:	2600      	movs	r6, #0
 8019868:	42a6      	cmp	r6, r4
 801986a:	d109      	bne.n	8019880 <__libc_init_array+0x24>
 801986c:	4d0b      	ldr	r5, [pc, #44]	@ (801989c <__libc_init_array+0x40>)
 801986e:	4c0c      	ldr	r4, [pc, #48]	@ (80198a0 <__libc_init_array+0x44>)
 8019870:	f002 f906 	bl	801ba80 <_init>
 8019874:	1b64      	subs	r4, r4, r5
 8019876:	10a4      	asrs	r4, r4, #2
 8019878:	2600      	movs	r6, #0
 801987a:	42a6      	cmp	r6, r4
 801987c:	d105      	bne.n	801988a <__libc_init_array+0x2e>
 801987e:	bd70      	pop	{r4, r5, r6, pc}
 8019880:	f855 3b04 	ldr.w	r3, [r5], #4
 8019884:	4798      	blx	r3
 8019886:	3601      	adds	r6, #1
 8019888:	e7ee      	b.n	8019868 <__libc_init_array+0xc>
 801988a:	f855 3b04 	ldr.w	r3, [r5], #4
 801988e:	4798      	blx	r3
 8019890:	3601      	adds	r6, #1
 8019892:	e7f2      	b.n	801987a <__libc_init_array+0x1e>
 8019894:	0804bce0 	.word	0x0804bce0
 8019898:	0804bce0 	.word	0x0804bce0
 801989c:	0804bce0 	.word	0x0804bce0
 80198a0:	0804bce4 	.word	0x0804bce4

080198a4 <__retarget_lock_init_recursive>:
 80198a4:	4770      	bx	lr

080198a6 <__retarget_lock_acquire_recursive>:
 80198a6:	4770      	bx	lr

080198a8 <__retarget_lock_release_recursive>:
 80198a8:	4770      	bx	lr

080198aa <memcpy>:
 80198aa:	440a      	add	r2, r1
 80198ac:	4291      	cmp	r1, r2
 80198ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80198b2:	d100      	bne.n	80198b6 <memcpy+0xc>
 80198b4:	4770      	bx	lr
 80198b6:	b510      	push	{r4, lr}
 80198b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80198bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80198c0:	4291      	cmp	r1, r2
 80198c2:	d1f9      	bne.n	80198b8 <memcpy+0xe>
 80198c4:	bd10      	pop	{r4, pc}

080198c6 <quorem>:
 80198c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ca:	6903      	ldr	r3, [r0, #16]
 80198cc:	690c      	ldr	r4, [r1, #16]
 80198ce:	42a3      	cmp	r3, r4
 80198d0:	4607      	mov	r7, r0
 80198d2:	db7e      	blt.n	80199d2 <quorem+0x10c>
 80198d4:	3c01      	subs	r4, #1
 80198d6:	f101 0814 	add.w	r8, r1, #20
 80198da:	00a3      	lsls	r3, r4, #2
 80198dc:	f100 0514 	add.w	r5, r0, #20
 80198e0:	9300      	str	r3, [sp, #0]
 80198e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80198e6:	9301      	str	r3, [sp, #4]
 80198e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80198ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80198f0:	3301      	adds	r3, #1
 80198f2:	429a      	cmp	r2, r3
 80198f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80198f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80198fc:	d32e      	bcc.n	801995c <quorem+0x96>
 80198fe:	f04f 0a00 	mov.w	sl, #0
 8019902:	46c4      	mov	ip, r8
 8019904:	46ae      	mov	lr, r5
 8019906:	46d3      	mov	fp, sl
 8019908:	f85c 3b04 	ldr.w	r3, [ip], #4
 801990c:	b298      	uxth	r0, r3
 801990e:	fb06 a000 	mla	r0, r6, r0, sl
 8019912:	0c02      	lsrs	r2, r0, #16
 8019914:	0c1b      	lsrs	r3, r3, #16
 8019916:	fb06 2303 	mla	r3, r6, r3, r2
 801991a:	f8de 2000 	ldr.w	r2, [lr]
 801991e:	b280      	uxth	r0, r0
 8019920:	b292      	uxth	r2, r2
 8019922:	1a12      	subs	r2, r2, r0
 8019924:	445a      	add	r2, fp
 8019926:	f8de 0000 	ldr.w	r0, [lr]
 801992a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801992e:	b29b      	uxth	r3, r3
 8019930:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019934:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019938:	b292      	uxth	r2, r2
 801993a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801993e:	45e1      	cmp	r9, ip
 8019940:	f84e 2b04 	str.w	r2, [lr], #4
 8019944:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019948:	d2de      	bcs.n	8019908 <quorem+0x42>
 801994a:	9b00      	ldr	r3, [sp, #0]
 801994c:	58eb      	ldr	r3, [r5, r3]
 801994e:	b92b      	cbnz	r3, 801995c <quorem+0x96>
 8019950:	9b01      	ldr	r3, [sp, #4]
 8019952:	3b04      	subs	r3, #4
 8019954:	429d      	cmp	r5, r3
 8019956:	461a      	mov	r2, r3
 8019958:	d32f      	bcc.n	80199ba <quorem+0xf4>
 801995a:	613c      	str	r4, [r7, #16]
 801995c:	4638      	mov	r0, r7
 801995e:	f001 f855 	bl	801aa0c <__mcmp>
 8019962:	2800      	cmp	r0, #0
 8019964:	db25      	blt.n	80199b2 <quorem+0xec>
 8019966:	4629      	mov	r1, r5
 8019968:	2000      	movs	r0, #0
 801996a:	f858 2b04 	ldr.w	r2, [r8], #4
 801996e:	f8d1 c000 	ldr.w	ip, [r1]
 8019972:	fa1f fe82 	uxth.w	lr, r2
 8019976:	fa1f f38c 	uxth.w	r3, ip
 801997a:	eba3 030e 	sub.w	r3, r3, lr
 801997e:	4403      	add	r3, r0
 8019980:	0c12      	lsrs	r2, r2, #16
 8019982:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019986:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801998a:	b29b      	uxth	r3, r3
 801998c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019990:	45c1      	cmp	r9, r8
 8019992:	f841 3b04 	str.w	r3, [r1], #4
 8019996:	ea4f 4022 	mov.w	r0, r2, asr #16
 801999a:	d2e6      	bcs.n	801996a <quorem+0xa4>
 801999c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80199a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80199a4:	b922      	cbnz	r2, 80199b0 <quorem+0xea>
 80199a6:	3b04      	subs	r3, #4
 80199a8:	429d      	cmp	r5, r3
 80199aa:	461a      	mov	r2, r3
 80199ac:	d30b      	bcc.n	80199c6 <quorem+0x100>
 80199ae:	613c      	str	r4, [r7, #16]
 80199b0:	3601      	adds	r6, #1
 80199b2:	4630      	mov	r0, r6
 80199b4:	b003      	add	sp, #12
 80199b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ba:	6812      	ldr	r2, [r2, #0]
 80199bc:	3b04      	subs	r3, #4
 80199be:	2a00      	cmp	r2, #0
 80199c0:	d1cb      	bne.n	801995a <quorem+0x94>
 80199c2:	3c01      	subs	r4, #1
 80199c4:	e7c6      	b.n	8019954 <quorem+0x8e>
 80199c6:	6812      	ldr	r2, [r2, #0]
 80199c8:	3b04      	subs	r3, #4
 80199ca:	2a00      	cmp	r2, #0
 80199cc:	d1ef      	bne.n	80199ae <quorem+0xe8>
 80199ce:	3c01      	subs	r4, #1
 80199d0:	e7ea      	b.n	80199a8 <quorem+0xe2>
 80199d2:	2000      	movs	r0, #0
 80199d4:	e7ee      	b.n	80199b4 <quorem+0xee>
	...

080199d8 <_dtoa_r>:
 80199d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199dc:	ed2d 8b02 	vpush	{d8}
 80199e0:	69c7      	ldr	r7, [r0, #28]
 80199e2:	b091      	sub	sp, #68	@ 0x44
 80199e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80199e8:	ec55 4b10 	vmov	r4, r5, d0
 80199ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80199ee:	9107      	str	r1, [sp, #28]
 80199f0:	4681      	mov	r9, r0
 80199f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80199f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80199f6:	b97f      	cbnz	r7, 8019a18 <_dtoa_r+0x40>
 80199f8:	2010      	movs	r0, #16
 80199fa:	f7ff f83d 	bl	8018a78 <malloc>
 80199fe:	4602      	mov	r2, r0
 8019a00:	f8c9 001c 	str.w	r0, [r9, #28]
 8019a04:	b920      	cbnz	r0, 8019a10 <_dtoa_r+0x38>
 8019a06:	4ba0      	ldr	r3, [pc, #640]	@ (8019c88 <_dtoa_r+0x2b0>)
 8019a08:	21ef      	movs	r1, #239	@ 0xef
 8019a0a:	48a0      	ldr	r0, [pc, #640]	@ (8019c8c <_dtoa_r+0x2b4>)
 8019a0c:	f001 fb12 	bl	801b034 <__assert_func>
 8019a10:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019a14:	6007      	str	r7, [r0, #0]
 8019a16:	60c7      	str	r7, [r0, #12]
 8019a18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019a1c:	6819      	ldr	r1, [r3, #0]
 8019a1e:	b159      	cbz	r1, 8019a38 <_dtoa_r+0x60>
 8019a20:	685a      	ldr	r2, [r3, #4]
 8019a22:	604a      	str	r2, [r1, #4]
 8019a24:	2301      	movs	r3, #1
 8019a26:	4093      	lsls	r3, r2
 8019a28:	608b      	str	r3, [r1, #8]
 8019a2a:	4648      	mov	r0, r9
 8019a2c:	f000 fdb4 	bl	801a598 <_Bfree>
 8019a30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019a34:	2200      	movs	r2, #0
 8019a36:	601a      	str	r2, [r3, #0]
 8019a38:	1e2b      	subs	r3, r5, #0
 8019a3a:	bfbb      	ittet	lt
 8019a3c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019a40:	9303      	strlt	r3, [sp, #12]
 8019a42:	2300      	movge	r3, #0
 8019a44:	2201      	movlt	r2, #1
 8019a46:	bfac      	ite	ge
 8019a48:	6033      	strge	r3, [r6, #0]
 8019a4a:	6032      	strlt	r2, [r6, #0]
 8019a4c:	4b90      	ldr	r3, [pc, #576]	@ (8019c90 <_dtoa_r+0x2b8>)
 8019a4e:	9e03      	ldr	r6, [sp, #12]
 8019a50:	43b3      	bics	r3, r6
 8019a52:	d110      	bne.n	8019a76 <_dtoa_r+0x9e>
 8019a54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019a56:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019a5a:	6013      	str	r3, [r2, #0]
 8019a5c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019a60:	4323      	orrs	r3, r4
 8019a62:	f000 84de 	beq.w	801a422 <_dtoa_r+0xa4a>
 8019a66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a68:	4f8a      	ldr	r7, [pc, #552]	@ (8019c94 <_dtoa_r+0x2bc>)
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	f000 84e0 	beq.w	801a430 <_dtoa_r+0xa58>
 8019a70:	1cfb      	adds	r3, r7, #3
 8019a72:	f000 bcdb 	b.w	801a42c <_dtoa_r+0xa54>
 8019a76:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019a7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a82:	d10a      	bne.n	8019a9a <_dtoa_r+0xc2>
 8019a84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019a86:	2301      	movs	r3, #1
 8019a88:	6013      	str	r3, [r2, #0]
 8019a8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a8c:	b113      	cbz	r3, 8019a94 <_dtoa_r+0xbc>
 8019a8e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019a90:	4b81      	ldr	r3, [pc, #516]	@ (8019c98 <_dtoa_r+0x2c0>)
 8019a92:	6013      	str	r3, [r2, #0]
 8019a94:	4f81      	ldr	r7, [pc, #516]	@ (8019c9c <_dtoa_r+0x2c4>)
 8019a96:	f000 bccb 	b.w	801a430 <_dtoa_r+0xa58>
 8019a9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8019a9c:	a90f      	add	r1, sp, #60	@ 0x3c
 8019a9e:	4648      	mov	r0, r9
 8019aa0:	eeb0 0b48 	vmov.f64	d0, d8
 8019aa4:	f001 f862 	bl	801ab6c <__d2b>
 8019aa8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019aac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019aae:	9001      	str	r0, [sp, #4]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d045      	beq.n	8019b40 <_dtoa_r+0x168>
 8019ab4:	eeb0 7b48 	vmov.f64	d7, d8
 8019ab8:	ee18 1a90 	vmov	r1, s17
 8019abc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019ac0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8019ac4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8019ac8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019acc:	2500      	movs	r5, #0
 8019ace:	ee07 1a90 	vmov	s15, r1
 8019ad2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8019ad6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019c70 <_dtoa_r+0x298>
 8019ada:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019ade:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019c78 <_dtoa_r+0x2a0>
 8019ae2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019ae6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019c80 <_dtoa_r+0x2a8>
 8019aea:	ee07 3a90 	vmov	s15, r3
 8019aee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019af2:	eeb0 7b46 	vmov.f64	d7, d6
 8019af6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019afa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019afe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b06:	ee16 8a90 	vmov	r8, s13
 8019b0a:	d508      	bpl.n	8019b1e <_dtoa_r+0x146>
 8019b0c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019b10:	eeb4 6b47 	vcmp.f64	d6, d7
 8019b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b18:	bf18      	it	ne
 8019b1a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8019b1e:	f1b8 0f16 	cmp.w	r8, #22
 8019b22:	d82b      	bhi.n	8019b7c <_dtoa_r+0x1a4>
 8019b24:	495e      	ldr	r1, [pc, #376]	@ (8019ca0 <_dtoa_r+0x2c8>)
 8019b26:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019b2a:	ed91 7b00 	vldr	d7, [r1]
 8019b2e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b36:	d501      	bpl.n	8019b3c <_dtoa_r+0x164>
 8019b38:	f108 38ff 	add.w	r8, r8, #4294967295
 8019b3c:	2100      	movs	r1, #0
 8019b3e:	e01e      	b.n	8019b7e <_dtoa_r+0x1a6>
 8019b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b42:	4413      	add	r3, r2
 8019b44:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8019b48:	2920      	cmp	r1, #32
 8019b4a:	bfc1      	itttt	gt
 8019b4c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8019b50:	408e      	lslgt	r6, r1
 8019b52:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8019b56:	fa24 f101 	lsrgt.w	r1, r4, r1
 8019b5a:	bfd6      	itet	le
 8019b5c:	f1c1 0120 	rsble	r1, r1, #32
 8019b60:	4331      	orrgt	r1, r6
 8019b62:	fa04 f101 	lslle.w	r1, r4, r1
 8019b66:	ee07 1a90 	vmov	s15, r1
 8019b6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019b6e:	3b01      	subs	r3, #1
 8019b70:	ee17 1a90 	vmov	r1, s15
 8019b74:	2501      	movs	r5, #1
 8019b76:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019b7a:	e7a8      	b.n	8019ace <_dtoa_r+0xf6>
 8019b7c:	2101      	movs	r1, #1
 8019b7e:	1ad2      	subs	r2, r2, r3
 8019b80:	1e53      	subs	r3, r2, #1
 8019b82:	9306      	str	r3, [sp, #24]
 8019b84:	bf45      	ittet	mi
 8019b86:	f1c2 0301 	rsbmi	r3, r2, #1
 8019b8a:	9305      	strmi	r3, [sp, #20]
 8019b8c:	2300      	movpl	r3, #0
 8019b8e:	2300      	movmi	r3, #0
 8019b90:	bf4c      	ite	mi
 8019b92:	9306      	strmi	r3, [sp, #24]
 8019b94:	9305      	strpl	r3, [sp, #20]
 8019b96:	f1b8 0f00 	cmp.w	r8, #0
 8019b9a:	910c      	str	r1, [sp, #48]	@ 0x30
 8019b9c:	db18      	blt.n	8019bd0 <_dtoa_r+0x1f8>
 8019b9e:	9b06      	ldr	r3, [sp, #24]
 8019ba0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8019ba4:	4443      	add	r3, r8
 8019ba6:	9306      	str	r3, [sp, #24]
 8019ba8:	2300      	movs	r3, #0
 8019baa:	9a07      	ldr	r2, [sp, #28]
 8019bac:	2a09      	cmp	r2, #9
 8019bae:	d849      	bhi.n	8019c44 <_dtoa_r+0x26c>
 8019bb0:	2a05      	cmp	r2, #5
 8019bb2:	bfc4      	itt	gt
 8019bb4:	3a04      	subgt	r2, #4
 8019bb6:	9207      	strgt	r2, [sp, #28]
 8019bb8:	9a07      	ldr	r2, [sp, #28]
 8019bba:	f1a2 0202 	sub.w	r2, r2, #2
 8019bbe:	bfcc      	ite	gt
 8019bc0:	2400      	movgt	r4, #0
 8019bc2:	2401      	movle	r4, #1
 8019bc4:	2a03      	cmp	r2, #3
 8019bc6:	d848      	bhi.n	8019c5a <_dtoa_r+0x282>
 8019bc8:	e8df f002 	tbb	[pc, r2]
 8019bcc:	3a2c2e0b 	.word	0x3a2c2e0b
 8019bd0:	9b05      	ldr	r3, [sp, #20]
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	eba3 0308 	sub.w	r3, r3, r8
 8019bd8:	9305      	str	r3, [sp, #20]
 8019bda:	920a      	str	r2, [sp, #40]	@ 0x28
 8019bdc:	f1c8 0300 	rsb	r3, r8, #0
 8019be0:	e7e3      	b.n	8019baa <_dtoa_r+0x1d2>
 8019be2:	2200      	movs	r2, #0
 8019be4:	9208      	str	r2, [sp, #32]
 8019be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019be8:	2a00      	cmp	r2, #0
 8019bea:	dc39      	bgt.n	8019c60 <_dtoa_r+0x288>
 8019bec:	f04f 0b01 	mov.w	fp, #1
 8019bf0:	46da      	mov	sl, fp
 8019bf2:	465a      	mov	r2, fp
 8019bf4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019bf8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019bfc:	2100      	movs	r1, #0
 8019bfe:	2004      	movs	r0, #4
 8019c00:	f100 0614 	add.w	r6, r0, #20
 8019c04:	4296      	cmp	r6, r2
 8019c06:	d930      	bls.n	8019c6a <_dtoa_r+0x292>
 8019c08:	6079      	str	r1, [r7, #4]
 8019c0a:	4648      	mov	r0, r9
 8019c0c:	9304      	str	r3, [sp, #16]
 8019c0e:	f000 fc83 	bl	801a518 <_Balloc>
 8019c12:	9b04      	ldr	r3, [sp, #16]
 8019c14:	4607      	mov	r7, r0
 8019c16:	2800      	cmp	r0, #0
 8019c18:	d146      	bne.n	8019ca8 <_dtoa_r+0x2d0>
 8019c1a:	4b22      	ldr	r3, [pc, #136]	@ (8019ca4 <_dtoa_r+0x2cc>)
 8019c1c:	4602      	mov	r2, r0
 8019c1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8019c22:	e6f2      	b.n	8019a0a <_dtoa_r+0x32>
 8019c24:	2201      	movs	r2, #1
 8019c26:	e7dd      	b.n	8019be4 <_dtoa_r+0x20c>
 8019c28:	2200      	movs	r2, #0
 8019c2a:	9208      	str	r2, [sp, #32]
 8019c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c2e:	eb08 0b02 	add.w	fp, r8, r2
 8019c32:	f10b 0a01 	add.w	sl, fp, #1
 8019c36:	4652      	mov	r2, sl
 8019c38:	2a01      	cmp	r2, #1
 8019c3a:	bfb8      	it	lt
 8019c3c:	2201      	movlt	r2, #1
 8019c3e:	e7db      	b.n	8019bf8 <_dtoa_r+0x220>
 8019c40:	2201      	movs	r2, #1
 8019c42:	e7f2      	b.n	8019c2a <_dtoa_r+0x252>
 8019c44:	2401      	movs	r4, #1
 8019c46:	2200      	movs	r2, #0
 8019c48:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8019c4c:	f04f 3bff 	mov.w	fp, #4294967295
 8019c50:	2100      	movs	r1, #0
 8019c52:	46da      	mov	sl, fp
 8019c54:	2212      	movs	r2, #18
 8019c56:	9109      	str	r1, [sp, #36]	@ 0x24
 8019c58:	e7ce      	b.n	8019bf8 <_dtoa_r+0x220>
 8019c5a:	2201      	movs	r2, #1
 8019c5c:	9208      	str	r2, [sp, #32]
 8019c5e:	e7f5      	b.n	8019c4c <_dtoa_r+0x274>
 8019c60:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8019c64:	46da      	mov	sl, fp
 8019c66:	465a      	mov	r2, fp
 8019c68:	e7c6      	b.n	8019bf8 <_dtoa_r+0x220>
 8019c6a:	3101      	adds	r1, #1
 8019c6c:	0040      	lsls	r0, r0, #1
 8019c6e:	e7c7      	b.n	8019c00 <_dtoa_r+0x228>
 8019c70:	636f4361 	.word	0x636f4361
 8019c74:	3fd287a7 	.word	0x3fd287a7
 8019c78:	8b60c8b3 	.word	0x8b60c8b3
 8019c7c:	3fc68a28 	.word	0x3fc68a28
 8019c80:	509f79fb 	.word	0x509f79fb
 8019c84:	3fd34413 	.word	0x3fd34413
 8019c88:	0804b735 	.word	0x0804b735
 8019c8c:	0804b74c 	.word	0x0804b74c
 8019c90:	7ff00000 	.word	0x7ff00000
 8019c94:	0804b731 	.word	0x0804b731
 8019c98:	0804b705 	.word	0x0804b705
 8019c9c:	0804b704 	.word	0x0804b704
 8019ca0:	0804b848 	.word	0x0804b848
 8019ca4:	0804b7a4 	.word	0x0804b7a4
 8019ca8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019cac:	f1ba 0f0e 	cmp.w	sl, #14
 8019cb0:	6010      	str	r0, [r2, #0]
 8019cb2:	d86f      	bhi.n	8019d94 <_dtoa_r+0x3bc>
 8019cb4:	2c00      	cmp	r4, #0
 8019cb6:	d06d      	beq.n	8019d94 <_dtoa_r+0x3bc>
 8019cb8:	f1b8 0f00 	cmp.w	r8, #0
 8019cbc:	f340 80c2 	ble.w	8019e44 <_dtoa_r+0x46c>
 8019cc0:	4aca      	ldr	r2, [pc, #808]	@ (8019fec <_dtoa_r+0x614>)
 8019cc2:	f008 010f 	and.w	r1, r8, #15
 8019cc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019cca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8019cce:	ed92 7b00 	vldr	d7, [r2]
 8019cd2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8019cd6:	f000 80a9 	beq.w	8019e2c <_dtoa_r+0x454>
 8019cda:	4ac5      	ldr	r2, [pc, #788]	@ (8019ff0 <_dtoa_r+0x618>)
 8019cdc:	ed92 6b08 	vldr	d6, [r2, #32]
 8019ce0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019ce4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019ce8:	f001 010f 	and.w	r1, r1, #15
 8019cec:	2203      	movs	r2, #3
 8019cee:	48c0      	ldr	r0, [pc, #768]	@ (8019ff0 <_dtoa_r+0x618>)
 8019cf0:	2900      	cmp	r1, #0
 8019cf2:	f040 809d 	bne.w	8019e30 <_dtoa_r+0x458>
 8019cf6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019cfa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019cfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019d02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019d04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019d08:	2900      	cmp	r1, #0
 8019d0a:	f000 80c1 	beq.w	8019e90 <_dtoa_r+0x4b8>
 8019d0e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8019d12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d1a:	f140 80b9 	bpl.w	8019e90 <_dtoa_r+0x4b8>
 8019d1e:	f1ba 0f00 	cmp.w	sl, #0
 8019d22:	f000 80b5 	beq.w	8019e90 <_dtoa_r+0x4b8>
 8019d26:	f1bb 0f00 	cmp.w	fp, #0
 8019d2a:	dd31      	ble.n	8019d90 <_dtoa_r+0x3b8>
 8019d2c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019d30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019d34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019d38:	f108 31ff 	add.w	r1, r8, #4294967295
 8019d3c:	9104      	str	r1, [sp, #16]
 8019d3e:	3201      	adds	r2, #1
 8019d40:	465c      	mov	r4, fp
 8019d42:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019d46:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019d4a:	ee07 2a90 	vmov	s15, r2
 8019d4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019d52:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019d56:	ee15 2a90 	vmov	r2, s11
 8019d5a:	ec51 0b15 	vmov	r0, r1, d5
 8019d5e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8019d62:	2c00      	cmp	r4, #0
 8019d64:	f040 8098 	bne.w	8019e98 <_dtoa_r+0x4c0>
 8019d68:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019d6c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019d70:	ec41 0b17 	vmov	d7, r0, r1
 8019d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d7c:	f300 8261 	bgt.w	801a242 <_dtoa_r+0x86a>
 8019d80:	eeb1 7b47 	vneg.f64	d7, d7
 8019d84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d8c:	f100 80f5 	bmi.w	8019f7a <_dtoa_r+0x5a2>
 8019d90:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019d94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019d96:	2a00      	cmp	r2, #0
 8019d98:	f2c0 812c 	blt.w	8019ff4 <_dtoa_r+0x61c>
 8019d9c:	f1b8 0f0e 	cmp.w	r8, #14
 8019da0:	f300 8128 	bgt.w	8019ff4 <_dtoa_r+0x61c>
 8019da4:	4b91      	ldr	r3, [pc, #580]	@ (8019fec <_dtoa_r+0x614>)
 8019da6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019daa:	ed93 6b00 	vldr	d6, [r3]
 8019dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	da03      	bge.n	8019dbc <_dtoa_r+0x3e4>
 8019db4:	f1ba 0f00 	cmp.w	sl, #0
 8019db8:	f340 80d2 	ble.w	8019f60 <_dtoa_r+0x588>
 8019dbc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019dc4:	463e      	mov	r6, r7
 8019dc6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019dca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019dce:	ee15 3a10 	vmov	r3, s10
 8019dd2:	3330      	adds	r3, #48	@ 0x30
 8019dd4:	f806 3b01 	strb.w	r3, [r6], #1
 8019dd8:	1bf3      	subs	r3, r6, r7
 8019dda:	459a      	cmp	sl, r3
 8019ddc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019de0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019de4:	f040 80f8 	bne.w	8019fd8 <_dtoa_r+0x600>
 8019de8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019dec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019df4:	f300 80dd 	bgt.w	8019fb2 <_dtoa_r+0x5da>
 8019df8:	eeb4 7b46 	vcmp.f64	d7, d6
 8019dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e00:	d104      	bne.n	8019e0c <_dtoa_r+0x434>
 8019e02:	ee15 3a10 	vmov	r3, s10
 8019e06:	07db      	lsls	r3, r3, #31
 8019e08:	f100 80d3 	bmi.w	8019fb2 <_dtoa_r+0x5da>
 8019e0c:	9901      	ldr	r1, [sp, #4]
 8019e0e:	4648      	mov	r0, r9
 8019e10:	f000 fbc2 	bl	801a598 <_Bfree>
 8019e14:	2300      	movs	r3, #0
 8019e16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019e18:	7033      	strb	r3, [r6, #0]
 8019e1a:	f108 0301 	add.w	r3, r8, #1
 8019e1e:	6013      	str	r3, [r2, #0]
 8019e20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	f000 8304 	beq.w	801a430 <_dtoa_r+0xa58>
 8019e28:	601e      	str	r6, [r3, #0]
 8019e2a:	e301      	b.n	801a430 <_dtoa_r+0xa58>
 8019e2c:	2202      	movs	r2, #2
 8019e2e:	e75e      	b.n	8019cee <_dtoa_r+0x316>
 8019e30:	07cc      	lsls	r4, r1, #31
 8019e32:	d504      	bpl.n	8019e3e <_dtoa_r+0x466>
 8019e34:	ed90 6b00 	vldr	d6, [r0]
 8019e38:	3201      	adds	r2, #1
 8019e3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019e3e:	1049      	asrs	r1, r1, #1
 8019e40:	3008      	adds	r0, #8
 8019e42:	e755      	b.n	8019cf0 <_dtoa_r+0x318>
 8019e44:	d022      	beq.n	8019e8c <_dtoa_r+0x4b4>
 8019e46:	f1c8 0100 	rsb	r1, r8, #0
 8019e4a:	4a68      	ldr	r2, [pc, #416]	@ (8019fec <_dtoa_r+0x614>)
 8019e4c:	f001 000f 	and.w	r0, r1, #15
 8019e50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019e54:	ed92 7b00 	vldr	d7, [r2]
 8019e58:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019e5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019e60:	4863      	ldr	r0, [pc, #396]	@ (8019ff0 <_dtoa_r+0x618>)
 8019e62:	1109      	asrs	r1, r1, #4
 8019e64:	2400      	movs	r4, #0
 8019e66:	2202      	movs	r2, #2
 8019e68:	b929      	cbnz	r1, 8019e76 <_dtoa_r+0x49e>
 8019e6a:	2c00      	cmp	r4, #0
 8019e6c:	f43f af49 	beq.w	8019d02 <_dtoa_r+0x32a>
 8019e70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019e74:	e745      	b.n	8019d02 <_dtoa_r+0x32a>
 8019e76:	07ce      	lsls	r6, r1, #31
 8019e78:	d505      	bpl.n	8019e86 <_dtoa_r+0x4ae>
 8019e7a:	ed90 6b00 	vldr	d6, [r0]
 8019e7e:	3201      	adds	r2, #1
 8019e80:	2401      	movs	r4, #1
 8019e82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019e86:	1049      	asrs	r1, r1, #1
 8019e88:	3008      	adds	r0, #8
 8019e8a:	e7ed      	b.n	8019e68 <_dtoa_r+0x490>
 8019e8c:	2202      	movs	r2, #2
 8019e8e:	e738      	b.n	8019d02 <_dtoa_r+0x32a>
 8019e90:	f8cd 8010 	str.w	r8, [sp, #16]
 8019e94:	4654      	mov	r4, sl
 8019e96:	e754      	b.n	8019d42 <_dtoa_r+0x36a>
 8019e98:	4a54      	ldr	r2, [pc, #336]	@ (8019fec <_dtoa_r+0x614>)
 8019e9a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8019e9e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8019ea2:	9a08      	ldr	r2, [sp, #32]
 8019ea4:	ec41 0b17 	vmov	d7, r0, r1
 8019ea8:	443c      	add	r4, r7
 8019eaa:	b34a      	cbz	r2, 8019f00 <_dtoa_r+0x528>
 8019eac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8019eb0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8019eb4:	463e      	mov	r6, r7
 8019eb6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019eba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8019ebe:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019ec2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019ec6:	ee14 2a90 	vmov	r2, s9
 8019eca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019ece:	3230      	adds	r2, #48	@ 0x30
 8019ed0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019ed4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019edc:	f806 2b01 	strb.w	r2, [r6], #1
 8019ee0:	d438      	bmi.n	8019f54 <_dtoa_r+0x57c>
 8019ee2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019ee6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eee:	d462      	bmi.n	8019fb6 <_dtoa_r+0x5de>
 8019ef0:	42a6      	cmp	r6, r4
 8019ef2:	f43f af4d 	beq.w	8019d90 <_dtoa_r+0x3b8>
 8019ef6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019efa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019efe:	e7e0      	b.n	8019ec2 <_dtoa_r+0x4ea>
 8019f00:	4621      	mov	r1, r4
 8019f02:	463e      	mov	r6, r7
 8019f04:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019f08:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8019f0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019f10:	ee14 2a90 	vmov	r2, s9
 8019f14:	3230      	adds	r2, #48	@ 0x30
 8019f16:	f806 2b01 	strb.w	r2, [r6], #1
 8019f1a:	42a6      	cmp	r6, r4
 8019f1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019f20:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019f24:	d119      	bne.n	8019f5a <_dtoa_r+0x582>
 8019f26:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8019f2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019f2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f36:	dc3e      	bgt.n	8019fb6 <_dtoa_r+0x5de>
 8019f38:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019f3c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f44:	f57f af24 	bpl.w	8019d90 <_dtoa_r+0x3b8>
 8019f48:	460e      	mov	r6, r1
 8019f4a:	3901      	subs	r1, #1
 8019f4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019f50:	2b30      	cmp	r3, #48	@ 0x30
 8019f52:	d0f9      	beq.n	8019f48 <_dtoa_r+0x570>
 8019f54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019f58:	e758      	b.n	8019e0c <_dtoa_r+0x434>
 8019f5a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019f5e:	e7d5      	b.n	8019f0c <_dtoa_r+0x534>
 8019f60:	d10b      	bne.n	8019f7a <_dtoa_r+0x5a2>
 8019f62:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019f66:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019f6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019f6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f76:	f2c0 8161 	blt.w	801a23c <_dtoa_r+0x864>
 8019f7a:	2400      	movs	r4, #0
 8019f7c:	4625      	mov	r5, r4
 8019f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f80:	43db      	mvns	r3, r3
 8019f82:	9304      	str	r3, [sp, #16]
 8019f84:	463e      	mov	r6, r7
 8019f86:	f04f 0800 	mov.w	r8, #0
 8019f8a:	4621      	mov	r1, r4
 8019f8c:	4648      	mov	r0, r9
 8019f8e:	f000 fb03 	bl	801a598 <_Bfree>
 8019f92:	2d00      	cmp	r5, #0
 8019f94:	d0de      	beq.n	8019f54 <_dtoa_r+0x57c>
 8019f96:	f1b8 0f00 	cmp.w	r8, #0
 8019f9a:	d005      	beq.n	8019fa8 <_dtoa_r+0x5d0>
 8019f9c:	45a8      	cmp	r8, r5
 8019f9e:	d003      	beq.n	8019fa8 <_dtoa_r+0x5d0>
 8019fa0:	4641      	mov	r1, r8
 8019fa2:	4648      	mov	r0, r9
 8019fa4:	f000 faf8 	bl	801a598 <_Bfree>
 8019fa8:	4629      	mov	r1, r5
 8019faa:	4648      	mov	r0, r9
 8019fac:	f000 faf4 	bl	801a598 <_Bfree>
 8019fb0:	e7d0      	b.n	8019f54 <_dtoa_r+0x57c>
 8019fb2:	f8cd 8010 	str.w	r8, [sp, #16]
 8019fb6:	4633      	mov	r3, r6
 8019fb8:	461e      	mov	r6, r3
 8019fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019fbe:	2a39      	cmp	r2, #57	@ 0x39
 8019fc0:	d106      	bne.n	8019fd0 <_dtoa_r+0x5f8>
 8019fc2:	429f      	cmp	r7, r3
 8019fc4:	d1f8      	bne.n	8019fb8 <_dtoa_r+0x5e0>
 8019fc6:	9a04      	ldr	r2, [sp, #16]
 8019fc8:	3201      	adds	r2, #1
 8019fca:	9204      	str	r2, [sp, #16]
 8019fcc:	2230      	movs	r2, #48	@ 0x30
 8019fce:	703a      	strb	r2, [r7, #0]
 8019fd0:	781a      	ldrb	r2, [r3, #0]
 8019fd2:	3201      	adds	r2, #1
 8019fd4:	701a      	strb	r2, [r3, #0]
 8019fd6:	e7bd      	b.n	8019f54 <_dtoa_r+0x57c>
 8019fd8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019fdc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fe4:	f47f aeef 	bne.w	8019dc6 <_dtoa_r+0x3ee>
 8019fe8:	e710      	b.n	8019e0c <_dtoa_r+0x434>
 8019fea:	bf00      	nop
 8019fec:	0804b848 	.word	0x0804b848
 8019ff0:	0804b820 	.word	0x0804b820
 8019ff4:	9908      	ldr	r1, [sp, #32]
 8019ff6:	2900      	cmp	r1, #0
 8019ff8:	f000 80e3 	beq.w	801a1c2 <_dtoa_r+0x7ea>
 8019ffc:	9907      	ldr	r1, [sp, #28]
 8019ffe:	2901      	cmp	r1, #1
 801a000:	f300 80c8 	bgt.w	801a194 <_dtoa_r+0x7bc>
 801a004:	2d00      	cmp	r5, #0
 801a006:	f000 80c1 	beq.w	801a18c <_dtoa_r+0x7b4>
 801a00a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a00e:	9e05      	ldr	r6, [sp, #20]
 801a010:	461c      	mov	r4, r3
 801a012:	9304      	str	r3, [sp, #16]
 801a014:	9b05      	ldr	r3, [sp, #20]
 801a016:	4413      	add	r3, r2
 801a018:	9305      	str	r3, [sp, #20]
 801a01a:	9b06      	ldr	r3, [sp, #24]
 801a01c:	2101      	movs	r1, #1
 801a01e:	4413      	add	r3, r2
 801a020:	4648      	mov	r0, r9
 801a022:	9306      	str	r3, [sp, #24]
 801a024:	f000 fb6c 	bl	801a700 <__i2b>
 801a028:	9b04      	ldr	r3, [sp, #16]
 801a02a:	4605      	mov	r5, r0
 801a02c:	b166      	cbz	r6, 801a048 <_dtoa_r+0x670>
 801a02e:	9a06      	ldr	r2, [sp, #24]
 801a030:	2a00      	cmp	r2, #0
 801a032:	dd09      	ble.n	801a048 <_dtoa_r+0x670>
 801a034:	42b2      	cmp	r2, r6
 801a036:	9905      	ldr	r1, [sp, #20]
 801a038:	bfa8      	it	ge
 801a03a:	4632      	movge	r2, r6
 801a03c:	1a89      	subs	r1, r1, r2
 801a03e:	9105      	str	r1, [sp, #20]
 801a040:	9906      	ldr	r1, [sp, #24]
 801a042:	1ab6      	subs	r6, r6, r2
 801a044:	1a8a      	subs	r2, r1, r2
 801a046:	9206      	str	r2, [sp, #24]
 801a048:	b1fb      	cbz	r3, 801a08a <_dtoa_r+0x6b2>
 801a04a:	9a08      	ldr	r2, [sp, #32]
 801a04c:	2a00      	cmp	r2, #0
 801a04e:	f000 80bc 	beq.w	801a1ca <_dtoa_r+0x7f2>
 801a052:	b19c      	cbz	r4, 801a07c <_dtoa_r+0x6a4>
 801a054:	4629      	mov	r1, r5
 801a056:	4622      	mov	r2, r4
 801a058:	4648      	mov	r0, r9
 801a05a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a05c:	f000 fc10 	bl	801a880 <__pow5mult>
 801a060:	9a01      	ldr	r2, [sp, #4]
 801a062:	4601      	mov	r1, r0
 801a064:	4605      	mov	r5, r0
 801a066:	4648      	mov	r0, r9
 801a068:	f000 fb60 	bl	801a72c <__multiply>
 801a06c:	9901      	ldr	r1, [sp, #4]
 801a06e:	9004      	str	r0, [sp, #16]
 801a070:	4648      	mov	r0, r9
 801a072:	f000 fa91 	bl	801a598 <_Bfree>
 801a076:	9a04      	ldr	r2, [sp, #16]
 801a078:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a07a:	9201      	str	r2, [sp, #4]
 801a07c:	1b1a      	subs	r2, r3, r4
 801a07e:	d004      	beq.n	801a08a <_dtoa_r+0x6b2>
 801a080:	9901      	ldr	r1, [sp, #4]
 801a082:	4648      	mov	r0, r9
 801a084:	f000 fbfc 	bl	801a880 <__pow5mult>
 801a088:	9001      	str	r0, [sp, #4]
 801a08a:	2101      	movs	r1, #1
 801a08c:	4648      	mov	r0, r9
 801a08e:	f000 fb37 	bl	801a700 <__i2b>
 801a092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a094:	4604      	mov	r4, r0
 801a096:	2b00      	cmp	r3, #0
 801a098:	f000 81d0 	beq.w	801a43c <_dtoa_r+0xa64>
 801a09c:	461a      	mov	r2, r3
 801a09e:	4601      	mov	r1, r0
 801a0a0:	4648      	mov	r0, r9
 801a0a2:	f000 fbed 	bl	801a880 <__pow5mult>
 801a0a6:	9b07      	ldr	r3, [sp, #28]
 801a0a8:	2b01      	cmp	r3, #1
 801a0aa:	4604      	mov	r4, r0
 801a0ac:	f300 8095 	bgt.w	801a1da <_dtoa_r+0x802>
 801a0b0:	9b02      	ldr	r3, [sp, #8]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	f040 808b 	bne.w	801a1ce <_dtoa_r+0x7f6>
 801a0b8:	9b03      	ldr	r3, [sp, #12]
 801a0ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a0be:	2a00      	cmp	r2, #0
 801a0c0:	f040 8087 	bne.w	801a1d2 <_dtoa_r+0x7fa>
 801a0c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a0c8:	0d12      	lsrs	r2, r2, #20
 801a0ca:	0512      	lsls	r2, r2, #20
 801a0cc:	2a00      	cmp	r2, #0
 801a0ce:	f000 8082 	beq.w	801a1d6 <_dtoa_r+0x7fe>
 801a0d2:	9b05      	ldr	r3, [sp, #20]
 801a0d4:	3301      	adds	r3, #1
 801a0d6:	9305      	str	r3, [sp, #20]
 801a0d8:	9b06      	ldr	r3, [sp, #24]
 801a0da:	3301      	adds	r3, #1
 801a0dc:	9306      	str	r3, [sp, #24]
 801a0de:	2301      	movs	r3, #1
 801a0e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a0e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	f000 81af 	beq.w	801a448 <_dtoa_r+0xa70>
 801a0ea:	6922      	ldr	r2, [r4, #16]
 801a0ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a0f0:	6910      	ldr	r0, [r2, #16]
 801a0f2:	f000 fab9 	bl	801a668 <__hi0bits>
 801a0f6:	f1c0 0020 	rsb	r0, r0, #32
 801a0fa:	9b06      	ldr	r3, [sp, #24]
 801a0fc:	4418      	add	r0, r3
 801a0fe:	f010 001f 	ands.w	r0, r0, #31
 801a102:	d076      	beq.n	801a1f2 <_dtoa_r+0x81a>
 801a104:	f1c0 0220 	rsb	r2, r0, #32
 801a108:	2a04      	cmp	r2, #4
 801a10a:	dd69      	ble.n	801a1e0 <_dtoa_r+0x808>
 801a10c:	9b05      	ldr	r3, [sp, #20]
 801a10e:	f1c0 001c 	rsb	r0, r0, #28
 801a112:	4403      	add	r3, r0
 801a114:	9305      	str	r3, [sp, #20]
 801a116:	9b06      	ldr	r3, [sp, #24]
 801a118:	4406      	add	r6, r0
 801a11a:	4403      	add	r3, r0
 801a11c:	9306      	str	r3, [sp, #24]
 801a11e:	9b05      	ldr	r3, [sp, #20]
 801a120:	2b00      	cmp	r3, #0
 801a122:	dd05      	ble.n	801a130 <_dtoa_r+0x758>
 801a124:	9901      	ldr	r1, [sp, #4]
 801a126:	461a      	mov	r2, r3
 801a128:	4648      	mov	r0, r9
 801a12a:	f000 fc03 	bl	801a934 <__lshift>
 801a12e:	9001      	str	r0, [sp, #4]
 801a130:	9b06      	ldr	r3, [sp, #24]
 801a132:	2b00      	cmp	r3, #0
 801a134:	dd05      	ble.n	801a142 <_dtoa_r+0x76a>
 801a136:	4621      	mov	r1, r4
 801a138:	461a      	mov	r2, r3
 801a13a:	4648      	mov	r0, r9
 801a13c:	f000 fbfa 	bl	801a934 <__lshift>
 801a140:	4604      	mov	r4, r0
 801a142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a144:	2b00      	cmp	r3, #0
 801a146:	d056      	beq.n	801a1f6 <_dtoa_r+0x81e>
 801a148:	9801      	ldr	r0, [sp, #4]
 801a14a:	4621      	mov	r1, r4
 801a14c:	f000 fc5e 	bl	801aa0c <__mcmp>
 801a150:	2800      	cmp	r0, #0
 801a152:	da50      	bge.n	801a1f6 <_dtoa_r+0x81e>
 801a154:	f108 33ff 	add.w	r3, r8, #4294967295
 801a158:	9304      	str	r3, [sp, #16]
 801a15a:	9901      	ldr	r1, [sp, #4]
 801a15c:	2300      	movs	r3, #0
 801a15e:	220a      	movs	r2, #10
 801a160:	4648      	mov	r0, r9
 801a162:	f000 fa3b 	bl	801a5dc <__multadd>
 801a166:	9b08      	ldr	r3, [sp, #32]
 801a168:	9001      	str	r0, [sp, #4]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	f000 816e 	beq.w	801a44c <_dtoa_r+0xa74>
 801a170:	4629      	mov	r1, r5
 801a172:	2300      	movs	r3, #0
 801a174:	220a      	movs	r2, #10
 801a176:	4648      	mov	r0, r9
 801a178:	f000 fa30 	bl	801a5dc <__multadd>
 801a17c:	f1bb 0f00 	cmp.w	fp, #0
 801a180:	4605      	mov	r5, r0
 801a182:	dc64      	bgt.n	801a24e <_dtoa_r+0x876>
 801a184:	9b07      	ldr	r3, [sp, #28]
 801a186:	2b02      	cmp	r3, #2
 801a188:	dc3e      	bgt.n	801a208 <_dtoa_r+0x830>
 801a18a:	e060      	b.n	801a24e <_dtoa_r+0x876>
 801a18c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a18e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a192:	e73c      	b.n	801a00e <_dtoa_r+0x636>
 801a194:	f10a 34ff 	add.w	r4, sl, #4294967295
 801a198:	42a3      	cmp	r3, r4
 801a19a:	bfbf      	itttt	lt
 801a19c:	1ae2      	sublt	r2, r4, r3
 801a19e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801a1a0:	189b      	addlt	r3, r3, r2
 801a1a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801a1a4:	bfae      	itee	ge
 801a1a6:	1b1c      	subge	r4, r3, r4
 801a1a8:	4623      	movlt	r3, r4
 801a1aa:	2400      	movlt	r4, #0
 801a1ac:	f1ba 0f00 	cmp.w	sl, #0
 801a1b0:	bfb5      	itete	lt
 801a1b2:	9a05      	ldrlt	r2, [sp, #20]
 801a1b4:	9e05      	ldrge	r6, [sp, #20]
 801a1b6:	eba2 060a 	sublt.w	r6, r2, sl
 801a1ba:	4652      	movge	r2, sl
 801a1bc:	bfb8      	it	lt
 801a1be:	2200      	movlt	r2, #0
 801a1c0:	e727      	b.n	801a012 <_dtoa_r+0x63a>
 801a1c2:	9e05      	ldr	r6, [sp, #20]
 801a1c4:	9d08      	ldr	r5, [sp, #32]
 801a1c6:	461c      	mov	r4, r3
 801a1c8:	e730      	b.n	801a02c <_dtoa_r+0x654>
 801a1ca:	461a      	mov	r2, r3
 801a1cc:	e758      	b.n	801a080 <_dtoa_r+0x6a8>
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	e786      	b.n	801a0e0 <_dtoa_r+0x708>
 801a1d2:	9b02      	ldr	r3, [sp, #8]
 801a1d4:	e784      	b.n	801a0e0 <_dtoa_r+0x708>
 801a1d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a1d8:	e783      	b.n	801a0e2 <_dtoa_r+0x70a>
 801a1da:	2300      	movs	r3, #0
 801a1dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a1de:	e784      	b.n	801a0ea <_dtoa_r+0x712>
 801a1e0:	d09d      	beq.n	801a11e <_dtoa_r+0x746>
 801a1e2:	9b05      	ldr	r3, [sp, #20]
 801a1e4:	321c      	adds	r2, #28
 801a1e6:	4413      	add	r3, r2
 801a1e8:	9305      	str	r3, [sp, #20]
 801a1ea:	9b06      	ldr	r3, [sp, #24]
 801a1ec:	4416      	add	r6, r2
 801a1ee:	4413      	add	r3, r2
 801a1f0:	e794      	b.n	801a11c <_dtoa_r+0x744>
 801a1f2:	4602      	mov	r2, r0
 801a1f4:	e7f5      	b.n	801a1e2 <_dtoa_r+0x80a>
 801a1f6:	f1ba 0f00 	cmp.w	sl, #0
 801a1fa:	f8cd 8010 	str.w	r8, [sp, #16]
 801a1fe:	46d3      	mov	fp, sl
 801a200:	dc21      	bgt.n	801a246 <_dtoa_r+0x86e>
 801a202:	9b07      	ldr	r3, [sp, #28]
 801a204:	2b02      	cmp	r3, #2
 801a206:	dd1e      	ble.n	801a246 <_dtoa_r+0x86e>
 801a208:	f1bb 0f00 	cmp.w	fp, #0
 801a20c:	f47f aeb7 	bne.w	8019f7e <_dtoa_r+0x5a6>
 801a210:	4621      	mov	r1, r4
 801a212:	465b      	mov	r3, fp
 801a214:	2205      	movs	r2, #5
 801a216:	4648      	mov	r0, r9
 801a218:	f000 f9e0 	bl	801a5dc <__multadd>
 801a21c:	4601      	mov	r1, r0
 801a21e:	4604      	mov	r4, r0
 801a220:	9801      	ldr	r0, [sp, #4]
 801a222:	f000 fbf3 	bl	801aa0c <__mcmp>
 801a226:	2800      	cmp	r0, #0
 801a228:	f77f aea9 	ble.w	8019f7e <_dtoa_r+0x5a6>
 801a22c:	463e      	mov	r6, r7
 801a22e:	2331      	movs	r3, #49	@ 0x31
 801a230:	f806 3b01 	strb.w	r3, [r6], #1
 801a234:	9b04      	ldr	r3, [sp, #16]
 801a236:	3301      	adds	r3, #1
 801a238:	9304      	str	r3, [sp, #16]
 801a23a:	e6a4      	b.n	8019f86 <_dtoa_r+0x5ae>
 801a23c:	f8cd 8010 	str.w	r8, [sp, #16]
 801a240:	4654      	mov	r4, sl
 801a242:	4625      	mov	r5, r4
 801a244:	e7f2      	b.n	801a22c <_dtoa_r+0x854>
 801a246:	9b08      	ldr	r3, [sp, #32]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	f000 8103 	beq.w	801a454 <_dtoa_r+0xa7c>
 801a24e:	2e00      	cmp	r6, #0
 801a250:	dd05      	ble.n	801a25e <_dtoa_r+0x886>
 801a252:	4629      	mov	r1, r5
 801a254:	4632      	mov	r2, r6
 801a256:	4648      	mov	r0, r9
 801a258:	f000 fb6c 	bl	801a934 <__lshift>
 801a25c:	4605      	mov	r5, r0
 801a25e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a260:	2b00      	cmp	r3, #0
 801a262:	d058      	beq.n	801a316 <_dtoa_r+0x93e>
 801a264:	6869      	ldr	r1, [r5, #4]
 801a266:	4648      	mov	r0, r9
 801a268:	f000 f956 	bl	801a518 <_Balloc>
 801a26c:	4606      	mov	r6, r0
 801a26e:	b928      	cbnz	r0, 801a27c <_dtoa_r+0x8a4>
 801a270:	4b82      	ldr	r3, [pc, #520]	@ (801a47c <_dtoa_r+0xaa4>)
 801a272:	4602      	mov	r2, r0
 801a274:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a278:	f7ff bbc7 	b.w	8019a0a <_dtoa_r+0x32>
 801a27c:	692a      	ldr	r2, [r5, #16]
 801a27e:	3202      	adds	r2, #2
 801a280:	0092      	lsls	r2, r2, #2
 801a282:	f105 010c 	add.w	r1, r5, #12
 801a286:	300c      	adds	r0, #12
 801a288:	f7ff fb0f 	bl	80198aa <memcpy>
 801a28c:	2201      	movs	r2, #1
 801a28e:	4631      	mov	r1, r6
 801a290:	4648      	mov	r0, r9
 801a292:	f000 fb4f 	bl	801a934 <__lshift>
 801a296:	1c7b      	adds	r3, r7, #1
 801a298:	9305      	str	r3, [sp, #20]
 801a29a:	eb07 030b 	add.w	r3, r7, fp
 801a29e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a2a0:	9b02      	ldr	r3, [sp, #8]
 801a2a2:	f003 0301 	and.w	r3, r3, #1
 801a2a6:	46a8      	mov	r8, r5
 801a2a8:	9308      	str	r3, [sp, #32]
 801a2aa:	4605      	mov	r5, r0
 801a2ac:	9b05      	ldr	r3, [sp, #20]
 801a2ae:	9801      	ldr	r0, [sp, #4]
 801a2b0:	4621      	mov	r1, r4
 801a2b2:	f103 3bff 	add.w	fp, r3, #4294967295
 801a2b6:	f7ff fb06 	bl	80198c6 <quorem>
 801a2ba:	4641      	mov	r1, r8
 801a2bc:	9002      	str	r0, [sp, #8]
 801a2be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a2c2:	9801      	ldr	r0, [sp, #4]
 801a2c4:	f000 fba2 	bl	801aa0c <__mcmp>
 801a2c8:	462a      	mov	r2, r5
 801a2ca:	9006      	str	r0, [sp, #24]
 801a2cc:	4621      	mov	r1, r4
 801a2ce:	4648      	mov	r0, r9
 801a2d0:	f000 fbb8 	bl	801aa44 <__mdiff>
 801a2d4:	68c2      	ldr	r2, [r0, #12]
 801a2d6:	4606      	mov	r6, r0
 801a2d8:	b9fa      	cbnz	r2, 801a31a <_dtoa_r+0x942>
 801a2da:	4601      	mov	r1, r0
 801a2dc:	9801      	ldr	r0, [sp, #4]
 801a2de:	f000 fb95 	bl	801aa0c <__mcmp>
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	4631      	mov	r1, r6
 801a2e6:	4648      	mov	r0, r9
 801a2e8:	920a      	str	r2, [sp, #40]	@ 0x28
 801a2ea:	f000 f955 	bl	801a598 <_Bfree>
 801a2ee:	9b07      	ldr	r3, [sp, #28]
 801a2f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a2f2:	9e05      	ldr	r6, [sp, #20]
 801a2f4:	ea43 0102 	orr.w	r1, r3, r2
 801a2f8:	9b08      	ldr	r3, [sp, #32]
 801a2fa:	4319      	orrs	r1, r3
 801a2fc:	d10f      	bne.n	801a31e <_dtoa_r+0x946>
 801a2fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a302:	d028      	beq.n	801a356 <_dtoa_r+0x97e>
 801a304:	9b06      	ldr	r3, [sp, #24]
 801a306:	2b00      	cmp	r3, #0
 801a308:	dd02      	ble.n	801a310 <_dtoa_r+0x938>
 801a30a:	9b02      	ldr	r3, [sp, #8]
 801a30c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801a310:	f88b a000 	strb.w	sl, [fp]
 801a314:	e639      	b.n	8019f8a <_dtoa_r+0x5b2>
 801a316:	4628      	mov	r0, r5
 801a318:	e7bd      	b.n	801a296 <_dtoa_r+0x8be>
 801a31a:	2201      	movs	r2, #1
 801a31c:	e7e2      	b.n	801a2e4 <_dtoa_r+0x90c>
 801a31e:	9b06      	ldr	r3, [sp, #24]
 801a320:	2b00      	cmp	r3, #0
 801a322:	db04      	blt.n	801a32e <_dtoa_r+0x956>
 801a324:	9907      	ldr	r1, [sp, #28]
 801a326:	430b      	orrs	r3, r1
 801a328:	9908      	ldr	r1, [sp, #32]
 801a32a:	430b      	orrs	r3, r1
 801a32c:	d120      	bne.n	801a370 <_dtoa_r+0x998>
 801a32e:	2a00      	cmp	r2, #0
 801a330:	ddee      	ble.n	801a310 <_dtoa_r+0x938>
 801a332:	9901      	ldr	r1, [sp, #4]
 801a334:	2201      	movs	r2, #1
 801a336:	4648      	mov	r0, r9
 801a338:	f000 fafc 	bl	801a934 <__lshift>
 801a33c:	4621      	mov	r1, r4
 801a33e:	9001      	str	r0, [sp, #4]
 801a340:	f000 fb64 	bl	801aa0c <__mcmp>
 801a344:	2800      	cmp	r0, #0
 801a346:	dc03      	bgt.n	801a350 <_dtoa_r+0x978>
 801a348:	d1e2      	bne.n	801a310 <_dtoa_r+0x938>
 801a34a:	f01a 0f01 	tst.w	sl, #1
 801a34e:	d0df      	beq.n	801a310 <_dtoa_r+0x938>
 801a350:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a354:	d1d9      	bne.n	801a30a <_dtoa_r+0x932>
 801a356:	2339      	movs	r3, #57	@ 0x39
 801a358:	f88b 3000 	strb.w	r3, [fp]
 801a35c:	4633      	mov	r3, r6
 801a35e:	461e      	mov	r6, r3
 801a360:	3b01      	subs	r3, #1
 801a362:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a366:	2a39      	cmp	r2, #57	@ 0x39
 801a368:	d053      	beq.n	801a412 <_dtoa_r+0xa3a>
 801a36a:	3201      	adds	r2, #1
 801a36c:	701a      	strb	r2, [r3, #0]
 801a36e:	e60c      	b.n	8019f8a <_dtoa_r+0x5b2>
 801a370:	2a00      	cmp	r2, #0
 801a372:	dd07      	ble.n	801a384 <_dtoa_r+0x9ac>
 801a374:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a378:	d0ed      	beq.n	801a356 <_dtoa_r+0x97e>
 801a37a:	f10a 0301 	add.w	r3, sl, #1
 801a37e:	f88b 3000 	strb.w	r3, [fp]
 801a382:	e602      	b.n	8019f8a <_dtoa_r+0x5b2>
 801a384:	9b05      	ldr	r3, [sp, #20]
 801a386:	9a05      	ldr	r2, [sp, #20]
 801a388:	f803 ac01 	strb.w	sl, [r3, #-1]
 801a38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a38e:	4293      	cmp	r3, r2
 801a390:	d029      	beq.n	801a3e6 <_dtoa_r+0xa0e>
 801a392:	9901      	ldr	r1, [sp, #4]
 801a394:	2300      	movs	r3, #0
 801a396:	220a      	movs	r2, #10
 801a398:	4648      	mov	r0, r9
 801a39a:	f000 f91f 	bl	801a5dc <__multadd>
 801a39e:	45a8      	cmp	r8, r5
 801a3a0:	9001      	str	r0, [sp, #4]
 801a3a2:	f04f 0300 	mov.w	r3, #0
 801a3a6:	f04f 020a 	mov.w	r2, #10
 801a3aa:	4641      	mov	r1, r8
 801a3ac:	4648      	mov	r0, r9
 801a3ae:	d107      	bne.n	801a3c0 <_dtoa_r+0x9e8>
 801a3b0:	f000 f914 	bl	801a5dc <__multadd>
 801a3b4:	4680      	mov	r8, r0
 801a3b6:	4605      	mov	r5, r0
 801a3b8:	9b05      	ldr	r3, [sp, #20]
 801a3ba:	3301      	adds	r3, #1
 801a3bc:	9305      	str	r3, [sp, #20]
 801a3be:	e775      	b.n	801a2ac <_dtoa_r+0x8d4>
 801a3c0:	f000 f90c 	bl	801a5dc <__multadd>
 801a3c4:	4629      	mov	r1, r5
 801a3c6:	4680      	mov	r8, r0
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	220a      	movs	r2, #10
 801a3cc:	4648      	mov	r0, r9
 801a3ce:	f000 f905 	bl	801a5dc <__multadd>
 801a3d2:	4605      	mov	r5, r0
 801a3d4:	e7f0      	b.n	801a3b8 <_dtoa_r+0x9e0>
 801a3d6:	f1bb 0f00 	cmp.w	fp, #0
 801a3da:	bfcc      	ite	gt
 801a3dc:	465e      	movgt	r6, fp
 801a3de:	2601      	movle	r6, #1
 801a3e0:	443e      	add	r6, r7
 801a3e2:	f04f 0800 	mov.w	r8, #0
 801a3e6:	9901      	ldr	r1, [sp, #4]
 801a3e8:	2201      	movs	r2, #1
 801a3ea:	4648      	mov	r0, r9
 801a3ec:	f000 faa2 	bl	801a934 <__lshift>
 801a3f0:	4621      	mov	r1, r4
 801a3f2:	9001      	str	r0, [sp, #4]
 801a3f4:	f000 fb0a 	bl	801aa0c <__mcmp>
 801a3f8:	2800      	cmp	r0, #0
 801a3fa:	dcaf      	bgt.n	801a35c <_dtoa_r+0x984>
 801a3fc:	d102      	bne.n	801a404 <_dtoa_r+0xa2c>
 801a3fe:	f01a 0f01 	tst.w	sl, #1
 801a402:	d1ab      	bne.n	801a35c <_dtoa_r+0x984>
 801a404:	4633      	mov	r3, r6
 801a406:	461e      	mov	r6, r3
 801a408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a40c:	2a30      	cmp	r2, #48	@ 0x30
 801a40e:	d0fa      	beq.n	801a406 <_dtoa_r+0xa2e>
 801a410:	e5bb      	b.n	8019f8a <_dtoa_r+0x5b2>
 801a412:	429f      	cmp	r7, r3
 801a414:	d1a3      	bne.n	801a35e <_dtoa_r+0x986>
 801a416:	9b04      	ldr	r3, [sp, #16]
 801a418:	3301      	adds	r3, #1
 801a41a:	9304      	str	r3, [sp, #16]
 801a41c:	2331      	movs	r3, #49	@ 0x31
 801a41e:	703b      	strb	r3, [r7, #0]
 801a420:	e5b3      	b.n	8019f8a <_dtoa_r+0x5b2>
 801a422:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a424:	4f16      	ldr	r7, [pc, #88]	@ (801a480 <_dtoa_r+0xaa8>)
 801a426:	b11b      	cbz	r3, 801a430 <_dtoa_r+0xa58>
 801a428:	f107 0308 	add.w	r3, r7, #8
 801a42c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a42e:	6013      	str	r3, [r2, #0]
 801a430:	4638      	mov	r0, r7
 801a432:	b011      	add	sp, #68	@ 0x44
 801a434:	ecbd 8b02 	vpop	{d8}
 801a438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a43c:	9b07      	ldr	r3, [sp, #28]
 801a43e:	2b01      	cmp	r3, #1
 801a440:	f77f ae36 	ble.w	801a0b0 <_dtoa_r+0x6d8>
 801a444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a446:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a448:	2001      	movs	r0, #1
 801a44a:	e656      	b.n	801a0fa <_dtoa_r+0x722>
 801a44c:	f1bb 0f00 	cmp.w	fp, #0
 801a450:	f77f aed7 	ble.w	801a202 <_dtoa_r+0x82a>
 801a454:	463e      	mov	r6, r7
 801a456:	9801      	ldr	r0, [sp, #4]
 801a458:	4621      	mov	r1, r4
 801a45a:	f7ff fa34 	bl	80198c6 <quorem>
 801a45e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a462:	f806 ab01 	strb.w	sl, [r6], #1
 801a466:	1bf2      	subs	r2, r6, r7
 801a468:	4593      	cmp	fp, r2
 801a46a:	ddb4      	ble.n	801a3d6 <_dtoa_r+0x9fe>
 801a46c:	9901      	ldr	r1, [sp, #4]
 801a46e:	2300      	movs	r3, #0
 801a470:	220a      	movs	r2, #10
 801a472:	4648      	mov	r0, r9
 801a474:	f000 f8b2 	bl	801a5dc <__multadd>
 801a478:	9001      	str	r0, [sp, #4]
 801a47a:	e7ec      	b.n	801a456 <_dtoa_r+0xa7e>
 801a47c:	0804b7a4 	.word	0x0804b7a4
 801a480:	0804b728 	.word	0x0804b728

0801a484 <_free_r>:
 801a484:	b538      	push	{r3, r4, r5, lr}
 801a486:	4605      	mov	r5, r0
 801a488:	2900      	cmp	r1, #0
 801a48a:	d041      	beq.n	801a510 <_free_r+0x8c>
 801a48c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a490:	1f0c      	subs	r4, r1, #4
 801a492:	2b00      	cmp	r3, #0
 801a494:	bfb8      	it	lt
 801a496:	18e4      	addlt	r4, r4, r3
 801a498:	f7fe fb98 	bl	8018bcc <__malloc_lock>
 801a49c:	4a1d      	ldr	r2, [pc, #116]	@ (801a514 <_free_r+0x90>)
 801a49e:	6813      	ldr	r3, [r2, #0]
 801a4a0:	b933      	cbnz	r3, 801a4b0 <_free_r+0x2c>
 801a4a2:	6063      	str	r3, [r4, #4]
 801a4a4:	6014      	str	r4, [r2, #0]
 801a4a6:	4628      	mov	r0, r5
 801a4a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4ac:	f7fe bb94 	b.w	8018bd8 <__malloc_unlock>
 801a4b0:	42a3      	cmp	r3, r4
 801a4b2:	d908      	bls.n	801a4c6 <_free_r+0x42>
 801a4b4:	6820      	ldr	r0, [r4, #0]
 801a4b6:	1821      	adds	r1, r4, r0
 801a4b8:	428b      	cmp	r3, r1
 801a4ba:	bf01      	itttt	eq
 801a4bc:	6819      	ldreq	r1, [r3, #0]
 801a4be:	685b      	ldreq	r3, [r3, #4]
 801a4c0:	1809      	addeq	r1, r1, r0
 801a4c2:	6021      	streq	r1, [r4, #0]
 801a4c4:	e7ed      	b.n	801a4a2 <_free_r+0x1e>
 801a4c6:	461a      	mov	r2, r3
 801a4c8:	685b      	ldr	r3, [r3, #4]
 801a4ca:	b10b      	cbz	r3, 801a4d0 <_free_r+0x4c>
 801a4cc:	42a3      	cmp	r3, r4
 801a4ce:	d9fa      	bls.n	801a4c6 <_free_r+0x42>
 801a4d0:	6811      	ldr	r1, [r2, #0]
 801a4d2:	1850      	adds	r0, r2, r1
 801a4d4:	42a0      	cmp	r0, r4
 801a4d6:	d10b      	bne.n	801a4f0 <_free_r+0x6c>
 801a4d8:	6820      	ldr	r0, [r4, #0]
 801a4da:	4401      	add	r1, r0
 801a4dc:	1850      	adds	r0, r2, r1
 801a4de:	4283      	cmp	r3, r0
 801a4e0:	6011      	str	r1, [r2, #0]
 801a4e2:	d1e0      	bne.n	801a4a6 <_free_r+0x22>
 801a4e4:	6818      	ldr	r0, [r3, #0]
 801a4e6:	685b      	ldr	r3, [r3, #4]
 801a4e8:	6053      	str	r3, [r2, #4]
 801a4ea:	4408      	add	r0, r1
 801a4ec:	6010      	str	r0, [r2, #0]
 801a4ee:	e7da      	b.n	801a4a6 <_free_r+0x22>
 801a4f0:	d902      	bls.n	801a4f8 <_free_r+0x74>
 801a4f2:	230c      	movs	r3, #12
 801a4f4:	602b      	str	r3, [r5, #0]
 801a4f6:	e7d6      	b.n	801a4a6 <_free_r+0x22>
 801a4f8:	6820      	ldr	r0, [r4, #0]
 801a4fa:	1821      	adds	r1, r4, r0
 801a4fc:	428b      	cmp	r3, r1
 801a4fe:	bf04      	itt	eq
 801a500:	6819      	ldreq	r1, [r3, #0]
 801a502:	685b      	ldreq	r3, [r3, #4]
 801a504:	6063      	str	r3, [r4, #4]
 801a506:	bf04      	itt	eq
 801a508:	1809      	addeq	r1, r1, r0
 801a50a:	6021      	streq	r1, [r4, #0]
 801a50c:	6054      	str	r4, [r2, #4]
 801a50e:	e7ca      	b.n	801a4a6 <_free_r+0x22>
 801a510:	bd38      	pop	{r3, r4, r5, pc}
 801a512:	bf00      	nop
 801a514:	24015ad4 	.word	0x24015ad4

0801a518 <_Balloc>:
 801a518:	b570      	push	{r4, r5, r6, lr}
 801a51a:	69c6      	ldr	r6, [r0, #28]
 801a51c:	4604      	mov	r4, r0
 801a51e:	460d      	mov	r5, r1
 801a520:	b976      	cbnz	r6, 801a540 <_Balloc+0x28>
 801a522:	2010      	movs	r0, #16
 801a524:	f7fe faa8 	bl	8018a78 <malloc>
 801a528:	4602      	mov	r2, r0
 801a52a:	61e0      	str	r0, [r4, #28]
 801a52c:	b920      	cbnz	r0, 801a538 <_Balloc+0x20>
 801a52e:	4b18      	ldr	r3, [pc, #96]	@ (801a590 <_Balloc+0x78>)
 801a530:	4818      	ldr	r0, [pc, #96]	@ (801a594 <_Balloc+0x7c>)
 801a532:	216b      	movs	r1, #107	@ 0x6b
 801a534:	f000 fd7e 	bl	801b034 <__assert_func>
 801a538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a53c:	6006      	str	r6, [r0, #0]
 801a53e:	60c6      	str	r6, [r0, #12]
 801a540:	69e6      	ldr	r6, [r4, #28]
 801a542:	68f3      	ldr	r3, [r6, #12]
 801a544:	b183      	cbz	r3, 801a568 <_Balloc+0x50>
 801a546:	69e3      	ldr	r3, [r4, #28]
 801a548:	68db      	ldr	r3, [r3, #12]
 801a54a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a54e:	b9b8      	cbnz	r0, 801a580 <_Balloc+0x68>
 801a550:	2101      	movs	r1, #1
 801a552:	fa01 f605 	lsl.w	r6, r1, r5
 801a556:	1d72      	adds	r2, r6, #5
 801a558:	0092      	lsls	r2, r2, #2
 801a55a:	4620      	mov	r0, r4
 801a55c:	f000 fd88 	bl	801b070 <_calloc_r>
 801a560:	b160      	cbz	r0, 801a57c <_Balloc+0x64>
 801a562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a566:	e00e      	b.n	801a586 <_Balloc+0x6e>
 801a568:	2221      	movs	r2, #33	@ 0x21
 801a56a:	2104      	movs	r1, #4
 801a56c:	4620      	mov	r0, r4
 801a56e:	f000 fd7f 	bl	801b070 <_calloc_r>
 801a572:	69e3      	ldr	r3, [r4, #28]
 801a574:	60f0      	str	r0, [r6, #12]
 801a576:	68db      	ldr	r3, [r3, #12]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d1e4      	bne.n	801a546 <_Balloc+0x2e>
 801a57c:	2000      	movs	r0, #0
 801a57e:	bd70      	pop	{r4, r5, r6, pc}
 801a580:	6802      	ldr	r2, [r0, #0]
 801a582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a586:	2300      	movs	r3, #0
 801a588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a58c:	e7f7      	b.n	801a57e <_Balloc+0x66>
 801a58e:	bf00      	nop
 801a590:	0804b735 	.word	0x0804b735
 801a594:	0804b7b5 	.word	0x0804b7b5

0801a598 <_Bfree>:
 801a598:	b570      	push	{r4, r5, r6, lr}
 801a59a:	69c6      	ldr	r6, [r0, #28]
 801a59c:	4605      	mov	r5, r0
 801a59e:	460c      	mov	r4, r1
 801a5a0:	b976      	cbnz	r6, 801a5c0 <_Bfree+0x28>
 801a5a2:	2010      	movs	r0, #16
 801a5a4:	f7fe fa68 	bl	8018a78 <malloc>
 801a5a8:	4602      	mov	r2, r0
 801a5aa:	61e8      	str	r0, [r5, #28]
 801a5ac:	b920      	cbnz	r0, 801a5b8 <_Bfree+0x20>
 801a5ae:	4b09      	ldr	r3, [pc, #36]	@ (801a5d4 <_Bfree+0x3c>)
 801a5b0:	4809      	ldr	r0, [pc, #36]	@ (801a5d8 <_Bfree+0x40>)
 801a5b2:	218f      	movs	r1, #143	@ 0x8f
 801a5b4:	f000 fd3e 	bl	801b034 <__assert_func>
 801a5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a5bc:	6006      	str	r6, [r0, #0]
 801a5be:	60c6      	str	r6, [r0, #12]
 801a5c0:	b13c      	cbz	r4, 801a5d2 <_Bfree+0x3a>
 801a5c2:	69eb      	ldr	r3, [r5, #28]
 801a5c4:	6862      	ldr	r2, [r4, #4]
 801a5c6:	68db      	ldr	r3, [r3, #12]
 801a5c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a5cc:	6021      	str	r1, [r4, #0]
 801a5ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a5d2:	bd70      	pop	{r4, r5, r6, pc}
 801a5d4:	0804b735 	.word	0x0804b735
 801a5d8:	0804b7b5 	.word	0x0804b7b5

0801a5dc <__multadd>:
 801a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5e0:	690d      	ldr	r5, [r1, #16]
 801a5e2:	4607      	mov	r7, r0
 801a5e4:	460c      	mov	r4, r1
 801a5e6:	461e      	mov	r6, r3
 801a5e8:	f101 0c14 	add.w	ip, r1, #20
 801a5ec:	2000      	movs	r0, #0
 801a5ee:	f8dc 3000 	ldr.w	r3, [ip]
 801a5f2:	b299      	uxth	r1, r3
 801a5f4:	fb02 6101 	mla	r1, r2, r1, r6
 801a5f8:	0c1e      	lsrs	r6, r3, #16
 801a5fa:	0c0b      	lsrs	r3, r1, #16
 801a5fc:	fb02 3306 	mla	r3, r2, r6, r3
 801a600:	b289      	uxth	r1, r1
 801a602:	3001      	adds	r0, #1
 801a604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a608:	4285      	cmp	r5, r0
 801a60a:	f84c 1b04 	str.w	r1, [ip], #4
 801a60e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a612:	dcec      	bgt.n	801a5ee <__multadd+0x12>
 801a614:	b30e      	cbz	r6, 801a65a <__multadd+0x7e>
 801a616:	68a3      	ldr	r3, [r4, #8]
 801a618:	42ab      	cmp	r3, r5
 801a61a:	dc19      	bgt.n	801a650 <__multadd+0x74>
 801a61c:	6861      	ldr	r1, [r4, #4]
 801a61e:	4638      	mov	r0, r7
 801a620:	3101      	adds	r1, #1
 801a622:	f7ff ff79 	bl	801a518 <_Balloc>
 801a626:	4680      	mov	r8, r0
 801a628:	b928      	cbnz	r0, 801a636 <__multadd+0x5a>
 801a62a:	4602      	mov	r2, r0
 801a62c:	4b0c      	ldr	r3, [pc, #48]	@ (801a660 <__multadd+0x84>)
 801a62e:	480d      	ldr	r0, [pc, #52]	@ (801a664 <__multadd+0x88>)
 801a630:	21ba      	movs	r1, #186	@ 0xba
 801a632:	f000 fcff 	bl	801b034 <__assert_func>
 801a636:	6922      	ldr	r2, [r4, #16]
 801a638:	3202      	adds	r2, #2
 801a63a:	f104 010c 	add.w	r1, r4, #12
 801a63e:	0092      	lsls	r2, r2, #2
 801a640:	300c      	adds	r0, #12
 801a642:	f7ff f932 	bl	80198aa <memcpy>
 801a646:	4621      	mov	r1, r4
 801a648:	4638      	mov	r0, r7
 801a64a:	f7ff ffa5 	bl	801a598 <_Bfree>
 801a64e:	4644      	mov	r4, r8
 801a650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a654:	3501      	adds	r5, #1
 801a656:	615e      	str	r6, [r3, #20]
 801a658:	6125      	str	r5, [r4, #16]
 801a65a:	4620      	mov	r0, r4
 801a65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a660:	0804b7a4 	.word	0x0804b7a4
 801a664:	0804b7b5 	.word	0x0804b7b5

0801a668 <__hi0bits>:
 801a668:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a66c:	4603      	mov	r3, r0
 801a66e:	bf36      	itet	cc
 801a670:	0403      	lslcc	r3, r0, #16
 801a672:	2000      	movcs	r0, #0
 801a674:	2010      	movcc	r0, #16
 801a676:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a67a:	bf3c      	itt	cc
 801a67c:	021b      	lslcc	r3, r3, #8
 801a67e:	3008      	addcc	r0, #8
 801a680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a684:	bf3c      	itt	cc
 801a686:	011b      	lslcc	r3, r3, #4
 801a688:	3004      	addcc	r0, #4
 801a68a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a68e:	bf3c      	itt	cc
 801a690:	009b      	lslcc	r3, r3, #2
 801a692:	3002      	addcc	r0, #2
 801a694:	2b00      	cmp	r3, #0
 801a696:	db05      	blt.n	801a6a4 <__hi0bits+0x3c>
 801a698:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a69c:	f100 0001 	add.w	r0, r0, #1
 801a6a0:	bf08      	it	eq
 801a6a2:	2020      	moveq	r0, #32
 801a6a4:	4770      	bx	lr

0801a6a6 <__lo0bits>:
 801a6a6:	6803      	ldr	r3, [r0, #0]
 801a6a8:	4602      	mov	r2, r0
 801a6aa:	f013 0007 	ands.w	r0, r3, #7
 801a6ae:	d00b      	beq.n	801a6c8 <__lo0bits+0x22>
 801a6b0:	07d9      	lsls	r1, r3, #31
 801a6b2:	d421      	bmi.n	801a6f8 <__lo0bits+0x52>
 801a6b4:	0798      	lsls	r0, r3, #30
 801a6b6:	bf49      	itett	mi
 801a6b8:	085b      	lsrmi	r3, r3, #1
 801a6ba:	089b      	lsrpl	r3, r3, #2
 801a6bc:	2001      	movmi	r0, #1
 801a6be:	6013      	strmi	r3, [r2, #0]
 801a6c0:	bf5c      	itt	pl
 801a6c2:	6013      	strpl	r3, [r2, #0]
 801a6c4:	2002      	movpl	r0, #2
 801a6c6:	4770      	bx	lr
 801a6c8:	b299      	uxth	r1, r3
 801a6ca:	b909      	cbnz	r1, 801a6d0 <__lo0bits+0x2a>
 801a6cc:	0c1b      	lsrs	r3, r3, #16
 801a6ce:	2010      	movs	r0, #16
 801a6d0:	b2d9      	uxtb	r1, r3
 801a6d2:	b909      	cbnz	r1, 801a6d8 <__lo0bits+0x32>
 801a6d4:	3008      	adds	r0, #8
 801a6d6:	0a1b      	lsrs	r3, r3, #8
 801a6d8:	0719      	lsls	r1, r3, #28
 801a6da:	bf04      	itt	eq
 801a6dc:	091b      	lsreq	r3, r3, #4
 801a6de:	3004      	addeq	r0, #4
 801a6e0:	0799      	lsls	r1, r3, #30
 801a6e2:	bf04      	itt	eq
 801a6e4:	089b      	lsreq	r3, r3, #2
 801a6e6:	3002      	addeq	r0, #2
 801a6e8:	07d9      	lsls	r1, r3, #31
 801a6ea:	d403      	bmi.n	801a6f4 <__lo0bits+0x4e>
 801a6ec:	085b      	lsrs	r3, r3, #1
 801a6ee:	f100 0001 	add.w	r0, r0, #1
 801a6f2:	d003      	beq.n	801a6fc <__lo0bits+0x56>
 801a6f4:	6013      	str	r3, [r2, #0]
 801a6f6:	4770      	bx	lr
 801a6f8:	2000      	movs	r0, #0
 801a6fa:	4770      	bx	lr
 801a6fc:	2020      	movs	r0, #32
 801a6fe:	4770      	bx	lr

0801a700 <__i2b>:
 801a700:	b510      	push	{r4, lr}
 801a702:	460c      	mov	r4, r1
 801a704:	2101      	movs	r1, #1
 801a706:	f7ff ff07 	bl	801a518 <_Balloc>
 801a70a:	4602      	mov	r2, r0
 801a70c:	b928      	cbnz	r0, 801a71a <__i2b+0x1a>
 801a70e:	4b05      	ldr	r3, [pc, #20]	@ (801a724 <__i2b+0x24>)
 801a710:	4805      	ldr	r0, [pc, #20]	@ (801a728 <__i2b+0x28>)
 801a712:	f240 1145 	movw	r1, #325	@ 0x145
 801a716:	f000 fc8d 	bl	801b034 <__assert_func>
 801a71a:	2301      	movs	r3, #1
 801a71c:	6144      	str	r4, [r0, #20]
 801a71e:	6103      	str	r3, [r0, #16]
 801a720:	bd10      	pop	{r4, pc}
 801a722:	bf00      	nop
 801a724:	0804b7a4 	.word	0x0804b7a4
 801a728:	0804b7b5 	.word	0x0804b7b5

0801a72c <__multiply>:
 801a72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a730:	4614      	mov	r4, r2
 801a732:	690a      	ldr	r2, [r1, #16]
 801a734:	6923      	ldr	r3, [r4, #16]
 801a736:	429a      	cmp	r2, r3
 801a738:	bfa8      	it	ge
 801a73a:	4623      	movge	r3, r4
 801a73c:	460f      	mov	r7, r1
 801a73e:	bfa4      	itt	ge
 801a740:	460c      	movge	r4, r1
 801a742:	461f      	movge	r7, r3
 801a744:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a748:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a74c:	68a3      	ldr	r3, [r4, #8]
 801a74e:	6861      	ldr	r1, [r4, #4]
 801a750:	eb0a 0609 	add.w	r6, sl, r9
 801a754:	42b3      	cmp	r3, r6
 801a756:	b085      	sub	sp, #20
 801a758:	bfb8      	it	lt
 801a75a:	3101      	addlt	r1, #1
 801a75c:	f7ff fedc 	bl	801a518 <_Balloc>
 801a760:	b930      	cbnz	r0, 801a770 <__multiply+0x44>
 801a762:	4602      	mov	r2, r0
 801a764:	4b44      	ldr	r3, [pc, #272]	@ (801a878 <__multiply+0x14c>)
 801a766:	4845      	ldr	r0, [pc, #276]	@ (801a87c <__multiply+0x150>)
 801a768:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a76c:	f000 fc62 	bl	801b034 <__assert_func>
 801a770:	f100 0514 	add.w	r5, r0, #20
 801a774:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a778:	462b      	mov	r3, r5
 801a77a:	2200      	movs	r2, #0
 801a77c:	4543      	cmp	r3, r8
 801a77e:	d321      	bcc.n	801a7c4 <__multiply+0x98>
 801a780:	f107 0114 	add.w	r1, r7, #20
 801a784:	f104 0214 	add.w	r2, r4, #20
 801a788:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a78c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a790:	9302      	str	r3, [sp, #8]
 801a792:	1b13      	subs	r3, r2, r4
 801a794:	3b15      	subs	r3, #21
 801a796:	f023 0303 	bic.w	r3, r3, #3
 801a79a:	3304      	adds	r3, #4
 801a79c:	f104 0715 	add.w	r7, r4, #21
 801a7a0:	42ba      	cmp	r2, r7
 801a7a2:	bf38      	it	cc
 801a7a4:	2304      	movcc	r3, #4
 801a7a6:	9301      	str	r3, [sp, #4]
 801a7a8:	9b02      	ldr	r3, [sp, #8]
 801a7aa:	9103      	str	r1, [sp, #12]
 801a7ac:	428b      	cmp	r3, r1
 801a7ae:	d80c      	bhi.n	801a7ca <__multiply+0x9e>
 801a7b0:	2e00      	cmp	r6, #0
 801a7b2:	dd03      	ble.n	801a7bc <__multiply+0x90>
 801a7b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d05b      	beq.n	801a874 <__multiply+0x148>
 801a7bc:	6106      	str	r6, [r0, #16]
 801a7be:	b005      	add	sp, #20
 801a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c4:	f843 2b04 	str.w	r2, [r3], #4
 801a7c8:	e7d8      	b.n	801a77c <__multiply+0x50>
 801a7ca:	f8b1 a000 	ldrh.w	sl, [r1]
 801a7ce:	f1ba 0f00 	cmp.w	sl, #0
 801a7d2:	d024      	beq.n	801a81e <__multiply+0xf2>
 801a7d4:	f104 0e14 	add.w	lr, r4, #20
 801a7d8:	46a9      	mov	r9, r5
 801a7da:	f04f 0c00 	mov.w	ip, #0
 801a7de:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a7e2:	f8d9 3000 	ldr.w	r3, [r9]
 801a7e6:	fa1f fb87 	uxth.w	fp, r7
 801a7ea:	b29b      	uxth	r3, r3
 801a7ec:	fb0a 330b 	mla	r3, sl, fp, r3
 801a7f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801a7f4:	f8d9 7000 	ldr.w	r7, [r9]
 801a7f8:	4463      	add	r3, ip
 801a7fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a7fe:	fb0a c70b 	mla	r7, sl, fp, ip
 801a802:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801a806:	b29b      	uxth	r3, r3
 801a808:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a80c:	4572      	cmp	r2, lr
 801a80e:	f849 3b04 	str.w	r3, [r9], #4
 801a812:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a816:	d8e2      	bhi.n	801a7de <__multiply+0xb2>
 801a818:	9b01      	ldr	r3, [sp, #4]
 801a81a:	f845 c003 	str.w	ip, [r5, r3]
 801a81e:	9b03      	ldr	r3, [sp, #12]
 801a820:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a824:	3104      	adds	r1, #4
 801a826:	f1b9 0f00 	cmp.w	r9, #0
 801a82a:	d021      	beq.n	801a870 <__multiply+0x144>
 801a82c:	682b      	ldr	r3, [r5, #0]
 801a82e:	f104 0c14 	add.w	ip, r4, #20
 801a832:	46ae      	mov	lr, r5
 801a834:	f04f 0a00 	mov.w	sl, #0
 801a838:	f8bc b000 	ldrh.w	fp, [ip]
 801a83c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801a840:	fb09 770b 	mla	r7, r9, fp, r7
 801a844:	4457      	add	r7, sl
 801a846:	b29b      	uxth	r3, r3
 801a848:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a84c:	f84e 3b04 	str.w	r3, [lr], #4
 801a850:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a854:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a858:	f8be 3000 	ldrh.w	r3, [lr]
 801a85c:	fb09 330a 	mla	r3, r9, sl, r3
 801a860:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801a864:	4562      	cmp	r2, ip
 801a866:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a86a:	d8e5      	bhi.n	801a838 <__multiply+0x10c>
 801a86c:	9f01      	ldr	r7, [sp, #4]
 801a86e:	51eb      	str	r3, [r5, r7]
 801a870:	3504      	adds	r5, #4
 801a872:	e799      	b.n	801a7a8 <__multiply+0x7c>
 801a874:	3e01      	subs	r6, #1
 801a876:	e79b      	b.n	801a7b0 <__multiply+0x84>
 801a878:	0804b7a4 	.word	0x0804b7a4
 801a87c:	0804b7b5 	.word	0x0804b7b5

0801a880 <__pow5mult>:
 801a880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a884:	4615      	mov	r5, r2
 801a886:	f012 0203 	ands.w	r2, r2, #3
 801a88a:	4607      	mov	r7, r0
 801a88c:	460e      	mov	r6, r1
 801a88e:	d007      	beq.n	801a8a0 <__pow5mult+0x20>
 801a890:	4c25      	ldr	r4, [pc, #148]	@ (801a928 <__pow5mult+0xa8>)
 801a892:	3a01      	subs	r2, #1
 801a894:	2300      	movs	r3, #0
 801a896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a89a:	f7ff fe9f 	bl	801a5dc <__multadd>
 801a89e:	4606      	mov	r6, r0
 801a8a0:	10ad      	asrs	r5, r5, #2
 801a8a2:	d03d      	beq.n	801a920 <__pow5mult+0xa0>
 801a8a4:	69fc      	ldr	r4, [r7, #28]
 801a8a6:	b97c      	cbnz	r4, 801a8c8 <__pow5mult+0x48>
 801a8a8:	2010      	movs	r0, #16
 801a8aa:	f7fe f8e5 	bl	8018a78 <malloc>
 801a8ae:	4602      	mov	r2, r0
 801a8b0:	61f8      	str	r0, [r7, #28]
 801a8b2:	b928      	cbnz	r0, 801a8c0 <__pow5mult+0x40>
 801a8b4:	4b1d      	ldr	r3, [pc, #116]	@ (801a92c <__pow5mult+0xac>)
 801a8b6:	481e      	ldr	r0, [pc, #120]	@ (801a930 <__pow5mult+0xb0>)
 801a8b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a8bc:	f000 fbba 	bl	801b034 <__assert_func>
 801a8c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a8c4:	6004      	str	r4, [r0, #0]
 801a8c6:	60c4      	str	r4, [r0, #12]
 801a8c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a8cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a8d0:	b94c      	cbnz	r4, 801a8e6 <__pow5mult+0x66>
 801a8d2:	f240 2171 	movw	r1, #625	@ 0x271
 801a8d6:	4638      	mov	r0, r7
 801a8d8:	f7ff ff12 	bl	801a700 <__i2b>
 801a8dc:	2300      	movs	r3, #0
 801a8de:	f8c8 0008 	str.w	r0, [r8, #8]
 801a8e2:	4604      	mov	r4, r0
 801a8e4:	6003      	str	r3, [r0, #0]
 801a8e6:	f04f 0900 	mov.w	r9, #0
 801a8ea:	07eb      	lsls	r3, r5, #31
 801a8ec:	d50a      	bpl.n	801a904 <__pow5mult+0x84>
 801a8ee:	4631      	mov	r1, r6
 801a8f0:	4622      	mov	r2, r4
 801a8f2:	4638      	mov	r0, r7
 801a8f4:	f7ff ff1a 	bl	801a72c <__multiply>
 801a8f8:	4631      	mov	r1, r6
 801a8fa:	4680      	mov	r8, r0
 801a8fc:	4638      	mov	r0, r7
 801a8fe:	f7ff fe4b 	bl	801a598 <_Bfree>
 801a902:	4646      	mov	r6, r8
 801a904:	106d      	asrs	r5, r5, #1
 801a906:	d00b      	beq.n	801a920 <__pow5mult+0xa0>
 801a908:	6820      	ldr	r0, [r4, #0]
 801a90a:	b938      	cbnz	r0, 801a91c <__pow5mult+0x9c>
 801a90c:	4622      	mov	r2, r4
 801a90e:	4621      	mov	r1, r4
 801a910:	4638      	mov	r0, r7
 801a912:	f7ff ff0b 	bl	801a72c <__multiply>
 801a916:	6020      	str	r0, [r4, #0]
 801a918:	f8c0 9000 	str.w	r9, [r0]
 801a91c:	4604      	mov	r4, r0
 801a91e:	e7e4      	b.n	801a8ea <__pow5mult+0x6a>
 801a920:	4630      	mov	r0, r6
 801a922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a926:	bf00      	nop
 801a928:	0804b810 	.word	0x0804b810
 801a92c:	0804b735 	.word	0x0804b735
 801a930:	0804b7b5 	.word	0x0804b7b5

0801a934 <__lshift>:
 801a934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a938:	460c      	mov	r4, r1
 801a93a:	6849      	ldr	r1, [r1, #4]
 801a93c:	6923      	ldr	r3, [r4, #16]
 801a93e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a942:	68a3      	ldr	r3, [r4, #8]
 801a944:	4607      	mov	r7, r0
 801a946:	4691      	mov	r9, r2
 801a948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a94c:	f108 0601 	add.w	r6, r8, #1
 801a950:	42b3      	cmp	r3, r6
 801a952:	db0b      	blt.n	801a96c <__lshift+0x38>
 801a954:	4638      	mov	r0, r7
 801a956:	f7ff fddf 	bl	801a518 <_Balloc>
 801a95a:	4605      	mov	r5, r0
 801a95c:	b948      	cbnz	r0, 801a972 <__lshift+0x3e>
 801a95e:	4602      	mov	r2, r0
 801a960:	4b28      	ldr	r3, [pc, #160]	@ (801aa04 <__lshift+0xd0>)
 801a962:	4829      	ldr	r0, [pc, #164]	@ (801aa08 <__lshift+0xd4>)
 801a964:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a968:	f000 fb64 	bl	801b034 <__assert_func>
 801a96c:	3101      	adds	r1, #1
 801a96e:	005b      	lsls	r3, r3, #1
 801a970:	e7ee      	b.n	801a950 <__lshift+0x1c>
 801a972:	2300      	movs	r3, #0
 801a974:	f100 0114 	add.w	r1, r0, #20
 801a978:	f100 0210 	add.w	r2, r0, #16
 801a97c:	4618      	mov	r0, r3
 801a97e:	4553      	cmp	r3, sl
 801a980:	db33      	blt.n	801a9ea <__lshift+0xb6>
 801a982:	6920      	ldr	r0, [r4, #16]
 801a984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a988:	f104 0314 	add.w	r3, r4, #20
 801a98c:	f019 091f 	ands.w	r9, r9, #31
 801a990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a998:	d02b      	beq.n	801a9f2 <__lshift+0xbe>
 801a99a:	f1c9 0e20 	rsb	lr, r9, #32
 801a99e:	468a      	mov	sl, r1
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	6818      	ldr	r0, [r3, #0]
 801a9a4:	fa00 f009 	lsl.w	r0, r0, r9
 801a9a8:	4310      	orrs	r0, r2
 801a9aa:	f84a 0b04 	str.w	r0, [sl], #4
 801a9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9b2:	459c      	cmp	ip, r3
 801a9b4:	fa22 f20e 	lsr.w	r2, r2, lr
 801a9b8:	d8f3      	bhi.n	801a9a2 <__lshift+0x6e>
 801a9ba:	ebac 0304 	sub.w	r3, ip, r4
 801a9be:	3b15      	subs	r3, #21
 801a9c0:	f023 0303 	bic.w	r3, r3, #3
 801a9c4:	3304      	adds	r3, #4
 801a9c6:	f104 0015 	add.w	r0, r4, #21
 801a9ca:	4584      	cmp	ip, r0
 801a9cc:	bf38      	it	cc
 801a9ce:	2304      	movcc	r3, #4
 801a9d0:	50ca      	str	r2, [r1, r3]
 801a9d2:	b10a      	cbz	r2, 801a9d8 <__lshift+0xa4>
 801a9d4:	f108 0602 	add.w	r6, r8, #2
 801a9d8:	3e01      	subs	r6, #1
 801a9da:	4638      	mov	r0, r7
 801a9dc:	612e      	str	r6, [r5, #16]
 801a9de:	4621      	mov	r1, r4
 801a9e0:	f7ff fdda 	bl	801a598 <_Bfree>
 801a9e4:	4628      	mov	r0, r5
 801a9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9ea:	f842 0f04 	str.w	r0, [r2, #4]!
 801a9ee:	3301      	adds	r3, #1
 801a9f0:	e7c5      	b.n	801a97e <__lshift+0x4a>
 801a9f2:	3904      	subs	r1, #4
 801a9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9f8:	f841 2f04 	str.w	r2, [r1, #4]!
 801a9fc:	459c      	cmp	ip, r3
 801a9fe:	d8f9      	bhi.n	801a9f4 <__lshift+0xc0>
 801aa00:	e7ea      	b.n	801a9d8 <__lshift+0xa4>
 801aa02:	bf00      	nop
 801aa04:	0804b7a4 	.word	0x0804b7a4
 801aa08:	0804b7b5 	.word	0x0804b7b5

0801aa0c <__mcmp>:
 801aa0c:	690a      	ldr	r2, [r1, #16]
 801aa0e:	4603      	mov	r3, r0
 801aa10:	6900      	ldr	r0, [r0, #16]
 801aa12:	1a80      	subs	r0, r0, r2
 801aa14:	b530      	push	{r4, r5, lr}
 801aa16:	d10e      	bne.n	801aa36 <__mcmp+0x2a>
 801aa18:	3314      	adds	r3, #20
 801aa1a:	3114      	adds	r1, #20
 801aa1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801aa20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801aa24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801aa28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801aa2c:	4295      	cmp	r5, r2
 801aa2e:	d003      	beq.n	801aa38 <__mcmp+0x2c>
 801aa30:	d205      	bcs.n	801aa3e <__mcmp+0x32>
 801aa32:	f04f 30ff 	mov.w	r0, #4294967295
 801aa36:	bd30      	pop	{r4, r5, pc}
 801aa38:	42a3      	cmp	r3, r4
 801aa3a:	d3f3      	bcc.n	801aa24 <__mcmp+0x18>
 801aa3c:	e7fb      	b.n	801aa36 <__mcmp+0x2a>
 801aa3e:	2001      	movs	r0, #1
 801aa40:	e7f9      	b.n	801aa36 <__mcmp+0x2a>
	...

0801aa44 <__mdiff>:
 801aa44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa48:	4689      	mov	r9, r1
 801aa4a:	4606      	mov	r6, r0
 801aa4c:	4611      	mov	r1, r2
 801aa4e:	4648      	mov	r0, r9
 801aa50:	4614      	mov	r4, r2
 801aa52:	f7ff ffdb 	bl	801aa0c <__mcmp>
 801aa56:	1e05      	subs	r5, r0, #0
 801aa58:	d112      	bne.n	801aa80 <__mdiff+0x3c>
 801aa5a:	4629      	mov	r1, r5
 801aa5c:	4630      	mov	r0, r6
 801aa5e:	f7ff fd5b 	bl	801a518 <_Balloc>
 801aa62:	4602      	mov	r2, r0
 801aa64:	b928      	cbnz	r0, 801aa72 <__mdiff+0x2e>
 801aa66:	4b3f      	ldr	r3, [pc, #252]	@ (801ab64 <__mdiff+0x120>)
 801aa68:	f240 2137 	movw	r1, #567	@ 0x237
 801aa6c:	483e      	ldr	r0, [pc, #248]	@ (801ab68 <__mdiff+0x124>)
 801aa6e:	f000 fae1 	bl	801b034 <__assert_func>
 801aa72:	2301      	movs	r3, #1
 801aa74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801aa78:	4610      	mov	r0, r2
 801aa7a:	b003      	add	sp, #12
 801aa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa80:	bfbc      	itt	lt
 801aa82:	464b      	movlt	r3, r9
 801aa84:	46a1      	movlt	r9, r4
 801aa86:	4630      	mov	r0, r6
 801aa88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801aa8c:	bfba      	itte	lt
 801aa8e:	461c      	movlt	r4, r3
 801aa90:	2501      	movlt	r5, #1
 801aa92:	2500      	movge	r5, #0
 801aa94:	f7ff fd40 	bl	801a518 <_Balloc>
 801aa98:	4602      	mov	r2, r0
 801aa9a:	b918      	cbnz	r0, 801aaa4 <__mdiff+0x60>
 801aa9c:	4b31      	ldr	r3, [pc, #196]	@ (801ab64 <__mdiff+0x120>)
 801aa9e:	f240 2145 	movw	r1, #581	@ 0x245
 801aaa2:	e7e3      	b.n	801aa6c <__mdiff+0x28>
 801aaa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801aaa8:	6926      	ldr	r6, [r4, #16]
 801aaaa:	60c5      	str	r5, [r0, #12]
 801aaac:	f109 0310 	add.w	r3, r9, #16
 801aab0:	f109 0514 	add.w	r5, r9, #20
 801aab4:	f104 0e14 	add.w	lr, r4, #20
 801aab8:	f100 0b14 	add.w	fp, r0, #20
 801aabc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801aac0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801aac4:	9301      	str	r3, [sp, #4]
 801aac6:	46d9      	mov	r9, fp
 801aac8:	f04f 0c00 	mov.w	ip, #0
 801aacc:	9b01      	ldr	r3, [sp, #4]
 801aace:	f85e 0b04 	ldr.w	r0, [lr], #4
 801aad2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801aad6:	9301      	str	r3, [sp, #4]
 801aad8:	fa1f f38a 	uxth.w	r3, sl
 801aadc:	4619      	mov	r1, r3
 801aade:	b283      	uxth	r3, r0
 801aae0:	1acb      	subs	r3, r1, r3
 801aae2:	0c00      	lsrs	r0, r0, #16
 801aae4:	4463      	add	r3, ip
 801aae6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801aaea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801aaee:	b29b      	uxth	r3, r3
 801aaf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801aaf4:	4576      	cmp	r6, lr
 801aaf6:	f849 3b04 	str.w	r3, [r9], #4
 801aafa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801aafe:	d8e5      	bhi.n	801aacc <__mdiff+0x88>
 801ab00:	1b33      	subs	r3, r6, r4
 801ab02:	3b15      	subs	r3, #21
 801ab04:	f023 0303 	bic.w	r3, r3, #3
 801ab08:	3415      	adds	r4, #21
 801ab0a:	3304      	adds	r3, #4
 801ab0c:	42a6      	cmp	r6, r4
 801ab0e:	bf38      	it	cc
 801ab10:	2304      	movcc	r3, #4
 801ab12:	441d      	add	r5, r3
 801ab14:	445b      	add	r3, fp
 801ab16:	461e      	mov	r6, r3
 801ab18:	462c      	mov	r4, r5
 801ab1a:	4544      	cmp	r4, r8
 801ab1c:	d30e      	bcc.n	801ab3c <__mdiff+0xf8>
 801ab1e:	f108 0103 	add.w	r1, r8, #3
 801ab22:	1b49      	subs	r1, r1, r5
 801ab24:	f021 0103 	bic.w	r1, r1, #3
 801ab28:	3d03      	subs	r5, #3
 801ab2a:	45a8      	cmp	r8, r5
 801ab2c:	bf38      	it	cc
 801ab2e:	2100      	movcc	r1, #0
 801ab30:	440b      	add	r3, r1
 801ab32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ab36:	b191      	cbz	r1, 801ab5e <__mdiff+0x11a>
 801ab38:	6117      	str	r7, [r2, #16]
 801ab3a:	e79d      	b.n	801aa78 <__mdiff+0x34>
 801ab3c:	f854 1b04 	ldr.w	r1, [r4], #4
 801ab40:	46e6      	mov	lr, ip
 801ab42:	0c08      	lsrs	r0, r1, #16
 801ab44:	fa1c fc81 	uxtah	ip, ip, r1
 801ab48:	4471      	add	r1, lr
 801ab4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ab4e:	b289      	uxth	r1, r1
 801ab50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ab54:	f846 1b04 	str.w	r1, [r6], #4
 801ab58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ab5c:	e7dd      	b.n	801ab1a <__mdiff+0xd6>
 801ab5e:	3f01      	subs	r7, #1
 801ab60:	e7e7      	b.n	801ab32 <__mdiff+0xee>
 801ab62:	bf00      	nop
 801ab64:	0804b7a4 	.word	0x0804b7a4
 801ab68:	0804b7b5 	.word	0x0804b7b5

0801ab6c <__d2b>:
 801ab6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ab70:	460f      	mov	r7, r1
 801ab72:	2101      	movs	r1, #1
 801ab74:	ec59 8b10 	vmov	r8, r9, d0
 801ab78:	4616      	mov	r6, r2
 801ab7a:	f7ff fccd 	bl	801a518 <_Balloc>
 801ab7e:	4604      	mov	r4, r0
 801ab80:	b930      	cbnz	r0, 801ab90 <__d2b+0x24>
 801ab82:	4602      	mov	r2, r0
 801ab84:	4b23      	ldr	r3, [pc, #140]	@ (801ac14 <__d2b+0xa8>)
 801ab86:	4824      	ldr	r0, [pc, #144]	@ (801ac18 <__d2b+0xac>)
 801ab88:	f240 310f 	movw	r1, #783	@ 0x30f
 801ab8c:	f000 fa52 	bl	801b034 <__assert_func>
 801ab90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ab94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ab98:	b10d      	cbz	r5, 801ab9e <__d2b+0x32>
 801ab9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ab9e:	9301      	str	r3, [sp, #4]
 801aba0:	f1b8 0300 	subs.w	r3, r8, #0
 801aba4:	d023      	beq.n	801abee <__d2b+0x82>
 801aba6:	4668      	mov	r0, sp
 801aba8:	9300      	str	r3, [sp, #0]
 801abaa:	f7ff fd7c 	bl	801a6a6 <__lo0bits>
 801abae:	e9dd 1200 	ldrd	r1, r2, [sp]
 801abb2:	b1d0      	cbz	r0, 801abea <__d2b+0x7e>
 801abb4:	f1c0 0320 	rsb	r3, r0, #32
 801abb8:	fa02 f303 	lsl.w	r3, r2, r3
 801abbc:	430b      	orrs	r3, r1
 801abbe:	40c2      	lsrs	r2, r0
 801abc0:	6163      	str	r3, [r4, #20]
 801abc2:	9201      	str	r2, [sp, #4]
 801abc4:	9b01      	ldr	r3, [sp, #4]
 801abc6:	61a3      	str	r3, [r4, #24]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	bf0c      	ite	eq
 801abcc:	2201      	moveq	r2, #1
 801abce:	2202      	movne	r2, #2
 801abd0:	6122      	str	r2, [r4, #16]
 801abd2:	b1a5      	cbz	r5, 801abfe <__d2b+0x92>
 801abd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801abd8:	4405      	add	r5, r0
 801abda:	603d      	str	r5, [r7, #0]
 801abdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801abe0:	6030      	str	r0, [r6, #0]
 801abe2:	4620      	mov	r0, r4
 801abe4:	b003      	add	sp, #12
 801abe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abea:	6161      	str	r1, [r4, #20]
 801abec:	e7ea      	b.n	801abc4 <__d2b+0x58>
 801abee:	a801      	add	r0, sp, #4
 801abf0:	f7ff fd59 	bl	801a6a6 <__lo0bits>
 801abf4:	9b01      	ldr	r3, [sp, #4]
 801abf6:	6163      	str	r3, [r4, #20]
 801abf8:	3020      	adds	r0, #32
 801abfa:	2201      	movs	r2, #1
 801abfc:	e7e8      	b.n	801abd0 <__d2b+0x64>
 801abfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ac02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ac06:	6038      	str	r0, [r7, #0]
 801ac08:	6918      	ldr	r0, [r3, #16]
 801ac0a:	f7ff fd2d 	bl	801a668 <__hi0bits>
 801ac0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ac12:	e7e5      	b.n	801abe0 <__d2b+0x74>
 801ac14:	0804b7a4 	.word	0x0804b7a4
 801ac18:	0804b7b5 	.word	0x0804b7b5

0801ac1c <_malloc_usable_size_r>:
 801ac1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac20:	1f18      	subs	r0, r3, #4
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	bfbc      	itt	lt
 801ac26:	580b      	ldrlt	r3, [r1, r0]
 801ac28:	18c0      	addlt	r0, r0, r3
 801ac2a:	4770      	bx	lr

0801ac2c <__ssputs_r>:
 801ac2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac30:	688e      	ldr	r6, [r1, #8]
 801ac32:	461f      	mov	r7, r3
 801ac34:	42be      	cmp	r6, r7
 801ac36:	680b      	ldr	r3, [r1, #0]
 801ac38:	4682      	mov	sl, r0
 801ac3a:	460c      	mov	r4, r1
 801ac3c:	4690      	mov	r8, r2
 801ac3e:	d82d      	bhi.n	801ac9c <__ssputs_r+0x70>
 801ac40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ac44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ac48:	d026      	beq.n	801ac98 <__ssputs_r+0x6c>
 801ac4a:	6965      	ldr	r5, [r4, #20]
 801ac4c:	6909      	ldr	r1, [r1, #16]
 801ac4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac52:	eba3 0901 	sub.w	r9, r3, r1
 801ac56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ac5a:	1c7b      	adds	r3, r7, #1
 801ac5c:	444b      	add	r3, r9
 801ac5e:	106d      	asrs	r5, r5, #1
 801ac60:	429d      	cmp	r5, r3
 801ac62:	bf38      	it	cc
 801ac64:	461d      	movcc	r5, r3
 801ac66:	0553      	lsls	r3, r2, #21
 801ac68:	d527      	bpl.n	801acba <__ssputs_r+0x8e>
 801ac6a:	4629      	mov	r1, r5
 801ac6c:	f7fd ff2e 	bl	8018acc <_malloc_r>
 801ac70:	4606      	mov	r6, r0
 801ac72:	b360      	cbz	r0, 801acce <__ssputs_r+0xa2>
 801ac74:	6921      	ldr	r1, [r4, #16]
 801ac76:	464a      	mov	r2, r9
 801ac78:	f7fe fe17 	bl	80198aa <memcpy>
 801ac7c:	89a3      	ldrh	r3, [r4, #12]
 801ac7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ac82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ac86:	81a3      	strh	r3, [r4, #12]
 801ac88:	6126      	str	r6, [r4, #16]
 801ac8a:	6165      	str	r5, [r4, #20]
 801ac8c:	444e      	add	r6, r9
 801ac8e:	eba5 0509 	sub.w	r5, r5, r9
 801ac92:	6026      	str	r6, [r4, #0]
 801ac94:	60a5      	str	r5, [r4, #8]
 801ac96:	463e      	mov	r6, r7
 801ac98:	42be      	cmp	r6, r7
 801ac9a:	d900      	bls.n	801ac9e <__ssputs_r+0x72>
 801ac9c:	463e      	mov	r6, r7
 801ac9e:	6820      	ldr	r0, [r4, #0]
 801aca0:	4632      	mov	r2, r6
 801aca2:	4641      	mov	r1, r8
 801aca4:	f7fe fd5d 	bl	8019762 <memmove>
 801aca8:	68a3      	ldr	r3, [r4, #8]
 801acaa:	1b9b      	subs	r3, r3, r6
 801acac:	60a3      	str	r3, [r4, #8]
 801acae:	6823      	ldr	r3, [r4, #0]
 801acb0:	4433      	add	r3, r6
 801acb2:	6023      	str	r3, [r4, #0]
 801acb4:	2000      	movs	r0, #0
 801acb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acba:	462a      	mov	r2, r5
 801acbc:	f7fd ff92 	bl	8018be4 <_realloc_r>
 801acc0:	4606      	mov	r6, r0
 801acc2:	2800      	cmp	r0, #0
 801acc4:	d1e0      	bne.n	801ac88 <__ssputs_r+0x5c>
 801acc6:	6921      	ldr	r1, [r4, #16]
 801acc8:	4650      	mov	r0, sl
 801acca:	f7ff fbdb 	bl	801a484 <_free_r>
 801acce:	230c      	movs	r3, #12
 801acd0:	f8ca 3000 	str.w	r3, [sl]
 801acd4:	89a3      	ldrh	r3, [r4, #12]
 801acd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801acda:	81a3      	strh	r3, [r4, #12]
 801acdc:	f04f 30ff 	mov.w	r0, #4294967295
 801ace0:	e7e9      	b.n	801acb6 <__ssputs_r+0x8a>
	...

0801ace4 <_svfiprintf_r>:
 801ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ace8:	4698      	mov	r8, r3
 801acea:	898b      	ldrh	r3, [r1, #12]
 801acec:	061b      	lsls	r3, r3, #24
 801acee:	b09d      	sub	sp, #116	@ 0x74
 801acf0:	4607      	mov	r7, r0
 801acf2:	460d      	mov	r5, r1
 801acf4:	4614      	mov	r4, r2
 801acf6:	d510      	bpl.n	801ad1a <_svfiprintf_r+0x36>
 801acf8:	690b      	ldr	r3, [r1, #16]
 801acfa:	b973      	cbnz	r3, 801ad1a <_svfiprintf_r+0x36>
 801acfc:	2140      	movs	r1, #64	@ 0x40
 801acfe:	f7fd fee5 	bl	8018acc <_malloc_r>
 801ad02:	6028      	str	r0, [r5, #0]
 801ad04:	6128      	str	r0, [r5, #16]
 801ad06:	b930      	cbnz	r0, 801ad16 <_svfiprintf_r+0x32>
 801ad08:	230c      	movs	r3, #12
 801ad0a:	603b      	str	r3, [r7, #0]
 801ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad10:	b01d      	add	sp, #116	@ 0x74
 801ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad16:	2340      	movs	r3, #64	@ 0x40
 801ad18:	616b      	str	r3, [r5, #20]
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad1e:	2320      	movs	r3, #32
 801ad20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ad24:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad28:	2330      	movs	r3, #48	@ 0x30
 801ad2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801aec8 <_svfiprintf_r+0x1e4>
 801ad2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ad32:	f04f 0901 	mov.w	r9, #1
 801ad36:	4623      	mov	r3, r4
 801ad38:	469a      	mov	sl, r3
 801ad3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad3e:	b10a      	cbz	r2, 801ad44 <_svfiprintf_r+0x60>
 801ad40:	2a25      	cmp	r2, #37	@ 0x25
 801ad42:	d1f9      	bne.n	801ad38 <_svfiprintf_r+0x54>
 801ad44:	ebba 0b04 	subs.w	fp, sl, r4
 801ad48:	d00b      	beq.n	801ad62 <_svfiprintf_r+0x7e>
 801ad4a:	465b      	mov	r3, fp
 801ad4c:	4622      	mov	r2, r4
 801ad4e:	4629      	mov	r1, r5
 801ad50:	4638      	mov	r0, r7
 801ad52:	f7ff ff6b 	bl	801ac2c <__ssputs_r>
 801ad56:	3001      	adds	r0, #1
 801ad58:	f000 80a7 	beq.w	801aeaa <_svfiprintf_r+0x1c6>
 801ad5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad5e:	445a      	add	r2, fp
 801ad60:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad62:	f89a 3000 	ldrb.w	r3, [sl]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	f000 809f 	beq.w	801aeaa <_svfiprintf_r+0x1c6>
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	f04f 32ff 	mov.w	r2, #4294967295
 801ad72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad76:	f10a 0a01 	add.w	sl, sl, #1
 801ad7a:	9304      	str	r3, [sp, #16]
 801ad7c:	9307      	str	r3, [sp, #28]
 801ad7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ad82:	931a      	str	r3, [sp, #104]	@ 0x68
 801ad84:	4654      	mov	r4, sl
 801ad86:	2205      	movs	r2, #5
 801ad88:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad8c:	484e      	ldr	r0, [pc, #312]	@ (801aec8 <_svfiprintf_r+0x1e4>)
 801ad8e:	f7e5 faa7 	bl	80002e0 <memchr>
 801ad92:	9a04      	ldr	r2, [sp, #16]
 801ad94:	b9d8      	cbnz	r0, 801adce <_svfiprintf_r+0xea>
 801ad96:	06d0      	lsls	r0, r2, #27
 801ad98:	bf44      	itt	mi
 801ad9a:	2320      	movmi	r3, #32
 801ad9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ada0:	0711      	lsls	r1, r2, #28
 801ada2:	bf44      	itt	mi
 801ada4:	232b      	movmi	r3, #43	@ 0x2b
 801ada6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801adaa:	f89a 3000 	ldrb.w	r3, [sl]
 801adae:	2b2a      	cmp	r3, #42	@ 0x2a
 801adb0:	d015      	beq.n	801adde <_svfiprintf_r+0xfa>
 801adb2:	9a07      	ldr	r2, [sp, #28]
 801adb4:	4654      	mov	r4, sl
 801adb6:	2000      	movs	r0, #0
 801adb8:	f04f 0c0a 	mov.w	ip, #10
 801adbc:	4621      	mov	r1, r4
 801adbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801adc2:	3b30      	subs	r3, #48	@ 0x30
 801adc4:	2b09      	cmp	r3, #9
 801adc6:	d94b      	bls.n	801ae60 <_svfiprintf_r+0x17c>
 801adc8:	b1b0      	cbz	r0, 801adf8 <_svfiprintf_r+0x114>
 801adca:	9207      	str	r2, [sp, #28]
 801adcc:	e014      	b.n	801adf8 <_svfiprintf_r+0x114>
 801adce:	eba0 0308 	sub.w	r3, r0, r8
 801add2:	fa09 f303 	lsl.w	r3, r9, r3
 801add6:	4313      	orrs	r3, r2
 801add8:	9304      	str	r3, [sp, #16]
 801adda:	46a2      	mov	sl, r4
 801addc:	e7d2      	b.n	801ad84 <_svfiprintf_r+0xa0>
 801adde:	9b03      	ldr	r3, [sp, #12]
 801ade0:	1d19      	adds	r1, r3, #4
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	9103      	str	r1, [sp, #12]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	bfbb      	ittet	lt
 801adea:	425b      	neglt	r3, r3
 801adec:	f042 0202 	orrlt.w	r2, r2, #2
 801adf0:	9307      	strge	r3, [sp, #28]
 801adf2:	9307      	strlt	r3, [sp, #28]
 801adf4:	bfb8      	it	lt
 801adf6:	9204      	strlt	r2, [sp, #16]
 801adf8:	7823      	ldrb	r3, [r4, #0]
 801adfa:	2b2e      	cmp	r3, #46	@ 0x2e
 801adfc:	d10a      	bne.n	801ae14 <_svfiprintf_r+0x130>
 801adfe:	7863      	ldrb	r3, [r4, #1]
 801ae00:	2b2a      	cmp	r3, #42	@ 0x2a
 801ae02:	d132      	bne.n	801ae6a <_svfiprintf_r+0x186>
 801ae04:	9b03      	ldr	r3, [sp, #12]
 801ae06:	1d1a      	adds	r2, r3, #4
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	9203      	str	r2, [sp, #12]
 801ae0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ae10:	3402      	adds	r4, #2
 801ae12:	9305      	str	r3, [sp, #20]
 801ae14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801aed8 <_svfiprintf_r+0x1f4>
 801ae18:	7821      	ldrb	r1, [r4, #0]
 801ae1a:	2203      	movs	r2, #3
 801ae1c:	4650      	mov	r0, sl
 801ae1e:	f7e5 fa5f 	bl	80002e0 <memchr>
 801ae22:	b138      	cbz	r0, 801ae34 <_svfiprintf_r+0x150>
 801ae24:	9b04      	ldr	r3, [sp, #16]
 801ae26:	eba0 000a 	sub.w	r0, r0, sl
 801ae2a:	2240      	movs	r2, #64	@ 0x40
 801ae2c:	4082      	lsls	r2, r0
 801ae2e:	4313      	orrs	r3, r2
 801ae30:	3401      	adds	r4, #1
 801ae32:	9304      	str	r3, [sp, #16]
 801ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae38:	4824      	ldr	r0, [pc, #144]	@ (801aecc <_svfiprintf_r+0x1e8>)
 801ae3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ae3e:	2206      	movs	r2, #6
 801ae40:	f7e5 fa4e 	bl	80002e0 <memchr>
 801ae44:	2800      	cmp	r0, #0
 801ae46:	d036      	beq.n	801aeb6 <_svfiprintf_r+0x1d2>
 801ae48:	4b21      	ldr	r3, [pc, #132]	@ (801aed0 <_svfiprintf_r+0x1ec>)
 801ae4a:	bb1b      	cbnz	r3, 801ae94 <_svfiprintf_r+0x1b0>
 801ae4c:	9b03      	ldr	r3, [sp, #12]
 801ae4e:	3307      	adds	r3, #7
 801ae50:	f023 0307 	bic.w	r3, r3, #7
 801ae54:	3308      	adds	r3, #8
 801ae56:	9303      	str	r3, [sp, #12]
 801ae58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae5a:	4433      	add	r3, r6
 801ae5c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae5e:	e76a      	b.n	801ad36 <_svfiprintf_r+0x52>
 801ae60:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae64:	460c      	mov	r4, r1
 801ae66:	2001      	movs	r0, #1
 801ae68:	e7a8      	b.n	801adbc <_svfiprintf_r+0xd8>
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	3401      	adds	r4, #1
 801ae6e:	9305      	str	r3, [sp, #20]
 801ae70:	4619      	mov	r1, r3
 801ae72:	f04f 0c0a 	mov.w	ip, #10
 801ae76:	4620      	mov	r0, r4
 801ae78:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae7c:	3a30      	subs	r2, #48	@ 0x30
 801ae7e:	2a09      	cmp	r2, #9
 801ae80:	d903      	bls.n	801ae8a <_svfiprintf_r+0x1a6>
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d0c6      	beq.n	801ae14 <_svfiprintf_r+0x130>
 801ae86:	9105      	str	r1, [sp, #20]
 801ae88:	e7c4      	b.n	801ae14 <_svfiprintf_r+0x130>
 801ae8a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae8e:	4604      	mov	r4, r0
 801ae90:	2301      	movs	r3, #1
 801ae92:	e7f0      	b.n	801ae76 <_svfiprintf_r+0x192>
 801ae94:	ab03      	add	r3, sp, #12
 801ae96:	9300      	str	r3, [sp, #0]
 801ae98:	462a      	mov	r2, r5
 801ae9a:	4b0e      	ldr	r3, [pc, #56]	@ (801aed4 <_svfiprintf_r+0x1f0>)
 801ae9c:	a904      	add	r1, sp, #16
 801ae9e:	4638      	mov	r0, r7
 801aea0:	f7fd ff5e 	bl	8018d60 <_printf_float>
 801aea4:	1c42      	adds	r2, r0, #1
 801aea6:	4606      	mov	r6, r0
 801aea8:	d1d6      	bne.n	801ae58 <_svfiprintf_r+0x174>
 801aeaa:	89ab      	ldrh	r3, [r5, #12]
 801aeac:	065b      	lsls	r3, r3, #25
 801aeae:	f53f af2d 	bmi.w	801ad0c <_svfiprintf_r+0x28>
 801aeb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aeb4:	e72c      	b.n	801ad10 <_svfiprintf_r+0x2c>
 801aeb6:	ab03      	add	r3, sp, #12
 801aeb8:	9300      	str	r3, [sp, #0]
 801aeba:	462a      	mov	r2, r5
 801aebc:	4b05      	ldr	r3, [pc, #20]	@ (801aed4 <_svfiprintf_r+0x1f0>)
 801aebe:	a904      	add	r1, sp, #16
 801aec0:	4638      	mov	r0, r7
 801aec2:	f7fe f9d5 	bl	8019270 <_printf_i>
 801aec6:	e7ed      	b.n	801aea4 <_svfiprintf_r+0x1c0>
 801aec8:	0804b910 	.word	0x0804b910
 801aecc:	0804b91a 	.word	0x0804b91a
 801aed0:	08018d61 	.word	0x08018d61
 801aed4:	0801ac2d 	.word	0x0801ac2d
 801aed8:	0804b916 	.word	0x0804b916

0801aedc <__sflush_r>:
 801aedc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801aee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aee4:	0716      	lsls	r6, r2, #28
 801aee6:	4605      	mov	r5, r0
 801aee8:	460c      	mov	r4, r1
 801aeea:	d454      	bmi.n	801af96 <__sflush_r+0xba>
 801aeec:	684b      	ldr	r3, [r1, #4]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	dc02      	bgt.n	801aef8 <__sflush_r+0x1c>
 801aef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	dd48      	ble.n	801af8a <__sflush_r+0xae>
 801aef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801aefa:	2e00      	cmp	r6, #0
 801aefc:	d045      	beq.n	801af8a <__sflush_r+0xae>
 801aefe:	2300      	movs	r3, #0
 801af00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801af04:	682f      	ldr	r7, [r5, #0]
 801af06:	6a21      	ldr	r1, [r4, #32]
 801af08:	602b      	str	r3, [r5, #0]
 801af0a:	d030      	beq.n	801af6e <__sflush_r+0x92>
 801af0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801af0e:	89a3      	ldrh	r3, [r4, #12]
 801af10:	0759      	lsls	r1, r3, #29
 801af12:	d505      	bpl.n	801af20 <__sflush_r+0x44>
 801af14:	6863      	ldr	r3, [r4, #4]
 801af16:	1ad2      	subs	r2, r2, r3
 801af18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801af1a:	b10b      	cbz	r3, 801af20 <__sflush_r+0x44>
 801af1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801af1e:	1ad2      	subs	r2, r2, r3
 801af20:	2300      	movs	r3, #0
 801af22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801af24:	6a21      	ldr	r1, [r4, #32]
 801af26:	4628      	mov	r0, r5
 801af28:	47b0      	blx	r6
 801af2a:	1c43      	adds	r3, r0, #1
 801af2c:	89a3      	ldrh	r3, [r4, #12]
 801af2e:	d106      	bne.n	801af3e <__sflush_r+0x62>
 801af30:	6829      	ldr	r1, [r5, #0]
 801af32:	291d      	cmp	r1, #29
 801af34:	d82b      	bhi.n	801af8e <__sflush_r+0xb2>
 801af36:	4a2a      	ldr	r2, [pc, #168]	@ (801afe0 <__sflush_r+0x104>)
 801af38:	410a      	asrs	r2, r1
 801af3a:	07d6      	lsls	r6, r2, #31
 801af3c:	d427      	bmi.n	801af8e <__sflush_r+0xb2>
 801af3e:	2200      	movs	r2, #0
 801af40:	6062      	str	r2, [r4, #4]
 801af42:	04d9      	lsls	r1, r3, #19
 801af44:	6922      	ldr	r2, [r4, #16]
 801af46:	6022      	str	r2, [r4, #0]
 801af48:	d504      	bpl.n	801af54 <__sflush_r+0x78>
 801af4a:	1c42      	adds	r2, r0, #1
 801af4c:	d101      	bne.n	801af52 <__sflush_r+0x76>
 801af4e:	682b      	ldr	r3, [r5, #0]
 801af50:	b903      	cbnz	r3, 801af54 <__sflush_r+0x78>
 801af52:	6560      	str	r0, [r4, #84]	@ 0x54
 801af54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801af56:	602f      	str	r7, [r5, #0]
 801af58:	b1b9      	cbz	r1, 801af8a <__sflush_r+0xae>
 801af5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801af5e:	4299      	cmp	r1, r3
 801af60:	d002      	beq.n	801af68 <__sflush_r+0x8c>
 801af62:	4628      	mov	r0, r5
 801af64:	f7ff fa8e 	bl	801a484 <_free_r>
 801af68:	2300      	movs	r3, #0
 801af6a:	6363      	str	r3, [r4, #52]	@ 0x34
 801af6c:	e00d      	b.n	801af8a <__sflush_r+0xae>
 801af6e:	2301      	movs	r3, #1
 801af70:	4628      	mov	r0, r5
 801af72:	47b0      	blx	r6
 801af74:	4602      	mov	r2, r0
 801af76:	1c50      	adds	r0, r2, #1
 801af78:	d1c9      	bne.n	801af0e <__sflush_r+0x32>
 801af7a:	682b      	ldr	r3, [r5, #0]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d0c6      	beq.n	801af0e <__sflush_r+0x32>
 801af80:	2b1d      	cmp	r3, #29
 801af82:	d001      	beq.n	801af88 <__sflush_r+0xac>
 801af84:	2b16      	cmp	r3, #22
 801af86:	d11e      	bne.n	801afc6 <__sflush_r+0xea>
 801af88:	602f      	str	r7, [r5, #0]
 801af8a:	2000      	movs	r0, #0
 801af8c:	e022      	b.n	801afd4 <__sflush_r+0xf8>
 801af8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801af92:	b21b      	sxth	r3, r3
 801af94:	e01b      	b.n	801afce <__sflush_r+0xf2>
 801af96:	690f      	ldr	r7, [r1, #16]
 801af98:	2f00      	cmp	r7, #0
 801af9a:	d0f6      	beq.n	801af8a <__sflush_r+0xae>
 801af9c:	0793      	lsls	r3, r2, #30
 801af9e:	680e      	ldr	r6, [r1, #0]
 801afa0:	bf08      	it	eq
 801afa2:	694b      	ldreq	r3, [r1, #20]
 801afa4:	600f      	str	r7, [r1, #0]
 801afa6:	bf18      	it	ne
 801afa8:	2300      	movne	r3, #0
 801afaa:	eba6 0807 	sub.w	r8, r6, r7
 801afae:	608b      	str	r3, [r1, #8]
 801afb0:	f1b8 0f00 	cmp.w	r8, #0
 801afb4:	dde9      	ble.n	801af8a <__sflush_r+0xae>
 801afb6:	6a21      	ldr	r1, [r4, #32]
 801afb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801afba:	4643      	mov	r3, r8
 801afbc:	463a      	mov	r2, r7
 801afbe:	4628      	mov	r0, r5
 801afc0:	47b0      	blx	r6
 801afc2:	2800      	cmp	r0, #0
 801afc4:	dc08      	bgt.n	801afd8 <__sflush_r+0xfc>
 801afc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801afca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801afce:	81a3      	strh	r3, [r4, #12]
 801afd0:	f04f 30ff 	mov.w	r0, #4294967295
 801afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afd8:	4407      	add	r7, r0
 801afda:	eba8 0800 	sub.w	r8, r8, r0
 801afde:	e7e7      	b.n	801afb0 <__sflush_r+0xd4>
 801afe0:	dfbffffe 	.word	0xdfbffffe

0801afe4 <_fflush_r>:
 801afe4:	b538      	push	{r3, r4, r5, lr}
 801afe6:	690b      	ldr	r3, [r1, #16]
 801afe8:	4605      	mov	r5, r0
 801afea:	460c      	mov	r4, r1
 801afec:	b913      	cbnz	r3, 801aff4 <_fflush_r+0x10>
 801afee:	2500      	movs	r5, #0
 801aff0:	4628      	mov	r0, r5
 801aff2:	bd38      	pop	{r3, r4, r5, pc}
 801aff4:	b118      	cbz	r0, 801affe <_fflush_r+0x1a>
 801aff6:	6a03      	ldr	r3, [r0, #32]
 801aff8:	b90b      	cbnz	r3, 801affe <_fflush_r+0x1a>
 801affa:	f7fe fae5 	bl	80195c8 <__sinit>
 801affe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b002:	2b00      	cmp	r3, #0
 801b004:	d0f3      	beq.n	801afee <_fflush_r+0xa>
 801b006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b008:	07d0      	lsls	r0, r2, #31
 801b00a:	d404      	bmi.n	801b016 <_fflush_r+0x32>
 801b00c:	0599      	lsls	r1, r3, #22
 801b00e:	d402      	bmi.n	801b016 <_fflush_r+0x32>
 801b010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b012:	f7fe fc48 	bl	80198a6 <__retarget_lock_acquire_recursive>
 801b016:	4628      	mov	r0, r5
 801b018:	4621      	mov	r1, r4
 801b01a:	f7ff ff5f 	bl	801aedc <__sflush_r>
 801b01e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b020:	07da      	lsls	r2, r3, #31
 801b022:	4605      	mov	r5, r0
 801b024:	d4e4      	bmi.n	801aff0 <_fflush_r+0xc>
 801b026:	89a3      	ldrh	r3, [r4, #12]
 801b028:	059b      	lsls	r3, r3, #22
 801b02a:	d4e1      	bmi.n	801aff0 <_fflush_r+0xc>
 801b02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b02e:	f7fe fc3b 	bl	80198a8 <__retarget_lock_release_recursive>
 801b032:	e7dd      	b.n	801aff0 <_fflush_r+0xc>

0801b034 <__assert_func>:
 801b034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b036:	4614      	mov	r4, r2
 801b038:	461a      	mov	r2, r3
 801b03a:	4b09      	ldr	r3, [pc, #36]	@ (801b060 <__assert_func+0x2c>)
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	4605      	mov	r5, r0
 801b040:	68d8      	ldr	r0, [r3, #12]
 801b042:	b954      	cbnz	r4, 801b05a <__assert_func+0x26>
 801b044:	4b07      	ldr	r3, [pc, #28]	@ (801b064 <__assert_func+0x30>)
 801b046:	461c      	mov	r4, r3
 801b048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b04c:	9100      	str	r1, [sp, #0]
 801b04e:	462b      	mov	r3, r5
 801b050:	4905      	ldr	r1, [pc, #20]	@ (801b068 <__assert_func+0x34>)
 801b052:	f000 f841 	bl	801b0d8 <fiprintf>
 801b056:	f000 f851 	bl	801b0fc <abort>
 801b05a:	4b04      	ldr	r3, [pc, #16]	@ (801b06c <__assert_func+0x38>)
 801b05c:	e7f4      	b.n	801b048 <__assert_func+0x14>
 801b05e:	bf00      	nop
 801b060:	24013a2c 	.word	0x24013a2c
 801b064:	0804b966 	.word	0x0804b966
 801b068:	0804b938 	.word	0x0804b938
 801b06c:	0804b92b 	.word	0x0804b92b

0801b070 <_calloc_r>:
 801b070:	b570      	push	{r4, r5, r6, lr}
 801b072:	fba1 5402 	umull	r5, r4, r1, r2
 801b076:	b93c      	cbnz	r4, 801b088 <_calloc_r+0x18>
 801b078:	4629      	mov	r1, r5
 801b07a:	f7fd fd27 	bl	8018acc <_malloc_r>
 801b07e:	4606      	mov	r6, r0
 801b080:	b928      	cbnz	r0, 801b08e <_calloc_r+0x1e>
 801b082:	2600      	movs	r6, #0
 801b084:	4630      	mov	r0, r6
 801b086:	bd70      	pop	{r4, r5, r6, pc}
 801b088:	220c      	movs	r2, #12
 801b08a:	6002      	str	r2, [r0, #0]
 801b08c:	e7f9      	b.n	801b082 <_calloc_r+0x12>
 801b08e:	462a      	mov	r2, r5
 801b090:	4621      	mov	r1, r4
 801b092:	f7fe fb80 	bl	8019796 <memset>
 801b096:	e7f5      	b.n	801b084 <_calloc_r+0x14>

0801b098 <__ascii_mbtowc>:
 801b098:	b082      	sub	sp, #8
 801b09a:	b901      	cbnz	r1, 801b09e <__ascii_mbtowc+0x6>
 801b09c:	a901      	add	r1, sp, #4
 801b09e:	b142      	cbz	r2, 801b0b2 <__ascii_mbtowc+0x1a>
 801b0a0:	b14b      	cbz	r3, 801b0b6 <__ascii_mbtowc+0x1e>
 801b0a2:	7813      	ldrb	r3, [r2, #0]
 801b0a4:	600b      	str	r3, [r1, #0]
 801b0a6:	7812      	ldrb	r2, [r2, #0]
 801b0a8:	1e10      	subs	r0, r2, #0
 801b0aa:	bf18      	it	ne
 801b0ac:	2001      	movne	r0, #1
 801b0ae:	b002      	add	sp, #8
 801b0b0:	4770      	bx	lr
 801b0b2:	4610      	mov	r0, r2
 801b0b4:	e7fb      	b.n	801b0ae <__ascii_mbtowc+0x16>
 801b0b6:	f06f 0001 	mvn.w	r0, #1
 801b0ba:	e7f8      	b.n	801b0ae <__ascii_mbtowc+0x16>

0801b0bc <__ascii_wctomb>:
 801b0bc:	4603      	mov	r3, r0
 801b0be:	4608      	mov	r0, r1
 801b0c0:	b141      	cbz	r1, 801b0d4 <__ascii_wctomb+0x18>
 801b0c2:	2aff      	cmp	r2, #255	@ 0xff
 801b0c4:	d904      	bls.n	801b0d0 <__ascii_wctomb+0x14>
 801b0c6:	228a      	movs	r2, #138	@ 0x8a
 801b0c8:	601a      	str	r2, [r3, #0]
 801b0ca:	f04f 30ff 	mov.w	r0, #4294967295
 801b0ce:	4770      	bx	lr
 801b0d0:	700a      	strb	r2, [r1, #0]
 801b0d2:	2001      	movs	r0, #1
 801b0d4:	4770      	bx	lr
	...

0801b0d8 <fiprintf>:
 801b0d8:	b40e      	push	{r1, r2, r3}
 801b0da:	b503      	push	{r0, r1, lr}
 801b0dc:	4601      	mov	r1, r0
 801b0de:	ab03      	add	r3, sp, #12
 801b0e0:	4805      	ldr	r0, [pc, #20]	@ (801b0f8 <fiprintf+0x20>)
 801b0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0e6:	6800      	ldr	r0, [r0, #0]
 801b0e8:	9301      	str	r3, [sp, #4]
 801b0ea:	f000 f837 	bl	801b15c <_vfiprintf_r>
 801b0ee:	b002      	add	sp, #8
 801b0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b0f4:	b003      	add	sp, #12
 801b0f6:	4770      	bx	lr
 801b0f8:	24013a2c 	.word	0x24013a2c

0801b0fc <abort>:
 801b0fc:	b508      	push	{r3, lr}
 801b0fe:	2006      	movs	r0, #6
 801b100:	f000 fa00 	bl	801b504 <raise>
 801b104:	2001      	movs	r0, #1
 801b106:	f000 fcb9 	bl	801ba7c <_exit>

0801b10a <__sfputc_r>:
 801b10a:	6893      	ldr	r3, [r2, #8]
 801b10c:	3b01      	subs	r3, #1
 801b10e:	2b00      	cmp	r3, #0
 801b110:	b410      	push	{r4}
 801b112:	6093      	str	r3, [r2, #8]
 801b114:	da08      	bge.n	801b128 <__sfputc_r+0x1e>
 801b116:	6994      	ldr	r4, [r2, #24]
 801b118:	42a3      	cmp	r3, r4
 801b11a:	db01      	blt.n	801b120 <__sfputc_r+0x16>
 801b11c:	290a      	cmp	r1, #10
 801b11e:	d103      	bne.n	801b128 <__sfputc_r+0x1e>
 801b120:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b124:	f000 b932 	b.w	801b38c <__swbuf_r>
 801b128:	6813      	ldr	r3, [r2, #0]
 801b12a:	1c58      	adds	r0, r3, #1
 801b12c:	6010      	str	r0, [r2, #0]
 801b12e:	7019      	strb	r1, [r3, #0]
 801b130:	4608      	mov	r0, r1
 801b132:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b136:	4770      	bx	lr

0801b138 <__sfputs_r>:
 801b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b13a:	4606      	mov	r6, r0
 801b13c:	460f      	mov	r7, r1
 801b13e:	4614      	mov	r4, r2
 801b140:	18d5      	adds	r5, r2, r3
 801b142:	42ac      	cmp	r4, r5
 801b144:	d101      	bne.n	801b14a <__sfputs_r+0x12>
 801b146:	2000      	movs	r0, #0
 801b148:	e007      	b.n	801b15a <__sfputs_r+0x22>
 801b14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b14e:	463a      	mov	r2, r7
 801b150:	4630      	mov	r0, r6
 801b152:	f7ff ffda 	bl	801b10a <__sfputc_r>
 801b156:	1c43      	adds	r3, r0, #1
 801b158:	d1f3      	bne.n	801b142 <__sfputs_r+0xa>
 801b15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b15c <_vfiprintf_r>:
 801b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b160:	460d      	mov	r5, r1
 801b162:	b09d      	sub	sp, #116	@ 0x74
 801b164:	4614      	mov	r4, r2
 801b166:	4698      	mov	r8, r3
 801b168:	4606      	mov	r6, r0
 801b16a:	b118      	cbz	r0, 801b174 <_vfiprintf_r+0x18>
 801b16c:	6a03      	ldr	r3, [r0, #32]
 801b16e:	b90b      	cbnz	r3, 801b174 <_vfiprintf_r+0x18>
 801b170:	f7fe fa2a 	bl	80195c8 <__sinit>
 801b174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b176:	07d9      	lsls	r1, r3, #31
 801b178:	d405      	bmi.n	801b186 <_vfiprintf_r+0x2a>
 801b17a:	89ab      	ldrh	r3, [r5, #12]
 801b17c:	059a      	lsls	r2, r3, #22
 801b17e:	d402      	bmi.n	801b186 <_vfiprintf_r+0x2a>
 801b180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b182:	f7fe fb90 	bl	80198a6 <__retarget_lock_acquire_recursive>
 801b186:	89ab      	ldrh	r3, [r5, #12]
 801b188:	071b      	lsls	r3, r3, #28
 801b18a:	d501      	bpl.n	801b190 <_vfiprintf_r+0x34>
 801b18c:	692b      	ldr	r3, [r5, #16]
 801b18e:	b99b      	cbnz	r3, 801b1b8 <_vfiprintf_r+0x5c>
 801b190:	4629      	mov	r1, r5
 801b192:	4630      	mov	r0, r6
 801b194:	f000 f938 	bl	801b408 <__swsetup_r>
 801b198:	b170      	cbz	r0, 801b1b8 <_vfiprintf_r+0x5c>
 801b19a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b19c:	07dc      	lsls	r4, r3, #31
 801b19e:	d504      	bpl.n	801b1aa <_vfiprintf_r+0x4e>
 801b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b1a4:	b01d      	add	sp, #116	@ 0x74
 801b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1aa:	89ab      	ldrh	r3, [r5, #12]
 801b1ac:	0598      	lsls	r0, r3, #22
 801b1ae:	d4f7      	bmi.n	801b1a0 <_vfiprintf_r+0x44>
 801b1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b1b2:	f7fe fb79 	bl	80198a8 <__retarget_lock_release_recursive>
 801b1b6:	e7f3      	b.n	801b1a0 <_vfiprintf_r+0x44>
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1bc:	2320      	movs	r3, #32
 801b1be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 801b1c6:	2330      	movs	r3, #48	@ 0x30
 801b1c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b378 <_vfiprintf_r+0x21c>
 801b1cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b1d0:	f04f 0901 	mov.w	r9, #1
 801b1d4:	4623      	mov	r3, r4
 801b1d6:	469a      	mov	sl, r3
 801b1d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1dc:	b10a      	cbz	r2, 801b1e2 <_vfiprintf_r+0x86>
 801b1de:	2a25      	cmp	r2, #37	@ 0x25
 801b1e0:	d1f9      	bne.n	801b1d6 <_vfiprintf_r+0x7a>
 801b1e2:	ebba 0b04 	subs.w	fp, sl, r4
 801b1e6:	d00b      	beq.n	801b200 <_vfiprintf_r+0xa4>
 801b1e8:	465b      	mov	r3, fp
 801b1ea:	4622      	mov	r2, r4
 801b1ec:	4629      	mov	r1, r5
 801b1ee:	4630      	mov	r0, r6
 801b1f0:	f7ff ffa2 	bl	801b138 <__sfputs_r>
 801b1f4:	3001      	adds	r0, #1
 801b1f6:	f000 80a7 	beq.w	801b348 <_vfiprintf_r+0x1ec>
 801b1fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1fc:	445a      	add	r2, fp
 801b1fe:	9209      	str	r2, [sp, #36]	@ 0x24
 801b200:	f89a 3000 	ldrb.w	r3, [sl]
 801b204:	2b00      	cmp	r3, #0
 801b206:	f000 809f 	beq.w	801b348 <_vfiprintf_r+0x1ec>
 801b20a:	2300      	movs	r3, #0
 801b20c:	f04f 32ff 	mov.w	r2, #4294967295
 801b210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b214:	f10a 0a01 	add.w	sl, sl, #1
 801b218:	9304      	str	r3, [sp, #16]
 801b21a:	9307      	str	r3, [sp, #28]
 801b21c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b220:	931a      	str	r3, [sp, #104]	@ 0x68
 801b222:	4654      	mov	r4, sl
 801b224:	2205      	movs	r2, #5
 801b226:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b22a:	4853      	ldr	r0, [pc, #332]	@ (801b378 <_vfiprintf_r+0x21c>)
 801b22c:	f7e5 f858 	bl	80002e0 <memchr>
 801b230:	9a04      	ldr	r2, [sp, #16]
 801b232:	b9d8      	cbnz	r0, 801b26c <_vfiprintf_r+0x110>
 801b234:	06d1      	lsls	r1, r2, #27
 801b236:	bf44      	itt	mi
 801b238:	2320      	movmi	r3, #32
 801b23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b23e:	0713      	lsls	r3, r2, #28
 801b240:	bf44      	itt	mi
 801b242:	232b      	movmi	r3, #43	@ 0x2b
 801b244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b248:	f89a 3000 	ldrb.w	r3, [sl]
 801b24c:	2b2a      	cmp	r3, #42	@ 0x2a
 801b24e:	d015      	beq.n	801b27c <_vfiprintf_r+0x120>
 801b250:	9a07      	ldr	r2, [sp, #28]
 801b252:	4654      	mov	r4, sl
 801b254:	2000      	movs	r0, #0
 801b256:	f04f 0c0a 	mov.w	ip, #10
 801b25a:	4621      	mov	r1, r4
 801b25c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b260:	3b30      	subs	r3, #48	@ 0x30
 801b262:	2b09      	cmp	r3, #9
 801b264:	d94b      	bls.n	801b2fe <_vfiprintf_r+0x1a2>
 801b266:	b1b0      	cbz	r0, 801b296 <_vfiprintf_r+0x13a>
 801b268:	9207      	str	r2, [sp, #28]
 801b26a:	e014      	b.n	801b296 <_vfiprintf_r+0x13a>
 801b26c:	eba0 0308 	sub.w	r3, r0, r8
 801b270:	fa09 f303 	lsl.w	r3, r9, r3
 801b274:	4313      	orrs	r3, r2
 801b276:	9304      	str	r3, [sp, #16]
 801b278:	46a2      	mov	sl, r4
 801b27a:	e7d2      	b.n	801b222 <_vfiprintf_r+0xc6>
 801b27c:	9b03      	ldr	r3, [sp, #12]
 801b27e:	1d19      	adds	r1, r3, #4
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	9103      	str	r1, [sp, #12]
 801b284:	2b00      	cmp	r3, #0
 801b286:	bfbb      	ittet	lt
 801b288:	425b      	neglt	r3, r3
 801b28a:	f042 0202 	orrlt.w	r2, r2, #2
 801b28e:	9307      	strge	r3, [sp, #28]
 801b290:	9307      	strlt	r3, [sp, #28]
 801b292:	bfb8      	it	lt
 801b294:	9204      	strlt	r2, [sp, #16]
 801b296:	7823      	ldrb	r3, [r4, #0]
 801b298:	2b2e      	cmp	r3, #46	@ 0x2e
 801b29a:	d10a      	bne.n	801b2b2 <_vfiprintf_r+0x156>
 801b29c:	7863      	ldrb	r3, [r4, #1]
 801b29e:	2b2a      	cmp	r3, #42	@ 0x2a
 801b2a0:	d132      	bne.n	801b308 <_vfiprintf_r+0x1ac>
 801b2a2:	9b03      	ldr	r3, [sp, #12]
 801b2a4:	1d1a      	adds	r2, r3, #4
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	9203      	str	r2, [sp, #12]
 801b2aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b2ae:	3402      	adds	r4, #2
 801b2b0:	9305      	str	r3, [sp, #20]
 801b2b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b388 <_vfiprintf_r+0x22c>
 801b2b6:	7821      	ldrb	r1, [r4, #0]
 801b2b8:	2203      	movs	r2, #3
 801b2ba:	4650      	mov	r0, sl
 801b2bc:	f7e5 f810 	bl	80002e0 <memchr>
 801b2c0:	b138      	cbz	r0, 801b2d2 <_vfiprintf_r+0x176>
 801b2c2:	9b04      	ldr	r3, [sp, #16]
 801b2c4:	eba0 000a 	sub.w	r0, r0, sl
 801b2c8:	2240      	movs	r2, #64	@ 0x40
 801b2ca:	4082      	lsls	r2, r0
 801b2cc:	4313      	orrs	r3, r2
 801b2ce:	3401      	adds	r4, #1
 801b2d0:	9304      	str	r3, [sp, #16]
 801b2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2d6:	4829      	ldr	r0, [pc, #164]	@ (801b37c <_vfiprintf_r+0x220>)
 801b2d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b2dc:	2206      	movs	r2, #6
 801b2de:	f7e4 ffff 	bl	80002e0 <memchr>
 801b2e2:	2800      	cmp	r0, #0
 801b2e4:	d03f      	beq.n	801b366 <_vfiprintf_r+0x20a>
 801b2e6:	4b26      	ldr	r3, [pc, #152]	@ (801b380 <_vfiprintf_r+0x224>)
 801b2e8:	bb1b      	cbnz	r3, 801b332 <_vfiprintf_r+0x1d6>
 801b2ea:	9b03      	ldr	r3, [sp, #12]
 801b2ec:	3307      	adds	r3, #7
 801b2ee:	f023 0307 	bic.w	r3, r3, #7
 801b2f2:	3308      	adds	r3, #8
 801b2f4:	9303      	str	r3, [sp, #12]
 801b2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b2f8:	443b      	add	r3, r7
 801b2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2fc:	e76a      	b.n	801b1d4 <_vfiprintf_r+0x78>
 801b2fe:	fb0c 3202 	mla	r2, ip, r2, r3
 801b302:	460c      	mov	r4, r1
 801b304:	2001      	movs	r0, #1
 801b306:	e7a8      	b.n	801b25a <_vfiprintf_r+0xfe>
 801b308:	2300      	movs	r3, #0
 801b30a:	3401      	adds	r4, #1
 801b30c:	9305      	str	r3, [sp, #20]
 801b30e:	4619      	mov	r1, r3
 801b310:	f04f 0c0a 	mov.w	ip, #10
 801b314:	4620      	mov	r0, r4
 801b316:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b31a:	3a30      	subs	r2, #48	@ 0x30
 801b31c:	2a09      	cmp	r2, #9
 801b31e:	d903      	bls.n	801b328 <_vfiprintf_r+0x1cc>
 801b320:	2b00      	cmp	r3, #0
 801b322:	d0c6      	beq.n	801b2b2 <_vfiprintf_r+0x156>
 801b324:	9105      	str	r1, [sp, #20]
 801b326:	e7c4      	b.n	801b2b2 <_vfiprintf_r+0x156>
 801b328:	fb0c 2101 	mla	r1, ip, r1, r2
 801b32c:	4604      	mov	r4, r0
 801b32e:	2301      	movs	r3, #1
 801b330:	e7f0      	b.n	801b314 <_vfiprintf_r+0x1b8>
 801b332:	ab03      	add	r3, sp, #12
 801b334:	9300      	str	r3, [sp, #0]
 801b336:	462a      	mov	r2, r5
 801b338:	4b12      	ldr	r3, [pc, #72]	@ (801b384 <_vfiprintf_r+0x228>)
 801b33a:	a904      	add	r1, sp, #16
 801b33c:	4630      	mov	r0, r6
 801b33e:	f7fd fd0f 	bl	8018d60 <_printf_float>
 801b342:	4607      	mov	r7, r0
 801b344:	1c78      	adds	r0, r7, #1
 801b346:	d1d6      	bne.n	801b2f6 <_vfiprintf_r+0x19a>
 801b348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b34a:	07d9      	lsls	r1, r3, #31
 801b34c:	d405      	bmi.n	801b35a <_vfiprintf_r+0x1fe>
 801b34e:	89ab      	ldrh	r3, [r5, #12]
 801b350:	059a      	lsls	r2, r3, #22
 801b352:	d402      	bmi.n	801b35a <_vfiprintf_r+0x1fe>
 801b354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b356:	f7fe faa7 	bl	80198a8 <__retarget_lock_release_recursive>
 801b35a:	89ab      	ldrh	r3, [r5, #12]
 801b35c:	065b      	lsls	r3, r3, #25
 801b35e:	f53f af1f 	bmi.w	801b1a0 <_vfiprintf_r+0x44>
 801b362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b364:	e71e      	b.n	801b1a4 <_vfiprintf_r+0x48>
 801b366:	ab03      	add	r3, sp, #12
 801b368:	9300      	str	r3, [sp, #0]
 801b36a:	462a      	mov	r2, r5
 801b36c:	4b05      	ldr	r3, [pc, #20]	@ (801b384 <_vfiprintf_r+0x228>)
 801b36e:	a904      	add	r1, sp, #16
 801b370:	4630      	mov	r0, r6
 801b372:	f7fd ff7d 	bl	8019270 <_printf_i>
 801b376:	e7e4      	b.n	801b342 <_vfiprintf_r+0x1e6>
 801b378:	0804b910 	.word	0x0804b910
 801b37c:	0804b91a 	.word	0x0804b91a
 801b380:	08018d61 	.word	0x08018d61
 801b384:	0801b139 	.word	0x0801b139
 801b388:	0804b916 	.word	0x0804b916

0801b38c <__swbuf_r>:
 801b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b38e:	460e      	mov	r6, r1
 801b390:	4614      	mov	r4, r2
 801b392:	4605      	mov	r5, r0
 801b394:	b118      	cbz	r0, 801b39e <__swbuf_r+0x12>
 801b396:	6a03      	ldr	r3, [r0, #32]
 801b398:	b90b      	cbnz	r3, 801b39e <__swbuf_r+0x12>
 801b39a:	f7fe f915 	bl	80195c8 <__sinit>
 801b39e:	69a3      	ldr	r3, [r4, #24]
 801b3a0:	60a3      	str	r3, [r4, #8]
 801b3a2:	89a3      	ldrh	r3, [r4, #12]
 801b3a4:	071a      	lsls	r2, r3, #28
 801b3a6:	d501      	bpl.n	801b3ac <__swbuf_r+0x20>
 801b3a8:	6923      	ldr	r3, [r4, #16]
 801b3aa:	b943      	cbnz	r3, 801b3be <__swbuf_r+0x32>
 801b3ac:	4621      	mov	r1, r4
 801b3ae:	4628      	mov	r0, r5
 801b3b0:	f000 f82a 	bl	801b408 <__swsetup_r>
 801b3b4:	b118      	cbz	r0, 801b3be <__swbuf_r+0x32>
 801b3b6:	f04f 37ff 	mov.w	r7, #4294967295
 801b3ba:	4638      	mov	r0, r7
 801b3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3be:	6823      	ldr	r3, [r4, #0]
 801b3c0:	6922      	ldr	r2, [r4, #16]
 801b3c2:	1a98      	subs	r0, r3, r2
 801b3c4:	6963      	ldr	r3, [r4, #20]
 801b3c6:	b2f6      	uxtb	r6, r6
 801b3c8:	4283      	cmp	r3, r0
 801b3ca:	4637      	mov	r7, r6
 801b3cc:	dc05      	bgt.n	801b3da <__swbuf_r+0x4e>
 801b3ce:	4621      	mov	r1, r4
 801b3d0:	4628      	mov	r0, r5
 801b3d2:	f7ff fe07 	bl	801afe4 <_fflush_r>
 801b3d6:	2800      	cmp	r0, #0
 801b3d8:	d1ed      	bne.n	801b3b6 <__swbuf_r+0x2a>
 801b3da:	68a3      	ldr	r3, [r4, #8]
 801b3dc:	3b01      	subs	r3, #1
 801b3de:	60a3      	str	r3, [r4, #8]
 801b3e0:	6823      	ldr	r3, [r4, #0]
 801b3e2:	1c5a      	adds	r2, r3, #1
 801b3e4:	6022      	str	r2, [r4, #0]
 801b3e6:	701e      	strb	r6, [r3, #0]
 801b3e8:	6962      	ldr	r2, [r4, #20]
 801b3ea:	1c43      	adds	r3, r0, #1
 801b3ec:	429a      	cmp	r2, r3
 801b3ee:	d004      	beq.n	801b3fa <__swbuf_r+0x6e>
 801b3f0:	89a3      	ldrh	r3, [r4, #12]
 801b3f2:	07db      	lsls	r3, r3, #31
 801b3f4:	d5e1      	bpl.n	801b3ba <__swbuf_r+0x2e>
 801b3f6:	2e0a      	cmp	r6, #10
 801b3f8:	d1df      	bne.n	801b3ba <__swbuf_r+0x2e>
 801b3fa:	4621      	mov	r1, r4
 801b3fc:	4628      	mov	r0, r5
 801b3fe:	f7ff fdf1 	bl	801afe4 <_fflush_r>
 801b402:	2800      	cmp	r0, #0
 801b404:	d0d9      	beq.n	801b3ba <__swbuf_r+0x2e>
 801b406:	e7d6      	b.n	801b3b6 <__swbuf_r+0x2a>

0801b408 <__swsetup_r>:
 801b408:	b538      	push	{r3, r4, r5, lr}
 801b40a:	4b29      	ldr	r3, [pc, #164]	@ (801b4b0 <__swsetup_r+0xa8>)
 801b40c:	4605      	mov	r5, r0
 801b40e:	6818      	ldr	r0, [r3, #0]
 801b410:	460c      	mov	r4, r1
 801b412:	b118      	cbz	r0, 801b41c <__swsetup_r+0x14>
 801b414:	6a03      	ldr	r3, [r0, #32]
 801b416:	b90b      	cbnz	r3, 801b41c <__swsetup_r+0x14>
 801b418:	f7fe f8d6 	bl	80195c8 <__sinit>
 801b41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b420:	0719      	lsls	r1, r3, #28
 801b422:	d422      	bmi.n	801b46a <__swsetup_r+0x62>
 801b424:	06da      	lsls	r2, r3, #27
 801b426:	d407      	bmi.n	801b438 <__swsetup_r+0x30>
 801b428:	2209      	movs	r2, #9
 801b42a:	602a      	str	r2, [r5, #0]
 801b42c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b430:	81a3      	strh	r3, [r4, #12]
 801b432:	f04f 30ff 	mov.w	r0, #4294967295
 801b436:	e033      	b.n	801b4a0 <__swsetup_r+0x98>
 801b438:	0758      	lsls	r0, r3, #29
 801b43a:	d512      	bpl.n	801b462 <__swsetup_r+0x5a>
 801b43c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b43e:	b141      	cbz	r1, 801b452 <__swsetup_r+0x4a>
 801b440:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b444:	4299      	cmp	r1, r3
 801b446:	d002      	beq.n	801b44e <__swsetup_r+0x46>
 801b448:	4628      	mov	r0, r5
 801b44a:	f7ff f81b 	bl	801a484 <_free_r>
 801b44e:	2300      	movs	r3, #0
 801b450:	6363      	str	r3, [r4, #52]	@ 0x34
 801b452:	89a3      	ldrh	r3, [r4, #12]
 801b454:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b458:	81a3      	strh	r3, [r4, #12]
 801b45a:	2300      	movs	r3, #0
 801b45c:	6063      	str	r3, [r4, #4]
 801b45e:	6923      	ldr	r3, [r4, #16]
 801b460:	6023      	str	r3, [r4, #0]
 801b462:	89a3      	ldrh	r3, [r4, #12]
 801b464:	f043 0308 	orr.w	r3, r3, #8
 801b468:	81a3      	strh	r3, [r4, #12]
 801b46a:	6923      	ldr	r3, [r4, #16]
 801b46c:	b94b      	cbnz	r3, 801b482 <__swsetup_r+0x7a>
 801b46e:	89a3      	ldrh	r3, [r4, #12]
 801b470:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b478:	d003      	beq.n	801b482 <__swsetup_r+0x7a>
 801b47a:	4621      	mov	r1, r4
 801b47c:	4628      	mov	r0, r5
 801b47e:	f000 f883 	bl	801b588 <__smakebuf_r>
 801b482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b486:	f013 0201 	ands.w	r2, r3, #1
 801b48a:	d00a      	beq.n	801b4a2 <__swsetup_r+0x9a>
 801b48c:	2200      	movs	r2, #0
 801b48e:	60a2      	str	r2, [r4, #8]
 801b490:	6962      	ldr	r2, [r4, #20]
 801b492:	4252      	negs	r2, r2
 801b494:	61a2      	str	r2, [r4, #24]
 801b496:	6922      	ldr	r2, [r4, #16]
 801b498:	b942      	cbnz	r2, 801b4ac <__swsetup_r+0xa4>
 801b49a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b49e:	d1c5      	bne.n	801b42c <__swsetup_r+0x24>
 801b4a0:	bd38      	pop	{r3, r4, r5, pc}
 801b4a2:	0799      	lsls	r1, r3, #30
 801b4a4:	bf58      	it	pl
 801b4a6:	6962      	ldrpl	r2, [r4, #20]
 801b4a8:	60a2      	str	r2, [r4, #8]
 801b4aa:	e7f4      	b.n	801b496 <__swsetup_r+0x8e>
 801b4ac:	2000      	movs	r0, #0
 801b4ae:	e7f7      	b.n	801b4a0 <__swsetup_r+0x98>
 801b4b0:	24013a2c 	.word	0x24013a2c

0801b4b4 <_raise_r>:
 801b4b4:	291f      	cmp	r1, #31
 801b4b6:	b538      	push	{r3, r4, r5, lr}
 801b4b8:	4605      	mov	r5, r0
 801b4ba:	460c      	mov	r4, r1
 801b4bc:	d904      	bls.n	801b4c8 <_raise_r+0x14>
 801b4be:	2316      	movs	r3, #22
 801b4c0:	6003      	str	r3, [r0, #0]
 801b4c2:	f04f 30ff 	mov.w	r0, #4294967295
 801b4c6:	bd38      	pop	{r3, r4, r5, pc}
 801b4c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b4ca:	b112      	cbz	r2, 801b4d2 <_raise_r+0x1e>
 801b4cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b4d0:	b94b      	cbnz	r3, 801b4e6 <_raise_r+0x32>
 801b4d2:	4628      	mov	r0, r5
 801b4d4:	f000 f830 	bl	801b538 <_getpid_r>
 801b4d8:	4622      	mov	r2, r4
 801b4da:	4601      	mov	r1, r0
 801b4dc:	4628      	mov	r0, r5
 801b4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b4e2:	f000 b817 	b.w	801b514 <_kill_r>
 801b4e6:	2b01      	cmp	r3, #1
 801b4e8:	d00a      	beq.n	801b500 <_raise_r+0x4c>
 801b4ea:	1c59      	adds	r1, r3, #1
 801b4ec:	d103      	bne.n	801b4f6 <_raise_r+0x42>
 801b4ee:	2316      	movs	r3, #22
 801b4f0:	6003      	str	r3, [r0, #0]
 801b4f2:	2001      	movs	r0, #1
 801b4f4:	e7e7      	b.n	801b4c6 <_raise_r+0x12>
 801b4f6:	2100      	movs	r1, #0
 801b4f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	4798      	blx	r3
 801b500:	2000      	movs	r0, #0
 801b502:	e7e0      	b.n	801b4c6 <_raise_r+0x12>

0801b504 <raise>:
 801b504:	4b02      	ldr	r3, [pc, #8]	@ (801b510 <raise+0xc>)
 801b506:	4601      	mov	r1, r0
 801b508:	6818      	ldr	r0, [r3, #0]
 801b50a:	f7ff bfd3 	b.w	801b4b4 <_raise_r>
 801b50e:	bf00      	nop
 801b510:	24013a2c 	.word	0x24013a2c

0801b514 <_kill_r>:
 801b514:	b538      	push	{r3, r4, r5, lr}
 801b516:	4d07      	ldr	r5, [pc, #28]	@ (801b534 <_kill_r+0x20>)
 801b518:	2300      	movs	r3, #0
 801b51a:	4604      	mov	r4, r0
 801b51c:	4608      	mov	r0, r1
 801b51e:	4611      	mov	r1, r2
 801b520:	602b      	str	r3, [r5, #0]
 801b522:	f000 fa7d 	bl	801ba20 <_kill>
 801b526:	1c43      	adds	r3, r0, #1
 801b528:	d102      	bne.n	801b530 <_kill_r+0x1c>
 801b52a:	682b      	ldr	r3, [r5, #0]
 801b52c:	b103      	cbz	r3, 801b530 <_kill_r+0x1c>
 801b52e:	6023      	str	r3, [r4, #0]
 801b530:	bd38      	pop	{r3, r4, r5, pc}
 801b532:	bf00      	nop
 801b534:	24015c14 	.word	0x24015c14

0801b538 <_getpid_r>:
 801b538:	f000 ba62 	b.w	801ba00 <_getpid>

0801b53c <__swhatbuf_r>:
 801b53c:	b570      	push	{r4, r5, r6, lr}
 801b53e:	460c      	mov	r4, r1
 801b540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b544:	2900      	cmp	r1, #0
 801b546:	b096      	sub	sp, #88	@ 0x58
 801b548:	4615      	mov	r5, r2
 801b54a:	461e      	mov	r6, r3
 801b54c:	da0d      	bge.n	801b56a <__swhatbuf_r+0x2e>
 801b54e:	89a3      	ldrh	r3, [r4, #12]
 801b550:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b554:	f04f 0100 	mov.w	r1, #0
 801b558:	bf14      	ite	ne
 801b55a:	2340      	movne	r3, #64	@ 0x40
 801b55c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b560:	2000      	movs	r0, #0
 801b562:	6031      	str	r1, [r6, #0]
 801b564:	602b      	str	r3, [r5, #0]
 801b566:	b016      	add	sp, #88	@ 0x58
 801b568:	bd70      	pop	{r4, r5, r6, pc}
 801b56a:	466a      	mov	r2, sp
 801b56c:	f000 f848 	bl	801b600 <_fstat_r>
 801b570:	2800      	cmp	r0, #0
 801b572:	dbec      	blt.n	801b54e <__swhatbuf_r+0x12>
 801b574:	9901      	ldr	r1, [sp, #4]
 801b576:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b57a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b57e:	4259      	negs	r1, r3
 801b580:	4159      	adcs	r1, r3
 801b582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b586:	e7eb      	b.n	801b560 <__swhatbuf_r+0x24>

0801b588 <__smakebuf_r>:
 801b588:	898b      	ldrh	r3, [r1, #12]
 801b58a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b58c:	079d      	lsls	r5, r3, #30
 801b58e:	4606      	mov	r6, r0
 801b590:	460c      	mov	r4, r1
 801b592:	d507      	bpl.n	801b5a4 <__smakebuf_r+0x1c>
 801b594:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b598:	6023      	str	r3, [r4, #0]
 801b59a:	6123      	str	r3, [r4, #16]
 801b59c:	2301      	movs	r3, #1
 801b59e:	6163      	str	r3, [r4, #20]
 801b5a0:	b003      	add	sp, #12
 801b5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5a4:	ab01      	add	r3, sp, #4
 801b5a6:	466a      	mov	r2, sp
 801b5a8:	f7ff ffc8 	bl	801b53c <__swhatbuf_r>
 801b5ac:	9f00      	ldr	r7, [sp, #0]
 801b5ae:	4605      	mov	r5, r0
 801b5b0:	4639      	mov	r1, r7
 801b5b2:	4630      	mov	r0, r6
 801b5b4:	f7fd fa8a 	bl	8018acc <_malloc_r>
 801b5b8:	b948      	cbnz	r0, 801b5ce <__smakebuf_r+0x46>
 801b5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5be:	059a      	lsls	r2, r3, #22
 801b5c0:	d4ee      	bmi.n	801b5a0 <__smakebuf_r+0x18>
 801b5c2:	f023 0303 	bic.w	r3, r3, #3
 801b5c6:	f043 0302 	orr.w	r3, r3, #2
 801b5ca:	81a3      	strh	r3, [r4, #12]
 801b5cc:	e7e2      	b.n	801b594 <__smakebuf_r+0xc>
 801b5ce:	89a3      	ldrh	r3, [r4, #12]
 801b5d0:	6020      	str	r0, [r4, #0]
 801b5d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b5d6:	81a3      	strh	r3, [r4, #12]
 801b5d8:	9b01      	ldr	r3, [sp, #4]
 801b5da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b5de:	b15b      	cbz	r3, 801b5f8 <__smakebuf_r+0x70>
 801b5e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5e4:	4630      	mov	r0, r6
 801b5e6:	f000 f81d 	bl	801b624 <_isatty_r>
 801b5ea:	b128      	cbz	r0, 801b5f8 <__smakebuf_r+0x70>
 801b5ec:	89a3      	ldrh	r3, [r4, #12]
 801b5ee:	f023 0303 	bic.w	r3, r3, #3
 801b5f2:	f043 0301 	orr.w	r3, r3, #1
 801b5f6:	81a3      	strh	r3, [r4, #12]
 801b5f8:	89a3      	ldrh	r3, [r4, #12]
 801b5fa:	431d      	orrs	r5, r3
 801b5fc:	81a5      	strh	r5, [r4, #12]
 801b5fe:	e7cf      	b.n	801b5a0 <__smakebuf_r+0x18>

0801b600 <_fstat_r>:
 801b600:	b538      	push	{r3, r4, r5, lr}
 801b602:	4d07      	ldr	r5, [pc, #28]	@ (801b620 <_fstat_r+0x20>)
 801b604:	2300      	movs	r3, #0
 801b606:	4604      	mov	r4, r0
 801b608:	4608      	mov	r0, r1
 801b60a:	4611      	mov	r1, r2
 801b60c:	602b      	str	r3, [r5, #0]
 801b60e:	f000 f9ef 	bl	801b9f0 <_fstat>
 801b612:	1c43      	adds	r3, r0, #1
 801b614:	d102      	bne.n	801b61c <_fstat_r+0x1c>
 801b616:	682b      	ldr	r3, [r5, #0]
 801b618:	b103      	cbz	r3, 801b61c <_fstat_r+0x1c>
 801b61a:	6023      	str	r3, [r4, #0]
 801b61c:	bd38      	pop	{r3, r4, r5, pc}
 801b61e:	bf00      	nop
 801b620:	24015c14 	.word	0x24015c14

0801b624 <_isatty_r>:
 801b624:	b538      	push	{r3, r4, r5, lr}
 801b626:	4d06      	ldr	r5, [pc, #24]	@ (801b640 <_isatty_r+0x1c>)
 801b628:	2300      	movs	r3, #0
 801b62a:	4604      	mov	r4, r0
 801b62c:	4608      	mov	r0, r1
 801b62e:	602b      	str	r3, [r5, #0]
 801b630:	f000 f9ee 	bl	801ba10 <_isatty>
 801b634:	1c43      	adds	r3, r0, #1
 801b636:	d102      	bne.n	801b63e <_isatty_r+0x1a>
 801b638:	682b      	ldr	r3, [r5, #0]
 801b63a:	b103      	cbz	r3, 801b63e <_isatty_r+0x1a>
 801b63c:	6023      	str	r3, [r4, #0]
 801b63e:	bd38      	pop	{r3, r4, r5, pc}
 801b640:	24015c14 	.word	0x24015c14

0801b644 <checkint>:
 801b644:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801b648:	2b7e      	cmp	r3, #126	@ 0x7e
 801b64a:	d910      	bls.n	801b66e <checkint+0x2a>
 801b64c:	2b96      	cmp	r3, #150	@ 0x96
 801b64e:	d80c      	bhi.n	801b66a <checkint+0x26>
 801b650:	2201      	movs	r2, #1
 801b652:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801b656:	fa02 f303 	lsl.w	r3, r2, r3
 801b65a:	1e5a      	subs	r2, r3, #1
 801b65c:	4202      	tst	r2, r0
 801b65e:	d106      	bne.n	801b66e <checkint+0x2a>
 801b660:	4203      	tst	r3, r0
 801b662:	bf0c      	ite	eq
 801b664:	2002      	moveq	r0, #2
 801b666:	2001      	movne	r0, #1
 801b668:	4770      	bx	lr
 801b66a:	2002      	movs	r0, #2
 801b66c:	4770      	bx	lr
 801b66e:	2000      	movs	r0, #0
 801b670:	4770      	bx	lr
 801b672:	0000      	movs	r0, r0
 801b674:	0000      	movs	r0, r0
	...

0801b678 <powf>:
 801b678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b67a:	ee10 1a10 	vmov	r1, s0
 801b67e:	ee10 4a90 	vmov	r4, s1
 801b682:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 801b686:	0063      	lsls	r3, r4, #1
 801b688:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 801b68c:	eef0 7a40 	vmov.f32	s15, s0
 801b690:	eeb0 7a60 	vmov.f32	s14, s1
 801b694:	f103 30ff 	add.w	r0, r3, #4294967295
 801b698:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 801b69c:	d252      	bcs.n	801b744 <powf+0xcc>
 801b69e:	4290      	cmp	r0, r2
 801b6a0:	d258      	bcs.n	801b754 <powf+0xdc>
 801b6a2:	2000      	movs	r0, #0
 801b6a4:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 801b6a8:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 801b6ac:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801b6b0:	0ddb      	lsrs	r3, r3, #23
 801b6b2:	4a9d      	ldr	r2, [pc, #628]	@ (801b928 <powf+0x2b0>)
 801b6b4:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 801b6b8:	05db      	lsls	r3, r3, #23
 801b6ba:	1ac9      	subs	r1, r1, r3
 801b6bc:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 801b6c0:	ee07 1a90 	vmov	s15, r1
 801b6c4:	ed94 5b02 	vldr	d5, [r4, #8]
 801b6c8:	ed94 4b00 	vldr	d4, [r4]
 801b6cc:	15db      	asrs	r3, r3, #23
 801b6ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 801b6d2:	ee07 3a90 	vmov	s15, r3
 801b6d6:	eea4 2b06 	vfma.f64	d2, d4, d6
 801b6da:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 801b6de:	ee22 4b02 	vmul.f64	d4, d2, d2
 801b6e2:	ee24 0b04 	vmul.f64	d0, d4, d4
 801b6e6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801b6ea:	ee36 6b05 	vadd.f64	d6, d6, d5
 801b6ee:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 801b6f2:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 801b6f6:	eea2 1b05 	vfma.f64	d1, d2, d5
 801b6fa:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 801b6fe:	eea2 5b03 	vfma.f64	d5, d2, d3
 801b702:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 801b706:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801b70a:	eea2 6b03 	vfma.f64	d6, d2, d3
 801b70e:	eea4 6b05 	vfma.f64	d6, d4, d5
 801b712:	eea1 6b00 	vfma.f64	d6, d1, d0
 801b716:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b71a:	ee17 3a90 	vmov	r3, s15
 801b71e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801b722:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 801b726:	429a      	cmp	r2, r3
 801b728:	f0c0 80b8 	bcc.w	801b89c <powf+0x224>
 801b72c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801b908 <powf+0x290>
 801b730:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b738:	dd79      	ble.n	801b82e <powf+0x1b6>
 801b73a:	b003      	add	sp, #12
 801b73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b740:	f000 b920 	b.w	801b984 <__math_oflowf>
 801b744:	4290      	cmp	r0, r2
 801b746:	d330      	bcc.n	801b7aa <powf+0x132>
 801b748:	b12b      	cbz	r3, 801b756 <powf+0xde>
 801b74a:	0049      	lsls	r1, r1, #1
 801b74c:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 801b750:	d808      	bhi.n	801b764 <powf+0xec>
 801b752:	e015      	b.n	801b780 <powf+0x108>
 801b754:	b953      	cbnz	r3, 801b76c <powf+0xf4>
 801b756:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 801b75a:	0049      	lsls	r1, r1, #1
 801b75c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 801b760:	f240 80ca 	bls.w	801b8f8 <powf+0x280>
 801b764:	ee37 0a87 	vadd.f32	s0, s15, s14
 801b768:	b003      	add	sp, #12
 801b76a:	bd30      	pop	{r4, r5, pc}
 801b76c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 801b770:	d105      	bne.n	801b77e <powf+0x106>
 801b772:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801b776:	0064      	lsls	r4, r4, #1
 801b778:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801b77c:	e7f0      	b.n	801b760 <powf+0xe8>
 801b77e:	0049      	lsls	r1, r1, #1
 801b780:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 801b784:	d1ee      	bne.n	801b764 <powf+0xec>
 801b786:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 801b78a:	f000 80b5 	beq.w	801b8f8 <powf+0x280>
 801b78e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 801b792:	ea6f 0404 	mvn.w	r4, r4
 801b796:	bf34      	ite	cc
 801b798:	2100      	movcc	r1, #0
 801b79a:	2101      	movcs	r1, #1
 801b79c:	0fe4      	lsrs	r4, r4, #31
 801b79e:	42a1      	cmp	r1, r4
 801b7a0:	f040 80ad 	bne.w	801b8fe <powf+0x286>
 801b7a4:	ee27 0a07 	vmul.f32	s0, s14, s14
 801b7a8:	e7de      	b.n	801b768 <powf+0xf0>
 801b7aa:	004d      	lsls	r5, r1, #1
 801b7ac:	1e6b      	subs	r3, r5, #1
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d31b      	bcc.n	801b7ea <powf+0x172>
 801b7b2:	2900      	cmp	r1, #0
 801b7b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 801b7b8:	da0e      	bge.n	801b7d8 <powf+0x160>
 801b7ba:	4620      	mov	r0, r4
 801b7bc:	f7ff ff42 	bl	801b644 <checkint>
 801b7c0:	2801      	cmp	r0, #1
 801b7c2:	d109      	bne.n	801b7d8 <powf+0x160>
 801b7c4:	eeb1 0a40 	vneg.f32	s0, s0
 801b7c8:	b945      	cbnz	r5, 801b7dc <powf+0x164>
 801b7ca:	2c00      	cmp	r4, #0
 801b7cc:	dacc      	bge.n	801b768 <powf+0xf0>
 801b7ce:	b003      	add	sp, #12
 801b7d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b7d4:	f000 b8dc 	b.w	801b990 <__math_divzerof>
 801b7d8:	2000      	movs	r0, #0
 801b7da:	e7f5      	b.n	801b7c8 <powf+0x150>
 801b7dc:	2c00      	cmp	r4, #0
 801b7de:	dac3      	bge.n	801b768 <powf+0xf0>
 801b7e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b7e4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801b7e8:	e7be      	b.n	801b768 <powf+0xf0>
 801b7ea:	2900      	cmp	r1, #0
 801b7ec:	da1d      	bge.n	801b82a <powf+0x1b2>
 801b7ee:	4620      	mov	r0, r4
 801b7f0:	f7ff ff28 	bl	801b644 <checkint>
 801b7f4:	b920      	cbnz	r0, 801b800 <powf+0x188>
 801b7f6:	b003      	add	sp, #12
 801b7f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b7fc:	f000 b8da 	b.w	801b9b4 <__math_invalidf>
 801b800:	1e43      	subs	r3, r0, #1
 801b802:	4258      	negs	r0, r3
 801b804:	4158      	adcs	r0, r3
 801b806:	0400      	lsls	r0, r0, #16
 801b808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801b80c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 801b810:	f4bf af48 	bcs.w	801b6a4 <powf+0x2c>
 801b814:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801b92c <powf+0x2b4>
 801b818:	ee27 0aa6 	vmul.f32	s0, s15, s13
 801b81c:	ee10 3a10 	vmov	r3, s0
 801b820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b824:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 801b828:	e73c      	b.n	801b6a4 <powf+0x2c>
 801b82a:	2000      	movs	r0, #0
 801b82c:	e7ee      	b.n	801b80c <powf+0x194>
 801b82e:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 801b910 <powf+0x298>
 801b832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b83a:	dd0f      	ble.n	801b85c <powf+0x1e4>
 801b83c:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 801b840:	b1c0      	cbz	r0, 801b874 <powf+0x1fc>
 801b842:	9301      	str	r3, [sp, #4]
 801b844:	eddd 6a01 	vldr	s13, [sp, #4]
 801b848:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 801b84c:	ee76 6a66 	vsub.f32	s13, s12, s13
 801b850:	eef4 6a46 	vcmp.f32	s13, s12
 801b854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b858:	f47f af6f 	bne.w	801b73a <powf+0xc2>
 801b85c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 801b918 <powf+0x2a0>
 801b860:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b868:	d80c      	bhi.n	801b884 <powf+0x20c>
 801b86a:	b003      	add	sp, #12
 801b86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b870:	f000 b87c 	b.w	801b96c <__math_uflowf>
 801b874:	9300      	str	r3, [sp, #0]
 801b876:	eddd 6a00 	vldr	s13, [sp]
 801b87a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801b87e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b882:	e7e5      	b.n	801b850 <powf+0x1d8>
 801b884:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 801b920 <powf+0x2a8>
 801b888:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b890:	d504      	bpl.n	801b89c <powf+0x224>
 801b892:	b003      	add	sp, #12
 801b894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b898:	f000 b86e 	b.w	801b978 <__math_may_uflowf>
 801b89c:	4b24      	ldr	r3, [pc, #144]	@ (801b930 <powf+0x2b8>)
 801b89e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801b8a2:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 801b8a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801b8aa:	ee16 2a10 	vmov	r2, s12
 801b8ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b8b2:	f002 011f 	and.w	r1, r2, #31
 801b8b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b8ba:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 801b8be:	ee27 4b07 	vmul.f64	d4, d7, d7
 801b8c2:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 801b8c6:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801b8ca:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801b8ce:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b8d2:	686d      	ldr	r5, [r5, #4]
 801b8d4:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 801b8d8:	1880      	adds	r0, r0, r2
 801b8da:	2100      	movs	r1, #0
 801b8dc:	190a      	adds	r2, r1, r4
 801b8de:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801b8e2:	eea7 0b05 	vfma.f64	d0, d7, d5
 801b8e6:	ec43 2b17 	vmov	d7, r2, r3
 801b8ea:	eea6 0b04 	vfma.f64	d0, d6, d4
 801b8ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b8f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b8f6:	e737      	b.n	801b768 <powf+0xf0>
 801b8f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b8fc:	e734      	b.n	801b768 <powf+0xf0>
 801b8fe:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 801b934 <powf+0x2bc>
 801b902:	e731      	b.n	801b768 <powf+0xf0>
 801b904:	f3af 8000 	nop.w
 801b908:	ffd1d571 	.word	0xffd1d571
 801b90c:	405fffff 	.word	0x405fffff
 801b910:	ffa3aae2 	.word	0xffa3aae2
 801b914:	405fffff 	.word	0x405fffff
 801b918:	00000000 	.word	0x00000000
 801b91c:	c062c000 	.word	0xc062c000
 801b920:	00000000 	.word	0x00000000
 801b924:	c062a000 	.word	0xc062a000
 801b928:	0804bbb0 	.word	0x0804bbb0
 801b92c:	4b000000 	.word	0x4b000000
 801b930:	0804ba68 	.word	0x0804ba68
 801b934:	00000000 	.word	0x00000000

0801b938 <with_errnof>:
 801b938:	b510      	push	{r4, lr}
 801b93a:	ed2d 8b02 	vpush	{d8}
 801b93e:	eeb0 8a40 	vmov.f32	s16, s0
 801b942:	4604      	mov	r4, r0
 801b944:	f000 f846 	bl	801b9d4 <__errno>
 801b948:	eeb0 0a48 	vmov.f32	s0, s16
 801b94c:	ecbd 8b02 	vpop	{d8}
 801b950:	6004      	str	r4, [r0, #0]
 801b952:	bd10      	pop	{r4, pc}

0801b954 <xflowf>:
 801b954:	b130      	cbz	r0, 801b964 <xflowf+0x10>
 801b956:	eef1 7a40 	vneg.f32	s15, s0
 801b95a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b95e:	2022      	movs	r0, #34	@ 0x22
 801b960:	f7ff bfea 	b.w	801b938 <with_errnof>
 801b964:	eef0 7a40 	vmov.f32	s15, s0
 801b968:	e7f7      	b.n	801b95a <xflowf+0x6>
	...

0801b96c <__math_uflowf>:
 801b96c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b974 <__math_uflowf+0x8>
 801b970:	f7ff bff0 	b.w	801b954 <xflowf>
 801b974:	10000000 	.word	0x10000000

0801b978 <__math_may_uflowf>:
 801b978:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b980 <__math_may_uflowf+0x8>
 801b97c:	f7ff bfea 	b.w	801b954 <xflowf>
 801b980:	1a200000 	.word	0x1a200000

0801b984 <__math_oflowf>:
 801b984:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b98c <__math_oflowf+0x8>
 801b988:	f7ff bfe4 	b.w	801b954 <xflowf>
 801b98c:	70000000 	.word	0x70000000

0801b990 <__math_divzerof>:
 801b990:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801b9b0 <__math_divzerof+0x20>
 801b994:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b998:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801b99c:	2800      	cmp	r0, #0
 801b99e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 801b9a2:	fe47 7a87 	vseleq.f32	s15, s15, s14
 801b9a6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801b9aa:	f7ff bfc5 	b.w	801b938 <with_errnof>
 801b9ae:	bf00      	nop
 801b9b0:	00000000 	.word	0x00000000

0801b9b4 <__math_invalidf>:
 801b9b4:	eef0 7a40 	vmov.f32	s15, s0
 801b9b8:	ee30 7a40 	vsub.f32	s14, s0, s0
 801b9bc:	eef4 7a67 	vcmp.f32	s15, s15
 801b9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9c4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801b9c8:	d602      	bvs.n	801b9d0 <__math_invalidf+0x1c>
 801b9ca:	2021      	movs	r0, #33	@ 0x21
 801b9cc:	f7ff bfb4 	b.w	801b938 <with_errnof>
 801b9d0:	4770      	bx	lr
	...

0801b9d4 <__errno>:
 801b9d4:	4b01      	ldr	r3, [pc, #4]	@ (801b9dc <__errno+0x8>)
 801b9d6:	6818      	ldr	r0, [r3, #0]
 801b9d8:	4770      	bx	lr
 801b9da:	bf00      	nop
 801b9dc:	24013a2c 	.word	0x24013a2c

0801b9e0 <_close>:
 801b9e0:	4b02      	ldr	r3, [pc, #8]	@ (801b9ec <_close+0xc>)
 801b9e2:	2258      	movs	r2, #88	@ 0x58
 801b9e4:	601a      	str	r2, [r3, #0]
 801b9e6:	f04f 30ff 	mov.w	r0, #4294967295
 801b9ea:	4770      	bx	lr
 801b9ec:	24015c14 	.word	0x24015c14

0801b9f0 <_fstat>:
 801b9f0:	4b02      	ldr	r3, [pc, #8]	@ (801b9fc <_fstat+0xc>)
 801b9f2:	2258      	movs	r2, #88	@ 0x58
 801b9f4:	601a      	str	r2, [r3, #0]
 801b9f6:	f04f 30ff 	mov.w	r0, #4294967295
 801b9fa:	4770      	bx	lr
 801b9fc:	24015c14 	.word	0x24015c14

0801ba00 <_getpid>:
 801ba00:	4b02      	ldr	r3, [pc, #8]	@ (801ba0c <_getpid+0xc>)
 801ba02:	2258      	movs	r2, #88	@ 0x58
 801ba04:	601a      	str	r2, [r3, #0]
 801ba06:	f04f 30ff 	mov.w	r0, #4294967295
 801ba0a:	4770      	bx	lr
 801ba0c:	24015c14 	.word	0x24015c14

0801ba10 <_isatty>:
 801ba10:	4b02      	ldr	r3, [pc, #8]	@ (801ba1c <_isatty+0xc>)
 801ba12:	2258      	movs	r2, #88	@ 0x58
 801ba14:	601a      	str	r2, [r3, #0]
 801ba16:	2000      	movs	r0, #0
 801ba18:	4770      	bx	lr
 801ba1a:	bf00      	nop
 801ba1c:	24015c14 	.word	0x24015c14

0801ba20 <_kill>:
 801ba20:	4b02      	ldr	r3, [pc, #8]	@ (801ba2c <_kill+0xc>)
 801ba22:	2258      	movs	r2, #88	@ 0x58
 801ba24:	601a      	str	r2, [r3, #0]
 801ba26:	f04f 30ff 	mov.w	r0, #4294967295
 801ba2a:	4770      	bx	lr
 801ba2c:	24015c14 	.word	0x24015c14

0801ba30 <_lseek>:
 801ba30:	4b02      	ldr	r3, [pc, #8]	@ (801ba3c <_lseek+0xc>)
 801ba32:	2258      	movs	r2, #88	@ 0x58
 801ba34:	601a      	str	r2, [r3, #0]
 801ba36:	f04f 30ff 	mov.w	r0, #4294967295
 801ba3a:	4770      	bx	lr
 801ba3c:	24015c14 	.word	0x24015c14

0801ba40 <_read>:
 801ba40:	4b02      	ldr	r3, [pc, #8]	@ (801ba4c <_read+0xc>)
 801ba42:	2258      	movs	r2, #88	@ 0x58
 801ba44:	601a      	str	r2, [r3, #0]
 801ba46:	f04f 30ff 	mov.w	r0, #4294967295
 801ba4a:	4770      	bx	lr
 801ba4c:	24015c14 	.word	0x24015c14

0801ba50 <_sbrk>:
 801ba50:	4a04      	ldr	r2, [pc, #16]	@ (801ba64 <_sbrk+0x14>)
 801ba52:	6811      	ldr	r1, [r2, #0]
 801ba54:	4603      	mov	r3, r0
 801ba56:	b909      	cbnz	r1, 801ba5c <_sbrk+0xc>
 801ba58:	4903      	ldr	r1, [pc, #12]	@ (801ba68 <_sbrk+0x18>)
 801ba5a:	6011      	str	r1, [r2, #0]
 801ba5c:	6810      	ldr	r0, [r2, #0]
 801ba5e:	4403      	add	r3, r0
 801ba60:	6013      	str	r3, [r2, #0]
 801ba62:	4770      	bx	lr
 801ba64:	24015c1c 	.word	0x24015c1c
 801ba68:	20000000 	.word	0x20000000

0801ba6c <_write>:
 801ba6c:	4b02      	ldr	r3, [pc, #8]	@ (801ba78 <_write+0xc>)
 801ba6e:	2258      	movs	r2, #88	@ 0x58
 801ba70:	601a      	str	r2, [r3, #0]
 801ba72:	f04f 30ff 	mov.w	r0, #4294967295
 801ba76:	4770      	bx	lr
 801ba78:	24015c14 	.word	0x24015c14

0801ba7c <_exit>:
 801ba7c:	e7fe      	b.n	801ba7c <_exit>
	...

0801ba80 <_init>:
 801ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba82:	bf00      	nop
 801ba84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba86:	bc08      	pop	{r3}
 801ba88:	469e      	mov	lr, r3
 801ba8a:	4770      	bx	lr

0801ba8c <_fini>:
 801ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba8e:	bf00      	nop
 801ba90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba92:	bc08      	pop	{r3}
 801ba94:	469e      	mov	lr, r3
 801ba96:	4770      	bx	lr
